
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
(function () {
  'use strict';

  function _mergeNamespaces(n, m) {
    m.forEach(function (e) {
      e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
        if (k !== 'default' && !(k in n)) {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: function () { return e[k]; }
          });
        }
      });
    });
    return Object.freeze(n);
  }

  function _typeof(obj) {
    "@babel/helpers - typeof";

    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _typeof(obj);
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }

  function _defineProperty$1(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _taggedTemplateLiteral(strings, raw) {
    if (!raw) {
      raw = strings.slice(0);
    }

    return Object.freeze(Object.defineProperties(strings, {
      raw: {
        value: Object.freeze(raw)
      }
    }));
  }

  function _slicedToArray$1(arr, i) {
    return _arrayWithHoles$1(arr) || _iterableToArrayLimit$1(arr, i) || _unsupportedIterableToArray$1(arr, i) || _nonIterableRest$1();
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray$1(arr);
  }

  function _arrayWithHoles$1(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }

  function _iterableToArrayLimit$1(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;

    var _s, _e;

    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _unsupportedIterableToArray$1(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$1(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);
  }

  function _arrayLikeToArray$1(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _nonIterableRest$1() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function getAugmentedNamespace(n) {
  	if (n.__esModule) return n;
  	var a = Object.defineProperty({}, '__esModule', {value: true});
  	Object.keys(n).forEach(function (k) {
  		var d = Object.getOwnPropertyDescriptor(n, k);
  		Object.defineProperty(a, k, d.get ? d : {
  			enumerable: true,
  			get: function () {
  				return n[k];
  			}
  		});
  	});
  	return a;
  }

  var runtime = {exports: {}};

  (function (module) {
    var runtime = function (exports) {

      var Op = Object.prototype;
      var hasOwn = Op.hasOwnProperty;
      var undefined$1; // More compressible than void 0.

      var $Symbol = typeof Symbol === "function" ? Symbol : {};
      var iteratorSymbol = $Symbol.iterator || "@@iterator";
      var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
      var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
        return obj[key];
      }

      try {
        // IE 8 has a broken Object.defineProperty that only works on DOM objects.
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
        // .throw, and .return methods.

        generator._invoke = makeInvokeMethod(innerFn, self, context);
        return generator;
      }

      exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
      // record like context.tryEntries[i].completion. This interface could
      // have been (and was previously) designed to take a closure to be
      // invoked without arguments, but in all the cases we care about we
      // already have an existing method we want to call, so there's no need
      // to create a new function object. We can even get away with assuming
      // the method takes exactly one argument, since that happens to be true
      // in every case, so we don't have to touch the arguments object. The
      // only additional allocation required is the completion record, which
      // has a stable shape and so hopefully should be cheap to allocate.

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      var GenStateSuspendedStart = "suspendedStart";
      var GenStateSuspendedYield = "suspendedYield";
      var GenStateExecuting = "executing";
      var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
      // breaking out of the dispatch switch statement.

      var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
      // .constructor.prototype properties for functions that return Generator
      // objects. For full spec compliance, you may wish to configure your
      // minifier not to mangle the names of these two functions.

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
      // don't natively support it.


      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf;
      var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

      if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
        // This environment has a native %IteratorPrototype%; use it instead
        // of the polyfill.
        IteratorPrototype = NativeIteratorPrototype;
      }

      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
      GeneratorFunction.prototype = GeneratorFunctionPrototype;
      define(Gp, "constructor", GeneratorFunctionPrototype);
      define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
      GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
      // Iterator interface in terms of a single ._invoke method.

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      exports.isGeneratorFunction = function (genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
      };

      exports.mark = function (genFun) {
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        } else {
          genFun.__proto__ = GeneratorFunctionPrototype;
          define(genFun, toStringTagSymbol, "GeneratorFunction");
        }

        genFun.prototype = Object.create(Gp);
        return genFun;
      }; // Within the body of any async function, `await x` is transformed to
      // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
      // `hasOwn.call(value, "__await")` to determine if the yielded value is
      // meant to be awaited.


      exports.awrap = function (arg) {
        return {
          __await: arg
        };
      };

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if (record.type === "throw") {
            reject(record.arg);
          } else {
            var result = record.arg;
            var value = result.value;

            if (value && _typeof(value) === "object" && hasOwn.call(value, "__await")) {
              return PromiseImpl.resolve(value.__await).then(function (value) {
                invoke("next", value, resolve, reject);
              }, function (err) {
                invoke("throw", err, resolve, reject);
              });
            }

            return PromiseImpl.resolve(value).then(function (unwrapped) {
              // When a yielded Promise is resolved, its final value becomes
              // the .value of the Promise<{value,done}> result for the
              // current iteration.
              result.value = unwrapped;
              resolve(result);
            }, function (error) {
              // If a rejected Promise was yielded, throw the rejection back
              // into the async generator function so it can be handled there.
              return invoke("throw", error, resolve, reject);
            });
          }
        }

        var previousPromise;

        function enqueue(method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = // If enqueue has been called before, then we want to wait until
          // all previous Promises have been resolved before calling invoke,
          // so that results are always delivered in the correct order. If
          // enqueue has not been called before, then it is important to
          // call invoke immediately, without waiting on a callback to fire,
          // so that the async generator function has the opportunity to do
          // any necessary setup in a predictable way. This predictability
          // is why the Promise constructor synchronously invokes its
          // executor callback, and why async functions synchronously
          // execute code before the first await. Since we implement simple
          // async functions in terms of async generators, it is especially
          // important to get this right, even though it requires care.
          previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        } // Define the unified helper method that is used to implement .next,
        // .throw, and .return (see defineIteratorMethods).


        this._invoke = enqueue;
      }

      defineIteratorMethods(AsyncIterator.prototype);
      define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      });
      exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
      // AsyncIterator objects; they just return a Promise for the value of
      // the final result produced by the iterator.

      exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        if (PromiseImpl === void 0) PromiseImpl = Promise;
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
        : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      };

      function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;
        return function invoke(method, arg) {
          if (state === GenStateExecuting) {
            throw new Error("Generator is already running");
          }

          if (state === GenStateCompleted) {
            if (method === "throw") {
              throw arg;
            } // Be forgiving, per 25.3.3.3.3 of the spec:
            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


            return doneResult();
          }

          context.method = method;
          context.arg = arg;

          while (true) {
            var delegate = context.delegate;

            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);

              if (delegateResult) {
                if (delegateResult === ContinueSentinel) continue;
                return delegateResult;
              }
            }

            if (context.method === "next") {
              // Setting context._sent for legacy support of Babel's
              // function.sent implementation.
              context.sent = context._sent = context.arg;
            } else if (context.method === "throw") {
              if (state === GenStateSuspendedStart) {
                state = GenStateCompleted;
                throw context.arg;
              }

              context.dispatchException(context.arg);
            } else if (context.method === "return") {
              context.abrupt("return", context.arg);
            }

            state = GenStateExecuting;
            var record = tryCatch(innerFn, self, context);

            if (record.type === "normal") {
              // If an exception is thrown from innerFn, we leave state ===
              // GenStateExecuting and loop back for another invocation.
              state = context.done ? GenStateCompleted : GenStateSuspendedYield;

              if (record.arg === ContinueSentinel) {
                continue;
              }

              return {
                value: record.arg,
                done: context.done
              };
            } else if (record.type === "throw") {
              state = GenStateCompleted; // Dispatch the exception by looping back around to the
              // context.dispatchException(context.arg) call above.

              context.method = "throw";
              context.arg = record.arg;
            }
          }
        };
      } // Call delegate.iterator[context.method](context.arg) and handle the
      // result, either by returning a { value, done } result from the
      // delegate iterator, or by modifying context.method and context.arg,
      // setting context.delegate to null, and returning the ContinueSentinel.


      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (method === undefined$1) {
          // A .throw or .return when the delegate iterator has no .throw
          // method always terminates the yield* loop.
          context.delegate = null;

          if (context.method === "throw") {
            // Note: ["return"] must be used for ES3 parsing compatibility.
            if (delegate.iterator["return"]) {
              // If the delegate iterator has a return method, give it a
              // chance to clean up.
              context.method = "return";
              context.arg = undefined$1;
              maybeInvokeDelegate(delegate, context);

              if (context.method === "throw") {
                // If maybeInvokeDelegate(context) changed context.method from
                // "return" to "throw", let that override the TypeError below.
                return ContinueSentinel;
              }
            }

            context.method = "throw";
            context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);

        if (record.type === "throw") {
          context.method = "throw";
          context.arg = record.arg;
          context.delegate = null;
          return ContinueSentinel;
        }

        var info = record.arg;

        if (!info) {
          context.method = "throw";
          context.arg = new TypeError("iterator result is not an object");
          context.delegate = null;
          return ContinueSentinel;
        }

        if (info.done) {
          // Assign the result of the finished delegate to the temporary
          // variable specified by delegate.resultName (see delegateYield).
          context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

          context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
          // exception, let the outer generator proceed normally. If
          // context.method was "next", forget context.arg since it has been
          // "consumed" by the delegate iterator. If context.method was
          // "return", allow the original .return call to continue in the
          // outer generator.

          if (context.method !== "return") {
            context.method = "next";
            context.arg = undefined$1;
          }
        } else {
          // Re-yield the result returned by the delegate method.
          return info;
        } // The delegate iterator is finished, so forget it and continue with
        // the outer generator.


        context.delegate = null;
        return ContinueSentinel;
      } // Define Generator.prototype.{next,throw,return} in terms of the
      // unified ._invoke helper method.


      defineIteratorMethods(Gp);
      define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
      // @@iterator function is called on it. Some browsers' implementations of the
      // iterator prototype chain incorrectly implement this, causing the Generator
      // object to not be returned from this call. This ensures that doesn't happen.
      // See https://github.com/facebook/regenerator/issues/274 for more details.

      define(Gp, iteratorSymbol, function () {
        return this;
      });
      define(Gp, "toString", function () {
        return "[object Generator]";
      });

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };

        if (1 in locs) {
          entry.catchLoc = locs[1];
        }

        if (2 in locs) {
          entry.finallyLoc = locs[2];
          entry.afterLoc = locs[3];
        }

        this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
      }

      function Context(tryLocsList) {
        // The root entry object (effectively a try statement without a catch
        // or a finally block) gives us a place to store values thrown from
        // locations where there is no enclosing try statement.
        this.tryEntries = [{
          tryLoc: "root"
        }];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
      }

      exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        keys.reverse(); // Rather than returning an object with a next method, we keep
        // things simple and return the next function itself.

        return function next() {
          while (keys.length) {
            var key = keys.pop();

            if (key in object) {
              next.value = key;
              next.done = false;
              return next;
            }
          } // To avoid creating an additional object, we just hang the .value
          // and .done properties off the next function object itself. This
          // also ensures that the minifier will not anonymize the function.


          next.done = true;
          return next;
        };
      };

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];

          if (iteratorMethod) {
            return iteratorMethod.call(iterable);
          }

          if (typeof iterable.next === "function") {
            return iterable;
          }

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              while (++i < iterable.length) {
                if (hasOwn.call(iterable, i)) {
                  next.value = iterable[i];
                  next.done = false;
                  return next;
                }
              }

              next.value = undefined$1;
              next.done = true;
              return next;
            };

            return next.next = next;
          }
        } // Return an iterator with no values.


        return {
          next: doneResult
        };
      }

      exports.values = values;

      function doneResult() {
        return {
          value: undefined$1,
          done: true
        };
      }

      Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          this.prev = 0;
          this.next = 0; // Resetting context._sent for legacy support of Babel's
          // function.sent implementation.

          this.sent = this._sent = undefined$1;
          this.done = false;
          this.delegate = null;
          this.method = "next";
          this.arg = undefined$1;
          this.tryEntries.forEach(resetTryEntry);

          if (!skipTempReset) {
            for (var name in this) {
              // Not sure about the optimal order of these conditions:
              if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                this[name] = undefined$1;
              }
            }
          }
        },
        stop: function stop() {
          this.done = true;
          var rootEntry = this.tryEntries[0];
          var rootRecord = rootEntry.completion;

          if (rootRecord.type === "throw") {
            throw rootRecord.arg;
          }

          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) {
            throw exception;
          }

          var context = this;

          function handle(loc, caught) {
            record.type = "throw";
            record.arg = exception;
            context.next = loc;

            if (caught) {
              // If the dispatched exception was caught by a catch block,
              // then let that catch block handle the exception normally.
              context.method = "next";
              context.arg = undefined$1;
            }

            return !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            var record = entry.completion;

            if (entry.tryLoc === "root") {
              // Exception thrown outside of any try block that could handle
              // it, so set the completion value of the entire function to
              // throw the exception.
              return handle("end");
            }

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc");
              var hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                } else if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                }
              } else if (hasFinally) {
                if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else {
                throw new Error("try statement without catch or finally");
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
            // Ignore the finally entry if control is not jumping to a
            // location outside the try/catch block.
            finallyEntry = null;
          }

          var record = finallyEntry ? finallyEntry.completion : {};
          record.type = type;
          record.arg = arg;

          if (finallyEntry) {
            this.method = "next";
            this.next = finallyEntry.finallyLoc;
            return ContinueSentinel;
          }

          return this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if (record.type === "throw") {
            throw record.arg;
          }

          if (record.type === "break" || record.type === "continue") {
            this.next = record.arg;
          } else if (record.type === "return") {
            this.rval = this.arg = record.arg;
            this.method = "return";
            this.next = "end";
          } else if (record.type === "normal" && afterLoc) {
            this.next = afterLoc;
          }

          return ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.finallyLoc === finallyLoc) {
              this.complete(entry.completion, entry.afterLoc);
              resetTryEntry(entry);
              return ContinueSentinel;
            }
          }
        },
        "catch": function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if (record.type === "throw") {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          } // The context.catch method must only be called with a location
          // argument that corresponds to a known catch block.


          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          };

          if (this.method === "next") {
            // Deliberately forget the last sent value so that we don't
            // accidentally pass it on to the delegate.
            this.arg = undefined$1;
          }

          return ContinueSentinel;
        }
      }; // Regardless of whether this script is executing as a CommonJS module
      // or not, return the runtime object so that we can declare the variable
      // regeneratorRuntime in the outer scope, which allows this module to be
      // injected easily by `bin/regenerator --include-runtime script.js`.

      return exports;
    }( // If this script is executing as a CommonJS module, use module.exports
    // as the regeneratorRuntime namespace. Otherwise create a new empty
    // object. Either way, the resulting object will be used to initialize
    // the regeneratorRuntime variable at the top of this file.
    module.exports );

    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      // This module should not be running in strict mode, so the above
      // assignment should always work unless something is misconfigured. Just
      // in case runtime.js accidentally runs in strict mode, in modern engines
      // we can explicitly access globalThis. In older engines we can escape
      // strict mode using a global Function call. This could conceivably fail
      // if a Content Security Policy forbids using Function, but in that case
      // the proper solution is to fix the accidental strict mode problem. If
      // you've misconfigured your bundler to force strict mode and applied a
      // CSP to forbid Function, and you're not willing to fix either of those
      // problems, please detail your unique predicament in a GitHub issue.
      if ((typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) === "object") {
        globalThis.regeneratorRuntime = runtime;
      } else {
        Function("r", "regeneratorRuntime = r")(runtime);
      }
    }
  })(runtime);

  var regeneratorRuntime$1 = runtime.exports;

  var reactDom = {exports: {}};

  var reactDom_production_min = {};

  var react = {exports: {}};

  var react_production_min = {};

  /*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  */
  /* eslint-disable no-unused-vars */


  var getOwnPropertySymbols$1 = Object.getOwnPropertySymbols;
  var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
  var propIsEnumerable$1 = Object.prototype.propertyIsEnumerable;

  function toObject$1(val) {
    if (val === null || val === undefined) {
      throw new TypeError('Object.assign cannot be called with null or undefined');
    }

    return Object(val);
  }

  function shouldUseNative$1() {
    try {
      if (!Object.assign) {
        return false;
      } // Detect buggy property enumeration order in older V8 versions.
      // https://bugs.chromium.org/p/v8/issues/detail?id=4118


      var test1 = new String('abc'); // eslint-disable-line no-new-wrappers

      test1[5] = 'de';

      if (Object.getOwnPropertyNames(test1)[0] === '5') {
        return false;
      } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


      var test2 = {};

      for (var i = 0; i < 10; i++) {
        test2['_' + String.fromCharCode(i)] = i;
      }

      var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
        return test2[n];
      });

      if (order2.join('') !== '0123456789') {
        return false;
      } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


      var test3 = {};
      'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
        test3[letter] = letter;
      });

      if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
        return false;
      }

      return true;
    } catch (err) {
      // We don't expect any of the above to throw, but better to be safe.
      return false;
    }
  }

  var objectAssign = shouldUseNative$1() ? Object.assign : function (target, source) {
    var from;
    var to = toObject$1(target);
    var symbols;

    for (var s = 1; s < arguments.length; s++) {
      from = Object(arguments[s]);

      for (var key in from) {
        if (hasOwnProperty$2.call(from, key)) {
          to[key] = from[key];
        }
      }

      if (getOwnPropertySymbols$1) {
        symbols = getOwnPropertySymbols$1(from);

        for (var i = 0; i < symbols.length; i++) {
          if (propIsEnumerable$1.call(from, symbols[i])) {
            to[symbols[i]] = from[symbols[i]];
          }
        }
      }
    }

    return to;
  };

  var l$4 = objectAssign,
      n$5 = 60103,
      p$5 = 60106;
  react_production_min.Fragment = 60107;
  react_production_min.StrictMode = 60108;
  react_production_min.Profiler = 60114;
  var q$5 = 60109,
      r$6 = 60110,
      t$2 = 60112;
  react_production_min.Suspense = 60113;
  var u$3 = 60115,
      v$4 = 60116;

  if ("function" === typeof Symbol && Symbol["for"]) {
    var w$4 = Symbol["for"];
    n$5 = w$4("react.element");
    p$5 = w$4("react.portal");
    react_production_min.Fragment = w$4("react.fragment");
    react_production_min.StrictMode = w$4("react.strict_mode");
    react_production_min.Profiler = w$4("react.profiler");
    q$5 = w$4("react.provider");
    r$6 = w$4("react.context");
    t$2 = w$4("react.forward_ref");
    react_production_min.Suspense = w$4("react.suspense");
    u$3 = w$4("react.memo");
    v$4 = w$4("react.lazy");
  }

  var x$5 = "function" === typeof Symbol && Symbol.iterator;

  function y$5(a) {
    if (null === a || "object" !== _typeof(a)) return null;
    a = x$5 && a[x$5] || a["@@iterator"];
    return "function" === typeof a ? a : null;
  }

  function z$5(a) {
    for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++) {
      b += "&args[]=" + encodeURIComponent(arguments[c]);
    }

    return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
  }

  var A$4 = {
    isMounted: function isMounted() {
      return !1;
    },
    enqueueForceUpdate: function enqueueForceUpdate() {},
    enqueueReplaceState: function enqueueReplaceState() {},
    enqueueSetState: function enqueueSetState() {}
  },
      B$3 = {};

  function C$2(a, b, c) {
    this.props = a;
    this.context = b;
    this.refs = B$3;
    this.updater = c || A$4;
  }

  C$2.prototype.isReactComponent = {};

  C$2.prototype.setState = function (a, b) {
    if ("object" !== _typeof(a) && "function" !== typeof a && null != a) throw Error(z$5(85));
    this.updater.enqueueSetState(this, a, b, "setState");
  };

  C$2.prototype.forceUpdate = function (a) {
    this.updater.enqueueForceUpdate(this, a, "forceUpdate");
  };

  function D$3() {}

  D$3.prototype = C$2.prototype;

  function E$3(a, b, c) {
    this.props = a;
    this.context = b;
    this.refs = B$3;
    this.updater = c || A$4;
  }

  var F$3 = E$3.prototype = new D$3();
  F$3.constructor = E$3;
  l$4(F$3, C$2.prototype);
  F$3.isPureReactComponent = !0;
  var G$3 = {
    current: null
  },
      H$3 = Object.prototype.hasOwnProperty,
      I$3 = {
    key: !0,
    ref: !0,
    __self: !0,
    __source: !0
  };

  function J(a, b, c) {
    var e,
        d = {},
        k = null,
        h = null;
    if (null != b) for (e in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (k = "" + b.key), b) {
      H$3.call(b, e) && !I$3.hasOwnProperty(e) && (d[e] = b[e]);
    }
    var g = arguments.length - 2;
    if (1 === g) d.children = c;else if (1 < g) {
      for (var f = Array(g), m = 0; m < g; m++) {
        f[m] = arguments[m + 2];
      }

      d.children = f;
    }
    if (a && a.defaultProps) for (e in g = a.defaultProps, g) {
      void 0 === d[e] && (d[e] = g[e]);
    }
    return {
      $$typeof: n$5,
      type: a,
      key: k,
      ref: h,
      props: d,
      _owner: G$3.current
    };
  }

  function K$1(a, b) {
    return {
      $$typeof: n$5,
      type: a.type,
      key: b,
      ref: a.ref,
      props: a.props,
      _owner: a._owner
    };
  }

  function L(a) {
    return "object" === _typeof(a) && null !== a && a.$$typeof === n$5;
  }

  function escape(a) {
    var b = {
      "=": "=0",
      ":": "=2"
    };
    return "$" + a.replace(/[=:]/g, function (a) {
      return b[a];
    });
  }

  var M$1 = /\/+/g;

  function N$1(a, b) {
    return "object" === _typeof(a) && null !== a && null != a.key ? escape("" + a.key) : b.toString(36);
  }

  function O$1(a, b, c, e, d) {
    var k = _typeof(a);

    if ("undefined" === k || "boolean" === k) a = null;
    var h = !1;
    if (null === a) h = !0;else switch (k) {
      case "string":
      case "number":
        h = !0;
        break;

      case "object":
        switch (a.$$typeof) {
          case n$5:
          case p$5:
            h = !0;
        }

    }
    if (h) return h = a, d = d(h), a = "" === e ? "." + N$1(h, 0) : e, Array.isArray(d) ? (c = "", null != a && (c = a.replace(M$1, "$&/") + "/"), O$1(d, b, c, "", function (a) {
      return a;
    })) : null != d && (L(d) && (d = K$1(d, c + (!d.key || h && h.key === d.key ? "" : ("" + d.key).replace(M$1, "$&/") + "/") + a)), b.push(d)), 1;
    h = 0;
    e = "" === e ? "." : e + ":";
    if (Array.isArray(a)) for (var g = 0; g < a.length; g++) {
      k = a[g];
      var f = e + N$1(k, g);
      h += O$1(k, b, c, f, d);
    } else if (f = y$5(a), "function" === typeof f) for (a = f.call(a), g = 0; !(k = a.next()).done;) {
      k = k.value, f = e + N$1(k, g++), h += O$1(k, b, c, f, d);
    } else if ("object" === k) throw b = "" + a, Error(z$5(31, "[object Object]" === b ? "object with keys {" + Object.keys(a).join(", ") + "}" : b));
    return h;
  }

  function P$1(a, b, c) {
    if (null == a) return a;
    var e = [],
        d = 0;
    O$1(a, e, "", "", function (a) {
      return b.call(c, a, d++);
    });
    return e;
  }

  function Q(a) {
    if (-1 === a._status) {
      var b = a._result;
      b = b();
      a._status = 0;
      a._result = b;
      b.then(function (b) {
        0 === a._status && (b = b["default"], a._status = 1, a._result = b);
      }, function (b) {
        0 === a._status && (a._status = 2, a._result = b);
      });
    }

    if (1 === a._status) return a._result;
    throw a._result;
  }

  var R$1 = {
    current: null
  };

  function S$1() {
    var a = R$1.current;
    if (null === a) throw Error(z$5(321));
    return a;
  }

  var T$1 = {
    ReactCurrentDispatcher: R$1,
    ReactCurrentBatchConfig: {
      transition: 0
    },
    ReactCurrentOwner: G$3,
    IsSomeRendererActing: {
      current: !1
    },
    assign: l$4
  };
  react_production_min.Children = {
    map: P$1,
    forEach: function forEach(a, b, c) {
      P$1(a, function () {
        b.apply(this, arguments);
      }, c);
    },
    count: function count(a) {
      var b = 0;
      P$1(a, function () {
        b++;
      });
      return b;
    },
    toArray: function toArray(a) {
      return P$1(a, function (a) {
        return a;
      }) || [];
    },
    only: function only(a) {
      if (!L(a)) throw Error(z$5(143));
      return a;
    }
  };
  react_production_min.Component = C$2;
  react_production_min.PureComponent = E$3;

  react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = T$1;

  react_production_min.cloneElement = function (a, b, c) {
    if (null === a || void 0 === a) throw Error(z$5(267, a));
    var e = l$4({}, a.props),
        d = a.key,
        k = a.ref,
        h = a._owner;

    if (null != b) {
      void 0 !== b.ref && (k = b.ref, h = G$3.current);
      void 0 !== b.key && (d = "" + b.key);
      if (a.type && a.type.defaultProps) var g = a.type.defaultProps;

      for (f in b) {
        H$3.call(b, f) && !I$3.hasOwnProperty(f) && (e[f] = void 0 === b[f] && void 0 !== g ? g[f] : b[f]);
      }
    }

    var f = arguments.length - 2;
    if (1 === f) e.children = c;else if (1 < f) {
      g = Array(f);

      for (var m = 0; m < f; m++) {
        g[m] = arguments[m + 2];
      }

      e.children = g;
    }
    return {
      $$typeof: n$5,
      type: a.type,
      key: d,
      ref: k,
      props: e,
      _owner: h
    };
  };

  react_production_min.createContext = function (a, b) {
    void 0 === b && (b = null);
    a = {
      $$typeof: r$6,
      _calculateChangedBits: b,
      _currentValue: a,
      _currentValue2: a,
      _threadCount: 0,
      Provider: null,
      Consumer: null
    };
    a.Provider = {
      $$typeof: q$5,
      _context: a
    };
    return a.Consumer = a;
  };

  react_production_min.createElement = J;

  react_production_min.createFactory = function (a) {
    var b = J.bind(null, a);
    b.type = a;
    return b;
  };

  react_production_min.createRef = function () {
    return {
      current: null
    };
  };

  react_production_min.forwardRef = function (a) {
    return {
      $$typeof: t$2,
      render: a
    };
  };

  react_production_min.isValidElement = L;

  react_production_min.lazy = function (a) {
    return {
      $$typeof: v$4,
      _payload: {
        _status: -1,
        _result: a
      },
      _init: Q
    };
  };

  react_production_min.memo = function (a, b) {
    return {
      $$typeof: u$3,
      type: a,
      compare: void 0 === b ? null : b
    };
  };

  react_production_min.useCallback = function (a, b) {
    return S$1().useCallback(a, b);
  };

  react_production_min.useContext = function (a, b) {
    return S$1().useContext(a, b);
  };

  react_production_min.useDebugValue = function () {};

  react_production_min.useEffect = function (a, b) {
    return S$1().useEffect(a, b);
  };

  react_production_min.useImperativeHandle = function (a, b, c) {
    return S$1().useImperativeHandle(a, b, c);
  };

  react_production_min.useLayoutEffect = function (a, b) {
    return S$1().useLayoutEffect(a, b);
  };

  react_production_min.useMemo = function (a, b) {
    return S$1().useMemo(a, b);
  };

  react_production_min.useReducer = function (a, b, c) {
    return S$1().useReducer(a, b, c);
  };

  react_production_min.useRef = function (a) {
    return S$1().useRef(a);
  };

  react_production_min.useState = function (a) {
    return S$1().useState(a);
  };

  react_production_min.version = "17.0.2";

  {
    react.exports = react_production_min;
  }

  var React = react.exports;

  var React$1 = /*#__PURE__*/_mergeNamespaces({
    __proto__: null,
    'default': React
  }, [react.exports]);

  var scheduler = {exports: {}};

  var scheduler_production_min = {};

  (function (exports) {

    var _f, g, h, k;

    if ("object" === (typeof performance === "undefined" ? "undefined" : _typeof(performance)) && "function" === typeof performance.now) {
      var l = performance;

      exports.unstable_now = function () {
        return l.now();
      };
    } else {
      var p = Date,
          q = p.now();

      exports.unstable_now = function () {
        return p.now() - q;
      };
    }

    if ("undefined" === typeof window || "function" !== typeof MessageChannel) {
      var t = null,
          u = null,
          w = function w() {
        if (null !== t) try {
          var a = exports.unstable_now();
          t(!0, a);
          t = null;
        } catch (b) {
          throw setTimeout(w, 0), b;
        }
      };

      _f = function f(a) {
        null !== t ? setTimeout(_f, 0, a) : (t = a, setTimeout(w, 0));
      };

      g = function g(a, b) {
        u = setTimeout(a, b);
      };

      h = function h() {
        clearTimeout(u);
      };

      exports.unstable_shouldYield = function () {
        return !1;
      };

      k = exports.unstable_forceFrameRate = function () {};
    } else {
      var x = window.setTimeout,
          y = window.clearTimeout;

      if ("undefined" !== typeof console) {
        var z = window.cancelAnimationFrame;
        "function" !== typeof window.requestAnimationFrame && console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
        "function" !== typeof z && console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
      }

      var A = !1,
          B = null,
          C = -1,
          D = 5,
          E = 0;

      exports.unstable_shouldYield = function () {
        return exports.unstable_now() >= E;
      };

      k = function k() {};

      exports.unstable_forceFrameRate = function (a) {
        0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : D = 0 < a ? Math.floor(1E3 / a) : 5;
      };

      var F = new MessageChannel(),
          G = F.port2;

      F.port1.onmessage = function () {
        if (null !== B) {
          var a = exports.unstable_now();
          E = a + D;

          try {
            B(!0, a) ? G.postMessage(null) : (A = !1, B = null);
          } catch (b) {
            throw G.postMessage(null), b;
          }
        } else A = !1;
      };

      _f = function _f(a) {
        B = a;
        A || (A = !0, G.postMessage(null));
      };

      g = function g(a, b) {
        C = x(function () {
          a(exports.unstable_now());
        }, b);
      };

      h = function h() {
        y(C);
        C = -1;
      };
    }

    function H(a, b) {
      var c = a.length;
      a.push(b);

      a: for (;;) {
        var d = c - 1 >>> 1,
            e = a[d];
        if (void 0 !== e && 0 < I(e, b)) a[d] = b, a[c] = e, c = d;else break a;
      }
    }

    function J(a) {
      a = a[0];
      return void 0 === a ? null : a;
    }

    function K(a) {
      var b = a[0];

      if (void 0 !== b) {
        var c = a.pop();

        if (c !== b) {
          a[0] = c;

          a: for (var d = 0, e = a.length; d < e;) {
            var m = 2 * (d + 1) - 1,
                n = a[m],
                v = m + 1,
                r = a[v];
            if (void 0 !== n && 0 > I(n, c)) void 0 !== r && 0 > I(r, n) ? (a[d] = r, a[v] = c, d = v) : (a[d] = n, a[m] = c, d = m);else if (void 0 !== r && 0 > I(r, c)) a[d] = r, a[v] = c, d = v;else break a;
          }
        }

        return b;
      }

      return null;
    }

    function I(a, b) {
      var c = a.sortIndex - b.sortIndex;
      return 0 !== c ? c : a.id - b.id;
    }

    var L = [],
        M = [],
        N = 1,
        O = null,
        P = 3,
        Q = !1,
        R = !1,
        S = !1;

    function T(a) {
      for (var b = J(M); null !== b;) {
        if (null === b.callback) K(M);else if (b.startTime <= a) K(M), b.sortIndex = b.expirationTime, H(L, b);else break;
        b = J(M);
      }
    }

    function U(a) {
      S = !1;
      T(a);
      if (!R) if (null !== J(L)) R = !0, _f(V);else {
        var b = J(M);
        null !== b && g(U, b.startTime - a);
      }
    }

    function V(a, b) {
      R = !1;
      S && (S = !1, h());
      Q = !0;
      var c = P;

      try {
        T(b);

        for (O = J(L); null !== O && (!(O.expirationTime > b) || a && !exports.unstable_shouldYield());) {
          var d = O.callback;

          if ("function" === typeof d) {
            O.callback = null;
            P = O.priorityLevel;
            var e = d(O.expirationTime <= b);
            b = exports.unstable_now();
            "function" === typeof e ? O.callback = e : O === J(L) && K(L);
            T(b);
          } else K(L);

          O = J(L);
        }

        if (null !== O) var m = !0;else {
          var n = J(M);
          null !== n && g(U, n.startTime - b);
          m = !1;
        }
        return m;
      } finally {
        O = null, P = c, Q = !1;
      }
    }

    var W = k;
    exports.unstable_IdlePriority = 5;
    exports.unstable_ImmediatePriority = 1;
    exports.unstable_LowPriority = 4;
    exports.unstable_NormalPriority = 3;
    exports.unstable_Profiling = null;
    exports.unstable_UserBlockingPriority = 2;

    exports.unstable_cancelCallback = function (a) {
      a.callback = null;
    };

    exports.unstable_continueExecution = function () {
      R || Q || (R = !0, _f(V));
    };

    exports.unstable_getCurrentPriorityLevel = function () {
      return P;
    };

    exports.unstable_getFirstCallbackNode = function () {
      return J(L);
    };

    exports.unstable_next = function (a) {
      switch (P) {
        case 1:
        case 2:
        case 3:
          var b = 3;
          break;

        default:
          b = P;
      }

      var c = P;
      P = b;

      try {
        return a();
      } finally {
        P = c;
      }
    };

    exports.unstable_pauseExecution = function () {};

    exports.unstable_requestPaint = W;

    exports.unstable_runWithPriority = function (a, b) {
      switch (a) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;

        default:
          a = 3;
      }

      var c = P;
      P = a;

      try {
        return b();
      } finally {
        P = c;
      }
    };

    exports.unstable_scheduleCallback = function (a, b, c) {
      var d = exports.unstable_now();
      "object" === _typeof(c) && null !== c ? (c = c.delay, c = "number" === typeof c && 0 < c ? d + c : d) : c = d;

      switch (a) {
        case 1:
          var e = -1;
          break;

        case 2:
          e = 250;
          break;

        case 5:
          e = 1073741823;
          break;

        case 4:
          e = 1E4;
          break;

        default:
          e = 5E3;
      }

      e = c + e;
      a = {
        id: N++,
        callback: b,
        priorityLevel: a,
        startTime: c,
        expirationTime: e,
        sortIndex: -1
      };
      c > d ? (a.sortIndex = c, H(M, a), null === J(L) && a === J(M) && (S ? h() : S = !0, g(U, c - d))) : (a.sortIndex = e, H(L, a), R || Q || (R = !0, _f(V)));
      return a;
    };

    exports.unstable_wrapCallback = function (a) {
      var b = P;
      return function () {
        var c = P;
        P = b;

        try {
          return a.apply(this, arguments);
        } finally {
          P = c;
        }
      };
    };
  })(scheduler_production_min);

  {
    scheduler.exports = scheduler_production_min;
  }

  var aa = react.exports,
      m$5 = objectAssign,
      r$5 = scheduler.exports;

  function y$4(a) {
    for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++) {
      b += "&args[]=" + encodeURIComponent(arguments[c]);
    }

    return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
  }

  if (!aa) throw Error(y$4(227));
  var ba = new Set(),
      ca = {};

  function da(a, b) {
    ea(a, b);
    ea(a + "Capture", b);
  }

  function ea(a, b) {
    ca[a] = b;

    for (a = 0; a < b.length; a++) {
      ba.add(b[a]);
    }
  }

  var fa = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement),
      ha = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,
      ia = Object.prototype.hasOwnProperty,
      ja = {},
      ka = {};

  function la(a) {
    if (ia.call(ka, a)) return !0;
    if (ia.call(ja, a)) return !1;
    if (ha.test(a)) return ka[a] = !0;
    ja[a] = !0;
    return !1;
  }

  function ma(a, b, c, d) {
    if (null !== c && 0 === c.type) return !1;

    switch (_typeof(b)) {
      case "function":
      case "symbol":
        return !0;

      case "boolean":
        if (d) return !1;
        if (null !== c) return !c.acceptsBooleans;
        a = a.toLowerCase().slice(0, 5);
        return "data-" !== a && "aria-" !== a;

      default:
        return !1;
    }
  }

  function na(a, b, c, d) {
    if (null === b || "undefined" === typeof b || ma(a, b, c, d)) return !0;
    if (d) return !1;
    if (null !== c) switch (c.type) {
      case 3:
        return !b;

      case 4:
        return !1 === b;

      case 5:
        return isNaN(b);

      case 6:
        return isNaN(b) || 1 > b;
    }
    return !1;
  }

  function B$2(a, b, c, d, e, f, g) {
    this.acceptsBooleans = 2 === b || 3 === b || 4 === b;
    this.attributeName = d;
    this.attributeNamespace = e;
    this.mustUseProperty = c;
    this.propertyName = a;
    this.type = b;
    this.sanitizeURL = f;
    this.removeEmptyString = g;
  }

  var D$2 = {};
  "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function (a) {
    D$2[a] = new B$2(a, 0, !1, a, null, !1, !1);
  });
  [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function (a) {
    var b = a[0];
    D$2[b] = new B$2(b, 1, !1, a[1], null, !1, !1);
  });
  ["contentEditable", "draggable", "spellCheck", "value"].forEach(function (a) {
    D$2[a] = new B$2(a, 2, !1, a.toLowerCase(), null, !1, !1);
  });
  ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function (a) {
    D$2[a] = new B$2(a, 2, !1, a, null, !1, !1);
  });
  "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function (a) {
    D$2[a] = new B$2(a, 3, !1, a.toLowerCase(), null, !1, !1);
  });
  ["checked", "multiple", "muted", "selected"].forEach(function (a) {
    D$2[a] = new B$2(a, 3, !0, a, null, !1, !1);
  });
  ["capture", "download"].forEach(function (a) {
    D$2[a] = new B$2(a, 4, !1, a, null, !1, !1);
  });
  ["cols", "rows", "size", "span"].forEach(function (a) {
    D$2[a] = new B$2(a, 6, !1, a, null, !1, !1);
  });
  ["rowSpan", "start"].forEach(function (a) {
    D$2[a] = new B$2(a, 5, !1, a.toLowerCase(), null, !1, !1);
  });
  var oa = /[\-:]([a-z])/g;

  function pa(a) {
    return a[1].toUpperCase();
  }

  "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function (a) {
    var b = a.replace(oa, pa);
    D$2[b] = new B$2(b, 1, !1, a, null, !1, !1);
  });
  "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function (a) {
    var b = a.replace(oa, pa);
    D$2[b] = new B$2(b, 1, !1, a, "http://www.w3.org/1999/xlink", !1, !1);
  });
  ["xml:base", "xml:lang", "xml:space"].forEach(function (a) {
    var b = a.replace(oa, pa);
    D$2[b] = new B$2(b, 1, !1, a, "http://www.w3.org/XML/1998/namespace", !1, !1);
  });
  ["tabIndex", "crossOrigin"].forEach(function (a) {
    D$2[a] = new B$2(a, 1, !1, a.toLowerCase(), null, !1, !1);
  });
  D$2.xlinkHref = new B$2("xlinkHref", 1, !1, "xlink:href", "http://www.w3.org/1999/xlink", !0, !1);
  ["src", "href", "action", "formAction"].forEach(function (a) {
    D$2[a] = new B$2(a, 1, !1, a.toLowerCase(), null, !0, !0);
  });

  function qa(a, b, c, d) {
    var e = D$2.hasOwnProperty(b) ? D$2[b] : null;
    var f = null !== e ? 0 === e.type : d ? !1 : !(2 < b.length) || "o" !== b[0] && "O" !== b[0] || "n" !== b[1] && "N" !== b[1] ? !1 : !0;
    f || (na(b, c, e, d) && (c = null), d || null === e ? la(b) && (null === c ? a.removeAttribute(b) : a.setAttribute(b, "" + c)) : e.mustUseProperty ? a[e.propertyName] = null === c ? 3 === e.type ? !1 : "" : c : (b = e.attributeName, d = e.attributeNamespace, null === c ? a.removeAttribute(b) : (e = e.type, c = 3 === e || 4 === e && !0 === c ? "" : "" + c, d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c))));
  }

  var ra = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
      sa = 60103,
      ta = 60106,
      ua = 60107,
      wa = 60108,
      xa = 60114,
      ya = 60109,
      za = 60110,
      Aa = 60112,
      Ba = 60113,
      Ca = 60120,
      Da = 60115,
      Ea = 60116,
      Fa = 60121,
      Ga = 60128,
      Ha = 60129,
      Ia = 60130,
      Ja = 60131;

  if ("function" === typeof Symbol && Symbol["for"]) {
    var E$2 = Symbol["for"];
    sa = E$2("react.element");
    ta = E$2("react.portal");
    ua = E$2("react.fragment");
    wa = E$2("react.strict_mode");
    xa = E$2("react.profiler");
    ya = E$2("react.provider");
    za = E$2("react.context");
    Aa = E$2("react.forward_ref");
    Ba = E$2("react.suspense");
    Ca = E$2("react.suspense_list");
    Da = E$2("react.memo");
    Ea = E$2("react.lazy");
    Fa = E$2("react.block");
    E$2("react.scope");
    Ga = E$2("react.opaque.id");
    Ha = E$2("react.debug_trace_mode");
    Ia = E$2("react.offscreen");
    Ja = E$2("react.legacy_hidden");
  }

  var Ka = "function" === typeof Symbol && Symbol.iterator;

  function La(a) {
    if (null === a || "object" !== _typeof(a)) return null;
    a = Ka && a[Ka] || a["@@iterator"];
    return "function" === typeof a ? a : null;
  }

  var Ma;

  function Na(a) {
    if (void 0 === Ma) try {
      throw Error();
    } catch (c) {
      var b = c.stack.trim().match(/\n( *(at )?)/);
      Ma = b && b[1] || "";
    }
    return "\n" + Ma + a;
  }

  var Oa = !1;

  function Pa(a, b) {
    if (!a || Oa) return "";
    Oa = !0;
    var c = Error.prepareStackTrace;
    Error.prepareStackTrace = void 0;

    try {
      if (b) {
        if (b = function b() {
          throw Error();
        }, Object.defineProperty(b.prototype, "props", {
          set: function set() {
            throw Error();
          }
        }), "object" === (typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) && Reflect.construct) {
          try {
            Reflect.construct(b, []);
          } catch (k) {
            var d = k;
          }

          Reflect.construct(a, [], b);
        } else {
          try {
            b.call();
          } catch (k) {
            d = k;
          }

          a.call(b.prototype);
        }
      } else {
        try {
          throw Error();
        } catch (k) {
          d = k;
        }

        a();
      }
    } catch (k) {
      if (k && d && "string" === typeof k.stack) {
        for (var e = k.stack.split("\n"), f = d.stack.split("\n"), g = e.length - 1, h = f.length - 1; 1 <= g && 0 <= h && e[g] !== f[h];) {
          h--;
        }

        for (; 1 <= g && 0 <= h; g--, h--) {
          if (e[g] !== f[h]) {
            if (1 !== g || 1 !== h) {
              do {
                if (g--, h--, 0 > h || e[g] !== f[h]) return "\n" + e[g].replace(" at new ", " at ");
              } while (1 <= g && 0 <= h);
            }

            break;
          }
        }
      }
    } finally {
      Oa = !1, Error.prepareStackTrace = c;
    }

    return (a = a ? a.displayName || a.name : "") ? Na(a) : "";
  }

  function Qa(a) {
    switch (a.tag) {
      case 5:
        return Na(a.type);

      case 16:
        return Na("Lazy");

      case 13:
        return Na("Suspense");

      case 19:
        return Na("SuspenseList");

      case 0:
      case 2:
      case 15:
        return a = Pa(a.type, !1), a;

      case 11:
        return a = Pa(a.type.render, !1), a;

      case 22:
        return a = Pa(a.type._render, !1), a;

      case 1:
        return a = Pa(a.type, !0), a;

      default:
        return "";
    }
  }

  function Ra(a) {
    if (null == a) return null;
    if ("function" === typeof a) return a.displayName || a.name || null;
    if ("string" === typeof a) return a;

    switch (a) {
      case ua:
        return "Fragment";

      case ta:
        return "Portal";

      case xa:
        return "Profiler";

      case wa:
        return "StrictMode";

      case Ba:
        return "Suspense";

      case Ca:
        return "SuspenseList";
    }

    if ("object" === _typeof(a)) switch (a.$$typeof) {
      case za:
        return (a.displayName || "Context") + ".Consumer";

      case ya:
        return (a._context.displayName || "Context") + ".Provider";

      case Aa:
        var b = a.render;
        b = b.displayName || b.name || "";
        return a.displayName || ("" !== b ? "ForwardRef(" + b + ")" : "ForwardRef");

      case Da:
        return Ra(a.type);

      case Fa:
        return Ra(a._render);

      case Ea:
        b = a._payload;
        a = a._init;

        try {
          return Ra(a(b));
        } catch (c) {}

    }
    return null;
  }

  function Sa(a) {
    switch (_typeof(a)) {
      case "boolean":
      case "number":
      case "object":
      case "string":
      case "undefined":
        return a;

      default:
        return "";
    }
  }

  function Ta(a) {
    var b = a.type;
    return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b || "radio" === b);
  }

  function Ua(a) {
    var b = Ta(a) ? "checked" : "value",
        c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b),
        d = "" + a[b];

    if (!a.hasOwnProperty(b) && "undefined" !== typeof c && "function" === typeof c.get && "function" === typeof c.set) {
      var e = c.get,
          f = c.set;
      Object.defineProperty(a, b, {
        configurable: !0,
        get: function get() {
          return e.call(this);
        },
        set: function set(a) {
          d = "" + a;
          f.call(this, a);
        }
      });
      Object.defineProperty(a, b, {
        enumerable: c.enumerable
      });
      return {
        getValue: function getValue() {
          return d;
        },
        setValue: function setValue(a) {
          d = "" + a;
        },
        stopTracking: function stopTracking() {
          a._valueTracker = null;
          delete a[b];
        }
      };
    }
  }

  function Va(a) {
    a._valueTracker || (a._valueTracker = Ua(a));
  }

  function Wa(a) {
    if (!a) return !1;
    var b = a._valueTracker;
    if (!b) return !0;
    var c = b.getValue();
    var d = "";
    a && (d = Ta(a) ? a.checked ? "true" : "false" : a.value);
    a = d;
    return a !== c ? (b.setValue(a), !0) : !1;
  }

  function Xa(a) {
    a = a || ("undefined" !== typeof document ? document : void 0);
    if ("undefined" === typeof a) return null;

    try {
      return a.activeElement || a.body;
    } catch (b) {
      return a.body;
    }
  }

  function Ya(a, b) {
    var c = b.checked;
    return m$5({}, b, {
      defaultChecked: void 0,
      defaultValue: void 0,
      value: void 0,
      checked: null != c ? c : a._wrapperState.initialChecked
    });
  }

  function Za(a, b) {
    var c = null == b.defaultValue ? "" : b.defaultValue,
        d = null != b.checked ? b.checked : b.defaultChecked;
    c = Sa(null != b.value ? b.value : c);
    a._wrapperState = {
      initialChecked: d,
      initialValue: c,
      controlled: "checkbox" === b.type || "radio" === b.type ? null != b.checked : null != b.value
    };
  }

  function $a(a, b) {
    b = b.checked;
    null != b && qa(a, "checked", b, !1);
  }

  function ab(a, b) {
    $a(a, b);
    var c = Sa(b.value),
        d = b.type;
    if (null != c) {
      if ("number" === d) {
        if (0 === c && "" === a.value || a.value != c) a.value = "" + c;
      } else a.value !== "" + c && (a.value = "" + c);
    } else if ("submit" === d || "reset" === d) {
      a.removeAttribute("value");
      return;
    }
    b.hasOwnProperty("value") ? bb(a, b.type, c) : b.hasOwnProperty("defaultValue") && bb(a, b.type, Sa(b.defaultValue));
    null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);
  }

  function cb(a, b, c) {
    if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {
      var d = b.type;
      if (!("submit" !== d && "reset" !== d || void 0 !== b.value && null !== b.value)) return;
      b = "" + a._wrapperState.initialValue;
      c || b === a.value || (a.value = b);
      a.defaultValue = b;
    }

    c = a.name;
    "" !== c && (a.name = "");
    a.defaultChecked = !!a._wrapperState.initialChecked;
    "" !== c && (a.name = c);
  }

  function bb(a, b, c) {
    if ("number" !== b || Xa(a.ownerDocument) !== a) null == c ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c && (a.defaultValue = "" + c);
  }

  function db(a) {
    var b = "";
    aa.Children.forEach(a, function (a) {
      null != a && (b += a);
    });
    return b;
  }

  function eb(a, b) {
    a = m$5({
      children: void 0
    }, b);
    if (b = db(b.children)) a.children = b;
    return a;
  }

  function fb(a, b, c, d) {
    a = a.options;

    if (b) {
      b = {};

      for (var e = 0; e < c.length; e++) {
        b["$" + c[e]] = !0;
      }

      for (c = 0; c < a.length; c++) {
        e = b.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = !0);
      }
    } else {
      c = "" + Sa(c);
      b = null;

      for (e = 0; e < a.length; e++) {
        if (a[e].value === c) {
          a[e].selected = !0;
          d && (a[e].defaultSelected = !0);
          return;
        }

        null !== b || a[e].disabled || (b = a[e]);
      }

      null !== b && (b.selected = !0);
    }
  }

  function gb(a, b) {
    if (null != b.dangerouslySetInnerHTML) throw Error(y$4(91));
    return m$5({}, b, {
      value: void 0,
      defaultValue: void 0,
      children: "" + a._wrapperState.initialValue
    });
  }

  function hb(a, b) {
    var c = b.value;

    if (null == c) {
      c = b.children;
      b = b.defaultValue;

      if (null != c) {
        if (null != b) throw Error(y$4(92));

        if (Array.isArray(c)) {
          if (!(1 >= c.length)) throw Error(y$4(93));
          c = c[0];
        }

        b = c;
      }

      null == b && (b = "");
      c = b;
    }

    a._wrapperState = {
      initialValue: Sa(c)
    };
  }

  function ib(a, b) {
    var c = Sa(b.value),
        d = Sa(b.defaultValue);
    null != c && (c = "" + c, c !== a.value && (a.value = c), null == b.defaultValue && a.defaultValue !== c && (a.defaultValue = c));
    null != d && (a.defaultValue = "" + d);
  }

  function jb(a) {
    var b = a.textContent;
    b === a._wrapperState.initialValue && "" !== b && null !== b && (a.value = b);
  }

  var kb = {
    html: "http://www.w3.org/1999/xhtml",
    mathml: "http://www.w3.org/1998/Math/MathML",
    svg: "http://www.w3.org/2000/svg"
  };

  function lb(a) {
    switch (a) {
      case "svg":
        return "http://www.w3.org/2000/svg";

      case "math":
        return "http://www.w3.org/1998/Math/MathML";

      default:
        return "http://www.w3.org/1999/xhtml";
    }
  }

  function mb(a, b) {
    return null == a || "http://www.w3.org/1999/xhtml" === a ? lb(b) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b ? "http://www.w3.org/1999/xhtml" : a;
  }

  var nb,
      ob = function (a) {
    return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function (b, c, d, e) {
      MSApp.execUnsafeLocalFunction(function () {
        return a(b, c, d, e);
      });
    } : a;
  }(function (a, b) {
    if (a.namespaceURI !== kb.svg || "innerHTML" in a) a.innerHTML = b;else {
      nb = nb || document.createElement("div");
      nb.innerHTML = "<svg>" + b.valueOf().toString() + "</svg>";

      for (b = nb.firstChild; a.firstChild;) {
        a.removeChild(a.firstChild);
      }

      for (; b.firstChild;) {
        a.appendChild(b.firstChild);
      }
    }
  });

  function pb(a, b) {
    if (b) {
      var c = a.firstChild;

      if (c && c === a.lastChild && 3 === c.nodeType) {
        c.nodeValue = b;
        return;
      }
    }

    a.textContent = b;
  }

  var qb = {
    animationIterationCount: !0,
    borderImageOutset: !0,
    borderImageSlice: !0,
    borderImageWidth: !0,
    boxFlex: !0,
    boxFlexGroup: !0,
    boxOrdinalGroup: !0,
    columnCount: !0,
    columns: !0,
    flex: !0,
    flexGrow: !0,
    flexPositive: !0,
    flexShrink: !0,
    flexNegative: !0,
    flexOrder: !0,
    gridArea: !0,
    gridRow: !0,
    gridRowEnd: !0,
    gridRowSpan: !0,
    gridRowStart: !0,
    gridColumn: !0,
    gridColumnEnd: !0,
    gridColumnSpan: !0,
    gridColumnStart: !0,
    fontWeight: !0,
    lineClamp: !0,
    lineHeight: !0,
    opacity: !0,
    order: !0,
    orphans: !0,
    tabSize: !0,
    widows: !0,
    zIndex: !0,
    zoom: !0,
    fillOpacity: !0,
    floodOpacity: !0,
    stopOpacity: !0,
    strokeDasharray: !0,
    strokeDashoffset: !0,
    strokeMiterlimit: !0,
    strokeOpacity: !0,
    strokeWidth: !0
  },
      rb = ["Webkit", "ms", "Moz", "O"];
  Object.keys(qb).forEach(function (a) {
    rb.forEach(function (b) {
      b = b + a.charAt(0).toUpperCase() + a.substring(1);
      qb[b] = qb[a];
    });
  });

  function sb(a, b, c) {
    return null == b || "boolean" === typeof b || "" === b ? "" : c || "number" !== typeof b || 0 === b || qb.hasOwnProperty(a) && qb[a] ? ("" + b).trim() : b + "px";
  }

  function tb(a, b) {
    a = a.style;

    for (var c in b) {
      if (b.hasOwnProperty(c)) {
        var d = 0 === c.indexOf("--"),
            e = sb(c, b[c], d);
        "float" === c && (c = "cssFloat");
        d ? a.setProperty(c, e) : a[c] = e;
      }
    }
  }

  var ub = m$5({
    menuitem: !0
  }, {
    area: !0,
    base: !0,
    br: !0,
    col: !0,
    embed: !0,
    hr: !0,
    img: !0,
    input: !0,
    keygen: !0,
    link: !0,
    meta: !0,
    param: !0,
    source: !0,
    track: !0,
    wbr: !0
  });

  function vb(a, b) {
    if (b) {
      if (ub[a] && (null != b.children || null != b.dangerouslySetInnerHTML)) throw Error(y$4(137, a));

      if (null != b.dangerouslySetInnerHTML) {
        if (null != b.children) throw Error(y$4(60));
        if (!("object" === _typeof(b.dangerouslySetInnerHTML) && "__html" in b.dangerouslySetInnerHTML)) throw Error(y$4(61));
      }

      if (null != b.style && "object" !== _typeof(b.style)) throw Error(y$4(62));
    }
  }

  function wb(a, b) {
    if (-1 === a.indexOf("-")) return "string" === typeof b.is;

    switch (a) {
      case "annotation-xml":
      case "color-profile":
      case "font-face":
      case "font-face-src":
      case "font-face-uri":
      case "font-face-format":
      case "font-face-name":
      case "missing-glyph":
        return !1;

      default:
        return !0;
    }
  }

  function xb(a) {
    a = a.target || a.srcElement || window;
    a.correspondingUseElement && (a = a.correspondingUseElement);
    return 3 === a.nodeType ? a.parentNode : a;
  }

  var yb = null,
      zb = null,
      Ab = null;

  function Bb(a) {
    if (a = Cb(a)) {
      if ("function" !== typeof yb) throw Error(y$4(280));
      var b = a.stateNode;
      b && (b = Db(b), yb(a.stateNode, a.type, b));
    }
  }

  function Eb(a) {
    zb ? Ab ? Ab.push(a) : Ab = [a] : zb = a;
  }

  function Fb() {
    if (zb) {
      var a = zb,
          b = Ab;
      Ab = zb = null;
      Bb(a);
      if (b) for (a = 0; a < b.length; a++) {
        Bb(b[a]);
      }
    }
  }

  function Gb(a, b) {
    return a(b);
  }

  function Hb(a, b, c, d, e) {
    return a(b, c, d, e);
  }

  function Ib() {}

  var Jb = Gb,
      Kb = !1,
      Lb = !1;

  function Mb() {
    if (null !== zb || null !== Ab) Ib(), Fb();
  }

  function Nb(a, b, c) {
    if (Lb) return a(b, c);
    Lb = !0;

    try {
      return Jb(a, b, c);
    } finally {
      Lb = !1, Mb();
    }
  }

  function Ob(a, b) {
    var c = a.stateNode;
    if (null === c) return null;
    var d = Db(c);
    if (null === d) return null;
    c = d[b];

    a: switch (b) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
      case "onMouseEnter":
        (d = !d.disabled) || (a = a.type, d = !("button" === a || "input" === a || "select" === a || "textarea" === a));
        a = !d;
        break a;

      default:
        a = !1;
    }

    if (a) return null;
    if (c && "function" !== typeof c) throw Error(y$4(231, b, _typeof(c)));
    return c;
  }

  var Pb = !1;
  if (fa) try {
    var Qb = {};
    Object.defineProperty(Qb, "passive", {
      get: function get() {
        Pb = !0;
      }
    });
    window.addEventListener("test", Qb, Qb);
    window.removeEventListener("test", Qb, Qb);
  } catch (a) {
    Pb = !1;
  }

  function Rb(a, b, c, d, e, f, g, h, k) {
    var l = Array.prototype.slice.call(arguments, 3);

    try {
      b.apply(c, l);
    } catch (n) {
      this.onError(n);
    }
  }

  var Sb = !1,
      Tb = null,
      Ub = !1,
      Vb = null,
      Wb = {
    onError: function onError(a) {
      Sb = !0;
      Tb = a;
    }
  };

  function Xb(a, b, c, d, e, f, g, h, k) {
    Sb = !1;
    Tb = null;
    Rb.apply(Wb, arguments);
  }

  function Yb(a, b, c, d, e, f, g, h, k) {
    Xb.apply(this, arguments);

    if (Sb) {
      if (Sb) {
        var l = Tb;
        Sb = !1;
        Tb = null;
      } else throw Error(y$4(198));

      Ub || (Ub = !0, Vb = l);
    }
  }

  function Zb(a) {
    var b = a,
        c = a;
    if (a.alternate) for (; b["return"];) {
      b = b["return"];
    } else {
      a = b;

      do {
        b = a, 0 !== (b.flags & 1026) && (c = b["return"]), a = b["return"];
      } while (a);
    }
    return 3 === b.tag ? c : null;
  }

  function $b(a) {
    if (13 === a.tag) {
      var b = a.memoizedState;
      null === b && (a = a.alternate, null !== a && (b = a.memoizedState));
      if (null !== b) return b.dehydrated;
    }

    return null;
  }

  function ac(a) {
    if (Zb(a) !== a) throw Error(y$4(188));
  }

  function bc(a) {
    var b = a.alternate;

    if (!b) {
      b = Zb(a);
      if (null === b) throw Error(y$4(188));
      return b !== a ? null : a;
    }

    for (var c = a, d = b;;) {
      var e = c["return"];
      if (null === e) break;
      var f = e.alternate;

      if (null === f) {
        d = e["return"];

        if (null !== d) {
          c = d;
          continue;
        }

        break;
      }

      if (e.child === f.child) {
        for (f = e.child; f;) {
          if (f === c) return ac(e), a;
          if (f === d) return ac(e), b;
          f = f.sibling;
        }

        throw Error(y$4(188));
      }

      if (c["return"] !== d["return"]) c = e, d = f;else {
        for (var g = !1, h = e.child; h;) {
          if (h === c) {
            g = !0;
            c = e;
            d = f;
            break;
          }

          if (h === d) {
            g = !0;
            d = e;
            c = f;
            break;
          }

          h = h.sibling;
        }

        if (!g) {
          for (h = f.child; h;) {
            if (h === c) {
              g = !0;
              c = f;
              d = e;
              break;
            }

            if (h === d) {
              g = !0;
              d = f;
              c = e;
              break;
            }

            h = h.sibling;
          }

          if (!g) throw Error(y$4(189));
        }
      }
      if (c.alternate !== d) throw Error(y$4(190));
    }

    if (3 !== c.tag) throw Error(y$4(188));
    return c.stateNode.current === c ? a : b;
  }

  function cc(a) {
    a = bc(a);
    if (!a) return null;

    for (var b = a;;) {
      if (5 === b.tag || 6 === b.tag) return b;
      if (b.child) b.child["return"] = b, b = b.child;else {
        if (b === a) break;

        for (; !b.sibling;) {
          if (!b["return"] || b["return"] === a) return null;
          b = b["return"];
        }

        b.sibling["return"] = b["return"];
        b = b.sibling;
      }
    }

    return null;
  }

  function dc(a, b) {
    for (var c = a.alternate; null !== b;) {
      if (b === a || b === c) return !0;
      b = b["return"];
    }

    return !1;
  }

  var ec$1,
      fc,
      gc,
      hc,
      ic = !1,
      jc = [],
      kc = null,
      lc = null,
      mc = null,
      nc = new Map(),
      oc = new Map(),
      pc = [],
      qc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");

  function rc(a, b, c, d, e) {
    return {
      blockedOn: a,
      domEventName: b,
      eventSystemFlags: c | 16,
      nativeEvent: e,
      targetContainers: [d]
    };
  }

  function sc(a, b) {
    switch (a) {
      case "focusin":
      case "focusout":
        kc = null;
        break;

      case "dragenter":
      case "dragleave":
        lc = null;
        break;

      case "mouseover":
      case "mouseout":
        mc = null;
        break;

      case "pointerover":
      case "pointerout":
        nc["delete"](b.pointerId);
        break;

      case "gotpointercapture":
      case "lostpointercapture":
        oc["delete"](b.pointerId);
    }
  }

  function tc(a, b, c, d, e, f) {
    if (null === a || a.nativeEvent !== f) return a = rc(b, c, d, e, f), null !== b && (b = Cb(b), null !== b && fc(b)), a;
    a.eventSystemFlags |= d;
    b = a.targetContainers;
    null !== e && -1 === b.indexOf(e) && b.push(e);
    return a;
  }

  function uc(a, b, c, d, e) {
    switch (b) {
      case "focusin":
        return kc = tc(kc, a, b, c, d, e), !0;

      case "dragenter":
        return lc = tc(lc, a, b, c, d, e), !0;

      case "mouseover":
        return mc = tc(mc, a, b, c, d, e), !0;

      case "pointerover":
        var f = e.pointerId;
        nc.set(f, tc(nc.get(f) || null, a, b, c, d, e));
        return !0;

      case "gotpointercapture":
        return f = e.pointerId, oc.set(f, tc(oc.get(f) || null, a, b, c, d, e)), !0;
    }

    return !1;
  }

  function vc(a) {
    var b = wc(a.target);

    if (null !== b) {
      var c = Zb(b);
      if (null !== c) if (b = c.tag, 13 === b) {
        if (b = $b(c), null !== b) {
          a.blockedOn = b;
          hc(a.lanePriority, function () {
            r$5.unstable_runWithPriority(a.priority, function () {
              gc(c);
            });
          });
          return;
        }
      } else if (3 === b && c.stateNode.hydrate) {
        a.blockedOn = 3 === c.tag ? c.stateNode.containerInfo : null;
        return;
      }
    }

    a.blockedOn = null;
  }

  function xc(a) {
    if (null !== a.blockedOn) return !1;

    for (var b = a.targetContainers; 0 < b.length;) {
      var c = yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);
      if (null !== c) return b = Cb(c), null !== b && fc(b), a.blockedOn = c, !1;
      b.shift();
    }

    return !0;
  }

  function zc(a, b, c) {
    xc(a) && c["delete"](b);
  }

  function Ac() {
    for (ic = !1; 0 < jc.length;) {
      var a = jc[0];

      if (null !== a.blockedOn) {
        a = Cb(a.blockedOn);
        null !== a && ec$1(a);
        break;
      }

      for (var b = a.targetContainers; 0 < b.length;) {
        var c = yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);

        if (null !== c) {
          a.blockedOn = c;
          break;
        }

        b.shift();
      }

      null === a.blockedOn && jc.shift();
    }

    null !== kc && xc(kc) && (kc = null);
    null !== lc && xc(lc) && (lc = null);
    null !== mc && xc(mc) && (mc = null);
    nc.forEach(zc);
    oc.forEach(zc);
  }

  function Bc(a, b) {
    a.blockedOn === b && (a.blockedOn = null, ic || (ic = !0, r$5.unstable_scheduleCallback(r$5.unstable_NormalPriority, Ac)));
  }

  function Cc(a) {
    function b(b) {
      return Bc(b, a);
    }

    if (0 < jc.length) {
      Bc(jc[0], a);

      for (var c = 1; c < jc.length; c++) {
        var d = jc[c];
        d.blockedOn === a && (d.blockedOn = null);
      }
    }

    null !== kc && Bc(kc, a);
    null !== lc && Bc(lc, a);
    null !== mc && Bc(mc, a);
    nc.forEach(b);
    oc.forEach(b);

    for (c = 0; c < pc.length; c++) {
      d = pc[c], d.blockedOn === a && (d.blockedOn = null);
    }

    for (; 0 < pc.length && (c = pc[0], null === c.blockedOn);) {
      vc(c), null === c.blockedOn && pc.shift();
    }
  }

  function Dc(a, b) {
    var c = {};
    c[a.toLowerCase()] = b.toLowerCase();
    c["Webkit" + a] = "webkit" + b;
    c["Moz" + a] = "moz" + b;
    return c;
  }

  var Ec = {
    animationend: Dc("Animation", "AnimationEnd"),
    animationiteration: Dc("Animation", "AnimationIteration"),
    animationstart: Dc("Animation", "AnimationStart"),
    transitionend: Dc("Transition", "TransitionEnd")
  },
      Fc = {},
      Gc = {};
  fa && (Gc = document.createElement("div").style, "AnimationEvent" in window || (delete Ec.animationend.animation, delete Ec.animationiteration.animation, delete Ec.animationstart.animation), "TransitionEvent" in window || delete Ec.transitionend.transition);

  function Hc(a) {
    if (Fc[a]) return Fc[a];
    if (!Ec[a]) return a;
    var b = Ec[a],
        c;

    for (c in b) {
      if (b.hasOwnProperty(c) && c in Gc) return Fc[a] = b[c];
    }

    return a;
  }

  var Ic = Hc("animationend"),
      Jc = Hc("animationiteration"),
      Kc = Hc("animationstart"),
      Lc = Hc("transitionend"),
      Mc = new Map(),
      Nc = new Map(),
      Oc = ["abort", "abort", Ic, "animationEnd", Jc, "animationIteration", Kc, "animationStart", "canplay", "canPlay", "canplaythrough", "canPlayThrough", "durationchange", "durationChange", "emptied", "emptied", "encrypted", "encrypted", "ended", "ended", "error", "error", "gotpointercapture", "gotPointerCapture", "load", "load", "loadeddata", "loadedData", "loadedmetadata", "loadedMetadata", "loadstart", "loadStart", "lostpointercapture", "lostPointerCapture", "playing", "playing", "progress", "progress", "seeking", "seeking", "stalled", "stalled", "suspend", "suspend", "timeupdate", "timeUpdate", Lc, "transitionEnd", "waiting", "waiting"];

  function Pc(a, b) {
    for (var c = 0; c < a.length; c += 2) {
      var d = a[c],
          e = a[c + 1];
      e = "on" + (e[0].toUpperCase() + e.slice(1));
      Nc.set(d, b);
      Mc.set(d, e);
      da(e, [d]);
    }
  }

  var Qc = r$5.unstable_now;
  Qc();
  var F$2 = 8;

  function Rc(a) {
    if (0 !== (1 & a)) return F$2 = 15, 1;
    if (0 !== (2 & a)) return F$2 = 14, 2;
    if (0 !== (4 & a)) return F$2 = 13, 4;
    var b = 24 & a;
    if (0 !== b) return F$2 = 12, b;
    if (0 !== (a & 32)) return F$2 = 11, 32;
    b = 192 & a;
    if (0 !== b) return F$2 = 10, b;
    if (0 !== (a & 256)) return F$2 = 9, 256;
    b = 3584 & a;
    if (0 !== b) return F$2 = 8, b;
    if (0 !== (a & 4096)) return F$2 = 7, 4096;
    b = 4186112 & a;
    if (0 !== b) return F$2 = 6, b;
    b = 62914560 & a;
    if (0 !== b) return F$2 = 5, b;
    if (a & 67108864) return F$2 = 4, 67108864;
    if (0 !== (a & 134217728)) return F$2 = 3, 134217728;
    b = 805306368 & a;
    if (0 !== b) return F$2 = 2, b;
    if (0 !== (1073741824 & a)) return F$2 = 1, 1073741824;
    F$2 = 8;
    return a;
  }

  function Sc(a) {
    switch (a) {
      case 99:
        return 15;

      case 98:
        return 10;

      case 97:
      case 96:
        return 8;

      case 95:
        return 2;

      default:
        return 0;
    }
  }

  function Tc(a) {
    switch (a) {
      case 15:
      case 14:
        return 99;

      case 13:
      case 12:
      case 11:
      case 10:
        return 98;

      case 9:
      case 8:
      case 7:
      case 6:
      case 4:
      case 5:
        return 97;

      case 3:
      case 2:
      case 1:
        return 95;

      case 0:
        return 90;

      default:
        throw Error(y$4(358, a));
    }
  }

  function Uc(a, b) {
    var c = a.pendingLanes;
    if (0 === c) return F$2 = 0;
    var d = 0,
        e = 0,
        f = a.expiredLanes,
        g = a.suspendedLanes,
        h = a.pingedLanes;
    if (0 !== f) d = f, e = F$2 = 15;else if (f = c & 134217727, 0 !== f) {
      var k = f & ~g;
      0 !== k ? (d = Rc(k), e = F$2) : (h &= f, 0 !== h && (d = Rc(h), e = F$2));
    } else f = c & ~g, 0 !== f ? (d = Rc(f), e = F$2) : 0 !== h && (d = Rc(h), e = F$2);
    if (0 === d) return 0;
    d = 31 - Vc(d);
    d = c & ((0 > d ? 0 : 1 << d) << 1) - 1;

    if (0 !== b && b !== d && 0 === (b & g)) {
      Rc(b);
      if (e <= F$2) return b;
      F$2 = e;
    }

    b = a.entangledLanes;
    if (0 !== b) for (a = a.entanglements, b &= d; 0 < b;) {
      c = 31 - Vc(b), e = 1 << c, d |= a[c], b &= ~e;
    }
    return d;
  }

  function Wc(a) {
    a = a.pendingLanes & -1073741825;
    return 0 !== a ? a : a & 1073741824 ? 1073741824 : 0;
  }

  function Xc(a, b) {
    switch (a) {
      case 15:
        return 1;

      case 14:
        return 2;

      case 12:
        return a = Yc(24 & ~b), 0 === a ? Xc(10, b) : a;

      case 10:
        return a = Yc(192 & ~b), 0 === a ? Xc(8, b) : a;

      case 8:
        return a = Yc(3584 & ~b), 0 === a && (a = Yc(4186112 & ~b), 0 === a && (a = 512)), a;

      case 2:
        return b = Yc(805306368 & ~b), 0 === b && (b = 268435456), b;
    }

    throw Error(y$4(358, a));
  }

  function Yc(a) {
    return a & -a;
  }

  function Zc(a) {
    for (var b = [], c = 0; 31 > c; c++) {
      b.push(a);
    }

    return b;
  }

  function $c(a, b, c) {
    a.pendingLanes |= b;
    var d = b - 1;
    a.suspendedLanes &= d;
    a.pingedLanes &= d;
    a = a.eventTimes;
    b = 31 - Vc(b);
    a[b] = c;
  }

  var Vc = Math.clz32 ? Math.clz32 : ad,
      bd = Math.log,
      cd = Math.LN2;

  function ad(a) {
    return 0 === a ? 32 : 31 - (bd(a) / cd | 0) | 0;
  }

  var dd = r$5.unstable_UserBlockingPriority,
      ed = r$5.unstable_runWithPriority,
      fd = !0;

  function gd(a, b, c, d) {
    Kb || Ib();
    var e = hd,
        f = Kb;
    Kb = !0;

    try {
      Hb(e, a, b, c, d);
    } finally {
      (Kb = f) || Mb();
    }
  }

  function id(a, b, c, d) {
    ed(dd, hd.bind(null, a, b, c, d));
  }

  function hd(a, b, c, d) {
    if (fd) {
      var e;
      if ((e = 0 === (b & 4)) && 0 < jc.length && -1 < qc.indexOf(a)) a = rc(null, a, b, c, d), jc.push(a);else {
        var f = yc(a, b, c, d);
        if (null === f) e && sc(a, d);else {
          if (e) {
            if (-1 < qc.indexOf(a)) {
              a = rc(f, a, b, c, d);
              jc.push(a);
              return;
            }

            if (uc(f, a, b, c, d)) return;
            sc(a, d);
          }

          jd(a, b, d, null, c);
        }
      }
    }
  }

  function yc(a, b, c, d) {
    var e = xb(d);
    e = wc(e);

    if (null !== e) {
      var f = Zb(e);
      if (null === f) e = null;else {
        var g = f.tag;

        if (13 === g) {
          e = $b(f);
          if (null !== e) return e;
          e = null;
        } else if (3 === g) {
          if (f.stateNode.hydrate) return 3 === f.tag ? f.stateNode.containerInfo : null;
          e = null;
        } else f !== e && (e = null);
      }
    }

    jd(a, b, d, e, c);
    return null;
  }

  var kd = null,
      ld = null,
      md = null;

  function nd() {
    if (md) return md;
    var a,
        b = ld,
        c = b.length,
        d,
        e = "value" in kd ? kd.value : kd.textContent,
        f = e.length;

    for (a = 0; a < c && b[a] === e[a]; a++) {
    }

    var g = c - a;

    for (d = 1; d <= g && b[c - d] === e[f - d]; d++) {
    }

    return md = e.slice(a, 1 < d ? 1 - d : void 0);
  }

  function od(a) {
    var b = a.keyCode;
    "charCode" in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b;
    10 === a && (a = 13);
    return 32 <= a || 13 === a ? a : 0;
  }

  function pd() {
    return !0;
  }

  function qd() {
    return !1;
  }

  function rd(a) {
    function b(b, d, e, f, g) {
      this._reactName = b;
      this._targetInst = e;
      this.type = d;
      this.nativeEvent = f;
      this.target = g;
      this.currentTarget = null;

      for (var c in a) {
        a.hasOwnProperty(c) && (b = a[c], this[c] = b ? b(f) : f[c]);
      }

      this.isDefaultPrevented = (null != f.defaultPrevented ? f.defaultPrevented : !1 === f.returnValue) ? pd : qd;
      this.isPropagationStopped = qd;
      return this;
    }

    m$5(b.prototype, {
      preventDefault: function preventDefault() {
        this.defaultPrevented = !0;
        var a = this.nativeEvent;
        a && (a.preventDefault ? a.preventDefault() : "unknown" !== typeof a.returnValue && (a.returnValue = !1), this.isDefaultPrevented = pd);
      },
      stopPropagation: function stopPropagation() {
        var a = this.nativeEvent;
        a && (a.stopPropagation ? a.stopPropagation() : "unknown" !== typeof a.cancelBubble && (a.cancelBubble = !0), this.isPropagationStopped = pd);
      },
      persist: function persist() {},
      isPersistent: pd
    });
    return b;
  }

  var sd = {
    eventPhase: 0,
    bubbles: 0,
    cancelable: 0,
    timeStamp: function timeStamp(a) {
      return a.timeStamp || Date.now();
    },
    defaultPrevented: 0,
    isTrusted: 0
  },
      td = rd(sd),
      ud = m$5({}, sd, {
    view: 0,
    detail: 0
  }),
      vd = rd(ud),
      wd,
      xd,
      yd,
      Ad = m$5({}, ud, {
    screenX: 0,
    screenY: 0,
    clientX: 0,
    clientY: 0,
    pageX: 0,
    pageY: 0,
    ctrlKey: 0,
    shiftKey: 0,
    altKey: 0,
    metaKey: 0,
    getModifierState: zd,
    button: 0,
    buttons: 0,
    relatedTarget: function relatedTarget(a) {
      return void 0 === a.relatedTarget ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;
    },
    movementX: function movementX(a) {
      if ("movementX" in a) return a.movementX;
      a !== yd && (yd && "mousemove" === a.type ? (wd = a.screenX - yd.screenX, xd = a.screenY - yd.screenY) : xd = wd = 0, yd = a);
      return wd;
    },
    movementY: function movementY(a) {
      return "movementY" in a ? a.movementY : xd;
    }
  }),
      Bd = rd(Ad),
      Cd = m$5({}, Ad, {
    dataTransfer: 0
  }),
      Dd = rd(Cd),
      Ed = m$5({}, ud, {
    relatedTarget: 0
  }),
      Fd = rd(Ed),
      Gd = m$5({}, sd, {
    animationName: 0,
    elapsedTime: 0,
    pseudoElement: 0
  }),
      Hd = rd(Gd),
      Id = m$5({}, sd, {
    clipboardData: function clipboardData(a) {
      return "clipboardData" in a ? a.clipboardData : window.clipboardData;
    }
  }),
      Jd = rd(Id),
      Kd = m$5({}, sd, {
    data: 0
  }),
      Ld = rd(Kd),
      Md = {
    Esc: "Escape",
    Spacebar: " ",
    Left: "ArrowLeft",
    Up: "ArrowUp",
    Right: "ArrowRight",
    Down: "ArrowDown",
    Del: "Delete",
    Win: "OS",
    Menu: "ContextMenu",
    Apps: "ContextMenu",
    Scroll: "ScrollLock",
    MozPrintableKey: "Unidentified"
  },
      Nd = {
    8: "Backspace",
    9: "Tab",
    12: "Clear",
    13: "Enter",
    16: "Shift",
    17: "Control",
    18: "Alt",
    19: "Pause",
    20: "CapsLock",
    27: "Escape",
    32: " ",
    33: "PageUp",
    34: "PageDown",
    35: "End",
    36: "Home",
    37: "ArrowLeft",
    38: "ArrowUp",
    39: "ArrowRight",
    40: "ArrowDown",
    45: "Insert",
    46: "Delete",
    112: "F1",
    113: "F2",
    114: "F3",
    115: "F4",
    116: "F5",
    117: "F6",
    118: "F7",
    119: "F8",
    120: "F9",
    121: "F10",
    122: "F11",
    123: "F12",
    144: "NumLock",
    145: "ScrollLock",
    224: "Meta"
  },
      Od = {
    Alt: "altKey",
    Control: "ctrlKey",
    Meta: "metaKey",
    Shift: "shiftKey"
  };

  function Pd(a) {
    var b = this.nativeEvent;
    return b.getModifierState ? b.getModifierState(a) : (a = Od[a]) ? !!b[a] : !1;
  }

  function zd() {
    return Pd;
  }

  var Qd = m$5({}, ud, {
    key: function key(a) {
      if (a.key) {
        var b = Md[a.key] || a.key;
        if ("Unidentified" !== b) return b;
      }

      return "keypress" === a.type ? (a = od(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? Nd[a.keyCode] || "Unidentified" : "";
    },
    code: 0,
    location: 0,
    ctrlKey: 0,
    shiftKey: 0,
    altKey: 0,
    metaKey: 0,
    repeat: 0,
    locale: 0,
    getModifierState: zd,
    charCode: function charCode(a) {
      return "keypress" === a.type ? od(a) : 0;
    },
    keyCode: function keyCode(a) {
      return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
    },
    which: function which(a) {
      return "keypress" === a.type ? od(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
    }
  }),
      Rd = rd(Qd),
      Sd = m$5({}, Ad, {
    pointerId: 0,
    width: 0,
    height: 0,
    pressure: 0,
    tangentialPressure: 0,
    tiltX: 0,
    tiltY: 0,
    twist: 0,
    pointerType: 0,
    isPrimary: 0
  }),
      Td = rd(Sd),
      Ud = m$5({}, ud, {
    touches: 0,
    targetTouches: 0,
    changedTouches: 0,
    altKey: 0,
    metaKey: 0,
    ctrlKey: 0,
    shiftKey: 0,
    getModifierState: zd
  }),
      Vd = rd(Ud),
      Wd = m$5({}, sd, {
    propertyName: 0,
    elapsedTime: 0,
    pseudoElement: 0
  }),
      Xd = rd(Wd),
      Yd = m$5({}, Ad, {
    deltaX: function deltaX(a) {
      return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
    },
    deltaY: function deltaY(a) {
      return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
    },
    deltaZ: 0,
    deltaMode: 0
  }),
      Zd = rd(Yd),
      $d = [9, 13, 27, 32],
      ae = fa && "CompositionEvent" in window,
      be = null;
  fa && "documentMode" in document && (be = document.documentMode);
  var ce = fa && "TextEvent" in window && !be,
      de = fa && (!ae || be && 8 < be && 11 >= be),
      ee = String.fromCharCode(32),
      fe = !1;

  function ge(a, b) {
    switch (a) {
      case "keyup":
        return -1 !== $d.indexOf(b.keyCode);

      case "keydown":
        return 229 !== b.keyCode;

      case "keypress":
      case "mousedown":
      case "focusout":
        return !0;

      default:
        return !1;
    }
  }

  function he(a) {
    a = a.detail;
    return "object" === _typeof(a) && "data" in a ? a.data : null;
  }

  var ie = !1;

  function je(a, b) {
    switch (a) {
      case "compositionend":
        return he(b);

      case "keypress":
        if (32 !== b.which) return null;
        fe = !0;
        return ee;

      case "textInput":
        return a = b.data, a === ee && fe ? null : a;

      default:
        return null;
    }
  }

  function ke(a, b) {
    if (ie) return "compositionend" === a || !ae && ge(a, b) ? (a = nd(), md = ld = kd = null, ie = !1, a) : null;

    switch (a) {
      case "paste":
        return null;

      case "keypress":
        if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {
          if (b["char"] && 1 < b["char"].length) return b["char"];
          if (b.which) return String.fromCharCode(b.which);
        }

        return null;

      case "compositionend":
        return de && "ko" !== b.locale ? null : b.data;

      default:
        return null;
    }
  }

  var le = {
    color: !0,
    date: !0,
    datetime: !0,
    "datetime-local": !0,
    email: !0,
    month: !0,
    number: !0,
    password: !0,
    range: !0,
    search: !0,
    tel: !0,
    text: !0,
    time: !0,
    url: !0,
    week: !0
  };

  function me(a) {
    var b = a && a.nodeName && a.nodeName.toLowerCase();
    return "input" === b ? !!le[a.type] : "textarea" === b ? !0 : !1;
  }

  function ne(a, b, c, d) {
    Eb(d);
    b = oe(b, "onChange");
    0 < b.length && (c = new td("onChange", "change", null, c, d), a.push({
      event: c,
      listeners: b
    }));
  }

  var pe = null,
      qe = null;

  function re(a) {
    se(a, 0);
  }

  function te(a) {
    var b = ue(a);
    if (Wa(b)) return a;
  }

  function ve(a, b) {
    if ("change" === a) return b;
  }

  var we = !1;

  if (fa) {
    var xe;

    if (fa) {
      var ye = ("oninput" in document);

      if (!ye) {
        var ze = document.createElement("div");
        ze.setAttribute("oninput", "return;");
        ye = "function" === typeof ze.oninput;
      }

      xe = ye;
    } else xe = !1;

    we = xe && (!document.documentMode || 9 < document.documentMode);
  }

  function Ae() {
    pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);
  }

  function Be(a) {
    if ("value" === a.propertyName && te(qe)) {
      var b = [];
      ne(b, qe, a, xb(a));
      a = re;
      if (Kb) a(b);else {
        Kb = !0;

        try {
          Gb(a, b);
        } finally {
          Kb = !1, Mb();
        }
      }
    }
  }

  function Ce(a, b, c) {
    "focusin" === a ? (Ae(), pe = b, qe = c, pe.attachEvent("onpropertychange", Be)) : "focusout" === a && Ae();
  }

  function De(a) {
    if ("selectionchange" === a || "keyup" === a || "keydown" === a) return te(qe);
  }

  function Ee(a, b) {
    if ("click" === a) return te(b);
  }

  function Fe(a, b) {
    if ("input" === a || "change" === a) return te(b);
  }

  function Ge(a, b) {
    return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;
  }

  var He = "function" === typeof Object.is ? Object.is : Ge,
      Ie = Object.prototype.hasOwnProperty;

  function Je(a, b) {
    if (He(a, b)) return !0;
    if ("object" !== _typeof(a) || null === a || "object" !== _typeof(b) || null === b) return !1;
    var c = Object.keys(a),
        d = Object.keys(b);
    if (c.length !== d.length) return !1;

    for (d = 0; d < c.length; d++) {
      if (!Ie.call(b, c[d]) || !He(a[c[d]], b[c[d]])) return !1;
    }

    return !0;
  }

  function Ke(a) {
    for (; a && a.firstChild;) {
      a = a.firstChild;
    }

    return a;
  }

  function Le(a, b) {
    var c = Ke(a);
    a = 0;

    for (var d; c;) {
      if (3 === c.nodeType) {
        d = a + c.textContent.length;
        if (a <= b && d >= b) return {
          node: c,
          offset: b - a
        };
        a = d;
      }

      a: {
        for (; c;) {
          if (c.nextSibling) {
            c = c.nextSibling;
            break a;
          }

          c = c.parentNode;
        }

        c = void 0;
      }

      c = Ke(c);
    }
  }

  function Me(a, b) {
    return a && b ? a === b ? !0 : a && 3 === a.nodeType ? !1 : b && 3 === b.nodeType ? Me(a, b.parentNode) : "contains" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : !1 : !1;
  }

  function Ne() {
    for (var a = window, b = Xa(); b instanceof a.HTMLIFrameElement;) {
      try {
        var c = "string" === typeof b.contentWindow.location.href;
      } catch (d) {
        c = !1;
      }

      if (c) a = b.contentWindow;else break;
      b = Xa(a.document);
    }

    return b;
  }

  function Oe(a) {
    var b = a && a.nodeName && a.nodeName.toLowerCase();
    return b && ("input" === b && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b || "true" === a.contentEditable);
  }

  var Pe = fa && "documentMode" in document && 11 >= document.documentMode,
      Qe = null,
      Re = null,
      Se = null,
      Te = !1;

  function Ue(a, b, c) {
    var d = c.window === c ? c.document : 9 === c.nodeType ? c : c.ownerDocument;
    Te || null == Qe || Qe !== Xa(d) || (d = Qe, "selectionStart" in d && Oe(d) ? d = {
      start: d.selectionStart,
      end: d.selectionEnd
    } : (d = (d.ownerDocument && d.ownerDocument.defaultView || window).getSelection(), d = {
      anchorNode: d.anchorNode,
      anchorOffset: d.anchorOffset,
      focusNode: d.focusNode,
      focusOffset: d.focusOffset
    }), Se && Je(Se, d) || (Se = d, d = oe(Re, "onSelect"), 0 < d.length && (b = new td("onSelect", "select", null, b, c), a.push({
      event: b,
      listeners: d
    }), b.target = Qe)));
  }

  Pc("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "), 0);
  Pc("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "), 1);
  Pc(Oc, 2);

  for (var Ve = "change selectionchange textInput compositionstart compositionend compositionupdate".split(" "), We = 0; We < Ve.length; We++) {
    Nc.set(Ve[We], 0);
  }

  ea("onMouseEnter", ["mouseout", "mouseover"]);
  ea("onMouseLeave", ["mouseout", "mouseover"]);
  ea("onPointerEnter", ["pointerout", "pointerover"]);
  ea("onPointerLeave", ["pointerout", "pointerover"]);
  da("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
  da("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
  da("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
  da("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
  da("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
  da("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
  var Xe = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),
      Ye = new Set("cancel close invalid load scroll toggle".split(" ").concat(Xe));

  function Ze(a, b, c) {
    var d = a.type || "unknown-event";
    a.currentTarget = c;
    Yb(d, b, void 0, a);
    a.currentTarget = null;
  }

  function se(a, b) {
    b = 0 !== (b & 4);

    for (var c = 0; c < a.length; c++) {
      var d = a[c],
          e = d.event;
      d = d.listeners;

      a: {
        var f = void 0;
        if (b) for (var g = d.length - 1; 0 <= g; g--) {
          var h = d[g],
              k = h.instance,
              l = h.currentTarget;
          h = h.listener;
          if (k !== f && e.isPropagationStopped()) break a;
          Ze(e, h, l);
          f = k;
        } else for (g = 0; g < d.length; g++) {
          h = d[g];
          k = h.instance;
          l = h.currentTarget;
          h = h.listener;
          if (k !== f && e.isPropagationStopped()) break a;
          Ze(e, h, l);
          f = k;
        }
      }
    }

    if (Ub) throw a = Vb, Ub = !1, Vb = null, a;
  }

  function G$2(a, b) {
    var c = $e(b),
        d = a + "__bubble";
    c.has(d) || (af(b, a, 2, !1), c.add(d));
  }

  var bf = "_reactListening" + Math.random().toString(36).slice(2);

  function cf(a) {
    a[bf] || (a[bf] = !0, ba.forEach(function (b) {
      Ye.has(b) || df(b, !1, a, null);
      df(b, !0, a, null);
    }));
  }

  function df(a, b, c, d) {
    var e = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : 0,
        f = c;
    "selectionchange" === a && 9 !== c.nodeType && (f = c.ownerDocument);

    if (null !== d && !b && Ye.has(a)) {
      if ("scroll" !== a) return;
      e |= 2;
      f = d;
    }

    var g = $e(f),
        h = a + "__" + (b ? "capture" : "bubble");
    g.has(h) || (b && (e |= 4), af(f, a, e, b), g.add(h));
  }

  function af(a, b, c, d) {
    var e = Nc.get(b);

    switch (void 0 === e ? 2 : e) {
      case 0:
        e = gd;
        break;

      case 1:
        e = id;
        break;

      default:
        e = hd;
    }

    c = e.bind(null, b, c, a);
    e = void 0;
    !Pb || "touchstart" !== b && "touchmove" !== b && "wheel" !== b || (e = !0);
    d ? void 0 !== e ? a.addEventListener(b, c, {
      capture: !0,
      passive: e
    }) : a.addEventListener(b, c, !0) : void 0 !== e ? a.addEventListener(b, c, {
      passive: e
    }) : a.addEventListener(b, c, !1);
  }

  function jd(a, b, c, d, e) {
    var f = d;
    if (0 === (b & 1) && 0 === (b & 2) && null !== d) a: for (;;) {
      if (null === d) return;
      var g = d.tag;

      if (3 === g || 4 === g) {
        var h = d.stateNode.containerInfo;
        if (h === e || 8 === h.nodeType && h.parentNode === e) break;
        if (4 === g) for (g = d["return"]; null !== g;) {
          var k = g.tag;
          if (3 === k || 4 === k) if (k = g.stateNode.containerInfo, k === e || 8 === k.nodeType && k.parentNode === e) return;
          g = g["return"];
        }

        for (; null !== h;) {
          g = wc(h);
          if (null === g) return;
          k = g.tag;

          if (5 === k || 6 === k) {
            d = f = g;
            continue a;
          }

          h = h.parentNode;
        }
      }

      d = d["return"];
    }
    Nb(function () {
      var d = f,
          e = xb(c),
          g = [];

      a: {
        var h = Mc.get(a);

        if (void 0 !== h) {
          var k = td,
              x = a;

          switch (a) {
            case "keypress":
              if (0 === od(c)) break a;

            case "keydown":
            case "keyup":
              k = Rd;
              break;

            case "focusin":
              x = "focus";
              k = Fd;
              break;

            case "focusout":
              x = "blur";
              k = Fd;
              break;

            case "beforeblur":
            case "afterblur":
              k = Fd;
              break;

            case "click":
              if (2 === c.button) break a;

            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              k = Bd;
              break;

            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              k = Dd;
              break;

            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              k = Vd;
              break;

            case Ic:
            case Jc:
            case Kc:
              k = Hd;
              break;

            case Lc:
              k = Xd;
              break;

            case "scroll":
              k = vd;
              break;

            case "wheel":
              k = Zd;
              break;

            case "copy":
            case "cut":
            case "paste":
              k = Jd;
              break;

            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              k = Td;
          }

          var w = 0 !== (b & 4),
              z = !w && "scroll" === a,
              u = w ? null !== h ? h + "Capture" : null : h;
          w = [];

          for (var t = d, q; null !== t;) {
            q = t;
            var v = q.stateNode;
            5 === q.tag && null !== v && (q = v, null !== u && (v = Ob(t, u), null != v && w.push(ef(t, v, q))));
            if (z) break;
            t = t["return"];
          }

          0 < w.length && (h = new k(h, x, null, c, e), g.push({
            event: h,
            listeners: w
          }));
        }
      }

      if (0 === (b & 7)) {
        a: {
          h = "mouseover" === a || "pointerover" === a;
          k = "mouseout" === a || "pointerout" === a;
          if (h && 0 === (b & 16) && (x = c.relatedTarget || c.fromElement) && (wc(x) || x[ff])) break a;

          if (k || h) {
            h = e.window === e ? e : (h = e.ownerDocument) ? h.defaultView || h.parentWindow : window;

            if (k) {
              if (x = c.relatedTarget || c.toElement, k = d, x = x ? wc(x) : null, null !== x && (z = Zb(x), x !== z || 5 !== x.tag && 6 !== x.tag)) x = null;
            } else k = null, x = d;

            if (k !== x) {
              w = Bd;
              v = "onMouseLeave";
              u = "onMouseEnter";
              t = "mouse";
              if ("pointerout" === a || "pointerover" === a) w = Td, v = "onPointerLeave", u = "onPointerEnter", t = "pointer";
              z = null == k ? h : ue(k);
              q = null == x ? h : ue(x);
              h = new w(v, t + "leave", k, c, e);
              h.target = z;
              h.relatedTarget = q;
              v = null;
              wc(e) === d && (w = new w(u, t + "enter", x, c, e), w.target = q, w.relatedTarget = z, v = w);
              z = v;
              if (k && x) b: {
                w = k;
                u = x;
                t = 0;

                for (q = w; q; q = gf(q)) {
                  t++;
                }

                q = 0;

                for (v = u; v; v = gf(v)) {
                  q++;
                }

                for (; 0 < t - q;) {
                  w = gf(w), t--;
                }

                for (; 0 < q - t;) {
                  u = gf(u), q--;
                }

                for (; t--;) {
                  if (w === u || null !== u && w === u.alternate) break b;
                  w = gf(w);
                  u = gf(u);
                }

                w = null;
              } else w = null;
              null !== k && hf(g, h, k, w, !1);
              null !== x && null !== z && hf(g, z, x, w, !0);
            }
          }
        }

        a: {
          h = d ? ue(d) : window;
          k = h.nodeName && h.nodeName.toLowerCase();
          if ("select" === k || "input" === k && "file" === h.type) var J = ve;else if (me(h)) {
            if (we) J = Fe;else {
              J = De;
              var K = Ce;
            }
          } else (k = h.nodeName) && "input" === k.toLowerCase() && ("checkbox" === h.type || "radio" === h.type) && (J = Ee);

          if (J && (J = J(a, d))) {
            ne(g, J, c, e);
            break a;
          }

          K && K(a, h, d);
          "focusout" === a && (K = h._wrapperState) && K.controlled && "number" === h.type && bb(h, "number", h.value);
        }

        K = d ? ue(d) : window;

        switch (a) {
          case "focusin":
            if (me(K) || "true" === K.contentEditable) Qe = K, Re = d, Se = null;
            break;

          case "focusout":
            Se = Re = Qe = null;
            break;

          case "mousedown":
            Te = !0;
            break;

          case "contextmenu":
          case "mouseup":
          case "dragend":
            Te = !1;
            Ue(g, c, e);
            break;

          case "selectionchange":
            if (Pe) break;

          case "keydown":
          case "keyup":
            Ue(g, c, e);
        }

        var Q;
        if (ae) b: {
          switch (a) {
            case "compositionstart":
              var L = "onCompositionStart";
              break b;

            case "compositionend":
              L = "onCompositionEnd";
              break b;

            case "compositionupdate":
              L = "onCompositionUpdate";
              break b;
          }

          L = void 0;
        } else ie ? ge(a, c) && (L = "onCompositionEnd") : "keydown" === a && 229 === c.keyCode && (L = "onCompositionStart");
        L && (de && "ko" !== c.locale && (ie || "onCompositionStart" !== L ? "onCompositionEnd" === L && ie && (Q = nd()) : (kd = e, ld = "value" in kd ? kd.value : kd.textContent, ie = !0)), K = oe(d, L), 0 < K.length && (L = new Ld(L, a, null, c, e), g.push({
          event: L,
          listeners: K
        }), Q ? L.data = Q : (Q = he(c), null !== Q && (L.data = Q))));
        if (Q = ce ? je(a, c) : ke(a, c)) d = oe(d, "onBeforeInput"), 0 < d.length && (e = new Ld("onBeforeInput", "beforeinput", null, c, e), g.push({
          event: e,
          listeners: d
        }), e.data = Q);
      }

      se(g, b);
    });
  }

  function ef(a, b, c) {
    return {
      instance: a,
      listener: b,
      currentTarget: c
    };
  }

  function oe(a, b) {
    for (var c = b + "Capture", d = []; null !== a;) {
      var e = a,
          f = e.stateNode;
      5 === e.tag && null !== f && (e = f, f = Ob(a, c), null != f && d.unshift(ef(a, f, e)), f = Ob(a, b), null != f && d.push(ef(a, f, e)));
      a = a["return"];
    }

    return d;
  }

  function gf(a) {
    if (null === a) return null;

    do {
      a = a["return"];
    } while (a && 5 !== a.tag);

    return a ? a : null;
  }

  function hf(a, b, c, d, e) {
    for (var f = b._reactName, g = []; null !== c && c !== d;) {
      var h = c,
          k = h.alternate,
          l = h.stateNode;
      if (null !== k && k === d) break;
      5 === h.tag && null !== l && (h = l, e ? (k = Ob(c, f), null != k && g.unshift(ef(c, k, h))) : e || (k = Ob(c, f), null != k && g.push(ef(c, k, h))));
      c = c["return"];
    }

    0 !== g.length && a.push({
      event: b,
      listeners: g
    });
  }

  function jf() {}

  var kf = null,
      lf = null;

  function mf(a, b) {
    switch (a) {
      case "button":
      case "input":
      case "select":
      case "textarea":
        return !!b.autoFocus;
    }

    return !1;
  }

  function nf(a, b) {
    return "textarea" === a || "option" === a || "noscript" === a || "string" === typeof b.children || "number" === typeof b.children || "object" === _typeof(b.dangerouslySetInnerHTML) && null !== b.dangerouslySetInnerHTML && null != b.dangerouslySetInnerHTML.__html;
  }

  var of = "function" === typeof setTimeout ? setTimeout : void 0,
      pf = "function" === typeof clearTimeout ? clearTimeout : void 0;

  function qf(a) {
    1 === a.nodeType ? a.textContent = "" : 9 === a.nodeType && (a = a.body, null != a && (a.textContent = ""));
  }

  function rf(a) {
    for (; null != a; a = a.nextSibling) {
      var b = a.nodeType;
      if (1 === b || 3 === b) break;
    }

    return a;
  }

  function sf(a) {
    a = a.previousSibling;

    for (var b = 0; a;) {
      if (8 === a.nodeType) {
        var c = a.data;

        if ("$" === c || "$!" === c || "$?" === c) {
          if (0 === b) return a;
          b--;
        } else "/$" === c && b++;
      }

      a = a.previousSibling;
    }

    return null;
  }

  var tf = 0;

  function uf(a) {
    return {
      $$typeof: Ga,
      toString: a,
      valueOf: a
    };
  }

  var vf = Math.random().toString(36).slice(2),
      wf = "__reactFiber$" + vf,
      xf = "__reactProps$" + vf,
      ff = "__reactContainer$" + vf,
      yf = "__reactEvents$" + vf;

  function wc(a) {
    var b = a[wf];
    if (b) return b;

    for (var c = a.parentNode; c;) {
      if (b = c[ff] || c[wf]) {
        c = b.alternate;
        if (null !== b.child || null !== c && null !== c.child) for (a = sf(a); null !== a;) {
          if (c = a[wf]) return c;
          a = sf(a);
        }
        return b;
      }

      a = c;
      c = a.parentNode;
    }

    return null;
  }

  function Cb(a) {
    a = a[wf] || a[ff];
    return !a || 5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag ? null : a;
  }

  function ue(a) {
    if (5 === a.tag || 6 === a.tag) return a.stateNode;
    throw Error(y$4(33));
  }

  function Db(a) {
    return a[xf] || null;
  }

  function $e(a) {
    var b = a[yf];
    void 0 === b && (b = a[yf] = new Set());
    return b;
  }

  var zf = [],
      Af = -1;

  function Bf(a) {
    return {
      current: a
    };
  }

  function H$2(a) {
    0 > Af || (a.current = zf[Af], zf[Af] = null, Af--);
  }

  function I$2(a, b) {
    Af++;
    zf[Af] = a.current;
    a.current = b;
  }

  var Cf = {},
      M = Bf(Cf),
      N = Bf(!1),
      Df = Cf;

  function Ef(a, b) {
    var c = a.type.contextTypes;
    if (!c) return Cf;
    var d = a.stateNode;
    if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;
    var e = {},
        f;

    for (f in c) {
      e[f] = b[f];
    }

    d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);
    return e;
  }

  function Ff(a) {
    a = a.childContextTypes;
    return null !== a && void 0 !== a;
  }

  function Gf() {
    H$2(N);
    H$2(M);
  }

  function Hf(a, b, c) {
    if (M.current !== Cf) throw Error(y$4(168));
    I$2(M, b);
    I$2(N, c);
  }

  function If(a, b, c) {
    var d = a.stateNode;
    a = b.childContextTypes;
    if ("function" !== typeof d.getChildContext) return c;
    d = d.getChildContext();

    for (var e in d) {
      if (!(e in a)) throw Error(y$4(108, Ra(b) || "Unknown", e));
    }

    return m$5({}, c, d);
  }

  function Jf(a) {
    a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Cf;
    Df = M.current;
    I$2(M, a);
    I$2(N, N.current);
    return !0;
  }

  function Kf(a, b, c) {
    var d = a.stateNode;
    if (!d) throw Error(y$4(169));
    c ? (a = If(a, b, Df), d.__reactInternalMemoizedMergedChildContext = a, H$2(N), H$2(M), I$2(M, a)) : H$2(N);
    I$2(N, c);
  }

  var Lf = null,
      Mf = null,
      Nf = r$5.unstable_runWithPriority,
      Of = r$5.unstable_scheduleCallback,
      Pf = r$5.unstable_cancelCallback,
      Qf = r$5.unstable_shouldYield,
      Rf = r$5.unstable_requestPaint,
      Sf = r$5.unstable_now,
      Tf = r$5.unstable_getCurrentPriorityLevel,
      Uf = r$5.unstable_ImmediatePriority,
      Vf = r$5.unstable_UserBlockingPriority,
      Wf = r$5.unstable_NormalPriority,
      Xf = r$5.unstable_LowPriority,
      Yf = r$5.unstable_IdlePriority,
      Zf = {},
      $f = void 0 !== Rf ? Rf : function () {},
      ag = null,
      bg = null,
      cg = !1,
      dg = Sf(),
      O = 1E4 > dg ? Sf : function () {
    return Sf() - dg;
  };

  function eg() {
    switch (Tf()) {
      case Uf:
        return 99;

      case Vf:
        return 98;

      case Wf:
        return 97;

      case Xf:
        return 96;

      case Yf:
        return 95;

      default:
        throw Error(y$4(332));
    }
  }

  function fg(a) {
    switch (a) {
      case 99:
        return Uf;

      case 98:
        return Vf;

      case 97:
        return Wf;

      case 96:
        return Xf;

      case 95:
        return Yf;

      default:
        throw Error(y$4(332));
    }
  }

  function gg(a, b) {
    a = fg(a);
    return Nf(a, b);
  }

  function hg(a, b, c) {
    a = fg(a);
    return Of(a, b, c);
  }

  function ig() {
    if (null !== bg) {
      var a = bg;
      bg = null;
      Pf(a);
    }

    jg();
  }

  function jg() {
    if (!cg && null !== ag) {
      cg = !0;
      var a = 0;

      try {
        var b = ag;
        gg(99, function () {
          for (; a < b.length; a++) {
            var c = b[a];

            do {
              c = c(!0);
            } while (null !== c);
          }
        });
        ag = null;
      } catch (c) {
        throw null !== ag && (ag = ag.slice(a + 1)), Of(Uf, ig), c;
      } finally {
        cg = !1;
      }
    }
  }

  var kg = ra.ReactCurrentBatchConfig;

  function lg(a, b) {
    if (a && a.defaultProps) {
      b = m$5({}, b);
      a = a.defaultProps;

      for (var c in a) {
        void 0 === b[c] && (b[c] = a[c]);
      }

      return b;
    }

    return b;
  }

  var mg = Bf(null),
      ng = null,
      og = null,
      pg = null;

  function qg() {
    pg = og = ng = null;
  }

  function rg(a) {
    var b = mg.current;
    H$2(mg);
    a.type._context._currentValue = b;
  }

  function sg(a, b) {
    for (; null !== a;) {
      var c = a.alternate;
      if ((a.childLanes & b) === b) {
        if (null === c || (c.childLanes & b) === b) break;else c.childLanes |= b;
      } else a.childLanes |= b, null !== c && (c.childLanes |= b);
      a = a["return"];
    }
  }

  function tg(a, b) {
    ng = a;
    pg = og = null;
    a = a.dependencies;
    null !== a && null !== a.firstContext && (0 !== (a.lanes & b) && (ug = !0), a.firstContext = null);
  }

  function vg(a, b) {
    if (pg !== a && !1 !== b && 0 !== b) {
      if ("number" !== typeof b || 1073741823 === b) pg = a, b = 1073741823;
      b = {
        context: a,
        observedBits: b,
        next: null
      };

      if (null === og) {
        if (null === ng) throw Error(y$4(308));
        og = b;
        ng.dependencies = {
          lanes: 0,
          firstContext: b,
          responders: null
        };
      } else og = og.next = b;
    }

    return a._currentValue;
  }

  var wg = !1;

  function xg(a) {
    a.updateQueue = {
      baseState: a.memoizedState,
      firstBaseUpdate: null,
      lastBaseUpdate: null,
      shared: {
        pending: null
      },
      effects: null
    };
  }

  function yg(a, b) {
    a = a.updateQueue;
    b.updateQueue === a && (b.updateQueue = {
      baseState: a.baseState,
      firstBaseUpdate: a.firstBaseUpdate,
      lastBaseUpdate: a.lastBaseUpdate,
      shared: a.shared,
      effects: a.effects
    });
  }

  function zg(a, b) {
    return {
      eventTime: a,
      lane: b,
      tag: 0,
      payload: null,
      callback: null,
      next: null
    };
  }

  function Ag(a, b) {
    a = a.updateQueue;

    if (null !== a) {
      a = a.shared;
      var c = a.pending;
      null === c ? b.next = b : (b.next = c.next, c.next = b);
      a.pending = b;
    }
  }

  function Bg(a, b) {
    var c = a.updateQueue,
        d = a.alternate;

    if (null !== d && (d = d.updateQueue, c === d)) {
      var e = null,
          f = null;
      c = c.firstBaseUpdate;

      if (null !== c) {
        do {
          var g = {
            eventTime: c.eventTime,
            lane: c.lane,
            tag: c.tag,
            payload: c.payload,
            callback: c.callback,
            next: null
          };
          null === f ? e = f = g : f = f.next = g;
          c = c.next;
        } while (null !== c);

        null === f ? e = f = b : f = f.next = b;
      } else e = f = b;

      c = {
        baseState: d.baseState,
        firstBaseUpdate: e,
        lastBaseUpdate: f,
        shared: d.shared,
        effects: d.effects
      };
      a.updateQueue = c;
      return;
    }

    a = c.lastBaseUpdate;
    null === a ? c.firstBaseUpdate = b : a.next = b;
    c.lastBaseUpdate = b;
  }

  function Cg(a, b, c, d) {
    var e = a.updateQueue;
    wg = !1;
    var f = e.firstBaseUpdate,
        g = e.lastBaseUpdate,
        h = e.shared.pending;

    if (null !== h) {
      e.shared.pending = null;
      var k = h,
          l = k.next;
      k.next = null;
      null === g ? f = l : g.next = l;
      g = k;
      var n = a.alternate;

      if (null !== n) {
        n = n.updateQueue;
        var A = n.lastBaseUpdate;
        A !== g && (null === A ? n.firstBaseUpdate = l : A.next = l, n.lastBaseUpdate = k);
      }
    }

    if (null !== f) {
      A = e.baseState;
      g = 0;
      n = l = k = null;

      do {
        h = f.lane;
        var p = f.eventTime;

        if ((d & h) === h) {
          null !== n && (n = n.next = {
            eventTime: p,
            lane: 0,
            tag: f.tag,
            payload: f.payload,
            callback: f.callback,
            next: null
          });

          a: {
            var C = a,
                x = f;
            h = b;
            p = c;

            switch (x.tag) {
              case 1:
                C = x.payload;

                if ("function" === typeof C) {
                  A = C.call(p, A, h);
                  break a;
                }

                A = C;
                break a;

              case 3:
                C.flags = C.flags & -4097 | 64;

              case 0:
                C = x.payload;
                h = "function" === typeof C ? C.call(p, A, h) : C;
                if (null === h || void 0 === h) break a;
                A = m$5({}, A, h);
                break a;

              case 2:
                wg = !0;
            }
          }

          null !== f.callback && (a.flags |= 32, h = e.effects, null === h ? e.effects = [f] : h.push(f));
        } else p = {
          eventTime: p,
          lane: h,
          tag: f.tag,
          payload: f.payload,
          callback: f.callback,
          next: null
        }, null === n ? (l = n = p, k = A) : n = n.next = p, g |= h;

        f = f.next;
        if (null === f) if (h = e.shared.pending, null === h) break;else f = h.next, h.next = null, e.lastBaseUpdate = h, e.shared.pending = null;
      } while (1);

      null === n && (k = A);
      e.baseState = k;
      e.firstBaseUpdate = l;
      e.lastBaseUpdate = n;
      Dg |= g;
      a.lanes = g;
      a.memoizedState = A;
    }
  }

  function Eg(a, b, c) {
    a = b.effects;
    b.effects = null;
    if (null !== a) for (b = 0; b < a.length; b++) {
      var d = a[b],
          e = d.callback;

      if (null !== e) {
        d.callback = null;
        d = c;
        if ("function" !== typeof e) throw Error(y$4(191, e));
        e.call(d);
      }
    }
  }

  var Fg = new aa.Component().refs;

  function Gg(a, b, c, d) {
    b = a.memoizedState;
    c = c(d, b);
    c = null === c || void 0 === c ? b : m$5({}, b, c);
    a.memoizedState = c;
    0 === a.lanes && (a.updateQueue.baseState = c);
  }

  var Kg = {
    isMounted: function isMounted(a) {
      return (a = a._reactInternals) ? Zb(a) === a : !1;
    },
    enqueueSetState: function enqueueSetState(a, b, c) {
      a = a._reactInternals;
      var d = Hg(),
          e = Ig(a),
          f = zg(d, e);
      f.payload = b;
      void 0 !== c && null !== c && (f.callback = c);
      Ag(a, f);
      Jg(a, e, d);
    },
    enqueueReplaceState: function enqueueReplaceState(a, b, c) {
      a = a._reactInternals;
      var d = Hg(),
          e = Ig(a),
          f = zg(d, e);
      f.tag = 1;
      f.payload = b;
      void 0 !== c && null !== c && (f.callback = c);
      Ag(a, f);
      Jg(a, e, d);
    },
    enqueueForceUpdate: function enqueueForceUpdate(a, b) {
      a = a._reactInternals;
      var c = Hg(),
          d = Ig(a),
          e = zg(c, d);
      e.tag = 2;
      void 0 !== b && null !== b && (e.callback = b);
      Ag(a, e);
      Jg(a, d, c);
    }
  };

  function Lg(a, b, c, d, e, f, g) {
    a = a.stateNode;
    return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !Je(c, d) || !Je(e, f) : !0;
  }

  function Mg(a, b, c) {
    var d = !1,
        e = Cf;
    var f = b.contextType;
    "object" === _typeof(f) && null !== f ? f = vg(f) : (e = Ff(b) ? Df : M.current, d = b.contextTypes, f = (d = null !== d && void 0 !== d) ? Ef(a, e) : Cf);
    b = new b(c, f);
    a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;
    b.updater = Kg;
    a.stateNode = b;
    b._reactInternals = a;
    d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f);
    return b;
  }

  function Ng(a, b, c, d) {
    a = b.state;
    "function" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);
    "function" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);
    b.state !== a && Kg.enqueueReplaceState(b, b.state, null);
  }

  function Og(a, b, c, d) {
    var e = a.stateNode;
    e.props = c;
    e.state = a.memoizedState;
    e.refs = Fg;
    xg(a);
    var f = b.contextType;
    "object" === _typeof(f) && null !== f ? e.context = vg(f) : (f = Ff(b) ? Df : M.current, e.context = Ef(a, f));
    Cg(a, c, e, d);
    e.state = a.memoizedState;
    f = b.getDerivedStateFromProps;
    "function" === typeof f && (Gg(a, b, f, c), e.state = a.memoizedState);
    "function" === typeof b.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && Kg.enqueueReplaceState(e, e.state, null), Cg(a, c, e, d), e.state = a.memoizedState);
    "function" === typeof e.componentDidMount && (a.flags |= 4);
  }

  var Pg = Array.isArray;

  function Qg(a, b, c) {
    a = c.ref;

    if (null !== a && "function" !== typeof a && "object" !== _typeof(a)) {
      if (c._owner) {
        c = c._owner;

        if (c) {
          if (1 !== c.tag) throw Error(y$4(309));
          var d = c.stateNode;
        }

        if (!d) throw Error(y$4(147, a));
        var e = "" + a;
        if (null !== b && null !== b.ref && "function" === typeof b.ref && b.ref._stringRef === e) return b.ref;

        b = function b(a) {
          var b = d.refs;
          b === Fg && (b = d.refs = {});
          null === a ? delete b[e] : b[e] = a;
        };

        b._stringRef = e;
        return b;
      }

      if ("string" !== typeof a) throw Error(y$4(284));
      if (!c._owner) throw Error(y$4(290, a));
    }

    return a;
  }

  function Rg(a, b) {
    if ("textarea" !== a.type) throw Error(y$4(31, "[object Object]" === Object.prototype.toString.call(b) ? "object with keys {" + Object.keys(b).join(", ") + "}" : b));
  }

  function Sg(a) {
    function b(b, c) {
      if (a) {
        var d = b.lastEffect;
        null !== d ? (d.nextEffect = c, b.lastEffect = c) : b.firstEffect = b.lastEffect = c;
        c.nextEffect = null;
        c.flags = 8;
      }
    }

    function c(c, d) {
      if (!a) return null;

      for (; null !== d;) {
        b(c, d), d = d.sibling;
      }

      return null;
    }

    function d(a, b) {
      for (a = new Map(); null !== b;) {
        null !== b.key ? a.set(b.key, b) : a.set(b.index, b), b = b.sibling;
      }

      return a;
    }

    function e(a, b) {
      a = Tg(a, b);
      a.index = 0;
      a.sibling = null;
      return a;
    }

    function f(b, c, d) {
      b.index = d;
      if (!a) return c;
      d = b.alternate;
      if (null !== d) return d = d.index, d < c ? (b.flags = 2, c) : d;
      b.flags = 2;
      return c;
    }

    function g(b) {
      a && null === b.alternate && (b.flags = 2);
      return b;
    }

    function h(a, b, c, d) {
      if (null === b || 6 !== b.tag) return b = Ug(c, a.mode, d), b["return"] = a, b;
      b = e(b, c);
      b["return"] = a;
      return b;
    }

    function k(a, b, c, d) {
      if (null !== b && b.elementType === c.type) return d = e(b, c.props), d.ref = Qg(a, b, c), d["return"] = a, d;
      d = Vg(c.type, c.key, c.props, null, a.mode, d);
      d.ref = Qg(a, b, c);
      d["return"] = a;
      return d;
    }

    function l(a, b, c, d) {
      if (null === b || 4 !== b.tag || b.stateNode.containerInfo !== c.containerInfo || b.stateNode.implementation !== c.implementation) return b = Wg(c, a.mode, d), b["return"] = a, b;
      b = e(b, c.children || []);
      b["return"] = a;
      return b;
    }

    function n(a, b, c, d, f) {
      if (null === b || 7 !== b.tag) return b = Xg(c, a.mode, d, f), b["return"] = a, b;
      b = e(b, c);
      b["return"] = a;
      return b;
    }

    function A(a, b, c) {
      if ("string" === typeof b || "number" === typeof b) return b = Ug("" + b, a.mode, c), b["return"] = a, b;

      if ("object" === _typeof(b) && null !== b) {
        switch (b.$$typeof) {
          case sa:
            return c = Vg(b.type, b.key, b.props, null, a.mode, c), c.ref = Qg(a, null, b), c["return"] = a, c;

          case ta:
            return b = Wg(b, a.mode, c), b["return"] = a, b;
        }

        if (Pg(b) || La(b)) return b = Xg(b, a.mode, c, null), b["return"] = a, b;
        Rg(a, b);
      }

      return null;
    }

    function p(a, b, c, d) {
      var e = null !== b ? b.key : null;
      if ("string" === typeof c || "number" === typeof c) return null !== e ? null : h(a, b, "" + c, d);

      if ("object" === _typeof(c) && null !== c) {
        switch (c.$$typeof) {
          case sa:
            return c.key === e ? c.type === ua ? n(a, b, c.props.children, d, e) : k(a, b, c, d) : null;

          case ta:
            return c.key === e ? l(a, b, c, d) : null;
        }

        if (Pg(c) || La(c)) return null !== e ? null : n(a, b, c, d, null);
        Rg(a, c);
      }

      return null;
    }

    function C(a, b, c, d, e) {
      if ("string" === typeof d || "number" === typeof d) return a = a.get(c) || null, h(b, a, "" + d, e);

      if ("object" === _typeof(d) && null !== d) {
        switch (d.$$typeof) {
          case sa:
            return a = a.get(null === d.key ? c : d.key) || null, d.type === ua ? n(b, a, d.props.children, e, d.key) : k(b, a, d, e);

          case ta:
            return a = a.get(null === d.key ? c : d.key) || null, l(b, a, d, e);
        }

        if (Pg(d) || La(d)) return a = a.get(c) || null, n(b, a, d, e, null);
        Rg(b, d);
      }

      return null;
    }

    function x(e, g, h, k) {
      for (var l = null, t = null, u = g, z = g = 0, q = null; null !== u && z < h.length; z++) {
        u.index > z ? (q = u, u = null) : q = u.sibling;
        var n = p(e, u, h[z], k);

        if (null === n) {
          null === u && (u = q);
          break;
        }

        a && u && null === n.alternate && b(e, u);
        g = f(n, g, z);
        null === t ? l = n : t.sibling = n;
        t = n;
        u = q;
      }

      if (z === h.length) return c(e, u), l;

      if (null === u) {
        for (; z < h.length; z++) {
          u = A(e, h[z], k), null !== u && (g = f(u, g, z), null === t ? l = u : t.sibling = u, t = u);
        }

        return l;
      }

      for (u = d(e, u); z < h.length; z++) {
        q = C(u, e, z, h[z], k), null !== q && (a && null !== q.alternate && u["delete"](null === q.key ? z : q.key), g = f(q, g, z), null === t ? l = q : t.sibling = q, t = q);
      }

      a && u.forEach(function (a) {
        return b(e, a);
      });
      return l;
    }

    function w(e, g, h, k) {
      var l = La(h);
      if ("function" !== typeof l) throw Error(y$4(150));
      h = l.call(h);
      if (null == h) throw Error(y$4(151));

      for (var t = l = null, u = g, z = g = 0, q = null, n = h.next(); null !== u && !n.done; z++, n = h.next()) {
        u.index > z ? (q = u, u = null) : q = u.sibling;
        var w = p(e, u, n.value, k);

        if (null === w) {
          null === u && (u = q);
          break;
        }

        a && u && null === w.alternate && b(e, u);
        g = f(w, g, z);
        null === t ? l = w : t.sibling = w;
        t = w;
        u = q;
      }

      if (n.done) return c(e, u), l;

      if (null === u) {
        for (; !n.done; z++, n = h.next()) {
          n = A(e, n.value, k), null !== n && (g = f(n, g, z), null === t ? l = n : t.sibling = n, t = n);
        }

        return l;
      }

      for (u = d(e, u); !n.done; z++, n = h.next()) {
        n = C(u, e, z, n.value, k), null !== n && (a && null !== n.alternate && u["delete"](null === n.key ? z : n.key), g = f(n, g, z), null === t ? l = n : t.sibling = n, t = n);
      }

      a && u.forEach(function (a) {
        return b(e, a);
      });
      return l;
    }

    return function (a, d, f, h) {
      var k = "object" === _typeof(f) && null !== f && f.type === ua && null === f.key;
      k && (f = f.props.children);
      var l = "object" === _typeof(f) && null !== f;
      if (l) switch (f.$$typeof) {
        case sa:
          a: {
            l = f.key;

            for (k = d; null !== k;) {
              if (k.key === l) {
                switch (k.tag) {
                  case 7:
                    if (f.type === ua) {
                      c(a, k.sibling);
                      d = e(k, f.props.children);
                      d["return"] = a;
                      a = d;
                      break a;
                    }

                    break;

                  default:
                    if (k.elementType === f.type) {
                      c(a, k.sibling);
                      d = e(k, f.props);
                      d.ref = Qg(a, k, f);
                      d["return"] = a;
                      a = d;
                      break a;
                    }

                }

                c(a, k);
                break;
              } else b(a, k);

              k = k.sibling;
            }

            f.type === ua ? (d = Xg(f.props.children, a.mode, h, f.key), d["return"] = a, a = d) : (h = Vg(f.type, f.key, f.props, null, a.mode, h), h.ref = Qg(a, d, f), h["return"] = a, a = h);
          }

          return g(a);

        case ta:
          a: {
            for (k = f.key; null !== d;) {
              if (d.key === k) {
                if (4 === d.tag && d.stateNode.containerInfo === f.containerInfo && d.stateNode.implementation === f.implementation) {
                  c(a, d.sibling);
                  d = e(d, f.children || []);
                  d["return"] = a;
                  a = d;
                  break a;
                } else {
                  c(a, d);
                  break;
                }
              } else b(a, d);
              d = d.sibling;
            }

            d = Wg(f, a.mode, h);
            d["return"] = a;
            a = d;
          }

          return g(a);
      }
      if ("string" === typeof f || "number" === typeof f) return f = "" + f, null !== d && 6 === d.tag ? (c(a, d.sibling), d = e(d, f), d["return"] = a, a = d) : (c(a, d), d = Ug(f, a.mode, h), d["return"] = a, a = d), g(a);
      if (Pg(f)) return x(a, d, f, h);
      if (La(f)) return w(a, d, f, h);
      l && Rg(a, f);
      if ("undefined" === typeof f && !k) switch (a.tag) {
        case 1:
        case 22:
        case 0:
        case 11:
        case 15:
          throw Error(y$4(152, Ra(a.type) || "Component"));
      }
      return c(a, d);
    };
  }

  var Yg = Sg(!0),
      Zg = Sg(!1),
      $g = {},
      ah = Bf($g),
      bh = Bf($g),
      ch = Bf($g);

  function dh(a) {
    if (a === $g) throw Error(y$4(174));
    return a;
  }

  function eh(a, b) {
    I$2(ch, b);
    I$2(bh, a);
    I$2(ah, $g);
    a = b.nodeType;

    switch (a) {
      case 9:
      case 11:
        b = (b = b.documentElement) ? b.namespaceURI : mb(null, "");
        break;

      default:
        a = 8 === a ? b.parentNode : b, b = a.namespaceURI || null, a = a.tagName, b = mb(b, a);
    }

    H$2(ah);
    I$2(ah, b);
  }

  function fh() {
    H$2(ah);
    H$2(bh);
    H$2(ch);
  }

  function gh(a) {
    dh(ch.current);
    var b = dh(ah.current);
    var c = mb(b, a.type);
    b !== c && (I$2(bh, a), I$2(ah, c));
  }

  function hh(a) {
    bh.current === a && (H$2(ah), H$2(bh));
  }

  var P = Bf(0);

  function ih(a) {
    for (var b = a; null !== b;) {
      if (13 === b.tag) {
        var c = b.memoizedState;
        if (null !== c && (c = c.dehydrated, null === c || "$?" === c.data || "$!" === c.data)) return b;
      } else if (19 === b.tag && void 0 !== b.memoizedProps.revealOrder) {
        if (0 !== (b.flags & 64)) return b;
      } else if (null !== b.child) {
        b.child["return"] = b;
        b = b.child;
        continue;
      }

      if (b === a) break;

      for (; null === b.sibling;) {
        if (null === b["return"] || b["return"] === a) return null;
        b = b["return"];
      }

      b.sibling["return"] = b["return"];
      b = b.sibling;
    }

    return null;
  }

  var jh = null,
      kh = null,
      lh = !1;

  function mh(a, b) {
    var c = nh(5, null, null, 0);
    c.elementType = "DELETED";
    c.type = "DELETED";
    c.stateNode = b;
    c["return"] = a;
    c.flags = 8;
    null !== a.lastEffect ? (a.lastEffect.nextEffect = c, a.lastEffect = c) : a.firstEffect = a.lastEffect = c;
  }

  function oh(a, b) {
    switch (a.tag) {
      case 5:
        var c = a.type;
        b = 1 !== b.nodeType || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b;
        return null !== b ? (a.stateNode = b, !0) : !1;

      case 6:
        return b = "" === a.pendingProps || 3 !== b.nodeType ? null : b, null !== b ? (a.stateNode = b, !0) : !1;

      case 13:
        return !1;

      default:
        return !1;
    }
  }

  function ph(a) {
    if (lh) {
      var b = kh;

      if (b) {
        var c = b;

        if (!oh(a, b)) {
          b = rf(c.nextSibling);

          if (!b || !oh(a, b)) {
            a.flags = a.flags & -1025 | 2;
            lh = !1;
            jh = a;
            return;
          }

          mh(jh, c);
        }

        jh = a;
        kh = rf(b.firstChild);
      } else a.flags = a.flags & -1025 | 2, lh = !1, jh = a;
    }
  }

  function qh(a) {
    for (a = a["return"]; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag;) {
      a = a["return"];
    }

    jh = a;
  }

  function rh$1(a) {
    if (a !== jh) return !1;
    if (!lh) return qh(a), lh = !0, !1;
    var b = a.type;
    if (5 !== a.tag || "head" !== b && "body" !== b && !nf(b, a.memoizedProps)) for (b = kh; b;) {
      mh(a, b), b = rf(b.nextSibling);
    }
    qh(a);

    if (13 === a.tag) {
      a = a.memoizedState;
      a = null !== a ? a.dehydrated : null;
      if (!a) throw Error(y$4(317));

      a: {
        a = a.nextSibling;

        for (b = 0; a;) {
          if (8 === a.nodeType) {
            var c = a.data;

            if ("/$" === c) {
              if (0 === b) {
                kh = rf(a.nextSibling);
                break a;
              }

              b--;
            } else "$" !== c && "$!" !== c && "$?" !== c || b++;
          }

          a = a.nextSibling;
        }

        kh = null;
      }
    } else kh = jh ? rf(a.stateNode.nextSibling) : null;

    return !0;
  }

  function sh$1() {
    kh = jh = null;
    lh = !1;
  }

  var th = [];

  function uh() {
    for (var a = 0; a < th.length; a++) {
      th[a]._workInProgressVersionPrimary = null;
    }

    th.length = 0;
  }

  var vh = ra.ReactCurrentDispatcher,
      wh = ra.ReactCurrentBatchConfig,
      xh = 0,
      R = null,
      S = null,
      T = null,
      yh = !1,
      zh = !1;

  function Ah() {
    throw Error(y$4(321));
  }

  function Bh(a, b) {
    if (null === b) return !1;

    for (var c = 0; c < b.length && c < a.length; c++) {
      if (!He(a[c], b[c])) return !1;
    }

    return !0;
  }

  function Ch(a, b, c, d, e, f) {
    xh = f;
    R = b;
    b.memoizedState = null;
    b.updateQueue = null;
    b.lanes = 0;
    vh.current = null === a || null === a.memoizedState ? Dh : Eh;
    a = c(d, e);

    if (zh) {
      f = 0;

      do {
        zh = !1;
        if (!(25 > f)) throw Error(y$4(301));
        f += 1;
        T = S = null;
        b.updateQueue = null;
        vh.current = Fh;
        a = c(d, e);
      } while (zh);
    }

    vh.current = Gh;
    b = null !== S && null !== S.next;
    xh = 0;
    T = S = R = null;
    yh = !1;
    if (b) throw Error(y$4(300));
    return a;
  }

  function Hh() {
    var a = {
      memoizedState: null,
      baseState: null,
      baseQueue: null,
      queue: null,
      next: null
    };
    null === T ? R.memoizedState = T = a : T = T.next = a;
    return T;
  }

  function Ih() {
    if (null === S) {
      var a = R.alternate;
      a = null !== a ? a.memoizedState : null;
    } else a = S.next;

    var b = null === T ? R.memoizedState : T.next;
    if (null !== b) T = b, S = a;else {
      if (null === a) throw Error(y$4(310));
      S = a;
      a = {
        memoizedState: S.memoizedState,
        baseState: S.baseState,
        baseQueue: S.baseQueue,
        queue: S.queue,
        next: null
      };
      null === T ? R.memoizedState = T = a : T = T.next = a;
    }
    return T;
  }

  function Jh(a, b) {
    return "function" === typeof b ? b(a) : b;
  }

  function Kh$1(a) {
    var b = Ih(),
        c = b.queue;
    if (null === c) throw Error(y$4(311));
    c.lastRenderedReducer = a;
    var d = S,
        e = d.baseQueue,
        f = c.pending;

    if (null !== f) {
      if (null !== e) {
        var g = e.next;
        e.next = f.next;
        f.next = g;
      }

      d.baseQueue = e = f;
      c.pending = null;
    }

    if (null !== e) {
      e = e.next;
      d = d.baseState;
      var h = g = f = null,
          k = e;

      do {
        var l = k.lane;
        if ((xh & l) === l) null !== h && (h = h.next = {
          lane: 0,
          action: k.action,
          eagerReducer: k.eagerReducer,
          eagerState: k.eagerState,
          next: null
        }), d = k.eagerReducer === a ? k.eagerState : a(d, k.action);else {
          var n = {
            lane: l,
            action: k.action,
            eagerReducer: k.eagerReducer,
            eagerState: k.eagerState,
            next: null
          };
          null === h ? (g = h = n, f = d) : h = h.next = n;
          R.lanes |= l;
          Dg |= l;
        }
        k = k.next;
      } while (null !== k && k !== e);

      null === h ? f = d : h.next = g;
      He(d, b.memoizedState) || (ug = !0);
      b.memoizedState = d;
      b.baseState = f;
      b.baseQueue = h;
      c.lastRenderedState = d;
    }

    return [b.memoizedState, c.dispatch];
  }

  function Lh(a) {
    var b = Ih(),
        c = b.queue;
    if (null === c) throw Error(y$4(311));
    c.lastRenderedReducer = a;
    var d = c.dispatch,
        e = c.pending,
        f = b.memoizedState;

    if (null !== e) {
      c.pending = null;
      var g = e = e.next;

      do {
        f = a(f, g.action), g = g.next;
      } while (g !== e);

      He(f, b.memoizedState) || (ug = !0);
      b.memoizedState = f;
      null === b.baseQueue && (b.baseState = f);
      c.lastRenderedState = f;
    }

    return [f, d];
  }

  function Mh(a, b, c) {
    var d = b._getVersion;
    d = d(b._source);
    var e = b._workInProgressVersionPrimary;
    if (null !== e) a = e === d;else if (a = a.mutableReadLanes, a = (xh & a) === a) b._workInProgressVersionPrimary = d, th.push(b);
    if (a) return c(b._source);
    th.push(b);
    throw Error(y$4(350));
  }

  function Nh(a, b, c, d) {
    var e = U;
    if (null === e) throw Error(y$4(349));
    var f = b._getVersion,
        g = f(b._source),
        h = vh.current,
        k = h.useState(function () {
      return Mh(e, b, c);
    }),
        l = k[1],
        n = k[0];
    k = T;
    var A = a.memoizedState,
        p = A.refs,
        C = p.getSnapshot,
        x = A.source;
    A = A.subscribe;
    var w = R;
    a.memoizedState = {
      refs: p,
      source: b,
      subscribe: d
    };
    h.useEffect(function () {
      p.getSnapshot = c;
      p.setSnapshot = l;
      var a = f(b._source);

      if (!He(g, a)) {
        a = c(b._source);
        He(n, a) || (l(a), a = Ig(w), e.mutableReadLanes |= a & e.pendingLanes);
        a = e.mutableReadLanes;
        e.entangledLanes |= a;

        for (var d = e.entanglements, h = a; 0 < h;) {
          var k = 31 - Vc(h),
              v = 1 << k;
          d[k] |= a;
          h &= ~v;
        }
      }
    }, [c, b, d]);
    h.useEffect(function () {
      return d(b._source, function () {
        var a = p.getSnapshot,
            c = p.setSnapshot;

        try {
          c(a(b._source));
          var d = Ig(w);
          e.mutableReadLanes |= d & e.pendingLanes;
        } catch (q) {
          c(function () {
            throw q;
          });
        }
      });
    }, [b, d]);
    He(C, c) && He(x, b) && He(A, d) || (a = {
      pending: null,
      dispatch: null,
      lastRenderedReducer: Jh,
      lastRenderedState: n
    }, a.dispatch = l = Oh.bind(null, R, a), k.queue = a, k.baseQueue = null, n = Mh(e, b, c), k.memoizedState = k.baseState = n);
    return n;
  }

  function Ph(a, b, c) {
    var d = Ih();
    return Nh(d, a, b, c);
  }

  function Qh(a) {
    var b = Hh();
    "function" === typeof a && (a = a());
    b.memoizedState = b.baseState = a;
    a = b.queue = {
      pending: null,
      dispatch: null,
      lastRenderedReducer: Jh,
      lastRenderedState: a
    };
    a = a.dispatch = Oh.bind(null, R, a);
    return [b.memoizedState, a];
  }

  function Rh(a, b, c, d) {
    a = {
      tag: a,
      create: b,
      destroy: c,
      deps: d,
      next: null
    };
    b = R.updateQueue;
    null === b ? (b = {
      lastEffect: null
    }, R.updateQueue = b, b.lastEffect = a.next = a) : (c = b.lastEffect, null === c ? b.lastEffect = a.next = a : (d = c.next, c.next = a, a.next = d, b.lastEffect = a));
    return a;
  }

  function Sh(a) {
    var b = Hh();
    a = {
      current: a
    };
    return b.memoizedState = a;
  }

  function Th() {
    return Ih().memoizedState;
  }

  function Uh(a, b, c, d) {
    var e = Hh();
    R.flags |= a;
    e.memoizedState = Rh(1 | b, c, void 0, void 0 === d ? null : d);
  }

  function Vh(a, b, c, d) {
    var e = Ih();
    d = void 0 === d ? null : d;
    var f = void 0;

    if (null !== S) {
      var g = S.memoizedState;
      f = g.destroy;

      if (null !== d && Bh(d, g.deps)) {
        Rh(b, c, f, d);
        return;
      }
    }

    R.flags |= a;
    e.memoizedState = Rh(1 | b, c, f, d);
  }

  function Wh(a, b) {
    return Uh(516, 4, a, b);
  }

  function Xh(a, b) {
    return Vh(516, 4, a, b);
  }

  function Yh(a, b) {
    return Vh(4, 2, a, b);
  }

  function Zh(a, b) {
    if ("function" === typeof b) return a = a(), b(a), function () {
      b(null);
    };
    if (null !== b && void 0 !== b) return a = a(), b.current = a, function () {
      b.current = null;
    };
  }

  function $h(a, b, c) {
    c = null !== c && void 0 !== c ? c.concat([a]) : null;
    return Vh(4, 2, Zh.bind(null, b, a), c);
  }

  function ai() {}

  function bi(a, b) {
    var c = Ih();
    b = void 0 === b ? null : b;
    var d = c.memoizedState;
    if (null !== d && null !== b && Bh(b, d[1])) return d[0];
    c.memoizedState = [a, b];
    return a;
  }

  function ci(a, b) {
    var c = Ih();
    b = void 0 === b ? null : b;
    var d = c.memoizedState;
    if (null !== d && null !== b && Bh(b, d[1])) return d[0];
    a = a();
    c.memoizedState = [a, b];
    return a;
  }

  function di(a, b) {
    var c = eg();
    gg(98 > c ? 98 : c, function () {
      a(!0);
    });
    gg(97 < c ? 97 : c, function () {
      var c = wh.transition;
      wh.transition = 1;

      try {
        a(!1), b();
      } finally {
        wh.transition = c;
      }
    });
  }

  function Oh(a, b, c) {
    var d = Hg(),
        e = Ig(a),
        f = {
      lane: e,
      action: c,
      eagerReducer: null,
      eagerState: null,
      next: null
    },
        g = b.pending;
    null === g ? f.next = f : (f.next = g.next, g.next = f);
    b.pending = f;
    g = a.alternate;
    if (a === R || null !== g && g === R) zh = yh = !0;else {
      if (0 === a.lanes && (null === g || 0 === g.lanes) && (g = b.lastRenderedReducer, null !== g)) try {
        var h = b.lastRenderedState,
            k = g(h, c);
        f.eagerReducer = g;
        f.eagerState = k;
        if (He(k, h)) return;
      } catch (l) {} finally {}
      Jg(a, e, d);
    }
  }

  var Gh = {
    readContext: vg,
    useCallback: Ah,
    useContext: Ah,
    useEffect: Ah,
    useImperativeHandle: Ah,
    useLayoutEffect: Ah,
    useMemo: Ah,
    useReducer: Ah,
    useRef: Ah,
    useState: Ah,
    useDebugValue: Ah,
    useDeferredValue: Ah,
    useTransition: Ah,
    useMutableSource: Ah,
    useOpaqueIdentifier: Ah,
    unstable_isNewReconciler: !1
  },
      Dh = {
    readContext: vg,
    useCallback: function useCallback(a, b) {
      Hh().memoizedState = [a, void 0 === b ? null : b];
      return a;
    },
    useContext: vg,
    useEffect: Wh,
    useImperativeHandle: function useImperativeHandle(a, b, c) {
      c = null !== c && void 0 !== c ? c.concat([a]) : null;
      return Uh(4, 2, Zh.bind(null, b, a), c);
    },
    useLayoutEffect: function useLayoutEffect(a, b) {
      return Uh(4, 2, a, b);
    },
    useMemo: function useMemo(a, b) {
      var c = Hh();
      b = void 0 === b ? null : b;
      a = a();
      c.memoizedState = [a, b];
      return a;
    },
    useReducer: function useReducer(a, b, c) {
      var d = Hh();
      b = void 0 !== c ? c(b) : b;
      d.memoizedState = d.baseState = b;
      a = d.queue = {
        pending: null,
        dispatch: null,
        lastRenderedReducer: a,
        lastRenderedState: b
      };
      a = a.dispatch = Oh.bind(null, R, a);
      return [d.memoizedState, a];
    },
    useRef: Sh,
    useState: Qh,
    useDebugValue: ai,
    useDeferredValue: function useDeferredValue(a) {
      var b = Qh(a),
          c = b[0],
          d = b[1];
      Wh(function () {
        var b = wh.transition;
        wh.transition = 1;

        try {
          d(a);
        } finally {
          wh.transition = b;
        }
      }, [a]);
      return c;
    },
    useTransition: function useTransition() {
      var a = Qh(!1),
          b = a[0];
      a = di.bind(null, a[1]);
      Sh(a);
      return [a, b];
    },
    useMutableSource: function useMutableSource(a, b, c) {
      var d = Hh();
      d.memoizedState = {
        refs: {
          getSnapshot: b,
          setSnapshot: null
        },
        source: a,
        subscribe: c
      };
      return Nh(d, a, b, c);
    },
    useOpaqueIdentifier: function useOpaqueIdentifier() {
      if (lh) {
        var a = !1,
            b = uf(function () {
          a || (a = !0, c("r:" + (tf++).toString(36)));
          throw Error(y$4(355));
        }),
            c = Qh(b)[1];
        0 === (R.mode & 2) && (R.flags |= 516, Rh(5, function () {
          c("r:" + (tf++).toString(36));
        }, void 0, null));
        return b;
      }

      b = "r:" + (tf++).toString(36);
      Qh(b);
      return b;
    },
    unstable_isNewReconciler: !1
  },
      Eh = {
    readContext: vg,
    useCallback: bi,
    useContext: vg,
    useEffect: Xh,
    useImperativeHandle: $h,
    useLayoutEffect: Yh,
    useMemo: ci,
    useReducer: Kh$1,
    useRef: Th,
    useState: function useState() {
      return Kh$1(Jh);
    },
    useDebugValue: ai,
    useDeferredValue: function useDeferredValue(a) {
      var b = Kh$1(Jh),
          c = b[0],
          d = b[1];
      Xh(function () {
        var b = wh.transition;
        wh.transition = 1;

        try {
          d(a);
        } finally {
          wh.transition = b;
        }
      }, [a]);
      return c;
    },
    useTransition: function useTransition() {
      var a = Kh$1(Jh)[0];
      return [Th().current, a];
    },
    useMutableSource: Ph,
    useOpaqueIdentifier: function useOpaqueIdentifier() {
      return Kh$1(Jh)[0];
    },
    unstable_isNewReconciler: !1
  },
      Fh = {
    readContext: vg,
    useCallback: bi,
    useContext: vg,
    useEffect: Xh,
    useImperativeHandle: $h,
    useLayoutEffect: Yh,
    useMemo: ci,
    useReducer: Lh,
    useRef: Th,
    useState: function useState() {
      return Lh(Jh);
    },
    useDebugValue: ai,
    useDeferredValue: function useDeferredValue(a) {
      var b = Lh(Jh),
          c = b[0],
          d = b[1];
      Xh(function () {
        var b = wh.transition;
        wh.transition = 1;

        try {
          d(a);
        } finally {
          wh.transition = b;
        }
      }, [a]);
      return c;
    },
    useTransition: function useTransition() {
      var a = Lh(Jh)[0];
      return [Th().current, a];
    },
    useMutableSource: Ph,
    useOpaqueIdentifier: function useOpaqueIdentifier() {
      return Lh(Jh)[0];
    },
    unstable_isNewReconciler: !1
  },
      ei = ra.ReactCurrentOwner,
      ug = !1;

  function fi(a, b, c, d) {
    b.child = null === a ? Zg(b, null, c, d) : Yg(b, a.child, c, d);
  }

  function gi(a, b, c, d, e) {
    c = c.render;
    var f = b.ref;
    tg(b, e);
    d = Ch(a, b, c, d, f, e);
    if (null !== a && !ug) return b.updateQueue = a.updateQueue, b.flags &= -517, a.lanes &= ~e, hi(a, b, e);
    b.flags |= 1;
    fi(a, b, d, e);
    return b.child;
  }

  function ii(a, b, c, d, e, f) {
    if (null === a) {
      var g = c.type;
      if ("function" === typeof g && !ji(g) && void 0 === g.defaultProps && null === c.compare && void 0 === c.defaultProps) return b.tag = 15, b.type = g, ki(a, b, g, d, e, f);
      a = Vg(c.type, null, d, b, b.mode, f);
      a.ref = b.ref;
      a["return"] = b;
      return b.child = a;
    }

    g = a.child;
    if (0 === (e & f) && (e = g.memoizedProps, c = c.compare, c = null !== c ? c : Je, c(e, d) && a.ref === b.ref)) return hi(a, b, f);
    b.flags |= 1;
    a = Tg(g, d);
    a.ref = b.ref;
    a["return"] = b;
    return b.child = a;
  }

  function ki(a, b, c, d, e, f) {
    if (null !== a && Je(a.memoizedProps, d) && a.ref === b.ref) if (ug = !1, 0 !== (f & e)) 0 !== (a.flags & 16384) && (ug = !0);else return b.lanes = a.lanes, hi(a, b, f);
    return li(a, b, c, d, f);
  }

  function mi(a, b, c) {
    var d = b.pendingProps,
        e = d.children,
        f = null !== a ? a.memoizedState : null;
    if ("hidden" === d.mode || "unstable-defer-without-hiding" === d.mode) {
      if (0 === (b.mode & 4)) b.memoizedState = {
        baseLanes: 0
      }, ni(b, c);else if (0 !== (c & 1073741824)) b.memoizedState = {
        baseLanes: 0
      }, ni(b, null !== f ? f.baseLanes : c);else return a = null !== f ? f.baseLanes | c : c, b.lanes = b.childLanes = 1073741824, b.memoizedState = {
        baseLanes: a
      }, ni(b, a), null;
    } else null !== f ? (d = f.baseLanes | c, b.memoizedState = null) : d = c, ni(b, d);
    fi(a, b, e, c);
    return b.child;
  }

  function oi(a, b) {
    var c = b.ref;
    if (null === a && null !== c || null !== a && a.ref !== c) b.flags |= 128;
  }

  function li(a, b, c, d, e) {
    var f = Ff(c) ? Df : M.current;
    f = Ef(b, f);
    tg(b, e);
    c = Ch(a, b, c, d, f, e);
    if (null !== a && !ug) return b.updateQueue = a.updateQueue, b.flags &= -517, a.lanes &= ~e, hi(a, b, e);
    b.flags |= 1;
    fi(a, b, c, e);
    return b.child;
  }

  function pi(a, b, c, d, e) {
    if (Ff(c)) {
      var f = !0;
      Jf(b);
    } else f = !1;

    tg(b, e);
    if (null === b.stateNode) null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2), Mg(b, c, d), Og(b, c, d, e), d = !0;else if (null === a) {
      var g = b.stateNode,
          h = b.memoizedProps;
      g.props = h;
      var k = g.context,
          l = c.contextType;
      "object" === _typeof(l) && null !== l ? l = vg(l) : (l = Ff(c) ? Df : M.current, l = Ef(b, l));
      var n = c.getDerivedStateFromProps,
          A = "function" === typeof n || "function" === typeof g.getSnapshotBeforeUpdate;
      A || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k !== l) && Ng(b, g, d, l);
      wg = !1;
      var p = b.memoizedState;
      g.state = p;
      Cg(b, d, g, e);
      k = b.memoizedState;
      h !== d || p !== k || N.current || wg ? ("function" === typeof n && (Gg(b, c, n, d), k = b.memoizedState), (h = wg || Lg(b, c, h, d, p, k, l)) ? (A || "function" !== typeof g.UNSAFE_componentWillMount && "function" !== typeof g.componentWillMount || ("function" === typeof g.componentWillMount && g.componentWillMount(), "function" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), "function" === typeof g.componentDidMount && (b.flags |= 4)) : ("function" === typeof g.componentDidMount && (b.flags |= 4), b.memoizedProps = d, b.memoizedState = k), g.props = d, g.state = k, g.context = l, d = h) : ("function" === typeof g.componentDidMount && (b.flags |= 4), d = !1);
    } else {
      g = b.stateNode;
      yg(a, b);
      h = b.memoizedProps;
      l = b.type === b.elementType ? h : lg(b.type, h);
      g.props = l;
      A = b.pendingProps;
      p = g.context;
      k = c.contextType;
      "object" === _typeof(k) && null !== k ? k = vg(k) : (k = Ff(c) ? Df : M.current, k = Ef(b, k));
      var C = c.getDerivedStateFromProps;
      (n = "function" === typeof C || "function" === typeof g.getSnapshotBeforeUpdate) || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== A || p !== k) && Ng(b, g, d, k);
      wg = !1;
      p = b.memoizedState;
      g.state = p;
      Cg(b, d, g, e);
      var x = b.memoizedState;
      h !== A || p !== x || N.current || wg ? ("function" === typeof C && (Gg(b, c, C, d), x = b.memoizedState), (l = wg || Lg(b, c, l, d, p, x, k)) ? (n || "function" !== typeof g.UNSAFE_componentWillUpdate && "function" !== typeof g.componentWillUpdate || ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(d, x, k), "function" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, x, k)), "function" === typeof g.componentDidUpdate && (b.flags |= 4), "function" === typeof g.getSnapshotBeforeUpdate && (b.flags |= 256)) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 256), b.memoizedProps = d, b.memoizedState = x), g.props = d, g.state = x, g.context = k, d = l) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 256), d = !1);
    }
    return qi(a, b, c, d, f, e);
  }

  function qi(a, b, c, d, e, f) {
    oi(a, b);
    var g = 0 !== (b.flags & 64);
    if (!d && !g) return e && Kf(b, c, !1), hi(a, b, f);
    d = b.stateNode;
    ei.current = b;
    var h = g && "function" !== typeof c.getDerivedStateFromError ? null : d.render();
    b.flags |= 1;
    null !== a && g ? (b.child = Yg(b, a.child, null, f), b.child = Yg(b, null, h, f)) : fi(a, b, h, f);
    b.memoizedState = d.state;
    e && Kf(b, c, !0);
    return b.child;
  }

  function ri(a) {
    var b = a.stateNode;
    b.pendingContext ? Hf(a, b.pendingContext, b.pendingContext !== b.context) : b.context && Hf(a, b.context, !1);
    eh(a, b.containerInfo);
  }

  var si = {
    dehydrated: null,
    retryLane: 0
  };

  function ti(a, b, c) {
    var d = b.pendingProps,
        e = P.current,
        f = !1,
        g;
    (g = 0 !== (b.flags & 64)) || (g = null !== a && null === a.memoizedState ? !1 : 0 !== (e & 2));
    g ? (f = !0, b.flags &= -65) : null !== a && null === a.memoizedState || void 0 === d.fallback || !0 === d.unstable_avoidThisFallback || (e |= 1);
    I$2(P, e & 1);

    if (null === a) {
      void 0 !== d.fallback && ph(b);
      a = d.children;
      e = d.fallback;
      if (f) return a = ui(b, a, e, c), b.child.memoizedState = {
        baseLanes: c
      }, b.memoizedState = si, a;
      if ("number" === typeof d.unstable_expectedLoadTime) return a = ui(b, a, e, c), b.child.memoizedState = {
        baseLanes: c
      }, b.memoizedState = si, b.lanes = 33554432, a;
      c = vi({
        mode: "visible",
        children: a
      }, b.mode, c, null);
      c["return"] = b;
      return b.child = c;
    }

    if (null !== a.memoizedState) {
      if (f) return d = wi(a, b, d.children, d.fallback, c), f = b.child, e = a.child.memoizedState, f.memoizedState = null === e ? {
        baseLanes: c
      } : {
        baseLanes: e.baseLanes | c
      }, f.childLanes = a.childLanes & ~c, b.memoizedState = si, d;
      c = xi(a, b, d.children, c);
      b.memoizedState = null;
      return c;
    }

    if (f) return d = wi(a, b, d.children, d.fallback, c), f = b.child, e = a.child.memoizedState, f.memoizedState = null === e ? {
      baseLanes: c
    } : {
      baseLanes: e.baseLanes | c
    }, f.childLanes = a.childLanes & ~c, b.memoizedState = si, d;
    c = xi(a, b, d.children, c);
    b.memoizedState = null;
    return c;
  }

  function ui(a, b, c, d) {
    var e = a.mode,
        f = a.child;
    b = {
      mode: "hidden",
      children: b
    };
    0 === (e & 2) && null !== f ? (f.childLanes = 0, f.pendingProps = b) : f = vi(b, e, 0, null);
    c = Xg(c, e, d, null);
    f["return"] = a;
    c["return"] = a;
    f.sibling = c;
    a.child = f;
    return c;
  }

  function xi(a, b, c, d) {
    var e = a.child;
    a = e.sibling;
    c = Tg(e, {
      mode: "visible",
      children: c
    });
    0 === (b.mode & 2) && (c.lanes = d);
    c["return"] = b;
    c.sibling = null;
    null !== a && (a.nextEffect = null, a.flags = 8, b.firstEffect = b.lastEffect = a);
    return b.child = c;
  }

  function wi(a, b, c, d, e) {
    var f = b.mode,
        g = a.child;
    a = g.sibling;
    var h = {
      mode: "hidden",
      children: c
    };
    0 === (f & 2) && b.child !== g ? (c = b.child, c.childLanes = 0, c.pendingProps = h, g = c.lastEffect, null !== g ? (b.firstEffect = c.firstEffect, b.lastEffect = g, g.nextEffect = null) : b.firstEffect = b.lastEffect = null) : c = Tg(g, h);
    null !== a ? d = Tg(a, d) : (d = Xg(d, f, e, null), d.flags |= 2);
    d["return"] = b;
    c["return"] = b;
    c.sibling = d;
    b.child = c;
    return d;
  }

  function yi(a, b) {
    a.lanes |= b;
    var c = a.alternate;
    null !== c && (c.lanes |= b);
    sg(a["return"], b);
  }

  function zi(a, b, c, d, e, f) {
    var g = a.memoizedState;
    null === g ? a.memoizedState = {
      isBackwards: b,
      rendering: null,
      renderingStartTime: 0,
      last: d,
      tail: c,
      tailMode: e,
      lastEffect: f
    } : (g.isBackwards = b, g.rendering = null, g.renderingStartTime = 0, g.last = d, g.tail = c, g.tailMode = e, g.lastEffect = f);
  }

  function Ai(a, b, c) {
    var d = b.pendingProps,
        e = d.revealOrder,
        f = d.tail;
    fi(a, b, d.children, c);
    d = P.current;
    if (0 !== (d & 2)) d = d & 1 | 2, b.flags |= 64;else {
      if (null !== a && 0 !== (a.flags & 64)) a: for (a = b.child; null !== a;) {
        if (13 === a.tag) null !== a.memoizedState && yi(a, c);else if (19 === a.tag) yi(a, c);else if (null !== a.child) {
          a.child["return"] = a;
          a = a.child;
          continue;
        }
        if (a === b) break a;

        for (; null === a.sibling;) {
          if (null === a["return"] || a["return"] === b) break a;
          a = a["return"];
        }

        a.sibling["return"] = a["return"];
        a = a.sibling;
      }
      d &= 1;
    }
    I$2(P, d);
    if (0 === (b.mode & 2)) b.memoizedState = null;else switch (e) {
      case "forwards":
        c = b.child;

        for (e = null; null !== c;) {
          a = c.alternate, null !== a && null === ih(a) && (e = c), c = c.sibling;
        }

        c = e;
        null === c ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null);
        zi(b, !1, e, c, f, b.lastEffect);
        break;

      case "backwards":
        c = null;
        e = b.child;

        for (b.child = null; null !== e;) {
          a = e.alternate;

          if (null !== a && null === ih(a)) {
            b.child = e;
            break;
          }

          a = e.sibling;
          e.sibling = c;
          c = e;
          e = a;
        }

        zi(b, !0, c, null, f, b.lastEffect);
        break;

      case "together":
        zi(b, !1, null, null, void 0, b.lastEffect);
        break;

      default:
        b.memoizedState = null;
    }
    return b.child;
  }

  function hi(a, b, c) {
    null !== a && (b.dependencies = a.dependencies);
    Dg |= b.lanes;

    if (0 !== (c & b.childLanes)) {
      if (null !== a && b.child !== a.child) throw Error(y$4(153));

      if (null !== b.child) {
        a = b.child;
        c = Tg(a, a.pendingProps);
        b.child = c;

        for (c["return"] = b; null !== a.sibling;) {
          a = a.sibling, c = c.sibling = Tg(a, a.pendingProps), c["return"] = b;
        }

        c.sibling = null;
      }

      return b.child;
    }

    return null;
  }

  var Bi, Ci, Di, Ei;

  Bi = function Bi(a, b) {
    for (var c = b.child; null !== c;) {
      if (5 === c.tag || 6 === c.tag) a.appendChild(c.stateNode);else if (4 !== c.tag && null !== c.child) {
        c.child["return"] = c;
        c = c.child;
        continue;
      }
      if (c === b) break;

      for (; null === c.sibling;) {
        if (null === c["return"] || c["return"] === b) return;
        c = c["return"];
      }

      c.sibling["return"] = c["return"];
      c = c.sibling;
    }
  };

  Ci = function Ci() {};

  Di = function Di(a, b, c, d) {
    var e = a.memoizedProps;

    if (e !== d) {
      a = b.stateNode;
      dh(ah.current);
      var f = null;

      switch (c) {
        case "input":
          e = Ya(a, e);
          d = Ya(a, d);
          f = [];
          break;

        case "option":
          e = eb(a, e);
          d = eb(a, d);
          f = [];
          break;

        case "select":
          e = m$5({}, e, {
            value: void 0
          });
          d = m$5({}, d, {
            value: void 0
          });
          f = [];
          break;

        case "textarea":
          e = gb(a, e);
          d = gb(a, d);
          f = [];
          break;

        default:
          "function" !== typeof e.onClick && "function" === typeof d.onClick && (a.onclick = jf);
      }

      vb(c, d);
      var g;
      c = null;

      for (l in e) {
        if (!d.hasOwnProperty(l) && e.hasOwnProperty(l) && null != e[l]) if ("style" === l) {
          var h = e[l];

          for (g in h) {
            h.hasOwnProperty(g) && (c || (c = {}), c[g] = "");
          }
        } else "dangerouslySetInnerHTML" !== l && "children" !== l && "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && "autoFocus" !== l && (ca.hasOwnProperty(l) ? f || (f = []) : (f = f || []).push(l, null));
      }

      for (l in d) {
        var k = d[l];
        h = null != e ? e[l] : void 0;
        if (d.hasOwnProperty(l) && k !== h && (null != k || null != h)) if ("style" === l) {
          if (h) {
            for (g in h) {
              !h.hasOwnProperty(g) || k && k.hasOwnProperty(g) || (c || (c = {}), c[g] = "");
            }

            for (g in k) {
              k.hasOwnProperty(g) && h[g] !== k[g] && (c || (c = {}), c[g] = k[g]);
            }
          } else c || (f || (f = []), f.push(l, c)), c = k;
        } else "dangerouslySetInnerHTML" === l ? (k = k ? k.__html : void 0, h = h ? h.__html : void 0, null != k && h !== k && (f = f || []).push(l, k)) : "children" === l ? "string" !== typeof k && "number" !== typeof k || (f = f || []).push(l, "" + k) : "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && (ca.hasOwnProperty(l) ? (null != k && "onScroll" === l && G$2("scroll", a), f || h === k || (f = [])) : "object" === _typeof(k) && null !== k && k.$$typeof === Ga ? k.toString() : (f = f || []).push(l, k));
      }

      c && (f = f || []).push("style", c);
      var l = f;
      if (b.updateQueue = l) b.flags |= 4;
    }
  };

  Ei = function Ei(a, b, c, d) {
    c !== d && (b.flags |= 4);
  };

  function Fi(a, b) {
    if (!lh) switch (a.tailMode) {
      case "hidden":
        b = a.tail;

        for (var c = null; null !== b;) {
          null !== b.alternate && (c = b), b = b.sibling;
        }

        null === c ? a.tail = null : c.sibling = null;
        break;

      case "collapsed":
        c = a.tail;

        for (var d = null; null !== c;) {
          null !== c.alternate && (d = c), c = c.sibling;
        }

        null === d ? b || null === a.tail ? a.tail = null : a.tail.sibling = null : d.sibling = null;
    }
  }

  function Gi(a, b, c) {
    var d = b.pendingProps;

    switch (b.tag) {
      case 2:
      case 16:
      case 15:
      case 0:
      case 11:
      case 7:
      case 8:
      case 12:
      case 9:
      case 14:
        return null;

      case 1:
        return Ff(b.type) && Gf(), null;

      case 3:
        fh();
        H$2(N);
        H$2(M);
        uh();
        d = b.stateNode;
        d.pendingContext && (d.context = d.pendingContext, d.pendingContext = null);
        if (null === a || null === a.child) rh$1(b) ? b.flags |= 4 : d.hydrate || (b.flags |= 256);
        Ci(b);
        return null;

      case 5:
        hh(b);
        var e = dh(ch.current);
        c = b.type;
        if (null !== a && null != b.stateNode) Di(a, b, c, d, e), a.ref !== b.ref && (b.flags |= 128);else {
          if (!d) {
            if (null === b.stateNode) throw Error(y$4(166));
            return null;
          }

          a = dh(ah.current);

          if (rh$1(b)) {
            d = b.stateNode;
            c = b.type;
            var f = b.memoizedProps;
            d[wf] = b;
            d[xf] = f;

            switch (c) {
              case "dialog":
                G$2("cancel", d);
                G$2("close", d);
                break;

              case "iframe":
              case "object":
              case "embed":
                G$2("load", d);
                break;

              case "video":
              case "audio":
                for (a = 0; a < Xe.length; a++) {
                  G$2(Xe[a], d);
                }

                break;

              case "source":
                G$2("error", d);
                break;

              case "img":
              case "image":
              case "link":
                G$2("error", d);
                G$2("load", d);
                break;

              case "details":
                G$2("toggle", d);
                break;

              case "input":
                Za(d, f);
                G$2("invalid", d);
                break;

              case "select":
                d._wrapperState = {
                  wasMultiple: !!f.multiple
                };
                G$2("invalid", d);
                break;

              case "textarea":
                hb(d, f), G$2("invalid", d);
            }

            vb(c, f);
            a = null;

            for (var g in f) {
              f.hasOwnProperty(g) && (e = f[g], "children" === g ? "string" === typeof e ? d.textContent !== e && (a = ["children", e]) : "number" === typeof e && d.textContent !== "" + e && (a = ["children", "" + e]) : ca.hasOwnProperty(g) && null != e && "onScroll" === g && G$2("scroll", d));
            }

            switch (c) {
              case "input":
                Va(d);
                cb(d, f, !0);
                break;

              case "textarea":
                Va(d);
                jb(d);
                break;

              case "select":
              case "option":
                break;

              default:
                "function" === typeof f.onClick && (d.onclick = jf);
            }

            d = a;
            b.updateQueue = d;
            null !== d && (b.flags |= 4);
          } else {
            g = 9 === e.nodeType ? e : e.ownerDocument;
            a === kb.html && (a = lb(c));
            a === kb.html ? "script" === c ? (a = g.createElement("div"), a.innerHTML = "<script>\x3c/script>", a = a.removeChild(a.firstChild)) : "string" === typeof d.is ? a = g.createElement(c, {
              is: d.is
            }) : (a = g.createElement(c), "select" === c && (g = a, d.multiple ? g.multiple = !0 : d.size && (g.size = d.size))) : a = g.createElementNS(a, c);
            a[wf] = b;
            a[xf] = d;
            Bi(a, b, !1, !1);
            b.stateNode = a;
            g = wb(c, d);

            switch (c) {
              case "dialog":
                G$2("cancel", a);
                G$2("close", a);
                e = d;
                break;

              case "iframe":
              case "object":
              case "embed":
                G$2("load", a);
                e = d;
                break;

              case "video":
              case "audio":
                for (e = 0; e < Xe.length; e++) {
                  G$2(Xe[e], a);
                }

                e = d;
                break;

              case "source":
                G$2("error", a);
                e = d;
                break;

              case "img":
              case "image":
              case "link":
                G$2("error", a);
                G$2("load", a);
                e = d;
                break;

              case "details":
                G$2("toggle", a);
                e = d;
                break;

              case "input":
                Za(a, d);
                e = Ya(a, d);
                G$2("invalid", a);
                break;

              case "option":
                e = eb(a, d);
                break;

              case "select":
                a._wrapperState = {
                  wasMultiple: !!d.multiple
                };
                e = m$5({}, d, {
                  value: void 0
                });
                G$2("invalid", a);
                break;

              case "textarea":
                hb(a, d);
                e = gb(a, d);
                G$2("invalid", a);
                break;

              default:
                e = d;
            }

            vb(c, e);
            var h = e;

            for (f in h) {
              if (h.hasOwnProperty(f)) {
                var k = h[f];
                "style" === f ? tb(a, k) : "dangerouslySetInnerHTML" === f ? (k = k ? k.__html : void 0, null != k && ob(a, k)) : "children" === f ? "string" === typeof k ? ("textarea" !== c || "" !== k) && pb(a, k) : "number" === typeof k && pb(a, "" + k) : "suppressContentEditableWarning" !== f && "suppressHydrationWarning" !== f && "autoFocus" !== f && (ca.hasOwnProperty(f) ? null != k && "onScroll" === f && G$2("scroll", a) : null != k && qa(a, f, k, g));
              }
            }

            switch (c) {
              case "input":
                Va(a);
                cb(a, d, !1);
                break;

              case "textarea":
                Va(a);
                jb(a);
                break;

              case "option":
                null != d.value && a.setAttribute("value", "" + Sa(d.value));
                break;

              case "select":
                a.multiple = !!d.multiple;
                f = d.value;
                null != f ? fb(a, !!d.multiple, f, !1) : null != d.defaultValue && fb(a, !!d.multiple, d.defaultValue, !0);
                break;

              default:
                "function" === typeof e.onClick && (a.onclick = jf);
            }

            mf(c, d) && (b.flags |= 4);
          }

          null !== b.ref && (b.flags |= 128);
        }
        return null;

      case 6:
        if (a && null != b.stateNode) Ei(a, b, a.memoizedProps, d);else {
          if ("string" !== typeof d && null === b.stateNode) throw Error(y$4(166));
          c = dh(ch.current);
          dh(ah.current);
          rh$1(b) ? (d = b.stateNode, c = b.memoizedProps, d[wf] = b, d.nodeValue !== c && (b.flags |= 4)) : (d = (9 === c.nodeType ? c : c.ownerDocument).createTextNode(d), d[wf] = b, b.stateNode = d);
        }
        return null;

      case 13:
        H$2(P);
        d = b.memoizedState;
        if (0 !== (b.flags & 64)) return b.lanes = c, b;
        d = null !== d;
        c = !1;
        null === a ? void 0 !== b.memoizedProps.fallback && rh$1(b) : c = null !== a.memoizedState;
        if (d && !c && 0 !== (b.mode & 2)) if (null === a && !0 !== b.memoizedProps.unstable_avoidThisFallback || 0 !== (P.current & 1)) 0 === V && (V = 3);else {
          if (0 === V || 3 === V) V = 4;
          null === U || 0 === (Dg & 134217727) && 0 === (Hi & 134217727) || Ii(U, W);
        }
        if (d || c) b.flags |= 4;
        return null;

      case 4:
        return fh(), Ci(b), null === a && cf(b.stateNode.containerInfo), null;

      case 10:
        return rg(b), null;

      case 17:
        return Ff(b.type) && Gf(), null;

      case 19:
        H$2(P);
        d = b.memoizedState;
        if (null === d) return null;
        f = 0 !== (b.flags & 64);
        g = d.rendering;
        if (null === g) {
          if (f) Fi(d, !1);else {
            if (0 !== V || null !== a && 0 !== (a.flags & 64)) for (a = b.child; null !== a;) {
              g = ih(a);

              if (null !== g) {
                b.flags |= 64;
                Fi(d, !1);
                f = g.updateQueue;
                null !== f && (b.updateQueue = f, b.flags |= 4);
                null === d.lastEffect && (b.firstEffect = null);
                b.lastEffect = d.lastEffect;
                d = c;

                for (c = b.child; null !== c;) {
                  f = c, a = d, f.flags &= 2, f.nextEffect = null, f.firstEffect = null, f.lastEffect = null, g = f.alternate, null === g ? (f.childLanes = 0, f.lanes = a, f.child = null, f.memoizedProps = null, f.memoizedState = null, f.updateQueue = null, f.dependencies = null, f.stateNode = null) : (f.childLanes = g.childLanes, f.lanes = g.lanes, f.child = g.child, f.memoizedProps = g.memoizedProps, f.memoizedState = g.memoizedState, f.updateQueue = g.updateQueue, f.type = g.type, a = g.dependencies, f.dependencies = null === a ? null : {
                    lanes: a.lanes,
                    firstContext: a.firstContext
                  }), c = c.sibling;
                }

                I$2(P, P.current & 1 | 2);
                return b.child;
              }

              a = a.sibling;
            }
            null !== d.tail && O() > Ji && (b.flags |= 64, f = !0, Fi(d, !1), b.lanes = 33554432);
          }
        } else {
          if (!f) if (a = ih(g), null !== a) {
            if (b.flags |= 64, f = !0, c = a.updateQueue, null !== c && (b.updateQueue = c, b.flags |= 4), Fi(d, !0), null === d.tail && "hidden" === d.tailMode && !g.alternate && !lh) return b = b.lastEffect = d.lastEffect, null !== b && (b.nextEffect = null), null;
          } else 2 * O() - d.renderingStartTime > Ji && 1073741824 !== c && (b.flags |= 64, f = !0, Fi(d, !1), b.lanes = 33554432);
          d.isBackwards ? (g.sibling = b.child, b.child = g) : (c = d.last, null !== c ? c.sibling = g : b.child = g, d.last = g);
        }
        return null !== d.tail ? (c = d.tail, d.rendering = c, d.tail = c.sibling, d.lastEffect = b.lastEffect, d.renderingStartTime = O(), c.sibling = null, b = P.current, I$2(P, f ? b & 1 | 2 : b & 1), c) : null;

      case 23:
      case 24:
        return Ki(), null !== a && null !== a.memoizedState !== (null !== b.memoizedState) && "unstable-defer-without-hiding" !== d.mode && (b.flags |= 4), null;
    }

    throw Error(y$4(156, b.tag));
  }

  function Li(a) {
    switch (a.tag) {
      case 1:
        Ff(a.type) && Gf();
        var b = a.flags;
        return b & 4096 ? (a.flags = b & -4097 | 64, a) : null;

      case 3:
        fh();
        H$2(N);
        H$2(M);
        uh();
        b = a.flags;
        if (0 !== (b & 64)) throw Error(y$4(285));
        a.flags = b & -4097 | 64;
        return a;

      case 5:
        return hh(a), null;

      case 13:
        return H$2(P), b = a.flags, b & 4096 ? (a.flags = b & -4097 | 64, a) : null;

      case 19:
        return H$2(P), null;

      case 4:
        return fh(), null;

      case 10:
        return rg(a), null;

      case 23:
      case 24:
        return Ki(), null;

      default:
        return null;
    }
  }

  function Mi(a, b) {
    try {
      var c = "",
          d = b;

      do {
        c += Qa(d), d = d["return"];
      } while (d);

      var e = c;
    } catch (f) {
      e = "\nError generating stack: " + f.message + "\n" + f.stack;
    }

    return {
      value: a,
      source: b,
      stack: e
    };
  }

  function Ni(a, b) {
    try {
      console.error(b.value);
    } catch (c) {
      setTimeout(function () {
        throw c;
      });
    }
  }

  var Oi = "function" === typeof WeakMap ? WeakMap : Map;

  function Pi(a, b, c) {
    c = zg(-1, c);
    c.tag = 3;
    c.payload = {
      element: null
    };
    var d = b.value;

    c.callback = function () {
      Qi || (Qi = !0, Ri = d);
      Ni(a, b);
    };

    return c;
  }

  function Si(a, b, c) {
    c = zg(-1, c);
    c.tag = 3;
    var d = a.type.getDerivedStateFromError;

    if ("function" === typeof d) {
      var e = b.value;

      c.payload = function () {
        Ni(a, b);
        return d(e);
      };
    }

    var f = a.stateNode;
    null !== f && "function" === typeof f.componentDidCatch && (c.callback = function () {
      "function" !== typeof d && (null === Ti ? Ti = new Set([this]) : Ti.add(this), Ni(a, b));
      var c = b.stack;
      this.componentDidCatch(b.value, {
        componentStack: null !== c ? c : ""
      });
    });
    return c;
  }

  var Ui = "function" === typeof WeakSet ? WeakSet : Set;

  function Vi(a) {
    var b = a.ref;
    if (null !== b) if ("function" === typeof b) try {
      b(null);
    } catch (c) {
      Wi(a, c);
    } else b.current = null;
  }

  function Xi(a, b) {
    switch (b.tag) {
      case 0:
      case 11:
      case 15:
      case 22:
        return;

      case 1:
        if (b.flags & 256 && null !== a) {
          var c = a.memoizedProps,
              d = a.memoizedState;
          a = b.stateNode;
          b = a.getSnapshotBeforeUpdate(b.elementType === b.type ? c : lg(b.type, c), d);
          a.__reactInternalSnapshotBeforeUpdate = b;
        }

        return;

      case 3:
        b.flags & 256 && qf(b.stateNode.containerInfo);
        return;

      case 5:
      case 6:
      case 4:
      case 17:
        return;
    }

    throw Error(y$4(163));
  }

  function Yi(a, b, c) {
    switch (c.tag) {
      case 0:
      case 11:
      case 15:
      case 22:
        b = c.updateQueue;
        b = null !== b ? b.lastEffect : null;

        if (null !== b) {
          a = b = b.next;

          do {
            if (3 === (a.tag & 3)) {
              var d = a.create;
              a.destroy = d();
            }

            a = a.next;
          } while (a !== b);
        }

        b = c.updateQueue;
        b = null !== b ? b.lastEffect : null;

        if (null !== b) {
          a = b = b.next;

          do {
            var e = a;
            d = e.next;
            e = e.tag;
            0 !== (e & 4) && 0 !== (e & 1) && (Zi(c, a), $i(c, a));
            a = d;
          } while (a !== b);
        }

        return;

      case 1:
        a = c.stateNode;
        c.flags & 4 && (null === b ? a.componentDidMount() : (d = c.elementType === c.type ? b.memoizedProps : lg(c.type, b.memoizedProps), a.componentDidUpdate(d, b.memoizedState, a.__reactInternalSnapshotBeforeUpdate)));
        b = c.updateQueue;
        null !== b && Eg(c, b, a);
        return;

      case 3:
        b = c.updateQueue;

        if (null !== b) {
          a = null;
          if (null !== c.child) switch (c.child.tag) {
            case 5:
              a = c.child.stateNode;
              break;

            case 1:
              a = c.child.stateNode;
          }
          Eg(c, b, a);
        }

        return;

      case 5:
        a = c.stateNode;
        null === b && c.flags & 4 && mf(c.type, c.memoizedProps) && a.focus();
        return;

      case 6:
        return;

      case 4:
        return;

      case 12:
        return;

      case 13:
        null === c.memoizedState && (c = c.alternate, null !== c && (c = c.memoizedState, null !== c && (c = c.dehydrated, null !== c && Cc(c))));
        return;

      case 19:
      case 17:
      case 20:
      case 21:
      case 23:
      case 24:
        return;
    }

    throw Error(y$4(163));
  }

  function aj(a, b) {
    for (var c = a;;) {
      if (5 === c.tag) {
        var d = c.stateNode;
        if (b) d = d.style, "function" === typeof d.setProperty ? d.setProperty("display", "none", "important") : d.display = "none";else {
          d = c.stateNode;
          var e = c.memoizedProps.style;
          e = void 0 !== e && null !== e && e.hasOwnProperty("display") ? e.display : null;
          d.style.display = sb("display", e);
        }
      } else if (6 === c.tag) c.stateNode.nodeValue = b ? "" : c.memoizedProps;else if ((23 !== c.tag && 24 !== c.tag || null === c.memoizedState || c === a) && null !== c.child) {
        c.child["return"] = c;
        c = c.child;
        continue;
      }

      if (c === a) break;

      for (; null === c.sibling;) {
        if (null === c["return"] || c["return"] === a) return;
        c = c["return"];
      }

      c.sibling["return"] = c["return"];
      c = c.sibling;
    }
  }

  function bj(a, b) {
    if (Mf && "function" === typeof Mf.onCommitFiberUnmount) try {
      Mf.onCommitFiberUnmount(Lf, b);
    } catch (f) {}

    switch (b.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
      case 22:
        a = b.updateQueue;

        if (null !== a && (a = a.lastEffect, null !== a)) {
          var c = a = a.next;

          do {
            var d = c,
                e = d.destroy;
            d = d.tag;
            if (void 0 !== e) if (0 !== (d & 4)) Zi(b, c);else {
              d = b;

              try {
                e();
              } catch (f) {
                Wi(d, f);
              }
            }
            c = c.next;
          } while (c !== a);
        }

        break;

      case 1:
        Vi(b);
        a = b.stateNode;
        if ("function" === typeof a.componentWillUnmount) try {
          a.props = b.memoizedProps, a.state = b.memoizedState, a.componentWillUnmount();
        } catch (f) {
          Wi(b, f);
        }
        break;

      case 5:
        Vi(b);
        break;

      case 4:
        cj(a, b);
    }
  }

  function dj(a) {
    a.alternate = null;
    a.child = null;
    a.dependencies = null;
    a.firstEffect = null;
    a.lastEffect = null;
    a.memoizedProps = null;
    a.memoizedState = null;
    a.pendingProps = null;
    a["return"] = null;
    a.updateQueue = null;
  }

  function ej(a) {
    return 5 === a.tag || 3 === a.tag || 4 === a.tag;
  }

  function fj(a) {
    a: {
      for (var b = a["return"]; null !== b;) {
        if (ej(b)) break a;
        b = b["return"];
      }

      throw Error(y$4(160));
    }

    var c = b;
    b = c.stateNode;

    switch (c.tag) {
      case 5:
        var d = !1;
        break;

      case 3:
        b = b.containerInfo;
        d = !0;
        break;

      case 4:
        b = b.containerInfo;
        d = !0;
        break;

      default:
        throw Error(y$4(161));
    }

    c.flags & 16 && (pb(b, ""), c.flags &= -17);

    a: b: for (c = a;;) {
      for (; null === c.sibling;) {
        if (null === c["return"] || ej(c["return"])) {
          c = null;
          break a;
        }

        c = c["return"];
      }

      c.sibling["return"] = c["return"];

      for (c = c.sibling; 5 !== c.tag && 6 !== c.tag && 18 !== c.tag;) {
        if (c.flags & 2) continue b;
        if (null === c.child || 4 === c.tag) continue b;else c.child["return"] = c, c = c.child;
      }

      if (!(c.flags & 2)) {
        c = c.stateNode;
        break a;
      }
    }

    d ? gj(a, c, b) : hj(a, c, b);
  }

  function gj(a, b, c) {
    var d = a.tag,
        e = 5 === d || 6 === d;
    if (e) a = e ? a.stateNode : a.stateNode.instance, b ? 8 === c.nodeType ? c.parentNode.insertBefore(a, b) : c.insertBefore(a, b) : (8 === c.nodeType ? (b = c.parentNode, b.insertBefore(a, c)) : (b = c, b.appendChild(a)), c = c._reactRootContainer, null !== c && void 0 !== c || null !== b.onclick || (b.onclick = jf));else if (4 !== d && (a = a.child, null !== a)) for (gj(a, b, c), a = a.sibling; null !== a;) {
      gj(a, b, c), a = a.sibling;
    }
  }

  function hj(a, b, c) {
    var d = a.tag,
        e = 5 === d || 6 === d;
    if (e) a = e ? a.stateNode : a.stateNode.instance, b ? c.insertBefore(a, b) : c.appendChild(a);else if (4 !== d && (a = a.child, null !== a)) for (hj(a, b, c), a = a.sibling; null !== a;) {
      hj(a, b, c), a = a.sibling;
    }
  }

  function cj(a, b) {
    for (var c = b, d = !1, e, f;;) {
      if (!d) {
        d = c["return"];

        a: for (;;) {
          if (null === d) throw Error(y$4(160));
          e = d.stateNode;

          switch (d.tag) {
            case 5:
              f = !1;
              break a;

            case 3:
              e = e.containerInfo;
              f = !0;
              break a;

            case 4:
              e = e.containerInfo;
              f = !0;
              break a;
          }

          d = d["return"];
        }

        d = !0;
      }

      if (5 === c.tag || 6 === c.tag) {
        a: for (var g = a, h = c, k = h;;) {
          if (bj(g, k), null !== k.child && 4 !== k.tag) k.child["return"] = k, k = k.child;else {
            if (k === h) break a;

            for (; null === k.sibling;) {
              if (null === k["return"] || k["return"] === h) break a;
              k = k["return"];
            }

            k.sibling["return"] = k["return"];
            k = k.sibling;
          }
        }

        f ? (g = e, h = c.stateNode, 8 === g.nodeType ? g.parentNode.removeChild(h) : g.removeChild(h)) : e.removeChild(c.stateNode);
      } else if (4 === c.tag) {
        if (null !== c.child) {
          e = c.stateNode.containerInfo;
          f = !0;
          c.child["return"] = c;
          c = c.child;
          continue;
        }
      } else if (bj(a, c), null !== c.child) {
        c.child["return"] = c;
        c = c.child;
        continue;
      }

      if (c === b) break;

      for (; null === c.sibling;) {
        if (null === c["return"] || c["return"] === b) return;
        c = c["return"];
        4 === c.tag && (d = !1);
      }

      c.sibling["return"] = c["return"];
      c = c.sibling;
    }
  }

  function ij(a, b) {
    switch (b.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
      case 22:
        var c = b.updateQueue;
        c = null !== c ? c.lastEffect : null;

        if (null !== c) {
          var d = c = c.next;

          do {
            3 === (d.tag & 3) && (a = d.destroy, d.destroy = void 0, void 0 !== a && a()), d = d.next;
          } while (d !== c);
        }

        return;

      case 1:
        return;

      case 5:
        c = b.stateNode;

        if (null != c) {
          d = b.memoizedProps;
          var e = null !== a ? a.memoizedProps : d;
          a = b.type;
          var f = b.updateQueue;
          b.updateQueue = null;

          if (null !== f) {
            c[xf] = d;
            "input" === a && "radio" === d.type && null != d.name && $a(c, d);
            wb(a, e);
            b = wb(a, d);

            for (e = 0; e < f.length; e += 2) {
              var g = f[e],
                  h = f[e + 1];
              "style" === g ? tb(c, h) : "dangerouslySetInnerHTML" === g ? ob(c, h) : "children" === g ? pb(c, h) : qa(c, g, h, b);
            }

            switch (a) {
              case "input":
                ab(c, d);
                break;

              case "textarea":
                ib(c, d);
                break;

              case "select":
                a = c._wrapperState.wasMultiple, c._wrapperState.wasMultiple = !!d.multiple, f = d.value, null != f ? fb(c, !!d.multiple, f, !1) : a !== !!d.multiple && (null != d.defaultValue ? fb(c, !!d.multiple, d.defaultValue, !0) : fb(c, !!d.multiple, d.multiple ? [] : "", !1));
            }
          }
        }

        return;

      case 6:
        if (null === b.stateNode) throw Error(y$4(162));
        b.stateNode.nodeValue = b.memoizedProps;
        return;

      case 3:
        c = b.stateNode;
        c.hydrate && (c.hydrate = !1, Cc(c.containerInfo));
        return;

      case 12:
        return;

      case 13:
        null !== b.memoizedState && (jj = O(), aj(b.child, !0));
        kj(b);
        return;

      case 19:
        kj(b);
        return;

      case 17:
        return;

      case 23:
      case 24:
        aj(b, null !== b.memoizedState);
        return;
    }

    throw Error(y$4(163));
  }

  function kj(a) {
    var b = a.updateQueue;

    if (null !== b) {
      a.updateQueue = null;
      var c = a.stateNode;
      null === c && (c = a.stateNode = new Ui());
      b.forEach(function (b) {
        var d = lj.bind(null, a, b);
        c.has(b) || (c.add(b), b.then(d, d));
      });
    }
  }

  function mj(a, b) {
    return null !== a && (a = a.memoizedState, null === a || null !== a.dehydrated) ? (b = b.memoizedState, null !== b && null === b.dehydrated) : !1;
  }

  var nj = Math.ceil,
      oj = ra.ReactCurrentDispatcher,
      pj = ra.ReactCurrentOwner,
      X = 0,
      U = null,
      Y = null,
      W = 0,
      qj = 0,
      rj = Bf(0),
      V = 0,
      sj = null,
      tj = 0,
      Dg = 0,
      Hi = 0,
      uj = 0,
      vj = null,
      jj = 0,
      Ji = Infinity;

  function wj() {
    Ji = O() + 500;
  }

  var Z = null,
      Qi = !1,
      Ri = null,
      Ti = null,
      xj = !1,
      yj = null,
      zj = 90,
      Aj = [],
      Bj = [],
      Cj = null,
      Dj = 0,
      Ej = null,
      Fj = -1,
      Gj = 0,
      Hj = 0,
      Ij = null,
      Jj = !1;

  function Hg() {
    return 0 !== (X & 48) ? O() : -1 !== Fj ? Fj : Fj = O();
  }

  function Ig(a) {
    a = a.mode;
    if (0 === (a & 2)) return 1;
    if (0 === (a & 4)) return 99 === eg() ? 1 : 2;
    0 === Gj && (Gj = tj);

    if (0 !== kg.transition) {
      0 !== Hj && (Hj = null !== vj ? vj.pendingLanes : 0);
      a = Gj;
      var b = 4186112 & ~Hj;
      b &= -b;
      0 === b && (a = 4186112 & ~a, b = a & -a, 0 === b && (b = 8192));
      return b;
    }

    a = eg();
    0 !== (X & 4) && 98 === a ? a = Xc(12, Gj) : (a = Sc(a), a = Xc(a, Gj));
    return a;
  }

  function Jg(a, b, c) {
    if (50 < Dj) throw Dj = 0, Ej = null, Error(y$4(185));
    a = Kj(a, b);
    if (null === a) return null;
    $c(a, b, c);
    a === U && (Hi |= b, 4 === V && Ii(a, W));
    var d = eg();
    1 === b ? 0 !== (X & 8) && 0 === (X & 48) ? Lj(a) : (Mj(a, c), 0 === X && (wj(), ig())) : (0 === (X & 4) || 98 !== d && 99 !== d || (null === Cj ? Cj = new Set([a]) : Cj.add(a)), Mj(a, c));
    vj = a;
  }

  function Kj(a, b) {
    a.lanes |= b;
    var c = a.alternate;
    null !== c && (c.lanes |= b);
    c = a;

    for (a = a["return"]; null !== a;) {
      a.childLanes |= b, c = a.alternate, null !== c && (c.childLanes |= b), c = a, a = a["return"];
    }

    return 3 === c.tag ? c.stateNode : null;
  }

  function Mj(a, b) {
    for (var c = a.callbackNode, d = a.suspendedLanes, e = a.pingedLanes, f = a.expirationTimes, g = a.pendingLanes; 0 < g;) {
      var h = 31 - Vc(g),
          k = 1 << h,
          l = f[h];

      if (-1 === l) {
        if (0 === (k & d) || 0 !== (k & e)) {
          l = b;
          Rc(k);
          var n = F$2;
          f[h] = 10 <= n ? l + 250 : 6 <= n ? l + 5E3 : -1;
        }
      } else l <= b && (a.expiredLanes |= k);

      g &= ~k;
    }

    d = Uc(a, a === U ? W : 0);
    b = F$2;
    if (0 === d) null !== c && (c !== Zf && Pf(c), a.callbackNode = null, a.callbackPriority = 0);else {
      if (null !== c) {
        if (a.callbackPriority === b) return;
        c !== Zf && Pf(c);
      }

      15 === b ? (c = Lj.bind(null, a), null === ag ? (ag = [c], bg = Of(Uf, jg)) : ag.push(c), c = Zf) : 14 === b ? c = hg(99, Lj.bind(null, a)) : (c = Tc(b), c = hg(c, Nj.bind(null, a)));
      a.callbackPriority = b;
      a.callbackNode = c;
    }
  }

  function Nj(a) {
    Fj = -1;
    Hj = Gj = 0;
    if (0 !== (X & 48)) throw Error(y$4(327));
    var b = a.callbackNode;
    if (Oj() && a.callbackNode !== b) return null;
    var c = Uc(a, a === U ? W : 0);
    if (0 === c) return null;
    var d = c;
    var e = X;
    X |= 16;
    var f = Pj();
    if (U !== a || W !== d) wj(), Qj(a, d);

    do {
      try {
        Rj();
        break;
      } catch (h) {
        Sj(a, h);
      }
    } while (1);

    qg();
    oj.current = f;
    X = e;
    null !== Y ? d = 0 : (U = null, W = 0, d = V);
    if (0 !== (tj & Hi)) Qj(a, 0);else if (0 !== d) {
      2 === d && (X |= 64, a.hydrate && (a.hydrate = !1, qf(a.containerInfo)), c = Wc(a), 0 !== c && (d = Tj(a, c)));
      if (1 === d) throw b = sj, Qj(a, 0), Ii(a, c), Mj(a, O()), b;
      a.finishedWork = a.current.alternate;
      a.finishedLanes = c;

      switch (d) {
        case 0:
        case 1:
          throw Error(y$4(345));

        case 2:
          Uj(a);
          break;

        case 3:
          Ii(a, c);

          if ((c & 62914560) === c && (d = jj + 500 - O(), 10 < d)) {
            if (0 !== Uc(a, 0)) break;
            e = a.suspendedLanes;

            if ((e & c) !== c) {
              Hg();
              a.pingedLanes |= a.suspendedLanes & e;
              break;
            }

            a.timeoutHandle = of(Uj.bind(null, a), d);
            break;
          }

          Uj(a);
          break;

        case 4:
          Ii(a, c);
          if ((c & 4186112) === c) break;
          d = a.eventTimes;

          for (e = -1; 0 < c;) {
            var g = 31 - Vc(c);
            f = 1 << g;
            g = d[g];
            g > e && (e = g);
            c &= ~f;
          }

          c = e;
          c = O() - c;
          c = (120 > c ? 120 : 480 > c ? 480 : 1080 > c ? 1080 : 1920 > c ? 1920 : 3E3 > c ? 3E3 : 4320 > c ? 4320 : 1960 * nj(c / 1960)) - c;

          if (10 < c) {
            a.timeoutHandle = of(Uj.bind(null, a), c);
            break;
          }

          Uj(a);
          break;

        case 5:
          Uj(a);
          break;

        default:
          throw Error(y$4(329));
      }
    }
    Mj(a, O());
    return a.callbackNode === b ? Nj.bind(null, a) : null;
  }

  function Ii(a, b) {
    b &= ~uj;
    b &= ~Hi;
    a.suspendedLanes |= b;
    a.pingedLanes &= ~b;

    for (a = a.expirationTimes; 0 < b;) {
      var c = 31 - Vc(b),
          d = 1 << c;
      a[c] = -1;
      b &= ~d;
    }
  }

  function Lj(a) {
    if (0 !== (X & 48)) throw Error(y$4(327));
    Oj();

    if (a === U && 0 !== (a.expiredLanes & W)) {
      var b = W;
      var c = Tj(a, b);
      0 !== (tj & Hi) && (b = Uc(a, b), c = Tj(a, b));
    } else b = Uc(a, 0), c = Tj(a, b);

    0 !== a.tag && 2 === c && (X |= 64, a.hydrate && (a.hydrate = !1, qf(a.containerInfo)), b = Wc(a), 0 !== b && (c = Tj(a, b)));
    if (1 === c) throw c = sj, Qj(a, 0), Ii(a, b), Mj(a, O()), c;
    a.finishedWork = a.current.alternate;
    a.finishedLanes = b;
    Uj(a);
    Mj(a, O());
    return null;
  }

  function Vj() {
    if (null !== Cj) {
      var a = Cj;
      Cj = null;
      a.forEach(function (a) {
        a.expiredLanes |= 24 & a.pendingLanes;
        Mj(a, O());
      });
    }

    ig();
  }

  function Wj(a, b) {
    var c = X;
    X |= 1;

    try {
      return a(b);
    } finally {
      X = c, 0 === X && (wj(), ig());
    }
  }

  function Xj(a, b) {
    var c = X;
    X &= -2;
    X |= 8;

    try {
      return a(b);
    } finally {
      X = c, 0 === X && (wj(), ig());
    }
  }

  function ni(a, b) {
    I$2(rj, qj);
    qj |= b;
    tj |= b;
  }

  function Ki() {
    qj = rj.current;
    H$2(rj);
  }

  function Qj(a, b) {
    a.finishedWork = null;
    a.finishedLanes = 0;
    var c = a.timeoutHandle;
    -1 !== c && (a.timeoutHandle = -1, pf(c));
    if (null !== Y) for (c = Y["return"]; null !== c;) {
      var d = c;

      switch (d.tag) {
        case 1:
          d = d.type.childContextTypes;
          null !== d && void 0 !== d && Gf();
          break;

        case 3:
          fh();
          H$2(N);
          H$2(M);
          uh();
          break;

        case 5:
          hh(d);
          break;

        case 4:
          fh();
          break;

        case 13:
          H$2(P);
          break;

        case 19:
          H$2(P);
          break;

        case 10:
          rg(d);
          break;

        case 23:
        case 24:
          Ki();
      }

      c = c["return"];
    }
    U = a;
    Y = Tg(a.current, null);
    W = qj = tj = b;
    V = 0;
    sj = null;
    uj = Hi = Dg = 0;
  }

  function Sj(a, b) {
    do {
      var c = Y;

      try {
        qg();
        vh.current = Gh;

        if (yh) {
          for (var d = R.memoizedState; null !== d;) {
            var e = d.queue;
            null !== e && (e.pending = null);
            d = d.next;
          }

          yh = !1;
        }

        xh = 0;
        T = S = R = null;
        zh = !1;
        pj.current = null;

        if (null === c || null === c["return"]) {
          V = 1;
          sj = b;
          Y = null;
          break;
        }

        a: {
          var f = a,
              g = c["return"],
              h = c,
              k = b;
          b = W;
          h.flags |= 2048;
          h.firstEffect = h.lastEffect = null;

          if (null !== k && "object" === _typeof(k) && "function" === typeof k.then) {
            var l = k;

            if (0 === (h.mode & 2)) {
              var n = h.alternate;
              n ? (h.updateQueue = n.updateQueue, h.memoizedState = n.memoizedState, h.lanes = n.lanes) : (h.updateQueue = null, h.memoizedState = null);
            }

            var A = 0 !== (P.current & 1),
                p = g;

            do {
              var C;

              if (C = 13 === p.tag) {
                var x = p.memoizedState;
                if (null !== x) C = null !== x.dehydrated ? !0 : !1;else {
                  var w = p.memoizedProps;
                  C = void 0 === w.fallback ? !1 : !0 !== w.unstable_avoidThisFallback ? !0 : A ? !1 : !0;
                }
              }

              if (C) {
                var z = p.updateQueue;

                if (null === z) {
                  var u = new Set();
                  u.add(l);
                  p.updateQueue = u;
                } else z.add(l);

                if (0 === (p.mode & 2)) {
                  p.flags |= 64;
                  h.flags |= 16384;
                  h.flags &= -2981;
                  if (1 === h.tag) if (null === h.alternate) h.tag = 17;else {
                    var t = zg(-1, 1);
                    t.tag = 2;
                    Ag(h, t);
                  }
                  h.lanes |= 1;
                  break a;
                }

                k = void 0;
                h = b;
                var q = f.pingCache;
                null === q ? (q = f.pingCache = new Oi(), k = new Set(), q.set(l, k)) : (k = q.get(l), void 0 === k && (k = new Set(), q.set(l, k)));

                if (!k.has(h)) {
                  k.add(h);
                  var v = Yj.bind(null, f, l, h);
                  l.then(v, v);
                }

                p.flags |= 4096;
                p.lanes = b;
                break a;
              }

              p = p["return"];
            } while (null !== p);

            k = Error((Ra(h.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");
          }

          5 !== V && (V = 2);
          k = Mi(k, h);
          p = g;

          do {
            switch (p.tag) {
              case 3:
                f = k;
                p.flags |= 4096;
                b &= -b;
                p.lanes |= b;
                var J = Pi(p, f, b);
                Bg(p, J);
                break a;

              case 1:
                f = k;
                var K = p.type,
                    Q = p.stateNode;

                if (0 === (p.flags & 64) && ("function" === typeof K.getDerivedStateFromError || null !== Q && "function" === typeof Q.componentDidCatch && (null === Ti || !Ti.has(Q)))) {
                  p.flags |= 4096;
                  b &= -b;
                  p.lanes |= b;
                  var L = Si(p, f, b);
                  Bg(p, L);
                  break a;
                }

            }

            p = p["return"];
          } while (null !== p);
        }

        Zj(c);
      } catch (va) {
        b = va;
        Y === c && null !== c && (Y = c = c["return"]);
        continue;
      }

      break;
    } while (1);
  }

  function Pj() {
    var a = oj.current;
    oj.current = Gh;
    return null === a ? Gh : a;
  }

  function Tj(a, b) {
    var c = X;
    X |= 16;
    var d = Pj();
    U === a && W === b || Qj(a, b);

    do {
      try {
        ak();
        break;
      } catch (e) {
        Sj(a, e);
      }
    } while (1);

    qg();
    X = c;
    oj.current = d;
    if (null !== Y) throw Error(y$4(261));
    U = null;
    W = 0;
    return V;
  }

  function ak() {
    for (; null !== Y;) {
      bk(Y);
    }
  }

  function Rj() {
    for (; null !== Y && !Qf();) {
      bk(Y);
    }
  }

  function bk(a) {
    var b = ck(a.alternate, a, qj);
    a.memoizedProps = a.pendingProps;
    null === b ? Zj(a) : Y = b;
    pj.current = null;
  }

  function Zj(a) {
    var b = a;

    do {
      var c = b.alternate;
      a = b["return"];

      if (0 === (b.flags & 2048)) {
        c = Gi(c, b, qj);

        if (null !== c) {
          Y = c;
          return;
        }

        c = b;

        if (24 !== c.tag && 23 !== c.tag || null === c.memoizedState || 0 !== (qj & 1073741824) || 0 === (c.mode & 4)) {
          for (var d = 0, e = c.child; null !== e;) {
            d |= e.lanes | e.childLanes, e = e.sibling;
          }

          c.childLanes = d;
        }

        null !== a && 0 === (a.flags & 2048) && (null === a.firstEffect && (a.firstEffect = b.firstEffect), null !== b.lastEffect && (null !== a.lastEffect && (a.lastEffect.nextEffect = b.firstEffect), a.lastEffect = b.lastEffect), 1 < b.flags && (null !== a.lastEffect ? a.lastEffect.nextEffect = b : a.firstEffect = b, a.lastEffect = b));
      } else {
        c = Li(b);

        if (null !== c) {
          c.flags &= 2047;
          Y = c;
          return;
        }

        null !== a && (a.firstEffect = a.lastEffect = null, a.flags |= 2048);
      }

      b = b.sibling;

      if (null !== b) {
        Y = b;
        return;
      }

      Y = b = a;
    } while (null !== b);

    0 === V && (V = 5);
  }

  function Uj(a) {
    var b = eg();
    gg(99, dk.bind(null, a, b));
    return null;
  }

  function dk(a, b) {
    do {
      Oj();
    } while (null !== yj);

    if (0 !== (X & 48)) throw Error(y$4(327));
    var c = a.finishedWork;
    if (null === c) return null;
    a.finishedWork = null;
    a.finishedLanes = 0;
    if (c === a.current) throw Error(y$4(177));
    a.callbackNode = null;
    var d = c.lanes | c.childLanes,
        e = d,
        f = a.pendingLanes & ~e;
    a.pendingLanes = e;
    a.suspendedLanes = 0;
    a.pingedLanes = 0;
    a.expiredLanes &= e;
    a.mutableReadLanes &= e;
    a.entangledLanes &= e;
    e = a.entanglements;

    for (var g = a.eventTimes, h = a.expirationTimes; 0 < f;) {
      var k = 31 - Vc(f),
          l = 1 << k;
      e[k] = 0;
      g[k] = -1;
      h[k] = -1;
      f &= ~l;
    }

    null !== Cj && 0 === (d & 24) && Cj.has(a) && Cj["delete"](a);
    a === U && (Y = U = null, W = 0);
    1 < c.flags ? null !== c.lastEffect ? (c.lastEffect.nextEffect = c, d = c.firstEffect) : d = c : d = c.firstEffect;

    if (null !== d) {
      e = X;
      X |= 32;
      pj.current = null;
      kf = fd;
      g = Ne();

      if (Oe(g)) {
        if ("selectionStart" in g) h = {
          start: g.selectionStart,
          end: g.selectionEnd
        };else a: if (h = (h = g.ownerDocument) && h.defaultView || window, (l = h.getSelection && h.getSelection()) && 0 !== l.rangeCount) {
          h = l.anchorNode;
          f = l.anchorOffset;
          k = l.focusNode;
          l = l.focusOffset;

          try {
            h.nodeType, k.nodeType;
          } catch (va) {
            h = null;
            break a;
          }

          var n = 0,
              A = -1,
              p = -1,
              C = 0,
              x = 0,
              w = g,
              z = null;

          b: for (;;) {
            for (var u;;) {
              w !== h || 0 !== f && 3 !== w.nodeType || (A = n + f);
              w !== k || 0 !== l && 3 !== w.nodeType || (p = n + l);
              3 === w.nodeType && (n += w.nodeValue.length);
              if (null === (u = w.firstChild)) break;
              z = w;
              w = u;
            }

            for (;;) {
              if (w === g) break b;
              z === h && ++C === f && (A = n);
              z === k && ++x === l && (p = n);
              if (null !== (u = w.nextSibling)) break;
              w = z;
              z = w.parentNode;
            }

            w = u;
          }

          h = -1 === A || -1 === p ? null : {
            start: A,
            end: p
          };
        } else h = null;
        h = h || {
          start: 0,
          end: 0
        };
      } else h = null;

      lf = {
        focusedElem: g,
        selectionRange: h
      };
      fd = !1;
      Ij = null;
      Jj = !1;
      Z = d;

      do {
        try {
          ek();
        } catch (va) {
          if (null === Z) throw Error(y$4(330));
          Wi(Z, va);
          Z = Z.nextEffect;
        }
      } while (null !== Z);

      Ij = null;
      Z = d;

      do {
        try {
          for (g = a; null !== Z;) {
            var t = Z.flags;
            t & 16 && pb(Z.stateNode, "");

            if (t & 128) {
              var q = Z.alternate;

              if (null !== q) {
                var v = q.ref;
                null !== v && ("function" === typeof v ? v(null) : v.current = null);
              }
            }

            switch (t & 1038) {
              case 2:
                fj(Z);
                Z.flags &= -3;
                break;

              case 6:
                fj(Z);
                Z.flags &= -3;
                ij(Z.alternate, Z);
                break;

              case 1024:
                Z.flags &= -1025;
                break;

              case 1028:
                Z.flags &= -1025;
                ij(Z.alternate, Z);
                break;

              case 4:
                ij(Z.alternate, Z);
                break;

              case 8:
                h = Z;
                cj(g, h);
                var J = h.alternate;
                dj(h);
                null !== J && dj(J);
            }

            Z = Z.nextEffect;
          }
        } catch (va) {
          if (null === Z) throw Error(y$4(330));
          Wi(Z, va);
          Z = Z.nextEffect;
        }
      } while (null !== Z);

      v = lf;
      q = Ne();
      t = v.focusedElem;
      g = v.selectionRange;

      if (q !== t && t && t.ownerDocument && Me(t.ownerDocument.documentElement, t)) {
        null !== g && Oe(t) && (q = g.start, v = g.end, void 0 === v && (v = q), "selectionStart" in t ? (t.selectionStart = q, t.selectionEnd = Math.min(v, t.value.length)) : (v = (q = t.ownerDocument || document) && q.defaultView || window, v.getSelection && (v = v.getSelection(), h = t.textContent.length, J = Math.min(g.start, h), g = void 0 === g.end ? J : Math.min(g.end, h), !v.extend && J > g && (h = g, g = J, J = h), h = Le(t, J), f = Le(t, g), h && f && (1 !== v.rangeCount || v.anchorNode !== h.node || v.anchorOffset !== h.offset || v.focusNode !== f.node || v.focusOffset !== f.offset) && (q = q.createRange(), q.setStart(h.node, h.offset), v.removeAllRanges(), J > g ? (v.addRange(q), v.extend(f.node, f.offset)) : (q.setEnd(f.node, f.offset), v.addRange(q))))));
        q = [];

        for (v = t; v = v.parentNode;) {
          1 === v.nodeType && q.push({
            element: v,
            left: v.scrollLeft,
            top: v.scrollTop
          });
        }

        "function" === typeof t.focus && t.focus();

        for (t = 0; t < q.length; t++) {
          v = q[t], v.element.scrollLeft = v.left, v.element.scrollTop = v.top;
        }
      }

      fd = !!kf;
      lf = kf = null;
      a.current = c;
      Z = d;

      do {
        try {
          for (t = a; null !== Z;) {
            var K = Z.flags;
            K & 36 && Yi(t, Z.alternate, Z);

            if (K & 128) {
              q = void 0;
              var Q = Z.ref;

              if (null !== Q) {
                var L = Z.stateNode;

                switch (Z.tag) {
                  case 5:
                    q = L;
                    break;

                  default:
                    q = L;
                }

                "function" === typeof Q ? Q(q) : Q.current = q;
              }
            }

            Z = Z.nextEffect;
          }
        } catch (va) {
          if (null === Z) throw Error(y$4(330));
          Wi(Z, va);
          Z = Z.nextEffect;
        }
      } while (null !== Z);

      Z = null;
      $f();
      X = e;
    } else a.current = c;

    if (xj) xj = !1, yj = a, zj = b;else for (Z = d; null !== Z;) {
      b = Z.nextEffect, Z.nextEffect = null, Z.flags & 8 && (K = Z, K.sibling = null, K.stateNode = null), Z = b;
    }
    d = a.pendingLanes;
    0 === d && (Ti = null);
    1 === d ? a === Ej ? Dj++ : (Dj = 0, Ej = a) : Dj = 0;
    c = c.stateNode;
    if (Mf && "function" === typeof Mf.onCommitFiberRoot) try {
      Mf.onCommitFiberRoot(Lf, c, void 0, 64 === (c.current.flags & 64));
    } catch (va) {}
    Mj(a, O());
    if (Qi) throw Qi = !1, a = Ri, Ri = null, a;
    if (0 !== (X & 8)) return null;
    ig();
    return null;
  }

  function ek() {
    for (; null !== Z;) {
      var a = Z.alternate;
      Jj || null === Ij || (0 !== (Z.flags & 8) ? dc(Z, Ij) && (Jj = !0) : 13 === Z.tag && mj(a, Z) && dc(Z, Ij) && (Jj = !0));
      var b = Z.flags;
      0 !== (b & 256) && Xi(a, Z);
      0 === (b & 512) || xj || (xj = !0, hg(97, function () {
        Oj();
        return null;
      }));
      Z = Z.nextEffect;
    }
  }

  function Oj() {
    if (90 !== zj) {
      var a = 97 < zj ? 97 : zj;
      zj = 90;
      return gg(a, fk);
    }

    return !1;
  }

  function $i(a, b) {
    Aj.push(b, a);
    xj || (xj = !0, hg(97, function () {
      Oj();
      return null;
    }));
  }

  function Zi(a, b) {
    Bj.push(b, a);
    xj || (xj = !0, hg(97, function () {
      Oj();
      return null;
    }));
  }

  function fk() {
    if (null === yj) return !1;
    var a = yj;
    yj = null;
    if (0 !== (X & 48)) throw Error(y$4(331));
    var b = X;
    X |= 32;
    var c = Bj;
    Bj = [];

    for (var d = 0; d < c.length; d += 2) {
      var e = c[d],
          f = c[d + 1],
          g = e.destroy;
      e.destroy = void 0;
      if ("function" === typeof g) try {
        g();
      } catch (k) {
        if (null === f) throw Error(y$4(330));
        Wi(f, k);
      }
    }

    c = Aj;
    Aj = [];

    for (d = 0; d < c.length; d += 2) {
      e = c[d];
      f = c[d + 1];

      try {
        var h = e.create;
        e.destroy = h();
      } catch (k) {
        if (null === f) throw Error(y$4(330));
        Wi(f, k);
      }
    }

    for (h = a.current.firstEffect; null !== h;) {
      a = h.nextEffect, h.nextEffect = null, h.flags & 8 && (h.sibling = null, h.stateNode = null), h = a;
    }

    X = b;
    ig();
    return !0;
  }

  function gk(a, b, c) {
    b = Mi(c, b);
    b = Pi(a, b, 1);
    Ag(a, b);
    b = Hg();
    a = Kj(a, 1);
    null !== a && ($c(a, 1, b), Mj(a, b));
  }

  function Wi(a, b) {
    if (3 === a.tag) gk(a, a, b);else for (var c = a["return"]; null !== c;) {
      if (3 === c.tag) {
        gk(c, a, b);
        break;
      } else if (1 === c.tag) {
        var d = c.stateNode;

        if ("function" === typeof c.type.getDerivedStateFromError || "function" === typeof d.componentDidCatch && (null === Ti || !Ti.has(d))) {
          a = Mi(b, a);
          var e = Si(c, a, 1);
          Ag(c, e);
          e = Hg();
          c = Kj(c, 1);
          if (null !== c) $c(c, 1, e), Mj(c, e);else if ("function" === typeof d.componentDidCatch && (null === Ti || !Ti.has(d))) try {
            d.componentDidCatch(b, a);
          } catch (f) {}
          break;
        }
      }

      c = c["return"];
    }
  }

  function Yj(a, b, c) {
    var d = a.pingCache;
    null !== d && d["delete"](b);
    b = Hg();
    a.pingedLanes |= a.suspendedLanes & c;
    U === a && (W & c) === c && (4 === V || 3 === V && (W & 62914560) === W && 500 > O() - jj ? Qj(a, 0) : uj |= c);
    Mj(a, b);
  }

  function lj(a, b) {
    var c = a.stateNode;
    null !== c && c["delete"](b);
    b = 0;
    0 === b && (b = a.mode, 0 === (b & 2) ? b = 1 : 0 === (b & 4) ? b = 99 === eg() ? 1 : 2 : (0 === Gj && (Gj = tj), b = Yc(62914560 & ~Gj), 0 === b && (b = 4194304)));
    c = Hg();
    a = Kj(a, b);
    null !== a && ($c(a, b, c), Mj(a, c));
  }

  var ck;

  ck = function ck(a, b, c) {
    var d = b.lanes;
    if (null !== a) {
      if (a.memoizedProps !== b.pendingProps || N.current) ug = !0;else if (0 !== (c & d)) ug = 0 !== (a.flags & 16384) ? !0 : !1;else {
        ug = !1;

        switch (b.tag) {
          case 3:
            ri(b);
            sh$1();
            break;

          case 5:
            gh(b);
            break;

          case 1:
            Ff(b.type) && Jf(b);
            break;

          case 4:
            eh(b, b.stateNode.containerInfo);
            break;

          case 10:
            d = b.memoizedProps.value;
            var e = b.type._context;
            I$2(mg, e._currentValue);
            e._currentValue = d;
            break;

          case 13:
            if (null !== b.memoizedState) {
              if (0 !== (c & b.child.childLanes)) return ti(a, b, c);
              I$2(P, P.current & 1);
              b = hi(a, b, c);
              return null !== b ? b.sibling : null;
            }

            I$2(P, P.current & 1);
            break;

          case 19:
            d = 0 !== (c & b.childLanes);

            if (0 !== (a.flags & 64)) {
              if (d) return Ai(a, b, c);
              b.flags |= 64;
            }

            e = b.memoizedState;
            null !== e && (e.rendering = null, e.tail = null, e.lastEffect = null);
            I$2(P, P.current);
            if (d) break;else return null;

          case 23:
          case 24:
            return b.lanes = 0, mi(a, b, c);
        }

        return hi(a, b, c);
      }
    } else ug = !1;
    b.lanes = 0;

    switch (b.tag) {
      case 2:
        d = b.type;
        null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2);
        a = b.pendingProps;
        e = Ef(b, M.current);
        tg(b, c);
        e = Ch(null, b, d, a, e, c);
        b.flags |= 1;

        if ("object" === _typeof(e) && null !== e && "function" === typeof e.render && void 0 === e.$$typeof) {
          b.tag = 1;
          b.memoizedState = null;
          b.updateQueue = null;

          if (Ff(d)) {
            var f = !0;
            Jf(b);
          } else f = !1;

          b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null;
          xg(b);
          var g = d.getDerivedStateFromProps;
          "function" === typeof g && Gg(b, d, g, a);
          e.updater = Kg;
          b.stateNode = e;
          e._reactInternals = b;
          Og(b, d, a, c);
          b = qi(null, b, d, !0, f, c);
        } else b.tag = 0, fi(null, b, e, c), b = b.child;

        return b;

      case 16:
        e = b.elementType;

        a: {
          null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2);
          a = b.pendingProps;
          f = e._init;
          e = f(e._payload);
          b.type = e;
          f = b.tag = hk(e);
          a = lg(e, a);

          switch (f) {
            case 0:
              b = li(null, b, e, a, c);
              break a;

            case 1:
              b = pi(null, b, e, a, c);
              break a;

            case 11:
              b = gi(null, b, e, a, c);
              break a;

            case 14:
              b = ii(null, b, e, lg(e.type, a), d, c);
              break a;
          }

          throw Error(y$4(306, e, ""));
        }

        return b;

      case 0:
        return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), li(a, b, d, e, c);

      case 1:
        return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), pi(a, b, d, e, c);

      case 3:
        ri(b);
        d = b.updateQueue;
        if (null === a || null === d) throw Error(y$4(282));
        d = b.pendingProps;
        e = b.memoizedState;
        e = null !== e ? e.element : null;
        yg(a, b);
        Cg(b, d, null, c);
        d = b.memoizedState.element;
        if (d === e) sh$1(), b = hi(a, b, c);else {
          e = b.stateNode;
          if (f = e.hydrate) kh = rf(b.stateNode.containerInfo.firstChild), jh = b, f = lh = !0;

          if (f) {
            a = e.mutableSourceEagerHydrationData;
            if (null != a) for (e = 0; e < a.length; e += 2) {
              f = a[e], f._workInProgressVersionPrimary = a[e + 1], th.push(f);
            }
            c = Zg(b, null, d, c);

            for (b.child = c; c;) {
              c.flags = c.flags & -3 | 1024, c = c.sibling;
            }
          } else fi(a, b, d, c), sh$1();

          b = b.child;
        }
        return b;

      case 5:
        return gh(b), null === a && ph(b), d = b.type, e = b.pendingProps, f = null !== a ? a.memoizedProps : null, g = e.children, nf(d, e) ? g = null : null !== f && nf(d, f) && (b.flags |= 16), oi(a, b), fi(a, b, g, c), b.child;

      case 6:
        return null === a && ph(b), null;

      case 13:
        return ti(a, b, c);

      case 4:
        return eh(b, b.stateNode.containerInfo), d = b.pendingProps, null === a ? b.child = Yg(b, null, d, c) : fi(a, b, d, c), b.child;

      case 11:
        return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), gi(a, b, d, e, c);

      case 7:
        return fi(a, b, b.pendingProps, c), b.child;

      case 8:
        return fi(a, b, b.pendingProps.children, c), b.child;

      case 12:
        return fi(a, b, b.pendingProps.children, c), b.child;

      case 10:
        a: {
          d = b.type._context;
          e = b.pendingProps;
          g = b.memoizedProps;
          f = e.value;
          var h = b.type._context;
          I$2(mg, h._currentValue);
          h._currentValue = f;
          if (null !== g) if (h = g.value, f = He(h, f) ? 0 : ("function" === typeof d._calculateChangedBits ? d._calculateChangedBits(h, f) : 1073741823) | 0, 0 === f) {
            if (g.children === e.children && !N.current) {
              b = hi(a, b, c);
              break a;
            }
          } else for (h = b.child, null !== h && (h["return"] = b); null !== h;) {
            var k = h.dependencies;

            if (null !== k) {
              g = h.child;

              for (var l = k.firstContext; null !== l;) {
                if (l.context === d && 0 !== (l.observedBits & f)) {
                  1 === h.tag && (l = zg(-1, c & -c), l.tag = 2, Ag(h, l));
                  h.lanes |= c;
                  l = h.alternate;
                  null !== l && (l.lanes |= c);
                  sg(h["return"], c);
                  k.lanes |= c;
                  break;
                }

                l = l.next;
              }
            } else g = 10 === h.tag ? h.type === b.type ? null : h.child : h.child;

            if (null !== g) g["return"] = h;else for (g = h; null !== g;) {
              if (g === b) {
                g = null;
                break;
              }

              h = g.sibling;

              if (null !== h) {
                h["return"] = g["return"];
                g = h;
                break;
              }

              g = g["return"];
            }
            h = g;
          }
          fi(a, b, e.children, c);
          b = b.child;
        }

        return b;

      case 9:
        return e = b.type, f = b.pendingProps, d = f.children, tg(b, c), e = vg(e, f.unstable_observedBits), d = d(e), b.flags |= 1, fi(a, b, d, c), b.child;

      case 14:
        return e = b.type, f = lg(e, b.pendingProps), f = lg(e.type, f), ii(a, b, e, f, d, c);

      case 15:
        return ki(a, b, b.type, b.pendingProps, d, c);

      case 17:
        return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2), b.tag = 1, Ff(d) ? (a = !0, Jf(b)) : a = !1, tg(b, c), Mg(b, d, e), Og(b, d, e, c), qi(null, b, d, !0, a, c);

      case 19:
        return Ai(a, b, c);

      case 23:
        return mi(a, b, c);

      case 24:
        return mi(a, b, c);
    }

    throw Error(y$4(156, b.tag));
  };

  function ik(a, b, c, d) {
    this.tag = a;
    this.key = c;
    this.sibling = this.child = this["return"] = this.stateNode = this.type = this.elementType = null;
    this.index = 0;
    this.ref = null;
    this.pendingProps = b;
    this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.mode = d;
    this.flags = 0;
    this.lastEffect = this.firstEffect = this.nextEffect = null;
    this.childLanes = this.lanes = 0;
    this.alternate = null;
  }

  function nh(a, b, c, d) {
    return new ik(a, b, c, d);
  }

  function ji(a) {
    a = a.prototype;
    return !(!a || !a.isReactComponent);
  }

  function hk(a) {
    if ("function" === typeof a) return ji(a) ? 1 : 0;

    if (void 0 !== a && null !== a) {
      a = a.$$typeof;
      if (a === Aa) return 11;
      if (a === Da) return 14;
    }

    return 2;
  }

  function Tg(a, b) {
    var c = a.alternate;
    null === c ? (c = nh(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.type = a.type, c.flags = 0, c.nextEffect = null, c.firstEffect = null, c.lastEffect = null);
    c.childLanes = a.childLanes;
    c.lanes = a.lanes;
    c.child = a.child;
    c.memoizedProps = a.memoizedProps;
    c.memoizedState = a.memoizedState;
    c.updateQueue = a.updateQueue;
    b = a.dependencies;
    c.dependencies = null === b ? null : {
      lanes: b.lanes,
      firstContext: b.firstContext
    };
    c.sibling = a.sibling;
    c.index = a.index;
    c.ref = a.ref;
    return c;
  }

  function Vg(a, b, c, d, e, f) {
    var g = 2;
    d = a;
    if ("function" === typeof a) ji(a) && (g = 1);else if ("string" === typeof a) g = 5;else a: switch (a) {
      case ua:
        return Xg(c.children, e, f, b);

      case Ha:
        g = 8;
        e |= 16;
        break;

      case wa:
        g = 8;
        e |= 1;
        break;

      case xa:
        return a = nh(12, c, b, e | 8), a.elementType = xa, a.type = xa, a.lanes = f, a;

      case Ba:
        return a = nh(13, c, b, e), a.type = Ba, a.elementType = Ba, a.lanes = f, a;

      case Ca:
        return a = nh(19, c, b, e), a.elementType = Ca, a.lanes = f, a;

      case Ia:
        return vi(c, e, f, b);

      case Ja:
        return a = nh(24, c, b, e), a.elementType = Ja, a.lanes = f, a;

      default:
        if ("object" === _typeof(a) && null !== a) switch (a.$$typeof) {
          case ya:
            g = 10;
            break a;

          case za:
            g = 9;
            break a;

          case Aa:
            g = 11;
            break a;

          case Da:
            g = 14;
            break a;

          case Ea:
            g = 16;
            d = null;
            break a;

          case Fa:
            g = 22;
            break a;
        }
        throw Error(y$4(130, null == a ? a : _typeof(a), ""));
    }
    b = nh(g, c, b, e);
    b.elementType = a;
    b.type = d;
    b.lanes = f;
    return b;
  }

  function Xg(a, b, c, d) {
    a = nh(7, a, d, b);
    a.lanes = c;
    return a;
  }

  function vi(a, b, c, d) {
    a = nh(23, a, d, b);
    a.elementType = Ia;
    a.lanes = c;
    return a;
  }

  function Ug(a, b, c) {
    a = nh(6, a, null, b);
    a.lanes = c;
    return a;
  }

  function Wg(a, b, c) {
    b = nh(4, null !== a.children ? a.children : [], a.key, b);
    b.lanes = c;
    b.stateNode = {
      containerInfo: a.containerInfo,
      pendingChildren: null,
      implementation: a.implementation
    };
    return b;
  }

  function jk(a, b, c) {
    this.tag = b;
    this.containerInfo = a;
    this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
    this.timeoutHandle = -1;
    this.pendingContext = this.context = null;
    this.hydrate = c;
    this.callbackNode = null;
    this.callbackPriority = 0;
    this.eventTimes = Zc(0);
    this.expirationTimes = Zc(-1);
    this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
    this.entanglements = Zc(0);
    this.mutableSourceEagerHydrationData = null;
  }

  function kk(a, b, c) {
    var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
    return {
      $$typeof: ta,
      key: null == d ? null : "" + d,
      children: a,
      containerInfo: b,
      implementation: c
    };
  }

  function lk(a, b, c, d) {
    var e = b.current,
        f = Hg(),
        g = Ig(e);

    a: if (c) {
      c = c._reactInternals;

      b: {
        if (Zb(c) !== c || 1 !== c.tag) throw Error(y$4(170));
        var h = c;

        do {
          switch (h.tag) {
            case 3:
              h = h.stateNode.context;
              break b;

            case 1:
              if (Ff(h.type)) {
                h = h.stateNode.__reactInternalMemoizedMergedChildContext;
                break b;
              }

          }

          h = h["return"];
        } while (null !== h);

        throw Error(y$4(171));
      }

      if (1 === c.tag) {
        var k = c.type;

        if (Ff(k)) {
          c = If(c, k, h);
          break a;
        }
      }

      c = h;
    } else c = Cf;

    null === b.context ? b.context = c : b.pendingContext = c;
    b = zg(f, g);
    b.payload = {
      element: a
    };
    d = void 0 === d ? null : d;
    null !== d && (b.callback = d);
    Ag(e, b);
    Jg(e, g, f);
    return g;
  }

  function mk(a) {
    a = a.current;
    if (!a.child) return null;

    switch (a.child.tag) {
      case 5:
        return a.child.stateNode;

      default:
        return a.child.stateNode;
    }
  }

  function nk(a, b) {
    a = a.memoizedState;

    if (null !== a && null !== a.dehydrated) {
      var c = a.retryLane;
      a.retryLane = 0 !== c && c < b ? c : b;
    }
  }

  function ok$2(a, b) {
    nk(a, b);
    (a = a.alternate) && nk(a, b);
  }

  function pk() {
    return null;
  }

  function qk(a, b, c) {
    var d = null != c && null != c.hydrationOptions && c.hydrationOptions.mutableSources || null;
    c = new jk(a, b, null != c && !0 === c.hydrate);
    b = nh(3, null, null, 2 === b ? 7 : 1 === b ? 3 : 0);
    c.current = b;
    b.stateNode = c;
    xg(b);
    a[ff] = c.current;
    cf(8 === a.nodeType ? a.parentNode : a);
    if (d) for (a = 0; a < d.length; a++) {
      b = d[a];
      var e = b._getVersion;
      e = e(b._source);
      null == c.mutableSourceEagerHydrationData ? c.mutableSourceEagerHydrationData = [b, e] : c.mutableSourceEagerHydrationData.push(b, e);
    }
    this._internalRoot = c;
  }

  qk.prototype.render = function (a) {
    lk(a, this._internalRoot, null, null);
  };

  qk.prototype.unmount = function () {
    var a = this._internalRoot,
        b = a.containerInfo;
    lk(null, a, null, function () {
      b[ff] = null;
    });
  };

  function rk(a) {
    return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));
  }

  function sk(a, b) {
    b || (b = a ? 9 === a.nodeType ? a.documentElement : a.firstChild : null, b = !(!b || 1 !== b.nodeType || !b.hasAttribute("data-reactroot")));
    if (!b) for (var c; c = a.lastChild;) {
      a.removeChild(c);
    }
    return new qk(a, 0, b ? {
      hydrate: !0
    } : void 0);
  }

  function tk(a, b, c, d, e) {
    var f = c._reactRootContainer;

    if (f) {
      var g = f._internalRoot;

      if ("function" === typeof e) {
        var h = e;

        e = function e() {
          var a = mk(g);
          h.call(a);
        };
      }

      lk(b, g, a, e);
    } else {
      f = c._reactRootContainer = sk(c, d);
      g = f._internalRoot;

      if ("function" === typeof e) {
        var k = e;

        e = function e() {
          var a = mk(g);
          k.call(a);
        };
      }

      Xj(function () {
        lk(b, g, a, e);
      });
    }

    return mk(g);
  }

  ec$1 = function ec(a) {
    if (13 === a.tag) {
      var b = Hg();
      Jg(a, 4, b);
      ok$2(a, 4);
    }
  };

  fc = function fc(a) {
    if (13 === a.tag) {
      var b = Hg();
      Jg(a, 67108864, b);
      ok$2(a, 67108864);
    }
  };

  gc = function gc(a) {
    if (13 === a.tag) {
      var b = Hg(),
          c = Ig(a);
      Jg(a, c, b);
      ok$2(a, c);
    }
  };

  hc = function hc(a, b) {
    return b();
  };

  yb = function yb(a, b, c) {
    switch (b) {
      case "input":
        ab(a, c);
        b = c.name;

        if ("radio" === c.type && null != b) {
          for (c = a; c.parentNode;) {
            c = c.parentNode;
          }

          c = c.querySelectorAll("input[name=" + JSON.stringify("" + b) + '][type="radio"]');

          for (b = 0; b < c.length; b++) {
            var d = c[b];

            if (d !== a && d.form === a.form) {
              var e = Db(d);
              if (!e) throw Error(y$4(90));
              Wa(d);
              ab(d, e);
            }
          }
        }

        break;

      case "textarea":
        ib(a, c);
        break;

      case "select":
        b = c.value, null != b && fb(a, !!c.multiple, b, !1);
    }
  };

  Gb = Wj;

  Hb = function Hb(a, b, c, d, e) {
    var f = X;
    X |= 4;

    try {
      return gg(98, a.bind(null, b, c, d, e));
    } finally {
      X = f, 0 === X && (wj(), ig());
    }
  };

  Ib = function Ib() {
    0 === (X & 49) && (Vj(), Oj());
  };

  Jb = function Jb(a, b) {
    var c = X;
    X |= 2;

    try {
      return a(b);
    } finally {
      X = c, 0 === X && (wj(), ig());
    }
  };

  function uk(a, b) {
    var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
    if (!rk(b)) throw Error(y$4(200));
    return kk(a, b, null, c);
  }

  var vk = {
    Events: [Cb, ue, Db, Eb, Fb, Oj, {
      current: !1
    }]
  },
      wk = {
    findFiberByHostInstance: wc,
    bundleType: 0,
    version: "17.0.2",
    rendererPackageName: "react-dom"
  };
  var xk = {
    bundleType: wk.bundleType,
    version: wk.version,
    rendererPackageName: wk.rendererPackageName,
    rendererConfig: wk.rendererConfig,
    overrideHookState: null,
    overrideHookStateDeletePath: null,
    overrideHookStateRenamePath: null,
    overrideProps: null,
    overridePropsDeletePath: null,
    overridePropsRenamePath: null,
    setSuspenseHandler: null,
    scheduleUpdate: null,
    currentDispatcherRef: ra.ReactCurrentDispatcher,
    findHostInstanceByFiber: function findHostInstanceByFiber(a) {
      a = cc(a);
      return null === a ? null : a.stateNode;
    },
    findFiberByHostInstance: wk.findFiberByHostInstance || pk,
    findHostInstancesForRefresh: null,
    scheduleRefresh: null,
    scheduleRoot: null,
    setRefreshHandler: null,
    getCurrentFiber: null
  };

  if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
    var yk = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (!yk.isDisabled && yk.supportsFiber) try {
      Lf = yk.inject(xk), Mf = yk;
    } catch (a) {}
  }

  reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = vk;

  reactDom_production_min.createPortal = uk;

  reactDom_production_min.findDOMNode = function (a) {
    if (null == a) return null;
    if (1 === a.nodeType) return a;
    var b = a._reactInternals;

    if (void 0 === b) {
      if ("function" === typeof a.render) throw Error(y$4(188));
      throw Error(y$4(268, Object.keys(a)));
    }

    a = cc(b);
    a = null === a ? null : a.stateNode;
    return a;
  };

  reactDom_production_min.flushSync = function (a, b) {
    var c = X;
    if (0 !== (c & 48)) return a(b);
    X |= 1;

    try {
      if (a) return gg(99, a.bind(null, b));
    } finally {
      X = c, ig();
    }
  };

  reactDom_production_min.hydrate = function (a, b, c) {
    if (!rk(b)) throw Error(y$4(200));
    return tk(null, a, b, !0, c);
  };

  reactDom_production_min.render = function (a, b, c) {
    if (!rk(b)) throw Error(y$4(200));
    return tk(null, a, b, !1, c);
  };

  reactDom_production_min.unmountComponentAtNode = function (a) {
    if (!rk(a)) throw Error(y$4(40));
    return a._reactRootContainer ? (Xj(function () {
      tk(null, null, a, !1, function () {
        a._reactRootContainer = null;
        a[ff] = null;
      });
    }), !0) : !1;
  };

  reactDom_production_min.unstable_batchedUpdates = Wj;

  reactDom_production_min.unstable_createPortal = function (a, b) {
    return uk(a, b, 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null);
  };

  reactDom_production_min.unstable_renderSubtreeIntoContainer = function (a, b, c, d) {
    if (!rk(c)) throw Error(y$4(200));
    if (null == a || void 0 === a._reactInternals) throw Error(y$4(38));
    return tk(a, b, c, !1, d);
  };

  reactDom_production_min.version = "17.0.2";

  function checkDCE() {
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') {
      return;
    }

    try {
      // Verify that the code above has been dead code eliminated (DCE'd).
      __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
    } catch (err) {
      // DevTools shouldn't crash React, no matter what.
      // We should still report in case we break this code.
      console.error(err);
    }
  }

  {
    // DCE check should happen before ReactDOM bundle executes so that
    // DevTools can report bad minification during injection.
    checkDCE();
    reactDom.exports = reactDom_production_min;
  }

  var ReactDOM = reactDom.exports;

  var common$6 = {
    black: '#000',
    white: '#fff'
  };
  var common$7 = common$6;

  var red = {
    50: '#ffebee',
    100: '#ffcdd2',
    200: '#ef9a9a',
    300: '#e57373',
    400: '#ef5350',
    500: '#f44336',
    600: '#e53935',
    700: '#d32f2f',
    800: '#c62828',
    900: '#b71c1c',
    A100: '#ff8a80',
    A200: '#ff5252',
    A400: '#ff1744',
    A700: '#d50000'
  };
  var red$1 = red;

  var purple = {
    50: '#f3e5f5',
    100: '#e1bee7',
    200: '#ce93d8',
    300: '#ba68c8',
    400: '#ab47bc',
    500: '#9c27b0',
    600: '#8e24aa',
    700: '#7b1fa2',
    800: '#6a1b9a',
    900: '#4a148c',
    A100: '#ea80fc',
    A200: '#e040fb',
    A400: '#d500f9',
    A700: '#aa00ff'
  };
  var purple$1 = purple;

  var blue = {
    50: '#e3f2fd',
    100: '#bbdefb',
    200: '#90caf9',
    300: '#64b5f6',
    400: '#42a5f5',
    500: '#2196f3',
    600: '#1e88e5',
    700: '#1976d2',
    800: '#1565c0',
    900: '#0d47a1',
    A100: '#82b1ff',
    A200: '#448aff',
    A400: '#2979ff',
    A700: '#2962ff'
  };
  var blue$1 = blue;

  var lightBlue = {
    50: '#e1f5fe',
    100: '#b3e5fc',
    200: '#81d4fa',
    300: '#4fc3f7',
    400: '#29b6f6',
    500: '#03a9f4',
    600: '#039be5',
    700: '#0288d1',
    800: '#0277bd',
    900: '#01579b',
    A100: '#80d8ff',
    A200: '#40c4ff',
    A400: '#00b0ff',
    A700: '#0091ea'
  };
  var lightBlue$1 = lightBlue;

  var green = {
    50: '#e8f5e9',
    100: '#c8e6c9',
    200: '#a5d6a7',
    300: '#81c784',
    400: '#66bb6a',
    500: '#4caf50',
    600: '#43a047',
    700: '#388e3c',
    800: '#2e7d32',
    900: '#1b5e20',
    A100: '#b9f6ca',
    A200: '#69f0ae',
    A400: '#00e676',
    A700: '#00c853'
  };
  var green$1 = green;

  var orange = {
    50: '#fff3e0',
    100: '#ffe0b2',
    200: '#ffcc80',
    300: '#ffb74d',
    400: '#ffa726',
    500: '#ff9800',
    600: '#fb8c00',
    700: '#f57c00',
    800: '#ef6c00',
    900: '#e65100',
    A100: '#ffd180',
    A200: '#ffab40',
    A400: '#ff9100',
    A700: '#ff6d00'
  };
  var orange$1 = orange;

  var grey = {
    50: '#fafafa',
    100: '#f5f5f5',
    200: '#eeeeee',
    300: '#e0e0e0',
    400: '#bdbdbd',
    500: '#9e9e9e',
    600: '#757575',
    700: '#616161',
    800: '#424242',
    900: '#212121',
    A100: '#f5f5f5',
    A200: '#eeeeee',
    A400: '#bdbdbd',
    A700: '#616161'
  };
  var grey$1 = grey;

  function _extends$1() {
    _extends$1 = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends$1.apply(this, arguments);
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function memoize$1(fn) {
    var cache = Object.create(null);
    return function (arg) {
      if (cache[arg] === undefined) cache[arg] = fn(arg);
      return cache[arg];
    };
  }

  var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23

  var isPropValid = /* #__PURE__ */memoize$1(function (prop) {
    return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111
    /* o */
    && prop.charCodeAt(1) === 110
    /* n */
    && prop.charCodeAt(2) < 91;
  }
  /* Z+1 */
  );

  /*

  Based off glamor's StyleSheet, thanks Sunil ❤️

  high performance StyleSheet for css-in-js systems

  - uses multiple style tags behind the scenes for millions of rules
  - uses `insertRule` for appending in production for *much* faster performance

  // usage

  import { StyleSheet } from '@emotion/sheet'

  let styleSheet = new StyleSheet({ key: '', container: document.head })

  styleSheet.insert('#box { border: 1px solid red; }')
  - appends a css rule into the stylesheet

  styleSheet.flush()
  - empties the stylesheet of all its contents

  */
  // $FlowFixMe
  function sheetForTag(tag) {
    if (tag.sheet) {
      // $FlowFixMe
      return tag.sheet;
    } // this weirdness brought to you by firefox

    /* istanbul ignore next */


    for (var i = 0; i < document.styleSheets.length; i++) {
      if (document.styleSheets[i].ownerNode === tag) {
        // $FlowFixMe
        return document.styleSheets[i];
      }
    }
  }

  function createStyleElement(options) {
    var tag = document.createElement('style');
    tag.setAttribute('data-emotion', options.key);

    if (options.nonce !== undefined) {
      tag.setAttribute('nonce', options.nonce);
    }

    tag.appendChild(document.createTextNode(''));
    tag.setAttribute('data-s', '');
    return tag;
  }

  var StyleSheet = /*#__PURE__*/function () {
    function StyleSheet(options) {
      var _this = this;

      this._insertTag = function (tag) {
        var before;

        if (_this.tags.length === 0) {
          if (_this.insertionPoint) {
            before = _this.insertionPoint.nextSibling;
          } else if (_this.prepend) {
            before = _this.container.firstChild;
          } else {
            before = _this.before;
          }
        } else {
          before = _this.tags[_this.tags.length - 1].nextSibling;
        }

        _this.container.insertBefore(tag, before);

        _this.tags.push(tag);
      };

      this.isSpeedy = options.speedy === undefined ? "production" === 'production' : options.speedy;
      this.tags = [];
      this.ctr = 0;
      this.nonce = options.nonce; // key is the value of the data-emotion attribute, it's used to identify different sheets

      this.key = options.key;
      this.container = options.container;
      this.prepend = options.prepend;
      this.insertionPoint = options.insertionPoint;
      this.before = null;
    }

    var _proto = StyleSheet.prototype;

    _proto.hydrate = function hydrate(nodes) {
      nodes.forEach(this._insertTag);
    };

    _proto.insert = function insert(rule) {
      // the max length is how many rules we have per style tag, it's 65000 in speedy mode
      // it's 1 in dev because we insert source maps that map a single rule to a location
      // and you can only have one source map per style tag
      if (this.ctr % (this.isSpeedy ? 65000 : 1) === 0) {
        this._insertTag(createStyleElement(this));
      }

      var tag = this.tags[this.tags.length - 1];

      if (this.isSpeedy) {
        var sheet = sheetForTag(tag);

        try {
          // this is the ultrafast version, works across browsers
          // the big drawback is that the css won't be editable in devtools
          sheet.insertRule(rule, sheet.cssRules.length);
        } catch (e) {
        }
      } else {
        tag.appendChild(document.createTextNode(rule));
      }

      this.ctr++;
    };

    _proto.flush = function flush() {
      // $FlowFixMe
      this.tags.forEach(function (tag) {
        return tag.parentNode && tag.parentNode.removeChild(tag);
      });
      this.tags = [];
      this.ctr = 0;
    };

    return StyleSheet;
  }();

  var MS = '-ms-';
  var MOZ = '-moz-';
  var WEBKIT = '-webkit-';
  var COMMENT = 'comm';
  var RULESET = 'rule';
  var DECLARATION = 'decl';
  var IMPORT = '@import';
  var KEYFRAMES = '@keyframes';

  /**
   * @param {number}
   * @return {number}
   */
  var abs = Math.abs;
  /**
   * @param {number}
   * @return {string}
   */

  var from = String.fromCharCode;
  /**
   * @param {object}
   * @return {object}
   */

  var assign = Object.assign;
  /**
   * @param {string} value
   * @param {number} length
   * @return {number}
   */

  function hash$4(value, length) {
    return (((length << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3);
  }
  /**
   * @param {string} value
   * @return {string}
   */

  function trim$1(value) {
    return value.trim();
  }
  /**
   * @param {string} value
   * @param {RegExp} pattern
   * @return {string?}
   */

  function match(value, pattern) {
    return (value = pattern.exec(value)) ? value[0] : value;
  }
  /**
   * @param {string} value
   * @param {(string|RegExp)} pattern
   * @param {string} replacement
   * @return {string}
   */

  function replace(value, pattern, replacement) {
    return value.replace(pattern, replacement);
  }
  /**
   * @param {string} value
   * @param {string} search
   * @return {number}
   */

  function indexof(value, search) {
    return value.indexOf(search);
  }
  /**
   * @param {string} value
   * @param {number} index
   * @return {number}
   */

  function charat(value, index) {
    return value.charCodeAt(index) | 0;
  }
  /**
   * @param {string} value
   * @param {number} begin
   * @param {number} end
   * @return {string}
   */

  function substr(value, begin, end) {
    return value.slice(begin, end);
  }
  /**
   * @param {string} value
   * @return {number}
   */

  function strlen(value) {
    return value.length;
  }
  /**
   * @param {any[]} value
   * @return {number}
   */

  function sizeof(value) {
    return value.length;
  }
  /**
   * @param {any} value
   * @param {any[]} array
   * @return {any}
   */

  function append(value, array) {
    return array.push(value), value;
  }
  /**
   * @param {string[]} array
   * @param {function} callback
   * @return {string}
   */

  function combine(array, callback) {
    return array.map(callback).join('');
  }

  var line = 1;
  var column = 1;
  var length = 0;
  var position$3 = 0;
  var character = 0;
  var characters = '';
  /**
   * @param {string} value
   * @param {object | null} root
   * @param {object | null} parent
   * @param {string} type
   * @param {string[] | string} props
   * @param {object[] | string} children
   * @param {number} length
   */

  function node(value, root, parent, type, props, children, length) {
    return {
      value: value,
      root: root,
      parent: parent,
      type: type,
      props: props,
      children: children,
      line: line,
      column: column,
      length: length,
      "return": ''
    };
  }
  /**
   * @param {object} root
   * @param {object} props
   * @return {object}
   */

  function copy(root, props) {
    return assign(node('', null, null, '', null, null, 0), root, {
      length: -root.length
    }, props);
  }
  /**
   * @return {number}
   */

  function _char() {
    return character;
  }
  function prev() {
    character = position$3 > 0 ? charat(characters, --position$3) : 0;
    if (column--, character === 10) column = 1, line--;
    return character;
  }
  /**
   * @return {number}
   */

  function next() {
    character = position$3 < length ? charat(characters, position$3++) : 0;
    if (column++, character === 10) column = 1, line++;
    return character;
  }
  /**
   * @return {number}
   */

  function peek() {
    return charat(characters, position$3);
  }
  /**
   * @return {number}
   */

  function caret() {
    return position$3;
  }
  /**
   * @param {number} begin
   * @param {number} end
   * @return {string}
   */

  function slice(begin, end) {
    return substr(characters, begin, end);
  }
  /**
   * @param {number} type
   * @return {number}
   */

  function token(type) {
    switch (type) {
      // \0 \t \n \r \s whitespace token
      case 0:
      case 9:
      case 10:
      case 13:
      case 32:
        return 5;
      // ! + , / > @ ~ isolate token

      case 33:
      case 43:
      case 44:
      case 47:
      case 62:
      case 64:
      case 126: // ; { } breakpoint token

      case 59:
      case 123:
      case 125:
        return 4;
      // : accompanied token

      case 58:
        return 3;
      // " ' ( [ opening delimit token

      case 34:
      case 39:
      case 40:
      case 91:
        return 2;
      // ) ] closing delimit token

      case 41:
      case 93:
        return 1;
    }

    return 0;
  }
  /**
   * @param {string} value
   * @return {any[]}
   */

  function alloc(value) {
    return line = column = 1, length = strlen(characters = value), position$3 = 0, [];
  }
  /**
   * @param {any} value
   * @return {any}
   */

  function dealloc(value) {
    return characters = '', value;
  }
  /**
   * @param {number} type
   * @return {string}
   */

  function delimit(type) {
    return trim$1(slice(position$3 - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
  }
  /**
   * @param {number} type
   * @return {string}
   */

  function whitespace$1(type) {
    while (character = peek()) {
      if (character < 33) next();else break;
    }

    return token(type) > 2 || token(character) > 3 ? '' : ' ';
  }
  /**
   * @param {number} index
   * @param {number} count
   * @return {string}
   */

  function escaping(index, count) {
    while (--count && next()) {
      // not 0-9 A-F a-f
      if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97) break;
    }

    return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32));
  }
  /**
   * @param {number} type
   * @return {number}
   */

  function delimiter(type) {
    while (next()) {
      switch (character) {
        // ] ) " '
        case type:
          return position$3;
        // " '

        case 34:
        case 39:
          if (type !== 34 && type !== 39) delimiter(character);
          break;
        // (

        case 40:
          if (type === 41) delimiter(type);
          break;
        // \

        case 92:
          next();
          break;
      }
    }

    return position$3;
  }
  /**
   * @param {number} type
   * @param {number} index
   * @return {number}
   */

  function commenter(type, index) {
    while (next()) {
      // //
      if (type + character === 47 + 10) break; // /*
      else if (type + character === 42 + 42 && peek() === 47) break;
    }

    return '/*' + slice(index, position$3 - 1) + '*' + from(type === 47 ? type : next());
  }
  /**
   * @param {number} index
   * @return {string}
   */

  function identifier(index) {
    while (!token(peek())) {
      next();
    }

    return slice(index, position$3);
  }

  /**
   * @param {string} value
   * @return {object[]}
   */

  function compile$1(value) {
    return dealloc(parse$3('', null, null, null, [''], value = alloc(value), 0, [0], value));
  }
  /**
   * @param {string} value
   * @param {object} root
   * @param {object?} parent
   * @param {string[]} rule
   * @param {string[]} rules
   * @param {string[]} rulesets
   * @param {number[]} pseudo
   * @param {number[]} points
   * @param {string[]} declarations
   * @return {object}
   */

  function parse$3(value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
    var index = 0;
    var offset = 0;
    var length = pseudo;
    var atrule = 0;
    var property = 0;
    var previous = 0;
    var variable = 1;
    var scanning = 1;
    var ampersand = 1;
    var character = 0;
    var type = '';
    var props = rules;
    var children = rulesets;
    var reference = rule;
    var characters = type;

    while (scanning) {
      switch (previous = character, character = next()) {
        // (
        case 40:
          if (previous != 108 && characters.charCodeAt(length - 1) == 58) {
            if (indexof(characters += replace(delimit(character), '&', '&\f'), '&\f') != -1) ampersand = -1;
            break;
          }

        // " ' [

        case 34:
        case 39:
        case 91:
          characters += delimit(character);
          break;
        // \t \n \r \s

        case 9:
        case 10:
        case 13:
        case 32:
          characters += whitespace$1(previous);
          break;
        // \

        case 92:
          characters += escaping(caret() - 1, 7);
          continue;
        // /

        case 47:
          switch (peek()) {
            case 42:
            case 47:
              append(comment(commenter(next(), caret()), root, parent), declarations);
              break;

            default:
              characters += '/';
          }

          break;
        // {

        case 123 * variable:
          points[index++] = strlen(characters) * ampersand;
        // } ; \0

        case 125 * variable:
        case 59:
        case 0:
          switch (character) {
            // \0 }
            case 0:
            case 125:
              scanning = 0;
            // ;

            case 59 + offset:
              if (property > 0 && strlen(characters) - length) append(property > 32 ? declaration(characters + ';', rule, parent, length - 1) : declaration(replace(characters, ' ', '') + ';', rule, parent, length - 2), declarations);
              break;
            // @ ;

            case 59:
              characters += ';';
            // { rule/at-rule

            default:
              append(reference = ruleset(characters, root, parent, index, offset, rules, points, type, props = [], children = [], length), rulesets);
              if (character === 123) if (offset === 0) parse$3(characters, root, reference, reference, props, rulesets, length, points, children);else switch (atrule) {
                // d m s
                case 100:
                case 109:
                case 115:
                  parse$3(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length), children), rules, children, length, points, rule ? props : children);
                  break;

                default:
                  parse$3(characters, reference, reference, reference, [''], children, 0, points, children);
              }
          }

          index = offset = property = 0, variable = ampersand = 1, type = characters = '', length = pseudo;
          break;
        // :

        case 58:
          length = 1 + strlen(characters), property = previous;

        default:
          if (variable < 1) if (character == 123) --variable;else if (character == 125 && variable++ == 0 && prev() == 125) continue;

          switch (characters += from(character), character * variable) {
            // &
            case 38:
              ampersand = offset > 0 ? 1 : (characters += '\f', -1);
              break;
            // ,

            case 44:
              points[index++] = (strlen(characters) - 1) * ampersand, ampersand = 1;
              break;
            // @

            case 64:
              // -
              if (peek() === 45) characters += delimit(next());
              atrule = peek(), offset = length = strlen(type = characters += identifier(caret())), character++;
              break;
            // -

            case 45:
              if (previous === 45 && strlen(characters) == 2) variable = 0;
          }

      }
    }

    return rulesets;
  }
  /**
   * @param {string} value
   * @param {object} root
   * @param {object?} parent
   * @param {number} index
   * @param {number} offset
   * @param {string[]} rules
   * @param {number[]} points
   * @param {string} type
   * @param {string[]} props
   * @param {string[]} children
   * @param {number} length
   * @return {object}
   */

  function ruleset(value, root, parent, index, offset, rules, points, type, props, children, length) {
    var post = offset - 1;
    var rule = offset === 0 ? rules : [''];
    var size = sizeof(rule);

    for (var i = 0, j = 0, k = 0; i < index; ++i) {
      for (var x = 0, y = substr(value, post + 1, post = abs(j = points[i])), z = value; x < size; ++x) {
        if (z = trim$1(j > 0 ? rule[x] + ' ' + y : replace(y, /&\f/g, rule[x]))) props[k++] = z;
      }
    }

    return node(value, root, parent, offset === 0 ? RULESET : type, props, children, length);
  }
  /**
   * @param {number} value
   * @param {object} root
   * @param {object?} parent
   * @return {object}
   */

  function comment(value, root, parent) {
    return node(value, root, parent, COMMENT, from(_char()), substr(value, 2, -2), 0);
  }
  /**
   * @param {string} value
   * @param {object} root
   * @param {object?} parent
   * @param {number} length
   * @return {object}
   */

  function declaration(value, root, parent, length) {
    return node(value, root, parent, DECLARATION, substr(value, 0, length), substr(value, length + 1, -1), length);
  }

  /**
   * @param {string} value
   * @param {number} length
   * @return {string}
   */

  function prefix$1(value, length) {
    switch (hash$4(value, length)) {
      // color-adjust
      case 5103:
        return WEBKIT + 'print-' + value + value;
      // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)

      case 5737:
      case 4201:
      case 3177:
      case 3433:
      case 1641:
      case 4457:
      case 2921: // text-decoration, filter, clip-path, backface-visibility, column, box-decoration-break

      case 5572:
      case 6356:
      case 5844:
      case 3191:
      case 6645:
      case 3005: // mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite,

      case 6391:
      case 5879:
      case 5623:
      case 6135:
      case 4599:
      case 4855: // background-clip, columns, column-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width)

      case 4215:
      case 6389:
      case 5109:
      case 5365:
      case 5621:
      case 3829:
        return WEBKIT + value + value;
      // appearance, user-select, transform, hyphens, text-size-adjust

      case 5349:
      case 4246:
      case 4810:
      case 6968:
      case 2756:
        return WEBKIT + value + MOZ + value + MS + value + value;
      // flex, flex-direction

      case 6828:
      case 4268:
        return WEBKIT + value + MS + value + value;
      // order

      case 6165:
        return WEBKIT + value + MS + 'flex-' + value + value;
      // align-items

      case 5187:
        return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + 'box-$1$2' + MS + 'flex-$1$2') + value;
      // align-self

      case 5443:
        return WEBKIT + value + MS + 'flex-item-' + replace(value, /flex-|-self/, '') + value;
      // align-content

      case 4675:
        return WEBKIT + value + MS + 'flex-line-pack' + replace(value, /align-content|flex-|-self/, '') + value;
      // flex-shrink

      case 5548:
        return WEBKIT + value + MS + replace(value, 'shrink', 'negative') + value;
      // flex-basis

      case 5292:
        return WEBKIT + value + MS + replace(value, 'basis', 'preferred-size') + value;
      // flex-grow

      case 6060:
        return WEBKIT + 'box-' + replace(value, '-grow', '') + WEBKIT + value + MS + replace(value, 'grow', 'positive') + value;
      // transition

      case 4554:
        return WEBKIT + replace(value, /([^-])(transform)/g, '$1' + WEBKIT + '$2') + value;
      // cursor

      case 6187:
        return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + '$1'), /(image-set)/, WEBKIT + '$1'), value, '') + value;
      // background, background-image

      case 5495:
      case 3959:
        return replace(value, /(image-set\([^]*)/, WEBKIT + '$1' + '$`$1');
      // justify-content

      case 4968:
        return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + 'box-pack:$3' + MS + 'flex-pack:$3'), /s.+-b[^;]+/, 'justify') + WEBKIT + value + value;
      // (margin|padding)-inline-(start|end)

      case 4095:
      case 3583:
      case 4068:
      case 2532:
        return replace(value, /(.+)-inline(.+)/, WEBKIT + '$1$2') + value;
      // (min|max)?(width|height|inline-size|block-size)

      case 8116:
      case 7059:
      case 5753:
      case 5535:
      case 5445:
      case 5701:
      case 4933:
      case 4677:
      case 5533:
      case 5789:
      case 5021:
      case 4765:
        // stretch, max-content, min-content, fill-available
        if (strlen(value) - 1 - length > 6) switch (charat(value, length + 1)) {
          // (m)ax-content, (m)in-content
          case 109:
            // -
            if (charat(value, length + 4) !== 45) break;
          // (f)ill-available, (f)it-content

          case 102:
            return replace(value, /(.+:)(.+)-([^]+)/, '$1' + WEBKIT + '$2-$3' + '$1' + MOZ + (charat(value, length + 3) == 108 ? '$3' : '$2-$3')) + value;
          // (s)tretch

          case 115:
            return ~indexof(value, 'stretch') ? prefix$1(replace(value, 'stretch', 'fill-available'), length) + value : value;
        }
        break;
      // position: sticky

      case 4949:
        // (s)ticky?
        if (charat(value, length + 1) !== 115) break;
      // display: (flex|inline-flex)

      case 6444:
        switch (charat(value, strlen(value) - 3 - (~indexof(value, '!important') && 10))) {
          // stic(k)y
          case 107:
            return replace(value, ':', ':' + WEBKIT) + value;
          // (inline-)?fl(e)x

          case 101:
            return replace(value, /(.+:)([^;!]+)(;|!.+)?/, '$1' + WEBKIT + (charat(value, 14) === 45 ? 'inline-' : '') + 'box$3' + '$1' + WEBKIT + '$2$3' + '$1' + MS + '$2box$3') + value;
        }

        break;
      // writing-mode

      case 5936:
        switch (charat(value, length + 11)) {
          // vertical-l(r)
          case 114:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'tb') + value;
          // vertical-r(l)

          case 108:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'tb-rl') + value;
          // horizontal(-)tb

          case 45:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'lr') + value;
        }

        return WEBKIT + value + MS + value + value;
    }

    return value;
  }

  /**
   * @param {object[]} children
   * @param {function} callback
   * @return {string}
   */

  function serialize(children, callback) {
    var output = '';
    var length = sizeof(children);

    for (var i = 0; i < length; i++) {
      output += callback(children[i], i, children, callback) || '';
    }

    return output;
  }
  /**
   * @param {object} element
   * @param {number} index
   * @param {object[]} children
   * @param {function} callback
   * @return {string}
   */

  function stringify$2(element, index, children, callback) {
    switch (element.type) {
      case IMPORT:
      case DECLARATION:
        return element["return"] = element["return"] || element.value;

      case COMMENT:
        return '';

      case KEYFRAMES:
        return element["return"] = element.value + '{' + serialize(element.children, callback) + '}';

      case RULESET:
        element.value = element.props.join(',');
    }

    return strlen(children = serialize(element.children, callback)) ? element["return"] = element.value + '{' + children + '}' : '';
  }

  /**
   * @param {function[]} collection
   * @return {function}
   */

  function middleware(collection) {
    var length = sizeof(collection);
    return function (element, index, children, callback) {
      var output = '';

      for (var i = 0; i < length; i++) {
        output += collection[i](element, index, children, callback) || '';
      }

      return output;
    };
  }
  /**
   * @param {function} callback
   * @return {function}
   */

  function rulesheet(callback) {
    return function (element) {
      if (!element.root) if (element = element["return"]) callback(element);
    };
  }
  /**
   * @param {object} element
   * @param {number} index
   * @param {object[]} children
   * @param {function} callback
   */

  function prefixer(element, index, children, callback) {
    if (element.length > -1) if (!element["return"]) switch (element.type) {
      case DECLARATION:
        element["return"] = prefix$1(element.value, element.length);
        break;

      case KEYFRAMES:
        return serialize([copy(element, {
          value: replace(element.value, '@', '@' + WEBKIT)
        })], callback);

      case RULESET:
        if (element.length) return combine(element.props, function (value) {
          switch (match(value, /(::plac\w+|:read-\w+)/)) {
            // :read-(only|write)
            case ':read-only':
            case ':read-write':
              return serialize([copy(element, {
                props: [replace(value, /:(read-\w+)/, ':' + MOZ + '$1')]
              })], callback);
            // :placeholder

            case '::placeholder':
              return serialize([copy(element, {
                props: [replace(value, /:(plac\w+)/, ':' + WEBKIT + 'input-$1')]
              }), copy(element, {
                props: [replace(value, /:(plac\w+)/, ':' + MOZ + '$1')]
              }), copy(element, {
                props: [replace(value, /:(plac\w+)/, MS + 'input-$1')]
              })], callback);
          }

          return '';
        });
    }
  }

  var weakMemoize = function weakMemoize(func) {
    // $FlowFixMe flow doesn't include all non-primitive types as allowed for weakmaps
    var cache = new WeakMap();
    return function (arg) {
      if (cache.has(arg)) {
        // $FlowFixMe
        return cache.get(arg);
      }

      var ret = func(arg);
      cache.set(arg, ret);
      return ret;
    };
  };

  var identifierWithPointTracking = function identifierWithPointTracking(begin, points, index) {
    var previous = 0;
    var character = 0;

    while (true) {
      previous = character;
      character = peek(); // &\f

      if (previous === 38 && character === 12) {
        points[index] = 1;
      }

      if (token(character)) {
        break;
      }

      next();
    }

    return slice(begin, position$3);
  };

  var toRules = function toRules(parsed, points) {
    // pretend we've started with a comma
    var index = -1;
    var character = 44;

    do {
      switch (token(character)) {
        case 0:
          // &\f
          if (character === 38 && peek() === 12) {
            // this is not 100% correct, we don't account for literal sequences here - like for example quoted strings
            // stylis inserts \f after & to know when & where it should replace this sequence with the context selector
            // and when it should just concatenate the outer and inner selectors
            // it's very unlikely for this sequence to actually appear in a different context, so we just leverage this fact here
            points[index] = 1;
          }

          parsed[index] += identifierWithPointTracking(position$3 - 1, points, index);
          break;

        case 2:
          parsed[index] += delimit(character);
          break;

        case 4:
          // comma
          if (character === 44) {
            // colon
            parsed[++index] = peek() === 58 ? '&\f' : '';
            points[index] = parsed[index].length;
            break;
          }

        // fallthrough

        default:
          parsed[index] += from(character);
      }
    } while (character = next());

    return parsed;
  };

  var getRules = function getRules(value, points) {
    return dealloc(toRules(alloc(value), points));
  }; // WeakSet would be more appropriate, but only WeakMap is supported in IE11


  var fixedElements = /* #__PURE__ */new WeakMap();

  var compat = function compat(element) {
    if (element.type !== 'rule' || !element.parent || // positive .length indicates that this rule contains pseudo
    // negative .length indicates that this rule has been already prefixed
    element.length < 1) {
      return;
    }

    var value = element.value,
        parent = element.parent;
    var isImplicitRule = element.column === parent.column && element.line === parent.line;

    while (parent.type !== 'rule') {
      parent = parent.parent;
      if (!parent) return;
    } // short-circuit for the simplest case


    if (element.props.length === 1 && value.charCodeAt(0) !== 58
    /* colon */
    && !fixedElements.get(parent)) {
      return;
    } // if this is an implicitly inserted rule (the one eagerly inserted at the each new nested level)
    // then the props has already been manipulated beforehand as they that array is shared between it and its "rule parent"


    if (isImplicitRule) {
      return;
    }

    fixedElements.set(element, true);
    var points = [];
    var rules = getRules(value, points);
    var parentRules = parent.props;

    for (var i = 0, k = 0; i < rules.length; i++) {
      for (var j = 0; j < parentRules.length; j++, k++) {
        element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
      }
    }
  };

  var removeLabel = function removeLabel(element) {
    if (element.type === 'decl') {
      var value = element.value;

      if ( // charcode for l
      value.charCodeAt(0) === 108 && // charcode for b
      value.charCodeAt(2) === 98) {
        // this ignores label
        element["return"] = '';
        element.value = '';
      }
    }
  };

  var isBrowser$4 = typeof document !== 'undefined';
  var getServerStylisCache = isBrowser$4 ? undefined : weakMemoize(function () {
    return memoize$1(function () {
      var cache = {};
      return function (name) {
        return cache[name];
      };
    });
  });
  var defaultStylisPlugins = [prefixer];

  var createCache = function createCache(options) {
    var key = options.key;

    if (isBrowser$4 && key === 'css') {
      var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])"); // get SSRed styles out of the way of React's hydration
      // document.head is a safe place to move them to(though note document.head is not necessarily the last place they will be)
      // note this very very intentionally targets all style elements regardless of the key to ensure
      // that creating a cache works inside of render of a React component

      Array.prototype.forEach.call(ssrStyles, function (node) {
        // we want to only move elements which have a space in the data-emotion attribute value
        // because that indicates that it is an Emotion 11 server-side rendered style elements
        // while we will already ignore Emotion 11 client-side inserted styles because of the :not([data-s]) part in the selector
        // Emotion 10 client-side inserted styles did not have data-s (but importantly did not have a space in their data-emotion attributes)
        // so checking for the space ensures that loading Emotion 11 after Emotion 10 has inserted some styles
        // will not result in the Emotion 10 styles being destroyed
        var dataEmotionAttribute = node.getAttribute('data-emotion');

        if (dataEmotionAttribute.indexOf(' ') === -1) {
          return;
        }

        document.head.appendChild(node);
        node.setAttribute('data-s', '');
      });
    }

    var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;

    var inserted = {}; // $FlowFixMe

    var container;
    var nodesToHydrate = [];

    if (isBrowser$4) {
      container = options.container || document.head;
      Array.prototype.forEach.call( // this means we will ignore elements which don't have a space in them which
      // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
      document.querySelectorAll("style[data-emotion^=\"" + key + " \"]"), function (node) {
        var attrib = node.getAttribute("data-emotion").split(' '); // $FlowFixMe

        for (var i = 1; i < attrib.length; i++) {
          inserted[attrib[i]] = true;
        }

        nodesToHydrate.push(node);
      });
    }

    var _insert;

    var omnipresentPlugins = [compat, removeLabel];

    if (isBrowser$4) {
      var currentSheet;
      var finalizingPlugins = [stringify$2, rulesheet(function (rule) {
        currentSheet.insert(rule);
      })];
      var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));

      var stylis = function stylis(styles) {
        return serialize(compile$1(styles), serializer);
      };

      _insert = function insert(selector, serialized, sheet, shouldCache) {
        currentSheet = sheet;

        stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);

        if (shouldCache) {
          cache.inserted[serialized.name] = true;
        }
      };
    } else {
      var _finalizingPlugins = [stringify$2];

      var _serializer = middleware(omnipresentPlugins.concat(stylisPlugins, _finalizingPlugins));

      var _stylis = function _stylis(styles) {
        return serialize(compile$1(styles), _serializer);
      }; // $FlowFixMe


      var serverStylisCache = getServerStylisCache(stylisPlugins)(key);

      var getRules = function getRules(selector, serialized) {
        var name = serialized.name;

        if (serverStylisCache[name] === undefined) {
          serverStylisCache[name] = _stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
        }

        return serverStylisCache[name];
      };

      _insert = function _insert(selector, serialized, sheet, shouldCache) {
        var name = serialized.name;
        var rules = getRules(selector, serialized);

        if (cache.compat === undefined) {
          // in regular mode, we don't set the styles on the inserted cache
          // since we don't need to and that would be wasting memory
          // we return them so that they are rendered in a style tag
          if (shouldCache) {
            cache.inserted[name] = true;
          }

          return rules;
        } else {
          // in compat mode, we put the styles on the inserted cache so
          // that emotion-server can pull out the styles
          // except when we don't want to cache it which was in Global but now
          // is nowhere but we don't want to do a major right now
          // and just in case we're going to leave the case here
          // it's also not affecting client side bundle size
          // so it's really not a big deal
          if (shouldCache) {
            cache.inserted[name] = rules;
          } else {
            return rules;
          }
        }
      };
    }

    var cache = {
      key: key,
      sheet: new StyleSheet({
        key: key,
        container: container,
        nonce: options.nonce,
        speedy: options.speedy,
        prepend: options.prepend,
        insertionPoint: options.insertionPoint
      }),
      nonce: options.nonce,
      inserted: inserted,
      registered: {},
      insert: _insert
    };
    cache.sheet.hydrate(nodesToHydrate);
    return cache;
  };

  var reactIs$2 = {exports: {}};

  var reactIs_production_min$3 = {};

  var b$3 = "function" === typeof Symbol && Symbol["for"],
      c$3 = b$3 ? Symbol["for"]("react.element") : 60103,
      d$3 = b$3 ? Symbol["for"]("react.portal") : 60106,
      e$3 = b$3 ? Symbol["for"]("react.fragment") : 60107,
      f$5 = b$3 ? Symbol["for"]("react.strict_mode") : 60108,
      g$4 = b$3 ? Symbol["for"]("react.profiler") : 60114,
      h$4 = b$3 ? Symbol["for"]("react.provider") : 60109,
      k$3 = b$3 ? Symbol["for"]("react.context") : 60110,
      l$3 = b$3 ? Symbol["for"]("react.async_mode") : 60111,
      m$4 = b$3 ? Symbol["for"]("react.concurrent_mode") : 60111,
      n$4 = b$3 ? Symbol["for"]("react.forward_ref") : 60112,
      p$4 = b$3 ? Symbol["for"]("react.suspense") : 60113,
      q$4 = b$3 ? Symbol["for"]("react.suspense_list") : 60120,
      r$4 = b$3 ? Symbol["for"]("react.memo") : 60115,
      t$1 = b$3 ? Symbol["for"]("react.lazy") : 60116,
      v$3 = b$3 ? Symbol["for"]("react.block") : 60121,
      w$3 = b$3 ? Symbol["for"]("react.fundamental") : 60117,
      x$4 = b$3 ? Symbol["for"]("react.responder") : 60118,
      y$3 = b$3 ? Symbol["for"]("react.scope") : 60119;

  function z$4(a) {
    if ("object" === _typeof(a) && null !== a) {
      var u = a.$$typeof;

      switch (u) {
        case c$3:
          switch (a = a.type, a) {
            case l$3:
            case m$4:
            case e$3:
            case g$4:
            case f$5:
            case p$4:
              return a;

            default:
              switch (a = a && a.$$typeof, a) {
                case k$3:
                case n$4:
                case t$1:
                case r$4:
                case h$4:
                  return a;

                default:
                  return u;
              }

          }

        case d$3:
          return u;
      }
    }
  }

  function A$3(a) {
    return z$4(a) === m$4;
  }

  reactIs_production_min$3.AsyncMode = l$3;
  reactIs_production_min$3.ConcurrentMode = m$4;
  reactIs_production_min$3.ContextConsumer = k$3;
  reactIs_production_min$3.ContextProvider = h$4;
  reactIs_production_min$3.Element = c$3;
  reactIs_production_min$3.ForwardRef = n$4;
  reactIs_production_min$3.Fragment = e$3;
  reactIs_production_min$3.Lazy = t$1;
  reactIs_production_min$3.Memo = r$4;
  reactIs_production_min$3.Portal = d$3;
  reactIs_production_min$3.Profiler = g$4;
  reactIs_production_min$3.StrictMode = f$5;
  reactIs_production_min$3.Suspense = p$4;

  reactIs_production_min$3.isAsyncMode = function (a) {
    return A$3(a) || z$4(a) === l$3;
  };

  reactIs_production_min$3.isConcurrentMode = A$3;

  reactIs_production_min$3.isContextConsumer = function (a) {
    return z$4(a) === k$3;
  };

  reactIs_production_min$3.isContextProvider = function (a) {
    return z$4(a) === h$4;
  };

  reactIs_production_min$3.isElement = function (a) {
    return "object" === _typeof(a) && null !== a && a.$$typeof === c$3;
  };

  reactIs_production_min$3.isForwardRef = function (a) {
    return z$4(a) === n$4;
  };

  reactIs_production_min$3.isFragment = function (a) {
    return z$4(a) === e$3;
  };

  reactIs_production_min$3.isLazy = function (a) {
    return z$4(a) === t$1;
  };

  reactIs_production_min$3.isMemo = function (a) {
    return z$4(a) === r$4;
  };

  reactIs_production_min$3.isPortal = function (a) {
    return z$4(a) === d$3;
  };

  reactIs_production_min$3.isProfiler = function (a) {
    return z$4(a) === g$4;
  };

  reactIs_production_min$3.isStrictMode = function (a) {
    return z$4(a) === f$5;
  };

  reactIs_production_min$3.isSuspense = function (a) {
    return z$4(a) === p$4;
  };

  reactIs_production_min$3.isValidElementType = function (a) {
    return "string" === typeof a || "function" === typeof a || a === e$3 || a === m$4 || a === g$4 || a === f$5 || a === p$4 || a === q$4 || "object" === _typeof(a) && null !== a && (a.$$typeof === t$1 || a.$$typeof === r$4 || a.$$typeof === h$4 || a.$$typeof === k$3 || a.$$typeof === n$4 || a.$$typeof === w$3 || a.$$typeof === x$4 || a.$$typeof === y$3 || a.$$typeof === v$3);
  };

  reactIs_production_min$3.typeOf = z$4;

  {
    reactIs$2.exports = reactIs_production_min$3;
  }

  var reactIs$1 = reactIs$2.exports;
  var FORWARD_REF_STATICS = {
    '$$typeof': true,
    render: true,
    defaultProps: true,
    displayName: true,
    propTypes: true
  };
  var MEMO_STATICS = {
    '$$typeof': true,
    compare: true,
    defaultProps: true,
    displayName: true,
    propTypes: true,
    type: true
  };
  var TYPE_STATICS = {};
  TYPE_STATICS[reactIs$1.ForwardRef] = FORWARD_REF_STATICS;
  TYPE_STATICS[reactIs$1.Memo] = MEMO_STATICS;

  var isBrowser$3 = typeof document !== 'undefined';

  function getRegisteredStyles(registered, registeredStyles, classNames) {
    var rawClassName = '';
    classNames.split(' ').forEach(function (className) {
      if (registered[className] !== undefined) {
        registeredStyles.push(registered[className] + ";");
      } else {
        rawClassName += className + " ";
      }
    });
    return rawClassName;
  }

  var registerStyles = function registerStyles(cache, serialized, isStringTag) {
    var className = cache.key + "-" + serialized.name;

    if ( // we only need to add the styles to the registered cache if the
    // class name could be used further down
    // the tree but if it's a string tag, we know it won't
    // so we don't have to add it to registered cache.
    // this improves memory usage since we can avoid storing the whole style string
    (isStringTag === false || // we need to always store it if we're in compat mode and
    // in node since emotion-server relies on whether a style is in
    // the registered cache to know whether a style is global or not
    // also, note that this check will be dead code eliminated in the browser
    isBrowser$3 === false && cache.compat !== undefined) && cache.registered[className] === undefined) {
      cache.registered[className] = serialized.styles;
    }
  };

  var insertStyles = function insertStyles(cache, serialized, isStringTag) {
    registerStyles(cache, serialized, isStringTag);
    var className = cache.key + "-" + serialized.name;

    if (cache.inserted[serialized.name] === undefined) {
      var stylesForSSR = '';
      var current = serialized;

      do {
        var maybeStyles = cache.insert(serialized === current ? "." + className : '', current, cache.sheet, true);

        if (!isBrowser$3 && maybeStyles !== undefined) {
          stylesForSSR += maybeStyles;
        }

        current = current.next;
      } while (current !== undefined);

      if (!isBrowser$3 && stylesForSSR.length !== 0) {
        return stylesForSSR;
      }
    }
  };

  /* eslint-disable */
  // Inspired by https://github.com/garycourt/murmurhash-js
  // Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86
  function murmur2(str) {
    // 'm' and 'r' are mixing constants generated offline.
    // They're not really 'magic', they just happen to work well.
    // const m = 0x5bd1e995;
    // const r = 24;
    // Initialize the hash
    var h = 0; // Mix 4 bytes at a time into the hash

    var k,
        i = 0,
        len = str.length;

    for (; len >= 4; ++i, len -= 4) {
      k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;
      k =
      /* Math.imul(k, m): */
      (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16);
      k ^=
      /* k >>> r: */
      k >>> 24;
      h =
      /* Math.imul(k, m): */
      (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16) ^
      /* Math.imul(h, m): */
      (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
    } // Handle the last few bytes of the input array


    switch (len) {
      case 3:
        h ^= (str.charCodeAt(i + 2) & 0xff) << 16;

      case 2:
        h ^= (str.charCodeAt(i + 1) & 0xff) << 8;

      case 1:
        h ^= str.charCodeAt(i) & 0xff;
        h =
        /* Math.imul(h, m): */
        (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
    } // Do a few final mixes of the hash to ensure the last few
    // bytes are well-incorporated.


    h ^= h >>> 13;
    h =
    /* Math.imul(h, m): */
    (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
    return ((h ^ h >>> 15) >>> 0).toString(36);
  }

  var unitlessKeys = {
    animationIterationCount: 1,
    borderImageOutset: 1,
    borderImageSlice: 1,
    borderImageWidth: 1,
    boxFlex: 1,
    boxFlexGroup: 1,
    boxOrdinalGroup: 1,
    columnCount: 1,
    columns: 1,
    flex: 1,
    flexGrow: 1,
    flexPositive: 1,
    flexShrink: 1,
    flexNegative: 1,
    flexOrder: 1,
    gridRow: 1,
    gridRowEnd: 1,
    gridRowSpan: 1,
    gridRowStart: 1,
    gridColumn: 1,
    gridColumnEnd: 1,
    gridColumnSpan: 1,
    gridColumnStart: 1,
    msGridRow: 1,
    msGridRowSpan: 1,
    msGridColumn: 1,
    msGridColumnSpan: 1,
    fontWeight: 1,
    lineHeight: 1,
    opacity: 1,
    order: 1,
    orphans: 1,
    tabSize: 1,
    widows: 1,
    zIndex: 1,
    zoom: 1,
    WebkitLineClamp: 1,
    // SVG-related properties
    fillOpacity: 1,
    floodOpacity: 1,
    stopOpacity: 1,
    strokeDasharray: 1,
    strokeDashoffset: 1,
    strokeMiterlimit: 1,
    strokeOpacity: 1,
    strokeWidth: 1
  };

  var hyphenateRegex = /[A-Z]|^ms/g;
  var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;

  var isCustomProperty = function isCustomProperty(property) {
    return property.charCodeAt(1) === 45;
  };

  var isProcessableValue = function isProcessableValue(value) {
    return value != null && typeof value !== 'boolean';
  };

  var processStyleName = /* #__PURE__ */memoize$1(function (styleName) {
    return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, '-$&').toLowerCase();
  });

  var processStyleValue = function processStyleValue(key, value) {
    switch (key) {
      case 'animation':
      case 'animationName':
        {
          if (typeof value === 'string') {
            return value.replace(animationRegex, function (match, p1, p2) {
              cursor = {
                name: p1,
                styles: p2,
                next: cursor
              };
              return p1;
            });
          }
        }
    }

    if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === 'number' && value !== 0) {
      return value + 'px';
    }

    return value;
  };

  function handleInterpolation(mergedProps, registered, interpolation) {
    if (interpolation == null) {
      return '';
    }

    if (interpolation.__emotion_styles !== undefined) {

      return interpolation;
    }

    switch (_typeof(interpolation)) {
      case 'boolean':
        {
          return '';
        }

      case 'object':
        {
          if (interpolation.anim === 1) {
            cursor = {
              name: interpolation.name,
              styles: interpolation.styles,
              next: cursor
            };
            return interpolation.name;
          }

          if (interpolation.styles !== undefined) {
            var next = interpolation.next;

            if (next !== undefined) {
              // not the most efficient thing ever but this is a pretty rare case
              // and there will be very few iterations of this generally
              while (next !== undefined) {
                cursor = {
                  name: next.name,
                  styles: next.styles,
                  next: cursor
                };
                next = next.next;
              }
            }

            var styles = interpolation.styles + ";";

            return styles;
          }

          return createStringFromObject(mergedProps, registered, interpolation);
        }

      case 'function':
        {
          if (mergedProps !== undefined) {
            var previousCursor = cursor;
            var result = interpolation(mergedProps);
            cursor = previousCursor;
            return handleInterpolation(mergedProps, registered, result);
          }

          break;
        }
    } // finalize string values (regular strings and functions interpolated into css calls)


    if (registered == null) {
      return interpolation;
    }

    var cached = registered[interpolation];
    return cached !== undefined ? cached : interpolation;
  }

  function createStringFromObject(mergedProps, registered, obj) {
    var string = '';

    if (Array.isArray(obj)) {
      for (var i = 0; i < obj.length; i++) {
        string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
      }
    } else {
      for (var _key in obj) {
        var value = obj[_key];

        if (_typeof(value) !== 'object') {
          if (registered != null && registered[value] !== undefined) {
            string += _key + "{" + registered[value] + "}";
          } else if (isProcessableValue(value)) {
            string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
          }
        } else {
          if (_key === 'NO_COMPONENT_SELECTOR' && "production" !== 'production') {
            throw new Error('Component selectors can only be used in conjunction with @emotion/babel-plugin.');
          }

          if (Array.isArray(value) && typeof value[0] === 'string' && (registered == null || registered[value[0]] === undefined)) {
            for (var _i = 0; _i < value.length; _i++) {
              if (isProcessableValue(value[_i])) {
                string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
              }
            }
          } else {
            var interpolated = handleInterpolation(mergedProps, registered, value);

            switch (_key) {
              case 'animation':
              case 'animationName':
                {
                  string += processStyleName(_key) + ":" + interpolated + ";";
                  break;
                }

              default:
                {

                  string += _key + "{" + interpolated + "}";
                }
            }
          }
        }
      }
    }

    return string;
  }

  var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
  // keyframes are stored on the SerializedStyles object as a linked list


  var cursor;

  var serializeStyles = function serializeStyles(args, registered, mergedProps) {
    if (args.length === 1 && _typeof(args[0]) === 'object' && args[0] !== null && args[0].styles !== undefined) {
      return args[0];
    }

    var stringMode = true;
    var styles = '';
    cursor = undefined;
    var strings = args[0];

    if (strings == null || strings.raw === undefined) {
      stringMode = false;
      styles += handleInterpolation(mergedProps, registered, strings);
    } else {

      styles += strings[0];
    } // we start at 1 since we've already handled the first arg


    for (var i = 1; i < args.length; i++) {
      styles += handleInterpolation(mergedProps, registered, args[i]);

      if (stringMode) {

        styles += strings[i];
      }
    }


    labelPattern.lastIndex = 0;
    var identifierName = '';
    var match; // https://esbench.com/bench/5b809c2cf2949800a0f61fb5

    while ((match = labelPattern.exec(styles)) !== null) {
      identifierName += '-' + // $FlowFixMe we know it's not null
      match[1];
    }

    var name = murmur2(styles) + identifierName;

    return {
      name: name,
      styles: styles,
      next: cursor
    };
  };

  var isBrowser$2 = typeof document !== 'undefined';
  var EmotionCacheContext = /* #__PURE__ */react.exports.createContext( // we're doing this to avoid preconstruct's dead code elimination in this one case
  // because this module is primarily intended for the browser and node
  // but it's also required in react native and similar environments sometimes
  // and we could have a special build just for that
  // but this is much easier and the native packages
  // might use a different theme context in the future anyway
  typeof HTMLElement !== 'undefined' ? /* #__PURE__ */createCache({
    key: 'css'
  }) : null);

  EmotionCacheContext.Provider;

  var withEmotionCache = function withEmotionCache(func) {
    // $FlowFixMe
    return /*#__PURE__*/react.exports.forwardRef(function (props, ref) {
      // the cache will never be null in the browser
      var cache = react.exports.useContext(EmotionCacheContext);
      return func(props, cache, ref);
    });
  };

  if (!isBrowser$2) {
    withEmotionCache = function withEmotionCache(func) {
      return function (props) {
        var cache = react.exports.useContext(EmotionCacheContext);

        if (cache === null) {
          // yes, we're potentially creating this on every render
          // it doesn't actually matter though since it's only on the server
          // so there will only every be a single render
          // that could change in the future because of suspense and etc. but for now,
          // this works and i don't want to optimise for a future thing that we aren't sure about
          cache = createCache({
            key: 'css'
          });
          return /*#__PURE__*/react.exports.createElement(EmotionCacheContext.Provider, {
            value: cache
          }, func(props, cache));
        } else {
          return func(props, cache);
        }
      };
    };
  }

  var ThemeContext$2 = /* #__PURE__ */react.exports.createContext({});
  React$1['useInsertion' + 'Effect'] ? React$1['useInsertion' + 'Effect'] : function useInsertionEffect(create) {
    create();
  };

  var useInsertionEffect$1 = React$1['useInsertion' + 'Effect'] ? React$1['useInsertion' + 'Effect'] : react.exports.useLayoutEffect;
  // initial render from browser, insertBefore context.sheet.tags[0] or if a style hasn't been inserted there yet, appendChild
  // initial client-side render from SSR, use place of hydrating tag

  var Global = /* #__PURE__ */withEmotionCache(function (props, cache) {

    var styles = props.styles;
    var serialized = serializeStyles([styles], undefined, react.exports.useContext(ThemeContext$2));

    if (!isBrowser$2) {
      var _ref;

      var serializedNames = serialized.name;
      var serializedStyles = serialized.styles;
      var next = serialized.next;

      while (next !== undefined) {
        serializedNames += ' ' + next.name;
        serializedStyles += next.styles;
        next = next.next;
      }

      var shouldCache = cache.compat === true;
      var rules = cache.insert("", {
        name: serializedNames,
        styles: serializedStyles
      }, cache.sheet, shouldCache);

      if (shouldCache) {
        return null;
      }

      return /*#__PURE__*/react.exports.createElement("style", (_ref = {}, _ref["data-emotion"] = cache.key + "-global " + serializedNames, _ref.dangerouslySetInnerHTML = {
        __html: rules
      }, _ref.nonce = cache.sheet.nonce, _ref));
    } // yes, i know these hooks are used conditionally
    // but it is based on a constant that will never change at runtime
    // it's effectively like having two implementations and switching them out
    // so it's not actually breaking anything


    var sheetRef = react.exports.useRef();
    useInsertionEffect$1(function () {
      var key = cache.key + "-global"; // use case of https://github.com/emotion-js/emotion/issues/2675

      var sheet = new cache.sheet.constructor({
        key: key,
        nonce: cache.sheet.nonce,
        container: cache.sheet.container,
        speedy: cache.sheet.isSpeedy
      });
      var rehydrating = false; // $FlowFixMe

      var node = document.querySelector("style[data-emotion=\"" + key + " " + serialized.name + "\"]");

      if (cache.sheet.tags.length) {
        sheet.before = cache.sheet.tags[0];
      }

      if (node !== null) {
        rehydrating = true; // clear the hash so this node won't be recognizable as rehydratable by other <Global/>s

        node.setAttribute('data-emotion', key);
        sheet.hydrate([node]);
      }

      sheetRef.current = [sheet, rehydrating];
      return function () {
        sheet.flush();
      };
    }, [cache]);
    useInsertionEffect$1(function () {
      var sheetRefCurrent = sheetRef.current;
      var sheet = sheetRefCurrent[0],
          rehydrating = sheetRefCurrent[1];

      if (rehydrating) {
        sheetRefCurrent[1] = false;
        return;
      }

      if (serialized.next !== undefined) {
        // insert keyframes
        insertStyles(cache, serialized.next, true);
      }

      if (sheet.tags.length) {
        // if this doesn't exist then it will be null so the style element will be appended
        var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
        sheet.before = element;
        sheet.flush();
      }

      cache.insert("", serialized, sheet, false);
    }, [cache, serialized.name]);
    return null;
  });

  function css() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return serializeStyles(args);
  }

  var keyframes = function keyframes() {
    var insertable = css.apply(void 0, arguments);
    var name = "animation-" + insertable.name; // $FlowFixMe

    return {
      name: name,
      styles: "@keyframes " + name + "{" + insertable.styles + "}",
      anim: 1,
      toString: function toString() {
        return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
      }
    };
  };

  var testOmitPropsOnStringTag = isPropValid;

  var testOmitPropsOnComponent = function testOmitPropsOnComponent(key) {
    return key !== 'theme';
  };

  var getDefaultShouldForwardProp = function getDefaultShouldForwardProp(tag) {
    return typeof tag === 'string' && // 96 is one less than the char code
    // for "a" so this is checking that
    // it's a lowercase character
    tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
  };

  var composeShouldForwardProps = function composeShouldForwardProps(tag, options, isReal) {
    var shouldForwardProp;

    if (options) {
      var optionsShouldForwardProp = options.shouldForwardProp;
      shouldForwardProp = tag.__emotion_forwardProp && optionsShouldForwardProp ? function (propName) {
        return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
      } : optionsShouldForwardProp;
    }

    if (typeof shouldForwardProp !== 'function' && isReal) {
      shouldForwardProp = tag.__emotion_forwardProp;
    }

    return shouldForwardProp;
  };

  var isBrowser = typeof document !== 'undefined';
  var useInsertionEffect = React$1['useInsertion' + 'Effect'] ? React$1['useInsertion' + 'Effect'] : function useInsertionEffect(create) {
    create();
  };

  function useInsertionEffectMaybe(create) {
    if (!isBrowser) {
      return create();
    }

    useInsertionEffect(create);
  }
  var isBrowser$1 = typeof document !== 'undefined';

  var Insertion = function Insertion(_ref) {
    var cache = _ref.cache,
        serialized = _ref.serialized,
        isStringTag = _ref.isStringTag;
    registerStyles(cache, serialized, isStringTag);
    var rules = useInsertionEffectMaybe(function () {
      return insertStyles(cache, serialized, isStringTag);
    });

    if (!isBrowser$1 && rules !== undefined) {
      var _ref2;

      var serializedNames = serialized.name;
      var next = serialized.next;

      while (next !== undefined) {
        serializedNames += ' ' + next.name;
        next = next.next;
      }

      return /*#__PURE__*/react.exports.createElement("style", (_ref2 = {}, _ref2["data-emotion"] = cache.key + " " + serializedNames, _ref2.dangerouslySetInnerHTML = {
        __html: rules
      }, _ref2.nonce = cache.sheet.nonce, _ref2));
    }

    return null;
  };

  var createStyled$1 = function createStyled(tag, options) {

    var isReal = tag.__emotion_real === tag;
    var baseTag = isReal && tag.__emotion_base || tag;
    var identifierName;
    var targetClassName;

    if (options !== undefined) {
      identifierName = options.label;
      targetClassName = options.target;
    }

    var shouldForwardProp = composeShouldForwardProps(tag, options, isReal);
    var defaultShouldForwardProp = shouldForwardProp || getDefaultShouldForwardProp(baseTag);
    var shouldUseAs = !defaultShouldForwardProp('as');
    return function () {
      var args = arguments;
      var styles = isReal && tag.__emotion_styles !== undefined ? tag.__emotion_styles.slice(0) : [];

      if (identifierName !== undefined) {
        styles.push("label:" + identifierName + ";");
      }

      if (args[0] == null || args[0].raw === undefined) {
        styles.push.apply(styles, args);
      } else {

        styles.push(args[0][0]);
        var len = args.length;
        var i = 1;

        for (; i < len; i++) {

          styles.push(args[i], args[0][i]);
        }
      } // $FlowFixMe: we need to cast StatelessFunctionalComponent to our PrivateStyledComponent class


      var Styled = withEmotionCache(function (props, cache, ref) {
        var FinalTag = shouldUseAs && props.as || baseTag;
        var className = '';
        var classInterpolations = [];
        var mergedProps = props;

        if (props.theme == null) {
          mergedProps = {};

          for (var key in props) {
            mergedProps[key] = props[key];
          }

          mergedProps.theme = react.exports.useContext(ThemeContext$2);
        }

        if (typeof props.className === 'string') {
          className = getRegisteredStyles(cache.registered, classInterpolations, props.className);
        } else if (props.className != null) {
          className = props.className + " ";
        }

        var serialized = serializeStyles(styles.concat(classInterpolations), cache.registered, mergedProps);
        className += cache.key + "-" + serialized.name;

        if (targetClassName !== undefined) {
          className += " " + targetClassName;
        }

        var finalShouldForwardProp = shouldUseAs && shouldForwardProp === undefined ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
        var newProps = {};

        for (var _key in props) {
          if (shouldUseAs && _key === 'as') continue;

          if ( // $FlowFixMe
          finalShouldForwardProp(_key)) {
            newProps[_key] = props[_key];
          }
        }

        newProps.className = className;
        newProps.ref = ref;
        return /*#__PURE__*/react.exports.createElement(react.exports.Fragment, null, /*#__PURE__*/react.exports.createElement(Insertion, {
          cache: cache,
          serialized: serialized,
          isStringTag: typeof FinalTag === 'string'
        }), /*#__PURE__*/react.exports.createElement(FinalTag, newProps));
      });
      Styled.displayName = identifierName !== undefined ? identifierName : "Styled(" + (typeof baseTag === 'string' ? baseTag : baseTag.displayName || baseTag.name || 'Component') + ")";
      Styled.defaultProps = tag.defaultProps;
      Styled.__emotion_real = Styled;
      Styled.__emotion_base = baseTag;
      Styled.__emotion_styles = styles;
      Styled.__emotion_forwardProp = shouldForwardProp;
      Object.defineProperty(Styled, 'toString', {
        value: function value() {
          if (targetClassName === undefined && "production" !== 'production') {
            return 'NO_COMPONENT_SELECTOR';
          } // $FlowFixMe: coerce undefined to string


          return "." + targetClassName;
        }
      });

      Styled.withComponent = function (nextTag, nextOptions) {
        return createStyled(nextTag, _extends$1({}, options, nextOptions, {
          shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
        })).apply(void 0, styles);
      };

      return Styled;
    };
  };

  var tags = ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr', // SVG
  'circle', 'clipPath', 'defs', 'ellipse', 'foreignObject', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'svg', 'text', 'tspan'];
  var newStyled = createStyled$1.bind();
  tags.forEach(function (tagName) {
    // $FlowFixMe: we can ignore this because its exposed type is defined by the CreateStyled type
    newStyled[tagName] = newStyled(tagName);
  });
  var emStyled = newStyled;

  var propTypes$1 = {exports: {}};

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  var ReactPropTypesSecret$2 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
  var ReactPropTypesSecret_1$1 = ReactPropTypesSecret$2;

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  var ReactPropTypesSecret$1 = ReactPropTypesSecret_1$1;

  function emptyFunction$1() {}

  function emptyFunctionWithReset$1() {}

  emptyFunctionWithReset$1.resetWarningCache = emptyFunction$1;

  var factoryWithThrowingShims$1 = function factoryWithThrowingShims() {
    function shim(props, propName, componentName, location, propFullName, secret) {
      if (secret === ReactPropTypesSecret$1) {
        // It is still safe when called from React.
        return;
      }

      var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
      err.name = 'Invariant Violation';
      throw err;
    }
    shim.isRequired = shim;

    function getShim() {
      return shim;
    }
    // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.

    var ReactPropTypes = {
      array: shim,
      bigint: shim,
      bool: shim,
      func: shim,
      number: shim,
      object: shim,
      string: shim,
      symbol: shim,
      any: shim,
      arrayOf: getShim,
      element: shim,
      elementType: shim,
      instanceOf: getShim,
      node: shim,
      objectOf: getShim,
      oneOf: getShim,
      oneOfType: getShim,
      shape: getShim,
      exact: getShim,
      checkPropTypes: emptyFunctionWithReset$1,
      resetWarningCache: emptyFunction$1
    };
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
  };

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  {
    // By explicitly using `prop-types` you are opting into new production behavior.
    // http://fb.me/prop-types-in-prod
    propTypes$1.exports = factoryWithThrowingShims$1();
  }

  var PropTypes$1 = propTypes$1.exports;

  var jsxRuntime = {exports: {}};

  var reactJsxRuntime_production_min = {};

  /** @license React v17.0.2
   * react-jsx-runtime.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  var f$4 = react.exports,
      g$3 = 60103;
  reactJsxRuntime_production_min.Fragment = 60107;

  if ("function" === typeof Symbol && Symbol["for"]) {
    var h$3 = Symbol["for"];
    g$3 = h$3("react.element");
    reactJsxRuntime_production_min.Fragment = h$3("react.fragment");
  }

  var m$3 = f$4.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,
      n$3 = Object.prototype.hasOwnProperty,
      p$3 = {
    key: !0,
    ref: !0,
    __self: !0,
    __source: !0
  };

  function q$3(c, a, k) {
    var b,
        d = {},
        e = null,
        l = null;
    void 0 !== k && (e = "" + k);
    void 0 !== a.key && (e = "" + a.key);
    void 0 !== a.ref && (l = a.ref);

    for (b in a) {
      n$3.call(a, b) && !p$3.hasOwnProperty(b) && (d[b] = a[b]);
    }

    if (c && c.defaultProps) for (b in a = c.defaultProps, a) {
      void 0 === d[b] && (d[b] = a[b]);
    }
    return {
      $$typeof: g$3,
      type: c,
      key: e,
      ref: l,
      props: d,
      _owner: m$3.current
    };
  }

  reactJsxRuntime_production_min.jsx = q$3;
  reactJsxRuntime_production_min.jsxs = q$3;

  {
    jsxRuntime.exports = reactJsxRuntime_production_min;
  }

  function isEmpty$2(obj) {
    return obj === undefined || obj === null || Object.keys(obj).length === 0;
  }

  function GlobalStyles$1(props) {
    var styles = props.styles,
        _props$defaultTheme = props.defaultTheme,
        defaultTheme = _props$defaultTheme === void 0 ? {} : _props$defaultTheme;
    var globalStyles = typeof styles === 'function' ? function (themeInput) {
      return styles(isEmpty$2(themeInput) ? defaultTheme : themeInput);
    } : styles;
    return /*#__PURE__*/jsxRuntime.exports.jsx(Global, {
      styles: globalStyles
    });
  }

  /** @license MUI v5.4.4
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  function styled$2(tag, options) {
    var stylesFactory = emStyled(tag, options);

    return stylesFactory;
  }

  function isPlainObject$2(item) {
    return item !== null && _typeof(item) === 'object' && item.constructor === Object;
  }
  function deepmerge(target, source) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
      clone: true
    };
    var output = options.clone ? _extends$1({}, target) : target;

    if (isPlainObject$2(target) && isPlainObject$2(source)) {
      Object.keys(source).forEach(function (key) {
        // Avoid prototype pollution
        if (key === '__proto__') {
          return;
        }

        if (isPlainObject$2(source[key]) && key in target && isPlainObject$2(target[key])) {
          // Since `output` is a clone of `target` and we have narrowed `target` in this block we can cast to the same type.
          output[key] = deepmerge(target[key], source[key], options);
        } else {
          output[key] = source[key];
        }
      });
    }

    return output;
  }

  /**
   * WARNING: Don't import this directly.
   * Use `MuiError` from `@mui/utils/macros/MuiError.macro` instead.
   * @param {number} code
   */
  function formatMuiErrorMessage(code) {
    // Apply babel-plugin-transform-template-literals in loose mode
    // loose mode is safe iff we're concatenating primitives
    // see https://babeljs.io/docs/en/babel-plugin-transform-template-literals#loose

    /* eslint-disable prefer-template */
    var url = 'https://mui.com/production-error/?code=' + code;

    for (var i = 1; i < arguments.length; i += 1) {
      // rest params over-transpile for this case
      // eslint-disable-next-line prefer-rest-params
      url += '&args[]=' + encodeURIComponent(arguments[i]);
    }

    return 'Minified MUI error #' + code + '; visit ' + url + ' for the full message.';
    /* eslint-enable prefer-template */
  }

  //
  // A strict capitalization should uppercase the first letter of each word in the sentence.
  // We only handle the first word.

  function capitalize(string) {
    if (typeof string !== 'string') {
      throw new Error(formatMuiErrorMessage(7));
    }

    return string.charAt(0).toUpperCase() + string.slice(1);
  }

  /**
   * Safe chained function.
   *
   * Will only create a new function if needed,
   * otherwise will pass back existing functions or null.
   */
  function createChainedFunction() {
    for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
      funcs[_key] = arguments[_key];
    }

    return funcs.reduce(function (acc, func) {
      if (func == null) {
        return acc;
      }

      return function chainedFunction() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        acc.apply(this, args);
        func.apply(this, args);
      };
    }, function () {});
  }

  // Corresponds to 10 frames at 60 Hz.
  // A few bytes payload overhead when lodash/debounce is ~3 kB and debounce ~300 B.
  function debounce$1(func) {
    var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 166;
    var timeout;

    function debounced() {
      var _this = this;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var later = function later() {
        func.apply(_this, args);
      };

      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    }

    debounced.clear = function () {
      clearTimeout(timeout);
    };

    return debounced;
  }

  function deprecatedPropType(validator, reason) {
    {
      return function () {
        return null;
      };
    }
  }

  function isMuiElement(element, muiNames) {
    return /*#__PURE__*/ /*#__PURE__*/react.exports.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;
  }

  function ownerDocument(node) {
    return node && node.ownerDocument || document;
  }

  function ownerWindow(node) {
    var doc = ownerDocument(node);
    return doc.defaultView || window;
  }

  function requirePropFactory(componentNameInError, Component) {
    {
      return function () {
        return null;
      };
    } // eslint-disable-next-line react/forbid-foreign-prop-types
  }

  /**
   * TODO v5: consider making it private
   *
   * passes {value} to {ref}
   *
   * WARNING: Be sure to only call this inside a callback that is passed as a ref.
   * Otherwise, make sure to cleanup the previous {ref} if it changes. See
   * https://github.com/mui/material-ui/issues/13539
   *
   * Useful if you want to expose the ref of an inner component to the public API
   * while still using it inside the component.
   * @param ref A ref callback or ref object. If anything falsy, this is a no-op.
   */
  function setRef(ref, value) {
    if (typeof ref === 'function') {
      ref(value);
    } else if (ref) {
      ref.current = value;
    }
  }

  var useEnhancedEffect = typeof window !== 'undefined' ? react.exports.useLayoutEffect : react.exports.useEffect;
  var useEnhancedEffect$1 = useEnhancedEffect;

  var globalId = 0;

  function useGlobalId(idOverride) {
    var _React$useState = react.exports.useState(idOverride),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        defaultId = _React$useState2[0],
        setDefaultId = _React$useState2[1];

    var id = idOverride || defaultId;
    react.exports.useEffect(function () {
      if (defaultId == null) {
        // Fallback to this default id when possible.
        // Use the incrementing value for client-side rendering only.
        // We can't use it server-side.
        // If you want to use random values please consider the Birthday Problem: https://en.wikipedia.org/wiki/Birthday_problem
        globalId += 1;
        setDefaultId("mui-".concat(globalId));
      }
    }, [defaultId]);
    return id;
  } // eslint-disable-next-line no-useless-concat -- Workaround for https://github.com/webpack/webpack/issues/14814


  var maybeReactUseId = React$1['useId' + ''];
  /**
   *
   * @example <div id={useId()} />
   * @param idOverride
   * @returns {string}
   */

  function useId(idOverride) {
    if (maybeReactUseId !== undefined) {
      var reactId = maybeReactUseId();
      return idOverride != null ? idOverride : reactId;
    } // eslint-disable-next-line react-hooks/rules-of-hooks -- `React.useId` is invariant at runtime.


    return useGlobalId(idOverride);
  }

  function unsupportedProp(props, propName, componentName, location, propFullName) {
    {
      return null;
    }
  }

  function useControlled(_ref) {
    var controlled = _ref.controlled,
        defaultProp = _ref["default"];
        _ref.name;
        _ref.state;

    // isControlled is ignored in the hook dependency lists as it should never change.
    var _React$useRef = react.exports.useRef(controlled !== undefined),
        isControlled = _React$useRef.current;

    var _React$useState = react.exports.useState(defaultProp),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        valueState = _React$useState2[0],
        setValue = _React$useState2[1];

    var value = isControlled ? controlled : valueState;

    var setValueIfUncontrolled = react.exports.useCallback(function (newValue) {
      if (!isControlled) {
        setValue(newValue);
      }
    }, []);
    return [value, setValueIfUncontrolled];
  }

  /**
   * https://github.com/facebook/react/issues/14099#issuecomment-440013892
   */

  function useEventCallback(fn) {
    var ref = react.exports.useRef(fn);
    useEnhancedEffect$1(function () {
      ref.current = fn;
    });
    return react.exports.useCallback(function () {
      return (// @ts-expect-error hide `this`
        // tslint:disable-next-line:ban-comma-operator
        (ref.current).apply(void 0, arguments)
      );
    }, []);
  }

  function useForkRef(refA, refB) {
    /**
     * This will create a new function if the ref props change and are defined.
     * This means react will call the old forkRef with `null` and the new forkRef
     * with the ref. Cleanup naturally emerges from this behavior.
     */
    return react.exports.useMemo(function () {
      if (refA == null && refB == null) {
        return null;
      }

      return function (refValue) {
        setRef(refA, refValue);
        setRef(refB, refValue);
      };
    }, [refA, refB]);
  }

  // based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js
  var hadKeyboardEvent = true;
  var hadFocusVisibleRecently = false;
  var hadFocusVisibleRecentlyTimeout;
  var inputTypesWhitelist = {
    text: true,
    search: true,
    url: true,
    tel: true,
    email: true,
    password: true,
    number: true,
    date: true,
    month: true,
    week: true,
    time: true,
    datetime: true,
    'datetime-local': true
  };
  /**
   * Computes whether the given element should automatically trigger the
   * `focus-visible` class being added, i.e. whether it should always match
   * `:focus-visible` when focused.
   * @param {Element} node
   * @returns {boolean}
   */

  function focusTriggersKeyboardModality(node) {
    var type = node.type,
        tagName = node.tagName;

    if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {
      return true;
    }

    if (tagName === 'TEXTAREA' && !node.readOnly) {
      return true;
    }

    if (node.isContentEditable) {
      return true;
    }

    return false;
  }
  /**
   * Keep track of our keyboard modality state with `hadKeyboardEvent`.
   * If the most recent user interaction was via the keyboard;
   * and the key press did not include a meta, alt/option, or control key;
   * then the modality is keyboard. Otherwise, the modality is not keyboard.
   * @param {KeyboardEvent} event
   */


  function handleKeyDown(event) {
    if (event.metaKey || event.altKey || event.ctrlKey) {
      return;
    }

    hadKeyboardEvent = true;
  }
  /**
   * If at any point a user clicks with a pointing device, ensure that we change
   * the modality away from keyboard.
   * This avoids the situation where a user presses a key on an already focused
   * element, and then clicks on a different element, focusing it with a
   * pointing device, while we still think we're in keyboard modality.
   */


  function handlePointerDown() {
    hadKeyboardEvent = false;
  }

  function handleVisibilityChange() {
    if (this.visibilityState === 'hidden') {
      // If the tab becomes active again, the browser will handle calling focus
      // on the element (Safari actually calls it twice).
      // If this tab change caused a blur on an element with focus-visible,
      // re-apply the class when the user switches back to the tab.
      if (hadFocusVisibleRecently) {
        hadKeyboardEvent = true;
      }
    }
  }

  function prepare(doc) {
    doc.addEventListener('keydown', handleKeyDown, true);
    doc.addEventListener('mousedown', handlePointerDown, true);
    doc.addEventListener('pointerdown', handlePointerDown, true);
    doc.addEventListener('touchstart', handlePointerDown, true);
    doc.addEventListener('visibilitychange', handleVisibilityChange, true);
  }

  function isFocusVisible(event) {
    var target = event.target;

    try {
      return target.matches(':focus-visible');
    } catch (error) {// Browsers not implementing :focus-visible will throw a SyntaxError.
      // We use our own heuristic for those browsers.
      // Rethrow might be better if it's not the expected error but do we really
      // want to crash if focus-visible malfunctioned?
    } // No need for validFocusTarget check. The user does that by attaching it to
    // focusable events only.


    return hadKeyboardEvent || focusTriggersKeyboardModality(target);
  }

  function useIsFocusVisible() {
    var ref = react.exports.useCallback(function (node) {
      if (node != null) {
        prepare(node.ownerDocument);
      }
    }, []);
    var isFocusVisibleRef = react.exports.useRef(false);
    /**
     * Should be called if a blur event is fired
     */

    function handleBlurVisible() {
      // checking against potential state variable does not suffice if we focus and blur synchronously.
      // React wouldn't have time to trigger a re-render so `focusVisible` would be stale.
      // Ideally we would adjust `isFocusVisible(event)` to look at `relatedTarget` for blur events.
      // This doesn't work in IE11 due to https://github.com/facebook/react/issues/3751
      // TODO: check again if React releases their internal changes to focus event handling (https://github.com/facebook/react/pull/19186).
      if (isFocusVisibleRef.current) {
        // To detect a tab/window switch, we look for a blur event followed
        // rapidly by a visibility change.
        // If we don't see a visibility change within 100ms, it's probably a
        // regular focus change.
        hadFocusVisibleRecently = true;
        window.clearTimeout(hadFocusVisibleRecentlyTimeout);
        hadFocusVisibleRecentlyTimeout = window.setTimeout(function () {
          hadFocusVisibleRecently = false;
        }, 100);
        isFocusVisibleRef.current = false;
        return true;
      }

      return false;
    }
    /**
     * Should be called if a blur event is fired
     */


    function handleFocusVisible(event) {
      if (isFocusVisible(event)) {
        isFocusVisibleRef.current = true;
        return true;
      }

      return false;
    }

    return {
      isFocusVisibleRef: isFocusVisibleRef,
      onFocus: handleFocusVisible,
      onBlur: handleBlurVisible,
      ref: ref
    };
  }

  // A change of the browser zoom change the scrollbar size.
  // Credit https://github.com/twbs/bootstrap/blob/488fd8afc535ca3a6ad4dc581f5e89217b6a36ac/js/src/util/scrollbar.js#L14-L18
  function getScrollbarSize(doc) {
    // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes
    var documentWidth = doc.documentElement.clientWidth;
    return Math.abs(window.innerWidth - documentWidth);
  }

  /**
   * Add keys, values of `defaultProps` that does not exist in `props`
   * @param {object} defaultProps
   * @param {object} props
   * @returns {object} resolved props
   */

  function resolveProps(defaultProps, props) {
    var output = _extends$1({}, props);

    Object.keys(defaultProps).forEach(function (propName) {
      if (output[propName] === undefined) {
        output[propName] = defaultProps[propName];
      }
    });
    return output;
  }

  function merge$1(acc, item) {
    if (!item) {
      return acc;
    }

    return deepmerge(acc, item, {
      clone: false // No need to clone deep, it's way faster.

    });
  }

  // For instance with the first breakpoint xs: [xs, sm[.

  var values$1 = {
    xs: 0,
    // phone
    sm: 600,
    // tablet
    md: 900,
    // small laptop
    lg: 1200,
    // desktop
    xl: 1536 // large screen

  };
  var defaultBreakpoints = {
    // Sorted ASC by size. That's important.
    // It can't be configured as it's used statically for propTypes.
    keys: ['xs', 'sm', 'md', 'lg', 'xl'],
    up: function up(key) {
      return "@media (min-width:".concat(values$1[key], "px)");
    }
  };
  function handleBreakpoints(props, propValue, styleFromPropValue) {
    var theme = props.theme || {};

    if (Array.isArray(propValue)) {
      var themeBreakpoints = theme.breakpoints || defaultBreakpoints;
      return propValue.reduce(function (acc, item, index) {
        acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
        return acc;
      }, {});
    }

    if (_typeof(propValue) === 'object') {
      var _themeBreakpoints = theme.breakpoints || defaultBreakpoints;

      return Object.keys(propValue).reduce(function (acc, breakpoint) {
        // key is breakpoint
        if (Object.keys(_themeBreakpoints.values || values$1).indexOf(breakpoint) !== -1) {
          var mediaKey = _themeBreakpoints.up(breakpoint);

          acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
        } else {
          var cssKey = breakpoint;
          acc[cssKey] = propValue[cssKey];
        }

        return acc;
      }, {});
    }

    var output = styleFromPropValue(propValue);
    return output;
  }

  function createEmptyBreakpointObject() {
    var breakpointsInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var _breakpointsInput$key;

    var breakpointsInOrder = breakpointsInput == null ? void 0 : (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce(function (acc, key) {
      var breakpointStyleKey = breakpointsInput.up(key);
      acc[breakpointStyleKey] = {};
      return acc;
    }, {});
    return breakpointsInOrder || {};
  }
  function removeUnusedBreakpoints(breakpointKeys, style) {
    return breakpointKeys.reduce(function (acc, key) {
      var breakpointOutput = acc[key];
      var isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;

      if (isBreakpointUnused) {
        delete acc[key];
      }

      return acc;
    }, style);
  }
  // [1,2,3] => {xs: true, sm: true, md: true}
  // {xs: 1, sm: 2, md: 3} => {xs: true, sm: true, md: true}

  function computeBreakpointsBase(breakpointValues, themeBreakpoints) {
    // fixed value
    if (_typeof(breakpointValues) !== 'object') {
      return {};
    }

    var base = {};
    var breakpointsKeys = Object.keys(themeBreakpoints);

    if (Array.isArray(breakpointValues)) {
      breakpointsKeys.forEach(function (breakpoint, i) {
        if (i < breakpointValues.length) {
          base[breakpoint] = true;
        }
      });
    } else {
      breakpointsKeys.forEach(function (breakpoint) {
        if (breakpointValues[breakpoint] != null) {
          base[breakpoint] = true;
        }
      });
    }

    return base;
  }
  function resolveBreakpointValues(_ref) {
    var breakpointValues = _ref.values,
        themeBreakpoints = _ref.breakpoints,
        customBase = _ref.base;
    var base = customBase || computeBreakpointsBase(breakpointValues, themeBreakpoints);
    var keys = Object.keys(base);

    if (keys.length === 0) {
      return breakpointValues;
    }

    var previous;
    return keys.reduce(function (acc, breakpoint, i) {
      if (Array.isArray(breakpointValues)) {
        acc[breakpoint] = breakpointValues[i] != null ? breakpointValues[i] : breakpointValues[previous];
        previous = i;
      } else {
        acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous] || breakpointValues;
        previous = breakpoint;
      }

      return acc;
    }, {});
  }

  function getPath(obj, path) {
    if (!path || typeof path !== 'string') {
      return null;
    }

    return path.split('.').reduce(function (acc, item) {
      return acc && acc[item] ? acc[item] : null;
    }, obj);
  }

  function getValue$1(themeMapping, transform, propValueFinal) {
    var userValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : propValueFinal;
    var value;

    if (typeof themeMapping === 'function') {
      value = themeMapping(propValueFinal);
    } else if (Array.isArray(themeMapping)) {
      value = themeMapping[propValueFinal] || userValue;
    } else {
      value = getPath(themeMapping, propValueFinal) || userValue;
    }

    if (transform) {
      value = transform(value);
    }

    return value;
  }

  function style$2(options) {
    var prop = options.prop,
        _options$cssProperty = options.cssProperty,
        cssProperty = _options$cssProperty === void 0 ? options.prop : _options$cssProperty,
        themeKey = options.themeKey,
        transform = options.transform;

    var fn = function fn(props) {
      if (props[prop] == null) {
        return null;
      }

      var propValue = props[prop];
      var theme = props.theme;
      var themeMapping = getPath(theme, themeKey) || {};

      var styleFromPropValue = function styleFromPropValue(propValueFinal) {
        var value = getValue$1(themeMapping, transform, propValueFinal);

        if (propValueFinal === value && typeof propValueFinal === 'string') {
          // Haven't found value
          value = getValue$1(themeMapping, transform, "".concat(prop).concat(propValueFinal === 'default' ? '' : capitalize(propValueFinal)), propValueFinal);
        }

        if (cssProperty === false) {
          return value;
        }

        return _defineProperty$1({}, cssProperty, value);
      };

      return handleBreakpoints(props, propValue, styleFromPropValue);
    };

    fn.propTypes = {};
    fn.filterProps = [prop];
    return fn;
  }

  function compose() {
    for (var _len = arguments.length, styles = new Array(_len), _key = 0; _key < _len; _key++) {
      styles[_key] = arguments[_key];
    }

    var handlers = styles.reduce(function (acc, style) {
      style.filterProps.forEach(function (prop) {
        acc[prop] = style;
      });
      return acc;
    }, {});

    var fn = function fn(props) {
      return Object.keys(props).reduce(function (acc, prop) {
        if (handlers[prop]) {
          return merge$1(acc, handlers[prop](props));
        }

        return acc;
      }, {});
    };

    fn.propTypes = {};
    fn.filterProps = styles.reduce(function (acc, style) {
      return acc.concat(style.filterProps);
    }, []);
    return fn;
  }

  function memoize(fn) {
    var cache = {};
    return function (arg) {
      if (cache[arg] === undefined) {
        cache[arg] = fn(arg);
      }

      return cache[arg];
    };
  }

  var properties = {
    m: 'margin',
    p: 'padding'
  };
  var directions = {
    t: 'Top',
    r: 'Right',
    b: 'Bottom',
    l: 'Left',
    x: ['Left', 'Right'],
    y: ['Top', 'Bottom']
  };
  var aliases = {
    marginX: 'mx',
    marginY: 'my',
    paddingX: 'px',
    paddingY: 'py'
  }; // memoize() impact:
  // From 300,000 ops/sec
  // To 350,000 ops/sec

  var getCssProperties = memoize(function (prop) {
    // It's not a shorthand notation.
    if (prop.length > 2) {
      if (aliases[prop]) {
        prop = aliases[prop];
      } else {
        return [prop];
      }
    }

    var _prop$split = prop.split(''),
        _prop$split2 = _slicedToArray$1(_prop$split, 2),
        a = _prop$split2[0],
        b = _prop$split2[1];

    var property = properties[a];
    var direction = directions[b] || '';
    return Array.isArray(direction) ? direction.map(function (dir) {
      return property + dir;
    }) : [property + direction];
  });
  var marginKeys = ['m', 'mt', 'mr', 'mb', 'ml', 'mx', 'my', 'margin', 'marginTop', 'marginRight', 'marginBottom', 'marginLeft', 'marginX', 'marginY', 'marginInline', 'marginInlineStart', 'marginInlineEnd', 'marginBlock', 'marginBlockStart', 'marginBlockEnd'];
  var paddingKeys = ['p', 'pt', 'pr', 'pb', 'pl', 'px', 'py', 'padding', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft', 'paddingX', 'paddingY', 'paddingInline', 'paddingInlineStart', 'paddingInlineEnd', 'paddingBlock', 'paddingBlockStart', 'paddingBlockEnd'];
  var spacingKeys = [].concat(marginKeys, paddingKeys);
  function createUnaryUnit(theme, themeKey, defaultValue, propName) {
    var themeSpacing = getPath(theme, themeKey) || defaultValue;

    if (typeof themeSpacing === 'number') {
      return function (abs) {
        if (typeof abs === 'string') {
          return abs;
        }

        return themeSpacing * abs;
      };
    }

    if (Array.isArray(themeSpacing)) {
      return function (abs) {
        if (typeof abs === 'string') {
          return abs;
        }

        return themeSpacing[abs];
      };
    }

    if (typeof themeSpacing === 'function') {
      return themeSpacing;
    }

    return function () {
      return undefined;
    };
  }
  function createUnarySpacing(theme) {
    return createUnaryUnit(theme, 'spacing', 8);
  }
  function getValue(transformer, propValue) {
    if (typeof propValue === 'string' || propValue == null) {
      return propValue;
    }

    var abs = Math.abs(propValue);
    var transformed = transformer(abs);

    if (propValue >= 0) {
      return transformed;
    }

    if (typeof transformed === 'number') {
      return -transformed;
    }

    return "-".concat(transformed);
  }
  function getStyleFromPropValue(cssProperties, transformer) {
    return function (propValue) {
      return cssProperties.reduce(function (acc, cssProperty) {
        acc[cssProperty] = getValue(transformer, propValue);
        return acc;
      }, {});
    };
  }

  function resolveCssProperty(props, keys, prop, transformer) {
    // Using a hash computation over an array iteration could be faster, but with only 28 items,
    // it's doesn't worth the bundle size.
    if (keys.indexOf(prop) === -1) {
      return null;
    }

    var cssProperties = getCssProperties(prop);
    var styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
    var propValue = props[prop];
    return handleBreakpoints(props, propValue, styleFromPropValue);
  }

  function style$1(props, keys) {
    var transformer = createUnarySpacing(props.theme);
    return Object.keys(props).map(function (prop) {
      return resolveCssProperty(props, keys, prop, transformer);
    }).reduce(merge$1, {});
  }

  function spacing(props) {
    return style$1(props, spacingKeys);
  }

  spacing.propTypes = {};
  spacing.filterProps = spacingKeys;

  function getBorder(value) {
    if (typeof value !== 'number') {
      return value;
    }

    return "".concat(value, "px solid");
  }

  var border = style$2({
    prop: 'border',
    themeKey: 'borders',
    transform: getBorder
  });
  var borderTop = style$2({
    prop: 'borderTop',
    themeKey: 'borders',
    transform: getBorder
  });
  var borderRight = style$2({
    prop: 'borderRight',
    themeKey: 'borders',
    transform: getBorder
  });
  var borderBottom = style$2({
    prop: 'borderBottom',
    themeKey: 'borders',
    transform: getBorder
  });
  var borderLeft = style$2({
    prop: 'borderLeft',
    themeKey: 'borders',
    transform: getBorder
  });
  var borderColor = style$2({
    prop: 'borderColor',
    themeKey: 'palette'
  });
  var borderTopColor = style$2({
    prop: 'borderTopColor',
    themeKey: 'palette'
  });
  var borderRightColor = style$2({
    prop: 'borderRightColor',
    themeKey: 'palette'
  });
  var borderBottomColor = style$2({
    prop: 'borderBottomColor',
    themeKey: 'palette'
  });
  var borderLeftColor = style$2({
    prop: 'borderLeftColor',
    themeKey: 'palette'
  });
  var borderRadius = function borderRadius(props) {
    if (props.borderRadius !== undefined && props.borderRadius !== null) {
      var transformer = createUnaryUnit(props.theme, 'shape.borderRadius', 4);

      var styleFromPropValue = function styleFromPropValue(propValue) {
        return {
          borderRadius: getValue(transformer, propValue)
        };
      };

      return handleBreakpoints(props, props.borderRadius, styleFromPropValue);
    }

    return null;
  };
  borderRadius.propTypes = {};
  borderRadius.filterProps = ['borderRadius'];
  var borders = compose(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius);
  var borders$1 = borders;

  var displayPrint = style$2({
    prop: 'displayPrint',
    cssProperty: false,
    transform: function transform(value) {
      return {
        '@media print': {
          display: value
        }
      };
    }
  });
  var displayRaw = style$2({
    prop: 'display'
  });
  var overflow = style$2({
    prop: 'overflow'
  });
  var textOverflow = style$2({
    prop: 'textOverflow'
  });
  var visibility = style$2({
    prop: 'visibility'
  });
  var whiteSpace = style$2({
    prop: 'whiteSpace'
  });
  var display = compose(displayPrint, displayRaw, overflow, textOverflow, visibility, whiteSpace);

  var flexBasis = style$2({
    prop: 'flexBasis'
  });
  var flexDirection = style$2({
    prop: 'flexDirection'
  });
  var flexWrap = style$2({
    prop: 'flexWrap'
  });
  var justifyContent = style$2({
    prop: 'justifyContent'
  });
  var alignItems = style$2({
    prop: 'alignItems'
  });
  var alignContent = style$2({
    prop: 'alignContent'
  });
  var order$2 = style$2({
    prop: 'order'
  });
  var flex = style$2({
    prop: 'flex'
  });
  var flexGrow = style$2({
    prop: 'flexGrow'
  });
  var flexShrink = style$2({
    prop: 'flexShrink'
  });
  var alignSelf = style$2({
    prop: 'alignSelf'
  });
  var justifyItems = style$2({
    prop: 'justifyItems'
  });
  var justifySelf = style$2({
    prop: 'justifySelf'
  });
  var flexbox = compose(flexBasis, flexDirection, flexWrap, justifyContent, alignItems, alignContent, order$2, flex, flexGrow, flexShrink, alignSelf, justifyItems, justifySelf);
  var flexbox$1 = flexbox;

  var gap = function gap(props) {
    if (props.gap !== undefined && props.gap !== null) {
      var transformer = createUnaryUnit(props.theme, 'spacing', 8);

      var styleFromPropValue = function styleFromPropValue(propValue) {
        return {
          gap: getValue(transformer, propValue)
        };
      };

      return handleBreakpoints(props, props.gap, styleFromPropValue);
    }

    return null;
  };
  gap.propTypes = {};
  gap.filterProps = ['gap'];
  var columnGap = function columnGap(props) {
    if (props.columnGap !== undefined && props.columnGap !== null) {
      var transformer = createUnaryUnit(props.theme, 'spacing', 8);

      var styleFromPropValue = function styleFromPropValue(propValue) {
        return {
          columnGap: getValue(transformer, propValue)
        };
      };

      return handleBreakpoints(props, props.columnGap, styleFromPropValue);
    }

    return null;
  };
  columnGap.propTypes = {};
  columnGap.filterProps = ['columnGap'];
  var rowGap = function rowGap(props) {
    if (props.rowGap !== undefined && props.rowGap !== null) {
      var transformer = createUnaryUnit(props.theme, 'spacing', 8);

      var styleFromPropValue = function styleFromPropValue(propValue) {
        return {
          rowGap: getValue(transformer, propValue)
        };
      };

      return handleBreakpoints(props, props.rowGap, styleFromPropValue);
    }

    return null;
  };
  rowGap.propTypes = {};
  rowGap.filterProps = ['rowGap'];
  var gridColumn = style$2({
    prop: 'gridColumn'
  });
  var gridRow = style$2({
    prop: 'gridRow'
  });
  var gridAutoFlow = style$2({
    prop: 'gridAutoFlow'
  });
  var gridAutoColumns = style$2({
    prop: 'gridAutoColumns'
  });
  var gridAutoRows = style$2({
    prop: 'gridAutoRows'
  });
  var gridTemplateColumns = style$2({
    prop: 'gridTemplateColumns'
  });
  var gridTemplateRows = style$2({
    prop: 'gridTemplateRows'
  });
  var gridTemplateAreas = style$2({
    prop: 'gridTemplateAreas'
  });
  var gridArea = style$2({
    prop: 'gridArea'
  });
  var grid = compose(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
  var grid$1 = grid;

  var color$3 = style$2({
    prop: 'color',
    themeKey: 'palette'
  });
  var bgcolor = style$2({
    prop: 'bgcolor',
    cssProperty: 'backgroundColor',
    themeKey: 'palette'
  });
  var backgroundColor = style$2({
    prop: 'backgroundColor',
    themeKey: 'palette'
  });
  var palette = compose(color$3, bgcolor, backgroundColor);
  var palette$1 = palette;

  var position$2 = style$2({
    prop: 'position'
  });
  var zIndex$2 = style$2({
    prop: 'zIndex',
    themeKey: 'zIndex'
  });
  var top$1 = style$2({
    prop: 'top'
  });
  var right$1 = style$2({
    prop: 'right'
  });
  var bottom$1 = style$2({
    prop: 'bottom'
  });
  var left$1 = style$2({
    prop: 'left'
  });
  var positions = compose(position$2, zIndex$2, top$1, right$1, bottom$1, left$1);

  var boxShadow = style$2({
    prop: 'boxShadow',
    themeKey: 'shadows'
  });
  var shadows$2 = boxShadow;

  function transform(value) {
    return value <= 1 && value !== 0 ? "".concat(value * 100, "%") : value;
  }

  var width = style$2({
    prop: 'width',
    transform: transform
  });
  var maxWidth = function maxWidth(props) {
    if (props.maxWidth !== undefined && props.maxWidth !== null) {
      var styleFromPropValue = function styleFromPropValue(propValue) {
        var _props$theme, _props$theme$breakpoi, _props$theme$breakpoi2;

        var breakpoint = ((_props$theme = props.theme) == null ? void 0 : (_props$theme$breakpoi = _props$theme.breakpoints) == null ? void 0 : (_props$theme$breakpoi2 = _props$theme$breakpoi.values) == null ? void 0 : _props$theme$breakpoi2[propValue]) || values$1[propValue];
        return {
          maxWidth: breakpoint || transform(propValue)
        };
      };

      return handleBreakpoints(props, props.maxWidth, styleFromPropValue);
    }

    return null;
  };
  maxWidth.filterProps = ['maxWidth'];
  var minWidth = style$2({
    prop: 'minWidth',
    transform: transform
  });
  var height = style$2({
    prop: 'height',
    transform: transform
  });
  var maxHeight = style$2({
    prop: 'maxHeight',
    transform: transform
  });
  var minHeight = style$2({
    prop: 'minHeight',
    transform: transform
  });
  style$2({
    prop: 'size',
    cssProperty: 'width',
    transform: transform
  });
  style$2({
    prop: 'size',
    cssProperty: 'height',
    transform: transform
  });
  var boxSizing = style$2({
    prop: 'boxSizing'
  });
  var sizing = compose(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);
  var sizing$1 = sizing;

  var fontFamily = style$2({
    prop: 'fontFamily',
    themeKey: 'typography'
  });
  var fontSize = style$2({
    prop: 'fontSize',
    themeKey: 'typography'
  });
  var fontStyle = style$2({
    prop: 'fontStyle',
    themeKey: 'typography'
  });
  var fontWeight = style$2({
    prop: 'fontWeight',
    themeKey: 'typography'
  });
  var letterSpacing = style$2({
    prop: 'letterSpacing'
  });
  var textTransform = style$2({
    prop: 'textTransform'
  });
  var lineHeight = style$2({
    prop: 'lineHeight'
  });
  var textAlign = style$2({
    prop: 'textAlign'
  });
  var typographyVariant = style$2({
    prop: 'typography',
    cssProperty: false,
    themeKey: 'typography'
  });
  var typography = compose(typographyVariant, fontFamily, fontSize, fontStyle, fontWeight, letterSpacing, lineHeight, textAlign, textTransform);
  var typography$1 = typography;

  var filterPropsMapping = {
    borders: borders$1.filterProps,
    display: display.filterProps,
    flexbox: flexbox$1.filterProps,
    grid: grid$1.filterProps,
    positions: positions.filterProps,
    palette: palette$1.filterProps,
    shadows: shadows$2.filterProps,
    sizing: sizing$1.filterProps,
    spacing: spacing.filterProps,
    typography: typography$1.filterProps
  };
  var styleFunctionMapping = {
    borders: borders$1,
    display: display,
    flexbox: flexbox$1,
    grid: grid$1,
    positions: positions,
    palette: palette$1,
    shadows: shadows$2,
    sizing: sizing$1,
    spacing: spacing,
    typography: typography$1
  };
  var propToStyleFunction = Object.keys(filterPropsMapping).reduce(function (acc, styleFnName) {
    filterPropsMapping[styleFnName].forEach(function (propName) {
      acc[propName] = styleFunctionMapping[styleFnName];
    });
    return acc;
  }, {});

  function objectsHaveSameKeys() {
    for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {
      objects[_key] = arguments[_key];
    }

    var allKeys = objects.reduce(function (keys, object) {
      return keys.concat(Object.keys(object));
    }, []);
    var union = new Set(allKeys);
    return objects.every(function (object) {
      return union.size === Object.keys(object).length;
    });
  }

  function callIfFn(maybeFn, arg) {
    return typeof maybeFn === 'function' ? maybeFn(arg) : maybeFn;
  } // eslint-disable-next-line @typescript-eslint/naming-convention


  function unstable_createStyleFunctionSx() {
    var styleFunctionMapping$1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : styleFunctionMapping;
    var propToStyleFunction = Object.keys(styleFunctionMapping$1).reduce(function (acc, styleFnName) {
      styleFunctionMapping$1[styleFnName].filterProps.forEach(function (propName) {
        acc[propName] = styleFunctionMapping$1[styleFnName];
      });
      return acc;
    }, {});

    function getThemeValue(prop, value, theme) {
      var _inputProps;

      var inputProps = (_inputProps = {}, _defineProperty$1(_inputProps, prop, value), _defineProperty$1(_inputProps, "theme", theme), _inputProps);
      var styleFunction = propToStyleFunction[prop];
      return styleFunction ? styleFunction(inputProps) : _defineProperty$1({}, prop, value);
    }

    function styleFunctionSx(props) {
      var _ref2 = props || {},
          sx = _ref2.sx,
          _ref2$theme = _ref2.theme,
          theme = _ref2$theme === void 0 ? {} : _ref2$theme;

      if (!sx) {
        return null; // emotion & styled-components will neglect null
      }
      /*
       * Receive `sxInput` as object or callback
       * and then recursively check keys & values to create media query object styles.
       * (the result will be used in `styled`)
       */


      function traverse(sxInput) {
        var sxObject = sxInput;

        if (typeof sxInput === 'function') {
          sxObject = sxInput(theme);
        } else if (_typeof(sxInput) !== 'object') {
          // value
          return sxInput;
        }

        if (!sxObject) {
          return null;
        }

        var emptyBreakpoints = createEmptyBreakpointObject(theme.breakpoints);
        var breakpointsKeys = Object.keys(emptyBreakpoints);
        var css = emptyBreakpoints;
        Object.keys(sxObject).forEach(function (styleKey) {
          var value = callIfFn(sxObject[styleKey], theme);

          if (value !== null && value !== undefined) {
            if (_typeof(value) === 'object') {
              if (propToStyleFunction[styleKey]) {
                css = merge$1(css, getThemeValue(styleKey, value, theme));
              } else {
                var breakpointsValues = handleBreakpoints({
                  theme: theme
                }, value, function (x) {
                  return _defineProperty$1({}, styleKey, x);
                });

                if (objectsHaveSameKeys(breakpointsValues, value)) {
                  css[styleKey] = styleFunctionSx({
                    sx: value,
                    theme: theme
                  });
                } else {
                  css = merge$1(css, breakpointsValues);
                }
              }
            } else {
              css = merge$1(css, getThemeValue(styleKey, value, theme));
            }
          }
        });
        return removeUnusedBreakpoints(breakpointsKeys, css);
      }

      return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
    }

    return styleFunctionSx;
  }
  var styleFunctionSx = unstable_createStyleFunctionSx();
  styleFunctionSx.filterProps = ['sx'];
  var defaultStyleFunctionSx = styleFunctionSx;

  var _excluded$z = ["sx"];

  var splitProps = function splitProps(props) {
    var result = {
      systemProps: {},
      otherProps: {}
    };
    Object.keys(props).forEach(function (prop) {
      if (propToStyleFunction[prop]) {
        result.systemProps[prop] = props[prop];
      } else {
        result.otherProps[prop] = props[prop];
      }
    });
    return result;
  };

  function extendSxProp(props) {
    var inSx = props.sx,
        other = _objectWithoutPropertiesLoose(props, _excluded$z);

    var _splitProps = splitProps(other),
        systemProps = _splitProps.systemProps,
        otherProps = _splitProps.otherProps;

    var finalSx;

    if (Array.isArray(inSx)) {
      finalSx = [systemProps].concat(_toConsumableArray(inSx));
    } else if (typeof inSx === 'function') {
      finalSx = function finalSx() {
        var result = inSx.apply(void 0, arguments);

        if (!isPlainObject$2(result)) {
          return systemProps;
        }

        return _extends$1({}, systemProps, result);
      };
    } else {
      finalSx = _extends$1({}, systemProps, inSx);
    }

    return _extends$1({}, otherProps, {
      sx: finalSx
    });
  }

  function toVal(mix) {
    var k,
        y,
        str = '';

    if (typeof mix === 'string' || typeof mix === 'number') {
      str += mix;
    } else if (_typeof(mix) === 'object') {
      if (Array.isArray(mix)) {
        for (k = 0; k < mix.length; k++) {
          if (mix[k]) {
            if (y = toVal(mix[k])) {
              str && (str += ' ');
              str += y;
            }
          }
        }
      } else {
        for (k in mix) {
          if (mix[k]) {
            str && (str += ' ');
            str += k;
          }
        }
      }
    }

    return str;
  }

  function clsx () {
    var i = 0,
        tmp,
        x,
        str = '';

    while (i < arguments.length) {
      if (tmp = arguments[i++]) {
        if (x = toVal(tmp)) {
          str && (str += ' ');
          str += x;
        }
      }
    }

    return str;
  }

  var _excluded$y = ["values", "unit", "step"]; // Sorted ASC by size. That's important.

  var sortBreakpointsValues = function sortBreakpointsValues(values) {
    var breakpointsAsArray = Object.keys(values).map(function (key) {
      return {
        key: key,
        val: values[key]
      };
    }) || []; // Sort in ascending order

    breakpointsAsArray.sort(function (breakpoint1, breakpoint2) {
      return breakpoint1.val - breakpoint2.val;
    });
    return breakpointsAsArray.reduce(function (acc, obj) {
      return _extends$1({}, acc, _defineProperty$1({}, obj.key, obj.val));
    }, {});
  }; // Keep in mind that @media is inclusive by the CSS specification.


  function createBreakpoints(breakpoints) {
    var _breakpoints$values = breakpoints.values,
        values = _breakpoints$values === void 0 ? {
      xs: 0,
      // phone
      sm: 600,
      // tablet
      md: 900,
      // small laptop
      lg: 1200,
      // desktop
      xl: 1536 // large screen

    } : _breakpoints$values,
        _breakpoints$unit = breakpoints.unit,
        unit = _breakpoints$unit === void 0 ? 'px' : _breakpoints$unit,
        _breakpoints$step = breakpoints.step,
        step = _breakpoints$step === void 0 ? 5 : _breakpoints$step,
        other = _objectWithoutPropertiesLoose(breakpoints, _excluded$y);

    var sortedValues = sortBreakpointsValues(values);
    var keys = Object.keys(sortedValues);

    function up(key) {
      var value = typeof values[key] === 'number' ? values[key] : key;
      return "@media (min-width:".concat(value).concat(unit, ")");
    }

    function down(key) {
      var value = typeof values[key] === 'number' ? values[key] : key;
      return "@media (max-width:".concat(value - step / 100).concat(unit, ")");
    }

    function between(start, end) {
      var endIndex = keys.indexOf(end);
      return "@media (min-width:".concat(typeof values[start] === 'number' ? values[start] : start).concat(unit, ") and ") + "(max-width:".concat((endIndex !== -1 && typeof values[keys[endIndex]] === 'number' ? values[keys[endIndex]] : end) - step / 100).concat(unit, ")");
    }

    function only(key) {
      if (keys.indexOf(key) + 1 < keys.length) {
        return between(key, keys[keys.indexOf(key) + 1]);
      }

      return up(key);
    }

    function not(key) {
      // handle first and last key separately, for better readability
      var keyIndex = keys.indexOf(key);

      if (keyIndex === 0) {
        return up(keys[1]);
      }

      if (keyIndex === keys.length - 1) {
        return down(keys[keyIndex]);
      }

      return between(key, keys[keys.indexOf(key) + 1]).replace('@media', '@media not all and');
    }

    return _extends$1({
      keys: keys,
      values: sortedValues,
      up: up,
      down: down,
      between: between,
      only: only,
      not: not,
      unit: unit
    }, other);
  }

  var shape = {
    borderRadius: 4
  };
  var shape$1 = shape;

  /* tslint:enable:unified-signatures */

  function createSpacing() {
    var spacingInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;

    // Already transformed.
    if (spacingInput.mui) {
      return spacingInput;
    } // Material Design layouts are visually balanced. Most measurements align to an 8dp grid, which aligns both spacing and the overall layout.
    // Smaller components, such as icons, can align to a 4dp grid.
    // https://material.io/design/layout/understanding-layout.html#usage


    var transform = createUnarySpacing({
      spacing: spacingInput
    });

    var spacing = function spacing() {
      for (var _len = arguments.length, argsInput = new Array(_len), _key = 0; _key < _len; _key++) {
        argsInput[_key] = arguments[_key];
      }

      var args = argsInput.length === 0 ? [1] : argsInput;
      return args.map(function (argument) {
        var output = transform(argument);
        return typeof output === 'number' ? "".concat(output, "px") : output;
      }).join(' ');
    };

    spacing.mui = true;
    return spacing;
  }

  var _excluded$x = ["breakpoints", "palette", "spacing", "shape"];

  function createTheme$1() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var _options$breakpoints = options.breakpoints,
        breakpointsInput = _options$breakpoints === void 0 ? {} : _options$breakpoints,
        _options$palette = options.palette,
        paletteInput = _options$palette === void 0 ? {} : _options$palette,
        spacingInput = options.spacing,
        _options$shape = options.shape,
        shapeInput = _options$shape === void 0 ? {} : _options$shape,
        other = _objectWithoutPropertiesLoose(options, _excluded$x);

    var breakpoints = createBreakpoints(breakpointsInput);
    var spacing = createSpacing(spacingInput);
    var muiTheme = deepmerge({
      breakpoints: breakpoints,
      direction: 'ltr',
      components: {},
      // Inject component definitions.
      palette: _extends$1({
        mode: 'light'
      }, paletteInput),
      spacing: spacing,
      shape: _extends$1({}, shape$1, shapeInput)
    }, other);

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    muiTheme = args.reduce(function (acc, argument) {
      return deepmerge(acc, argument);
    }, muiTheme);
    return muiTheme;
  }

  var ThemeContext = /*#__PURE__*/react.exports.createContext(null);

  var ThemeContext$1 = ThemeContext;

  function useTheme$3() {
    var theme = react.exports.useContext(ThemeContext$1);

    return theme;
  }

  var hasSymbol = typeof Symbol === 'function' && Symbol["for"];
  var nested = hasSymbol ? Symbol["for"]('mui.nested') : '__THEME_NESTED__';

  function mergeOuterLocalTheme(outerTheme, localTheme) {
    if (typeof localTheme === 'function') {
      var mergedTheme = localTheme(outerTheme);

      return mergedTheme;
    }

    return _extends$1({}, outerTheme, localTheme);
  }
  /**
   * This component takes a `theme` prop.
   * It makes the `theme` available down the React tree thanks to React context.
   * This component should preferably be used at **the root of your component tree**.
   */


  function ThemeProvider$1(props) {
    var children = props.children,
        localTheme = props.theme;
    var outerTheme = useTheme$3();

    var theme = react.exports.useMemo(function () {
      var output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);

      if (output != null) {
        output[nested] = outerTheme !== null;
      }

      return output;
    }, [localTheme, outerTheme]);
    return /*#__PURE__*/jsxRuntime.exports.jsx(ThemeContext$1.Provider, {
      value: theme,
      children: children
    });
  }

  function isObjectEmpty(obj) {
    return Object.keys(obj).length === 0;
  }

  function useTheme$2() {
    var defaultTheme = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var contextTheme = useTheme$3();
    return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme : contextTheme;
  }

  var systemDefaultTheme$1 = createTheme$1();

  function useTheme$1() {
    var defaultTheme = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : systemDefaultTheme$1;
    return useTheme$2(defaultTheme);
  }

  var _excluded$w = ["className", "component"];
  function createBox() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var defaultTheme = options.defaultTheme,
        _options$defaultClass = options.defaultClassName,
        defaultClassName = _options$defaultClass === void 0 ? 'MuiBox-root' : _options$defaultClass,
        generateClassName = options.generateClassName,
        _options$styleFunctio = options.styleFunctionSx,
        styleFunctionSx = _options$styleFunctio === void 0 ? defaultStyleFunctionSx : _options$styleFunctio;
    var BoxRoot = styled$2('div')(styleFunctionSx);
    var Box = /*#__PURE__*/react.exports.forwardRef(function Box(inProps, ref) {
      var theme = useTheme$1(defaultTheme);

      var _extendSxProp = extendSxProp(inProps),
          className = _extendSxProp.className,
          _extendSxProp$compone = _extendSxProp.component,
          component = _extendSxProp$compone === void 0 ? 'div' : _extendSxProp$compone,
          other = _objectWithoutPropertiesLoose(_extendSxProp, _excluded$w);

      return /*#__PURE__*/jsxRuntime.exports.jsx(BoxRoot, _extends$1({
        as: component,
        ref: ref,
        className: clsx(className, generateClassName ? generateClassName(defaultClassName) : defaultClassName),
        theme: theme
      }, other));
    });
    return Box;
  }

  var _excluded$v = ["variant"];

  function isEmpty$1(string) {
    return string.length === 0;
  }
  /**
   * Generates string classKey based on the properties provided. It starts with the
   * variant if defined, and then it appends all other properties in alphabetical order.
   * @param {object} props - the properties for which the classKey should be created.
   */


  function propsToClassKey(props) {
    var variant = props.variant,
        other = _objectWithoutPropertiesLoose(props, _excluded$v);

    var classKey = variant || '';
    Object.keys(other).sort().forEach(function (key) {
      if (key === 'color') {
        classKey += isEmpty$1(classKey) ? props[key] : capitalize(props[key]);
      } else {
        classKey += "".concat(isEmpty$1(classKey) ? key : capitalize(key)).concat(capitalize(props[key].toString()));
      }
    });
    return classKey;
  }

  var _excluded$u = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"],
      _excluded2$3 = ["theme"],
      _excluded3 = ["theme"];

  function isEmpty(obj) {
    return Object.keys(obj).length === 0;
  }

  var getStyleOverrides = function getStyleOverrides(name, theme) {
    if (theme.components && theme.components[name] && theme.components[name].styleOverrides) {
      return theme.components[name].styleOverrides;
    }

    return null;
  };

  var getVariantStyles = function getVariantStyles(name, theme) {
    var variants = [];

    if (theme && theme.components && theme.components[name] && theme.components[name].variants) {
      variants = theme.components[name].variants;
    }

    var variantsStyles = {};
    variants.forEach(function (definition) {
      var key = propsToClassKey(definition.props);
      variantsStyles[key] = definition.style;
    });
    return variantsStyles;
  };

  var variantsResolver = function variantsResolver(props, styles, theme, name) {
    var _theme$components, _theme$components$nam;

    var _props$ownerState = props.ownerState,
        ownerState = _props$ownerState === void 0 ? {} : _props$ownerState;
    var variantsStyles = [];
    var themeVariants = theme == null ? void 0 : (_theme$components = theme.components) == null ? void 0 : (_theme$components$nam = _theme$components[name]) == null ? void 0 : _theme$components$nam.variants;

    if (themeVariants) {
      themeVariants.forEach(function (themeVariant) {
        var isMatch = true;
        Object.keys(themeVariant.props).forEach(function (key) {
          if (ownerState[key] !== themeVariant.props[key] && props[key] !== themeVariant.props[key]) {
            isMatch = false;
          }
        });

        if (isMatch) {
          variantsStyles.push(styles[propsToClassKey(themeVariant.props)]);
        }
      });
    }

    return variantsStyles;
  }; // Update /system/styled/#api in case if this changes


  function shouldForwardProp(prop) {
    return prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as';
  }
  var systemDefaultTheme = createTheme$1();

  function createStyled() {
    var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var _input$defaultTheme = input.defaultTheme,
        defaultTheme = _input$defaultTheme === void 0 ? systemDefaultTheme : _input$defaultTheme,
        _input$rootShouldForw = input.rootShouldForwardProp,
        rootShouldForwardProp = _input$rootShouldForw === void 0 ? shouldForwardProp : _input$rootShouldForw,
        _input$slotShouldForw = input.slotShouldForwardProp,
        slotShouldForwardProp = _input$slotShouldForw === void 0 ? shouldForwardProp : _input$slotShouldForw,
        _input$styleFunctionS = input.styleFunctionSx,
        styleFunctionSx = _input$styleFunctionS === void 0 ? defaultStyleFunctionSx : _input$styleFunctionS;
    return function (tag) {
      var inputOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var componentName = inputOptions.name,
          componentSlot = inputOptions.slot,
          inputSkipVariantsResolver = inputOptions.skipVariantsResolver,
          inputSkipSx = inputOptions.skipSx,
          overridesResolver = inputOptions.overridesResolver,
          options = _objectWithoutPropertiesLoose(inputOptions, _excluded$u); // if skipVariantsResolver option is defined, take the value, otherwise, true for root and false for other slots.


      var skipVariantsResolver = inputSkipVariantsResolver !== undefined ? inputSkipVariantsResolver : componentSlot && componentSlot !== 'Root' || false;
      var skipSx = inputSkipSx || false;
      var label;

      var shouldForwardPropOption = shouldForwardProp;

      if (componentSlot === 'Root') {
        shouldForwardPropOption = rootShouldForwardProp;
      } else if (componentSlot) {
        // any other slot specified
        shouldForwardPropOption = slotShouldForwardProp;
      }

      var defaultStyledResolver = styled$2(tag, _extends$1({
        shouldForwardProp: shouldForwardPropOption,
        label: label
      }, options));

      var muiStyledResolver = function muiStyledResolver(styleArg) {
        for (var _len = arguments.length, expressions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          expressions[_key - 1] = arguments[_key];
        }

        var expressionsWithDefaultTheme = expressions ? expressions.map(function (stylesArg) {
          // On the server emotion doesn't use React.forwardRef for creating components, so the created
          // component stays as a function. This condition makes sure that we do not interpolate functions
          // which are basically components used as a selectors.
          // eslint-disable-next-line no-underscore-dangle
          return typeof stylesArg === 'function' && stylesArg.__emotion_real !== stylesArg ? function (_ref) {
            var themeInput = _ref.theme,
                other = _objectWithoutPropertiesLoose(_ref, _excluded2$3);

            return stylesArg(_extends$1({
              theme: isEmpty(themeInput) ? defaultTheme : themeInput
            }, other));
          } : stylesArg;
        }) : [];
        var transformedStyleArg = styleArg;

        if (componentName && overridesResolver) {
          expressionsWithDefaultTheme.push(function (props) {
            var theme = isEmpty(props.theme) ? defaultTheme : props.theme;
            var styleOverrides = getStyleOverrides(componentName, theme);

            if (styleOverrides) {
              var resolvedStyleOverrides = {};
              Object.entries(styleOverrides).forEach(function (_ref3) {
                var _ref4 = _slicedToArray$1(_ref3, 2),
                    slotKey = _ref4[0],
                    slotStyle = _ref4[1];

                resolvedStyleOverrides[slotKey] = typeof slotStyle === 'function' ? slotStyle(props) : slotStyle;
              });
              return overridesResolver(props, resolvedStyleOverrides);
            }

            return null;
          });
        }

        if (componentName && !skipVariantsResolver) {
          expressionsWithDefaultTheme.push(function (props) {
            var theme = isEmpty(props.theme) ? defaultTheme : props.theme;
            return variantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);
          });
        }

        if (!skipSx) {
          expressionsWithDefaultTheme.push(function (props) {
            var theme = isEmpty(props.theme) ? defaultTheme : props.theme;
            return styleFunctionSx(_extends$1({}, props, {
              theme: theme
            }));
          });
        }

        var numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;

        if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
          var placeholders = new Array(numOfCustomFnsApplied).fill(''); // If the type is array, than we need to add placeholders in the template for the overrides, variants and the sx styles.

          transformedStyleArg = [].concat(_toConsumableArray(styleArg), _toConsumableArray(placeholders));
          transformedStyleArg.raw = [].concat(_toConsumableArray(styleArg.raw), _toConsumableArray(placeholders));
        } else if (typeof styleArg === 'function' && // On the server emotion doesn't use React.forwardRef for creating components, so the created
        // component stays as a function. This condition makes sure that we do not interpolate functions
        // which are basically components used as a selectors.
        // eslint-disable-next-line no-underscore-dangle
        styleArg.__emotion_real !== styleArg) {
          // If the type is function, we need to define the default theme.
          transformedStyleArg = function transformedStyleArg(_ref2) {
            var themeInput = _ref2.theme,
                other = _objectWithoutPropertiesLoose(_ref2, _excluded3);

            return styleArg(_extends$1({
              theme: isEmpty(themeInput) ? defaultTheme : themeInput
            }, other));
          };
        }

        var Component = defaultStyledResolver.apply(void 0, [transformedStyleArg].concat(_toConsumableArray(expressionsWithDefaultTheme)));

        return Component;
      };

      if (defaultStyledResolver.withConfig) {
        muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
      }

      return muiStyledResolver;
    };
  }

  function getThemeProps(params) {
    var theme = params.theme,
        name = params.name,
        props = params.props;

    if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) {
      return props;
    }

    return resolveProps(theme.components[name].defaultProps, props);
  }

  function useThemeProps$1(_ref) {
    var props = _ref.props,
        name = _ref.name,
        defaultTheme = _ref.defaultTheme;
    var theme = useTheme$1(defaultTheme);
    var mergedProps = getThemeProps({
      theme: theme,
      name: name,
      props: props
    });
    return mergedProps;
  }

  /**
   * Returns a number whose value is limited to the given range.
   * @param {number} value The value to be clamped
   * @param {number} min The lower boundary of the output range
   * @param {number} max The upper boundary of the output range
   * @returns {number} A number in the range [min, max]
   */

  function clamp$1(value) {
    var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

    return Math.min(Math.max(min, value), max);
  }
  /**
   * Converts a color from CSS hex format to CSS rgb format.
   * @param {string} color - Hex color, i.e. #nnn or #nnnnnn
   * @returns {string} A CSS rgb color string
   */


  function hexToRgb(color) {
    color = color.substr(1);
    var re = new RegExp(".{1,".concat(color.length >= 6 ? 2 : 1, "}"), 'g');
    var colors = color.match(re);

    if (colors && colors[0].length === 1) {
      colors = colors.map(function (n) {
        return n + n;
      });
    }

    return colors ? "rgb".concat(colors.length === 4 ? 'a' : '', "(").concat(colors.map(function (n, index) {
      return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;
    }).join(', '), ")") : '';
  }
  /**
   * Returns an object with the type and values of a color.
   *
   * Note: Does not support rgb % values.
   * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
   * @returns {object} - A MUI color object: {type: string, values: number[]}
   */


  function decomposeColor(color) {
    // Idempotent
    if (color.type) {
      return color;
    }

    if (color.charAt(0) === '#') {
      return decomposeColor(hexToRgb(color));
    }

    var marker = color.indexOf('(');
    var type = color.substring(0, marker);

    if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {
      throw new Error(formatMuiErrorMessage(9, color));
    }

    var values = color.substring(marker + 1, color.length - 1);
    var colorSpace;

    if (type === 'color') {
      values = values.split(' ');
      colorSpace = values.shift();

      if (values.length === 4 && values[3].charAt(0) === '/') {
        values[3] = values[3].substr(1);
      }

      if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {
        throw new Error(formatMuiErrorMessage(10, colorSpace));
      }
    } else {
      values = values.split(',');
    }

    values = values.map(function (value) {
      return parseFloat(value);
    });
    return {
      type: type,
      values: values,
      colorSpace: colorSpace
    };
  }
  /**
   * Converts a color object with type and values to a string.
   * @param {object} color - Decomposed color
   * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'
   * @param {array} color.values - [n,n,n] or [n,n,n,n]
   * @returns {string} A CSS color string
   */

  function recomposeColor(color) {
    var type = color.type,
        colorSpace = color.colorSpace;
    var values = color.values;

    if (type.indexOf('rgb') !== -1) {
      // Only convert the first 3 values to int (i.e. not alpha)
      values = values.map(function (n, i) {
        return i < 3 ? parseInt(n, 10) : n;
      });
    } else if (type.indexOf('hsl') !== -1) {
      values[1] = "".concat(values[1], "%");
      values[2] = "".concat(values[2], "%");
    }

    if (type.indexOf('color') !== -1) {
      values = "".concat(colorSpace, " ").concat(values.join(' '));
    } else {
      values = "".concat(values.join(', '));
    }

    return "".concat(type, "(").concat(values, ")");
  }
  /**
   * Converts a color from hsl format to rgb format.
   * @param {string} color - HSL color values
   * @returns {string} rgb color values
   */

  function hslToRgb(color) {
    color = decomposeColor(color);
    var _color = color,
        values = _color.values;
    var h = values[0];
    var s = values[1] / 100;
    var l = values[2] / 100;
    var a = s * Math.min(l, 1 - l);

    var f = function f(n) {
      var k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 30) % 12;
      return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
    };

    var type = 'rgb';
    var rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];

    if (color.type === 'hsla') {
      type += 'a';
      rgb.push(values[3]);
    }

    return recomposeColor({
      type: type,
      values: rgb
    });
  }
  /**
   * The relative brightness of any point in a color space,
   * normalized to 0 for darkest black and 1 for lightest white.
   *
   * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
   * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
   * @returns {number} The relative brightness of the color in the range 0 - 1
   */

  function getLuminance(color) {
    color = decomposeColor(color);
    var rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;
    rgb = rgb.map(function (val) {
      if (color.type !== 'color') {
        val /= 255; // normalized
      }

      return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);
    }); // Truncate at 3 digits

    return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
  }
  /**
   * Calculates the contrast ratio between two colors.
   *
   * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
   * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
   * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
   * @returns {number} A contrast ratio value in the range 0 - 21.
   */

  function getContrastRatio(foreground, background) {
    var lumA = getLuminance(foreground);
    var lumB = getLuminance(background);
    return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
  }
  /**
   * Sets the absolute transparency of a color.
   * Any existing alpha values are overwritten.
   * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
   * @param {number} value - value to set the alpha channel to in the range 0 - 1
   * @returns {string} A CSS color string. Hex input values are returned as rgb
   */

  function alpha(color, value) {
    color = decomposeColor(color);
    value = clamp$1(value);

    if (color.type === 'rgb' || color.type === 'hsl') {
      color.type += 'a';
    }

    if (color.type === 'color') {
      color.values[3] = "/".concat(value);
    } else {
      color.values[3] = value;
    }

    return recomposeColor(color);
  }
  /**
   * Darkens a color.
   * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
   * @param {number} coefficient - multiplier in the range 0 - 1
   * @returns {string} A CSS color string. Hex input values are returned as rgb
   */

  function darken(color, coefficient) {
    color = decomposeColor(color);
    coefficient = clamp$1(coefficient);

    if (color.type.indexOf('hsl') !== -1) {
      color.values[2] *= 1 - coefficient;
    } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {
      for (var i = 0; i < 3; i += 1) {
        color.values[i] *= 1 - coefficient;
      }
    }

    return recomposeColor(color);
  }
  /**
   * Lightens a color.
   * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
   * @param {number} coefficient - multiplier in the range 0 - 1
   * @returns {string} A CSS color string. Hex input values are returned as rgb
   */

  function lighten(color, coefficient) {
    color = decomposeColor(color);
    coefficient = clamp$1(coefficient);

    if (color.type.indexOf('hsl') !== -1) {
      color.values[2] += (100 - color.values[2]) * coefficient;
    } else if (color.type.indexOf('rgb') !== -1) {
      for (var i = 0; i < 3; i += 1) {
        color.values[i] += (255 - color.values[i]) * coefficient;
      }
    } else if (color.type.indexOf('color') !== -1) {
      for (var _i = 0; _i < 3; _i += 1) {
        color.values[_i] += (1 - color.values[_i]) * coefficient;
      }
    }

    return recomposeColor(color);
  }

  function InnerThemeProvider(props) {
    var theme = useTheme$1();
    return /*#__PURE__*/jsxRuntime.exports.jsx(ThemeContext$2.Provider, {
      value: _typeof(theme) === 'object' ? theme : {},
      children: props.children
    });
  }
  /**
   * This component makes the `theme` available down the React tree.
   * It should preferably be used at **the root of your component tree**.
   */

  function ThemeProvider(props) {
    var children = props.children,
        localTheme = props.theme;
    return /*#__PURE__*/jsxRuntime.exports.jsx(ThemeProvider$1, {
      theme: localTheme,
      children: /*#__PURE__*/jsxRuntime.exports.jsx(InnerThemeProvider, {
        children: children
      })
    });
  }

  /**
   * Determines if a given element is a DOM element name (i.e. not a React component).
   */
  function isHostComponent(element) {
    return typeof element === 'string';
  }

  /**
   * Appends the ownerState object to the props, merging with the existing one if necessary.
   *
   * @param elementType Type of the element that owns the `existingProps`. If the element is a DOM node, `ownerState` are not applied.
   * @param existingProps Props of the element.
   * @param ownerState
   */

  function appendOwnerState(elementType) {
    var existingProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var ownerState = arguments.length > 2 ? arguments[2] : undefined;

    if (isHostComponent(elementType)) {
      return existingProps;
    }

    return _extends$1({}, existingProps, {
      ownerState: _extends$1({}, existingProps.ownerState, ownerState)
    });
  }

  function composeClasses(slots, getUtilityClass, classes) {
    var output = {};
    Object.keys(slots).forEach( // `Objet.keys(slots)` can't be wider than `T` because we infer `T` from `slots`.
    // @ts-expect-error https://github.com/microsoft/TypeScript/pull/12253#issuecomment-263132208
    function (slot) {
      output[slot] = slots[slot].reduce(function (acc, key) {
        if (key) {
          if (classes && classes[key]) {
            acc.push(classes[key]);
          }

          acc.push(getUtilityClass(key));
        }

        return acc;
      }, []).join(' ');
    });
    return output;
  }

  var defaultGenerator = function defaultGenerator(componentName) {
    return componentName;
  };

  var createClassNameGenerator = function createClassNameGenerator() {
    var _generate = defaultGenerator;
    return {
      configure: function configure(generator) {
        _generate = generator;
      },
      generate: function generate(componentName) {
        return _generate(componentName);
      },
      reset: function reset() {
        _generate = defaultGenerator;
      }
    };
  };

  var ClassNameGenerator = createClassNameGenerator();
  var ClassNameGenerator$1 = ClassNameGenerator;

  var globalStateClassesMapping = {
    active: 'Mui-active',
    checked: 'Mui-checked',
    completed: 'Mui-completed',
    disabled: 'Mui-disabled',
    error: 'Mui-error',
    expanded: 'Mui-expanded',
    focused: 'Mui-focused',
    focusVisible: 'Mui-focusVisible',
    required: 'Mui-required',
    selected: 'Mui-selected'
  };
  function generateUtilityClass(componentName, slot) {
    var globalStateClass = globalStateClassesMapping[slot];
    return globalStateClass || "".concat(ClassNameGenerator$1.generate(componentName), "-").concat(slot);
  }

  function generateUtilityClasses(componentName, slots) {
    var result = {};
    slots.forEach(function (slot) {
      result[slot] = generateUtilityClass(componentName, slot);
    });
    return result;
  }

  function getBackdropUtilityClass(slot) {
    return generateUtilityClass('MuiBackdrop', slot);
  }
  generateUtilityClasses('MuiBackdrop', ['root', 'invisible']);

  var _excluded$t = ["classes", "className", "invisible", "component", "components", "componentsProps", "theme"];

  var useUtilityClasses$h = function useUtilityClasses(ownerState) {
    var classes = ownerState.classes,
        invisible = ownerState.invisible;
    var slots = {
      root: ['root', invisible && 'invisible']
    };
    return composeClasses(slots, getBackdropUtilityClass, classes);
  };

  var BackdropUnstyled = /*#__PURE__*/react.exports.forwardRef(function BackdropUnstyled(props, ref) {
    var classesProp = props.classes,
        className = props.className,
        _props$invisible = props.invisible,
        invisible = _props$invisible === void 0 ? false : _props$invisible,
        _props$component = props.component,
        component = _props$component === void 0 ? 'div' : _props$component,
        _props$components = props.components,
        components = _props$components === void 0 ? {} : _props$components,
        _props$componentsProp = props.componentsProps,
        componentsProps = _props$componentsProp === void 0 ? {} : _props$componentsProp,
        theme = props.theme,
        other = _objectWithoutPropertiesLoose(props, _excluded$t);

    var ownerState = _extends$1({}, props, {
      classes: classesProp,
      invisible: invisible
    });

    var classes = useUtilityClasses$h(ownerState);
    var Root = components.Root || component;
    var rootProps = componentsProps.root || {};
    return /*#__PURE__*/jsxRuntime.exports.jsx(Root, _extends$1({
      "aria-hidden": true
    }, rootProps, !isHostComponent(Root) && {
      as: component,
      ownerState: _extends$1({}, ownerState, rootProps.ownerState),
      theme: theme
    }, {
      ref: ref
    }, other, {
      className: clsx(classes.root, rootProps.className, className)
    }));
  });
  var BackdropUnstyled$1 = BackdropUnstyled;

  var top = 'top';
  var bottom = 'bottom';
  var right = 'right';
  var left = 'left';
  var auto = 'auto';
  var basePlacements = [top, bottom, right, left];
  var start = 'start';
  var end = 'end';
  var clippingParents = 'clippingParents';
  var viewport = 'viewport';
  var popper = 'popper';
  var reference = 'reference';
  var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
    return acc.concat([placement + "-" + start, placement + "-" + end]);
  }, []);
  var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
    return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
  }, []); // modifiers that need to read the DOM

  var beforeRead = 'beforeRead';
  var read = 'read';
  var afterRead = 'afterRead'; // pure-logic modifiers

  var beforeMain = 'beforeMain';
  var main = 'main';
  var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

  var beforeWrite = 'beforeWrite';
  var write = 'write';
  var afterWrite = 'afterWrite';
  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

  function getNodeName(element) {
    return element ? (element.nodeName || '').toLowerCase() : null;
  }

  function getWindow(node) {
    if (node == null) {
      return window;
    }

    if (node.toString() !== '[object Window]') {
      var ownerDocument = node.ownerDocument;
      return ownerDocument ? ownerDocument.defaultView || window : window;
    }

    return node;
  }

  function isElement(node) {
    var OwnElement = getWindow(node).Element;
    return node instanceof OwnElement || node instanceof Element;
  }

  function isHTMLElement(node) {
    var OwnElement = getWindow(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
  }

  function isShadowRoot(node) {
    // IE 11 has no ShadowRoot
    if (typeof ShadowRoot === 'undefined') {
      return false;
    }

    var OwnElement = getWindow(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
  }

  // and applies them to the HTMLElements such as popper and arrow

  function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function (name) {
      var style = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name]; // arrow is optional + virtual elements

      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      } // Flow doesn't support to extend this property, but it's the most
      // effective way to apply styles to an HTMLElement
      // $FlowFixMe[cannot-write]


      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (name) {
        var value = attributes[name];

        if (value === false) {
          element.removeAttribute(name);
        } else {
          element.setAttribute(name, value === true ? '' : value);
        }
      });
    });
  }

  function effect$2(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: '0',
        top: '0',
        margin: '0'
      },
      arrow: {
        position: 'absolute'
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;

    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }

    return function () {
      Object.keys(state.elements).forEach(function (name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

        var style = styleProperties.reduce(function (style, property) {
          style[property] = '';
          return style;
        }, {}); // arrow is optional + virtual elements

        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        }

        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function (attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  } // eslint-disable-next-line import/no-unused-modules


  var applyStyles$1 = {
    name: 'applyStyles',
    enabled: true,
    phase: 'write',
    fn: applyStyles,
    effect: effect$2,
    requires: ['computeStyles']
  };

  function getBasePlacement(placement) {
    return placement.split('-')[0];
  }

  var max = Math.max;
  var min = Math.min;
  var round$2 = Math.round;

  function getBoundingClientRect(element, includeScale) {
    if (includeScale === void 0) {
      includeScale = false;
    }

    var rect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;

    if (isHTMLElement(element) && includeScale) {
      var offsetHeight = element.offsetHeight;
      var offsetWidth = element.offsetWidth; // Do not attempt to divide by 0, otherwise we get `Infinity` as scale
      // Fallback to 1 in case both values are `0`

      if (offsetWidth > 0) {
        scaleX = round$2(rect.width) / offsetWidth || 1;
      }

      if (offsetHeight > 0) {
        scaleY = round$2(rect.height) / offsetHeight || 1;
      }
    }

    return {
      width: rect.width / scaleX,
      height: rect.height / scaleY,
      top: rect.top / scaleY,
      right: rect.right / scaleX,
      bottom: rect.bottom / scaleY,
      left: rect.left / scaleX,
      x: rect.left / scaleX,
      y: rect.top / scaleY
    };
  }

  // means it doesn't take into account transforms.

  function getLayoutRect(element) {
    var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
    // Fixes https://github.com/popperjs/popper-core/issues/1223

    var width = element.offsetWidth;
    var height = element.offsetHeight;

    if (Math.abs(clientRect.width - width) <= 1) {
      width = clientRect.width;
    }

    if (Math.abs(clientRect.height - height) <= 1) {
      height = clientRect.height;
    }

    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width: width,
      height: height
    };
  }

  function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

    if (parent.contains(child)) {
      return true;
    } // then fallback to custom implementation with Shadow DOM support
    else if (rootNode && isShadowRoot(rootNode)) {
      var next = child;

      do {
        if (next && parent.isSameNode(next)) {
          return true;
        } // $FlowFixMe[prop-missing]: need a better way to handle this...


        next = next.parentNode || next.host;
      } while (next);
    } // Give up, the result is false


    return false;
  }

  function getComputedStyle(element) {
    return getWindow(element).getComputedStyle(element);
  }

  function isTableElement(element) {
    return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
  }

  function getDocumentElement(element) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
    element.document) || window.document).documentElement;
  }

  function getParentNode(element) {
    if (getNodeName(element) === 'html') {
      return element;
    }

    return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
      // $FlowFixMe[incompatible-return]
      // $FlowFixMe[prop-missing]
      element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
      element.parentNode || ( // DOM Element detected
      isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
      // $FlowFixMe[incompatible-call]: HTMLElement is a Node
      getDocumentElement(element) // fallback

    );
  }

  function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
    getComputedStyle(element).position === 'fixed') {
      return null;
    }

    return element.offsetParent;
  } // `.offsetParent` reports `null` for fixed elements, while absolute elements
  // return the containing block


  function getContainingBlock(element) {
    var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;
    var isIE = navigator.userAgent.indexOf('Trident') !== -1;

    if (isIE && isHTMLElement(element)) {
      // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
      var elementCss = getComputedStyle(element);

      if (elementCss.position === 'fixed') {
        return null;
      }
    }

    var currentNode = getParentNode(element);

    if (isShadowRoot(currentNode)) {
      currentNode = currentNode.host;
    }

    while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
      var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that
      // create a containing block.
      // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

      if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }

    return null;
  } // Gets the closest ancestor positioned element. Handles some edge cases,
  // such as table ancestors and cross browser bugs.


  function getOffsetParent(element) {
    var window = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);

    while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {
      offsetParent = getTrueOffsetParent(offsetParent);
    }

    if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static')) {
      return window;
    }

    return offsetParent || getContainingBlock(element) || window;
  }

  function getMainAxisFromPlacement(placement) {
    return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
  }

  function within(min$1, value, max$1) {
    return max(min$1, min(value, max$1));
  }
  function withinMaxClamp(min, value, max) {
    var v = within(min, value, max);
    return v > max ? max : v;
  }

  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }

  function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
  }

  function expandToHashMap(value, keys) {
    return keys.reduce(function (hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }

  var toPaddingObject = function toPaddingObject(padding, state) {
    padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding;
    return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
  };

  function arrow(_ref) {
    var _state$modifiersData$;

    var state = _ref.state,
        name = _ref.name,
        options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left, right].indexOf(basePlacement) >= 0;
    var len = isVertical ? 'height' : 'width';

    if (!arrowElement || !popperOffsets) {
      return;
    }

    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === 'y' ? top : left;
    var maxProp = axis === 'y' ? bottom : right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
    var startDiff = popperOffsets[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
    // outside of the popper bounds

    var min = paddingObject[minProp];
    var max = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset = within(min, center, max); // Prevents breaking syntax highlighting...

    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
  }

  function effect$1(_ref2) {
    var state = _ref2.state,
        options = _ref2.options;
    var _options$element = options.element,
        arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

    if (arrowElement == null) {
      return;
    } // CSS selector


    if (typeof arrowElement === 'string') {
      arrowElement = state.elements.popper.querySelector(arrowElement);

      if (!arrowElement) {
        return;
      }
    }

    if (!contains(state.elements.popper, arrowElement)) {

      return;
    }

    state.elements.arrow = arrowElement;
  } // eslint-disable-next-line import/no-unused-modules


  var arrow$1 = {
    name: 'arrow',
    enabled: true,
    phase: 'main',
    fn: arrow,
    effect: effect$1,
    requires: ['popperOffsets'],
    requiresIfExists: ['preventOverflow']
  };

  function getVariation(placement) {
    return placement.split('-')[1];
  }

  var unsetSides = {
    top: 'auto',
    right: 'auto',
    bottom: 'auto',
    left: 'auto'
  }; // Round the offsets to the nearest suitable subpixel based on the DPR.
  // Zooming can change the DPR, but it seems to report a value that will
  // cleanly divide the values into the appropriate subpixels.

  function roundOffsetsByDPR(_ref) {
    var x = _ref.x,
        y = _ref.y;
    var win = window;
    var dpr = win.devicePixelRatio || 1;
    return {
      x: round$2(x * dpr) / dpr || 0,
      y: round$2(y * dpr) / dpr || 0
    };
  }

  function mapToStyles(_ref2) {
    var _Object$assign2;

    var popper = _ref2.popper,
        popperRect = _ref2.popperRect,
        placement = _ref2.placement,
        variation = _ref2.variation,
        offsets = _ref2.offsets,
        position = _ref2.position,
        gpuAcceleration = _ref2.gpuAcceleration,
        adaptive = _ref2.adaptive,
        roundOffsets = _ref2.roundOffsets,
        isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x,
        x = _offsets$x === void 0 ? 0 : _offsets$x,
        _offsets$y = offsets.y,
        y = _offsets$y === void 0 ? 0 : _offsets$y;

    var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
      x: x,
      y: y
    }) : {
      x: x,
      y: y
    };

    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty('x');
    var hasY = offsets.hasOwnProperty('y');
    var sideX = left;
    var sideY = top;
    var win = window;

    if (adaptive) {
      var offsetParent = getOffsetParent(popper);
      var heightProp = 'clientHeight';
      var widthProp = 'clientWidth';

      if (offsetParent === getWindow(popper)) {
        offsetParent = getDocumentElement(popper);

        if (getComputedStyle(offsetParent).position !== 'static' && position === 'absolute') {
          heightProp = 'scrollHeight';
          widthProp = 'scrollWidth';
        }
      } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


      offsetParent = offsetParent;

      if (placement === top || (placement === left || placement === right) && variation === end) {
        sideY = bottom;
        var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]
        offsetParent[heightProp];
        y -= offsetY - popperRect.height;
        y *= gpuAcceleration ? 1 : -1;
      }

      if (placement === left || (placement === top || placement === bottom) && variation === end) {
        sideX = right;
        var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]
        offsetParent[widthProp];
        x -= offsetX - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }

    var commonStyles = Object.assign({
      position: position
    }, adaptive && unsetSides);

    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
      x: x,
      y: y
    }) : {
      x: x,
      y: y
    };

    x = _ref4.x;
    y = _ref4.y;

    if (gpuAcceleration) {
      var _Object$assign;

      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }

    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
  }

  function computeStyles(_ref5) {
    var state = _ref5.state,
        options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration,
        gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
        _options$adaptive = options.adaptive,
        adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
        _options$roundOffsets = options.roundOffsets,
        roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;

    var commonStyles = {
      placement: getBasePlacement(state.placement),
      variation: getVariation(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration: gpuAcceleration,
      isFixed: state.options.strategy === 'fixed'
    };

    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive: adaptive,
        roundOffsets: roundOffsets
      })));
    }

    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: 'absolute',
        adaptive: false,
        roundOffsets: roundOffsets
      })));
    }

    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-placement': state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules


  var computeStyles$1 = {
    name: 'computeStyles',
    enabled: true,
    phase: 'beforeWrite',
    fn: computeStyles,
    data: {}
  };

  var passive = {
    passive: true
  };

  function effect(_ref) {
    var state = _ref.state,
        instance = _ref.instance,
        options = _ref.options;
    var _options$scroll = options.scroll,
        scroll = _options$scroll === void 0 ? true : _options$scroll,
        _options$resize = options.resize,
        resize = _options$resize === void 0 ? true : _options$resize;
    var window = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.addEventListener('scroll', instance.update, passive);
      });
    }

    if (resize) {
      window.addEventListener('resize', instance.update, passive);
    }

    return function () {
      if (scroll) {
        scrollParents.forEach(function (scrollParent) {
          scrollParent.removeEventListener('scroll', instance.update, passive);
        });
      }

      if (resize) {
        window.removeEventListener('resize', instance.update, passive);
      }
    };
  } // eslint-disable-next-line import/no-unused-modules


  var eventListeners = {
    name: 'eventListeners',
    enabled: true,
    phase: 'write',
    fn: function fn() {},
    effect: effect,
    data: {}
  };

  var hash$3 = {
    left: 'right',
    right: 'left',
    bottom: 'top',
    top: 'bottom'
  };
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function (matched) {
      return hash$3[matched];
    });
  }

  var hash$2 = {
    start: 'end',
    end: 'start'
  };
  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function (matched) {
      return hash$2[matched];
    });
  }

  function getWindowScroll(node) {
    var win = getWindow(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
      scrollLeft: scrollLeft,
      scrollTop: scrollTop
    };
  }

  function getWindowScrollBarX(element) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    // Popper 1 is broken in this case and never had a bug report so let's assume
    // it's not an issue. I don't think anyone ever specifies width on <html>
    // anyway.
    // Browsers where the left scrollbar doesn't cause an issue report `0` for
    // this (e.g. Edge 2019, IE11, Safari)
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
  }

  function getViewportRect(element) {
    var win = getWindow(element);
    var html = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
    // can be obscured underneath it.
    // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
    // if it isn't open, so if this isn't available, the popper will be detected
    // to overflow the bottom of the screen too early.

    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
      // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
      // errors due to floating point numbers, so we need to check precision.
      // Safari returns a number <= 0, usually < -1 when pinch-zoomed
      // Feature detection fails in mobile emulation mode in Chrome.
      // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
      // 0.001
      // Fallback here: "Not Safari" userAgent

      if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }

    return {
      width: width,
      height: height,
      x: x + getWindowScrollBarX(element),
      y: y
    };
  }

  // of the `<html>` and `<body>` rect bounds if horizontally scrollable

  function getDocumentRect(element) {
    var _element$ownerDocumen;

    var html = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y = -winScroll.scrollTop;

    if (getComputedStyle(body || html).direction === 'rtl') {
      x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
    }

    return {
      width: width,
      height: height,
      x: x,
      y: y
    };
  }

  function isScrollParent(element) {
    // Firefox wants us to check `-x` and `-y` variations as well
    var _getComputedStyle = getComputedStyle(element),
        overflow = _getComputedStyle.overflow,
        overflowX = _getComputedStyle.overflowX,
        overflowY = _getComputedStyle.overflowY;

    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }

  function getScrollParent(node) {
    if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
      // $FlowFixMe[incompatible-return]: assume body is always available
      return node.ownerDocument.body;
    }

    if (isHTMLElement(node) && isScrollParent(node)) {
      return node;
    }

    return getScrollParent(getParentNode(node));
  }

  /*
  given a DOM element, return the list of all scroll parents, up the list of ancesors
  until we get to the top window object. This list is what we attach scroll listeners
  to, because if any of these parent elements scroll, we'll need to re-calculate the
  reference element's position.
  */

  function listScrollParents(element, list) {
    var _element$ownerDocumen;

    if (list === void 0) {
      list = [];
    }

    var scrollParent = getScrollParent(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    updatedList.concat(listScrollParents(getParentNode(target)));
  }

  function rectToClientRect(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }

  function getInnerBoundingClientRect(element) {
    var rect = getBoundingClientRect(element);
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }

  function getClientRectFromMixedType(element, clippingParent) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  } // A "clipping parent" is an overflowable container with the characteristic of
  // clipping (or hiding) overflowing elements with a position different from
  // `initial`


  function getClippingParents(element) {
    var clippingParents = listScrollParents(getParentNode(element));
    var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

    if (!isElement(clipperElement)) {
      return [];
    } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


    return clippingParents.filter(function (clippingParent) {
      return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
    });
  } // Gets the maximum area that the element is visible in due to any number of
  // clipping parents


  function getClippingRect(element, boundary, rootBoundary) {
    var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
    var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents[0];
    var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }

  function computeOffsets(_ref) {
    var reference = _ref.reference,
        element = _ref.element,
        placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference.x + reference.width / 2 - element.width / 2;
    var commonY = reference.y + reference.height / 2 - element.height / 2;
    var offsets;

    switch (basePlacement) {
      case top:
        offsets = {
          x: commonX,
          y: reference.y - element.height
        };
        break;

      case bottom:
        offsets = {
          x: commonX,
          y: reference.y + reference.height
        };
        break;

      case right:
        offsets = {
          x: reference.x + reference.width,
          y: commonY
        };
        break;

      case left:
        offsets = {
          x: reference.x - element.width,
          y: commonY
        };
        break;

      default:
        offsets = {
          x: reference.x,
          y: reference.y
        };
    }

    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

    if (mainAxis != null) {
      var len = mainAxis === 'y' ? 'height' : 'width';

      switch (variation) {
        case start:
          offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
          break;

        case end:
          offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
          break;
      }
    }

    return offsets;
  }

  function detectOverflow(state, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        _options$placement = _options.placement,
        placement = _options$placement === void 0 ? state.placement : _options$placement,
        _options$boundary = _options.boundary,
        boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
        _options$rootBoundary = _options.rootBoundary,
        rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
        _options$elementConte = _options.elementContext,
        elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
        _options$altBoundary = _options.altBoundary,
        altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
        _options$padding = _options.padding,
        padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
    var referenceClientRect = getBoundingClientRect(state.elements.reference);
    var popperOffsets = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: 'absolute',
      placement: placement
    });
    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
    // 0 or negative = within the clipping rect

    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

    if (elementContext === popper && offsetData) {
      var offset = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function (key) {
        var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
        overflowOffsets[key] += offset[axis] * multiply;
      });
    }

    return overflowOffsets;
  }

  function computeAutoPlacement(state, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        placement = _options.placement,
        boundary = _options.boundary,
        rootBoundary = _options.rootBoundary,
        padding = _options.padding,
        flipVariations = _options.flipVariations,
        _options$allowedAutoP = _options.allowedAutoPlacements,
        allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
      return getVariation(placement) === variation;
    }) : basePlacements;
    var allowedPlacements = placements$1.filter(function (placement) {
      return allowedAutoPlacements.indexOf(placement) >= 0;
    });

    if (allowedPlacements.length === 0) {
      allowedPlacements = placements$1;
    } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


    var overflows = allowedPlacements.reduce(function (acc, placement) {
      acc[placement] = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding
      })[getBasePlacement(placement)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function (a, b) {
      return overflows[a] - overflows[b];
    });
  }

  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
      return [];
    }

    var oppositePlacement = getOppositePlacement(placement);
    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
  }

  function flip(_ref) {
    var state = _ref.state,
        options = _ref.options,
        name = _ref.name;

    if (state.modifiersData[name]._skip) {
      return;
    }

    var _options$mainAxis = options.mainAxis,
        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
        _options$altAxis = options.altAxis,
        checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
        specifiedFallbackPlacements = options.fallbackPlacements,
        padding = options.padding,
        boundary = options.boundary,
        rootBoundary = options.rootBoundary,
        altBoundary = options.altBoundary,
        _options$flipVariatio = options.flipVariations,
        flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
        allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
      return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        flipVariations: flipVariations,
        allowedAutoPlacements: allowedAutoPlacements
      }) : placement);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements[0];

    for (var i = 0; i < placements.length; i++) {
      var placement = placements[i];

      var _basePlacement = getBasePlacement(placement);

      var isStartVariation = getVariation(placement) === start;
      var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
      var len = isVertical ? 'width' : 'height';
      var overflow = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        altBoundary: altBoundary,
        padding: padding
      });
      var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide);
      }

      var altVariationSide = getOppositePlacement(mainVariationSide);
      var checks = [];

      if (checkMainAxis) {
        checks.push(overflow[_basePlacement] <= 0);
      }

      if (checkAltAxis) {
        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }

      if (checks.every(function (check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }

      checksMap.set(placement, checks);
    }

    if (makeFallbackChecks) {
      // `2` may be desired in some cases – research later
      var numberOfChecks = flipVariations ? 3 : 1;

      var _loop = function _loop(_i) {
        var fittingPlacement = placements.find(function (placement) {
          var checks = checksMap.get(placement);

          if (checks) {
            return checks.slice(0, _i).every(function (check) {
              return check;
            });
          }
        });

        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      };

      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);

        if (_ret === "break") break;
      }
    }

    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  } // eslint-disable-next-line import/no-unused-modules


  var flip$1 = {
    name: 'flip',
    enabled: true,
    phase: 'main',
    fn: flip,
    requiresIfExists: ['offset'],
    data: {
      _skip: false
    }
  };

  function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }

    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x
    };
  }

  function isAnySideFullyClipped(overflow) {
    return [top, right, bottom, left].some(function (side) {
      return overflow[side] >= 0;
    });
  }

  function hide(_ref) {
    var state = _ref.state,
        name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
      elementContext: 'reference'
    });
    var popperAltOverflow = detectOverflow(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets: referenceClippingOffsets,
      popperEscapeOffsets: popperEscapeOffsets,
      isReferenceHidden: isReferenceHidden,
      hasPopperEscaped: hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-reference-hidden': isReferenceHidden,
      'data-popper-escaped': hasPopperEscaped
    });
  } // eslint-disable-next-line import/no-unused-modules


  var hide$1 = {
    name: 'hide',
    enabled: true,
    phase: 'main',
    requiresIfExists: ['preventOverflow'],
    fn: hide
  };

  function distanceAndSkiddingToXY(placement, rects, offset) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

    var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
      placement: placement
    })) : offset,
        skidding = _ref[0],
        distance = _ref[1];

    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left, right].indexOf(basePlacement) >= 0 ? {
      x: distance,
      y: skidding
    } : {
      x: skidding,
      y: distance
    };
  }

  function offset(_ref2) {
    var state = _ref2.state,
        options = _ref2.options,
        name = _ref2.name;
    var _options$offset = options.offset,
        offset = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements.reduce(function (acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement],
        x = _data$state$placement.x,
        y = _data$state$placement.y;

    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y;
    }

    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules


  var offset$1 = {
    name: 'offset',
    enabled: true,
    phase: 'main',
    requires: ['popperOffsets'],
    fn: offset
  };

  function popperOffsets(_ref) {
    var state = _ref.state,
        name = _ref.name; // Offsets are the actual position the popper needs to have to be
    // properly positioned near its reference element
    // This is the most basic placement, and will be adjusted by
    // the modifiers in the next step

    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: 'absolute',
      placement: state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules


  var popperOffsets$1 = {
    name: 'popperOffsets',
    enabled: true,
    phase: 'read',
    fn: popperOffsets,
    data: {}
  };

  function getAltAxis(axis) {
    return axis === 'x' ? 'y' : 'x';
  }

  function preventOverflow(_ref) {
    var state = _ref.state,
        options = _ref.options,
        name = _ref.name;
    var _options$mainAxis = options.mainAxis,
        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
        _options$altAxis = options.altAxis,
        checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
        boundary = options.boundary,
        rootBoundary = options.rootBoundary,
        altBoundary = options.altBoundary,
        padding = options.padding,
        _options$tether = options.tether,
        tether = _options$tether === void 0 ? true : _options$tether,
        _options$tetherOffset = options.tetherOffset,
        tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      altBoundary: altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
      mainAxis: tetherOffsetValue,
      altAxis: tetherOffsetValue
    } : Object.assign({
      mainAxis: 0,
      altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
      x: 0,
      y: 0
    };

    if (!popperOffsets) {
      return;
    }

    if (checkMainAxis) {
      var _offsetModifierState$;

      var mainSide = mainAxis === 'y' ? top : left;
      var altSide = mainAxis === 'y' ? bottom : right;
      var len = mainAxis === 'y' ? 'height' : 'width';
      var offset = popperOffsets[mainAxis];
      var min$1 = offset + overflow[mainSide];
      var max$1 = offset - overflow[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
      // outside the reference bounds

      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
      // to include its full size in the calculation. If the reference is small
      // and near the edge of a boundary, the popper can overflow even if the
      // reference is not overflowing as well (e.g. virtual elements with no
      // width or height)

      var arrowLen = within(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
      var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = offset + maxOffset - offsetModifierValue;
      var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
      popperOffsets[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset;
    }

    if (checkAltAxis) {
      var _offsetModifierState$2;

      var _mainSide = mainAxis === 'x' ? top : left;

      var _altSide = mainAxis === 'x' ? bottom : right;

      var _offset = popperOffsets[altAxis];

      var _len = altAxis === 'y' ? 'height' : 'width';

      var _min = _offset + overflow[_mainSide];

      var _max = _offset - overflow[_altSide];

      var isOriginSide = [top, left].indexOf(basePlacement) !== -1;

      var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;

      var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;

      var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;

      var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);

      popperOffsets[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }

    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules


  var preventOverflow$1 = {
    name: 'preventOverflow',
    enabled: true,
    phase: 'main',
    fn: preventOverflow,
    requiresIfExists: ['offset']
  };

  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  function getNodeScroll(node) {
    if (node === getWindow(node) || !isHTMLElement(node)) {
      return getWindowScroll(node);
    } else {
      return getHTMLElementScroll(node);
    }
  }

  function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round$2(rect.width) / element.offsetWidth || 1;
    var scaleY = round$2(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
  } // Returns the composite rect of an element relative to its offsetParent.
  // Composite means it takes into account transforms as well as layout.


  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }

    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled);
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };

    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
      isScrollParent(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }

      if (isHTMLElement(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent, true);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }

    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }

  function order$1(modifiers) {
    var map = new Map();
    var visited = new Set();
    var result = [];
    modifiers.forEach(function (modifier) {
      map.set(modifier.name, modifier);
    }); // On visiting object, check for its dependencies and visit them recursively

    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function (dep) {
        if (!visited.has(dep)) {
          var depModifier = map.get(dep);

          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }

    modifiers.forEach(function (modifier) {
      if (!visited.has(modifier.name)) {
        // check for visited object
        sort(modifier);
      }
    });
    return result;
  }

  function orderModifiers(modifiers) {
    // order based on dependencies
    var orderedModifiers = order$1(modifiers); // order based on phase

    return modifierPhases.reduce(function (acc, phase) {
      return acc.concat(orderedModifiers.filter(function (modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }

  function debounce(fn) {
    var pending;
    return function () {
      if (!pending) {
        pending = new Promise(function (resolve) {
          Promise.resolve().then(function () {
            pending = undefined;
            resolve(fn());
          });
        });
      }

      return pending;
    };
  }

  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function (merged, current) {
      var existing = merged[current.name];
      merged[current.name] = existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      return merged;
    }, {}); // IE11 does not support Object.values

    return Object.keys(merged).map(function (key) {
      return merged[key];
    });
  }

  var DEFAULT_OPTIONS = {
    placement: 'bottom',
    modifiers: [],
    strategy: 'absolute'
  };

  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return !args.some(function (element) {
      return !(element && typeof element.getBoundingClientRect === 'function');
    });
  }

  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }

    var _generatorOptions = generatorOptions,
        _generatorOptions$def = _generatorOptions.defaultModifiers,
        defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
        _generatorOptions$def2 = _generatorOptions.defaultOptions,
        defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper(reference, popper, options) {
      if (options === void 0) {
        options = defaultOptions;
      }

      var state = {
        placement: 'bottom',
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
        modifiersData: {},
        elements: {
          reference: reference,
          popper: popper
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state: state,
        setOptions: function setOptions(setOptionsAction) {
          var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions, state.options, options);
          state.scrollParents = {
            reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
            popper: listScrollParents(popper)
          }; // Orders the modifiers based on their dependencies and `phase`
          // properties

          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

          state.orderedModifiers = orderedModifiers.filter(function (m) {
            return m.enabled;
          }); // Validate the provided modifiers so that the consumer will get warned

          runModifierEffects();
          return instance.update();
        },
        // Sync update – it will always be executed, even if not necessary. This
        // is useful for low frequency updates where sync behavior simplifies the
        // logic.
        // For high frequency updates (e.g. `resize` and `scroll` events), always
        // prefer the async Popper#update method
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return;
          }

          var _state$elements = state.elements,
              reference = _state$elements.reference,
              popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
          // anymore

          if (!areValidElements(reference, popper)) {

            return;
          } // Store the reference and popper rects to be read by modifiers


          state.rects = {
            reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
            popper: getLayoutRect(popper)
          }; // Modifiers have the ability to reset the current update cycle. The
          // most common use case for this is the `flip` modifier changing the
          // placement, which then needs to re-run all the modifiers, because the
          // logic was previously ran for the previous placement and is therefore
          // stale/incorrect

          state.reset = false;
          state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
          // is filled with the initial data specified by the modifier. This means
          // it doesn't persist and is fresh on each update.
          // To ensure persistent data, use `${name}#persistent`

          state.orderedModifiers.forEach(function (modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });

          for (var index = 0; index < state.orderedModifiers.length; index++) {

            if (state.reset === true) {
              state.reset = false;
              index = -1;
              continue;
            }

            var _state$orderedModifie = state.orderedModifiers[index],
                fn = _state$orderedModifie.fn,
                _state$orderedModifie2 = _state$orderedModifie.options,
                _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
                name = _state$orderedModifie.name;

            if (typeof fn === 'function') {
              state = fn({
                state: state,
                options: _options,
                name: name,
                instance: instance
              }) || state;
            }
          }
        },
        // Async and optimistically optimized update – it will not be executed if
        // not necessary (debounced to run at most once-per-tick)
        update: debounce(function () {
          return new Promise(function (resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };

      if (!areValidElements(reference, popper)) {

        return instance;
      }

      instance.setOptions(options).then(function (state) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state);
        }
      }); // Modifiers have the ability to execute arbitrary code before the first
      // update cycle runs. They will be executed in the same order as the update
      // cycle. This is useful when a modifier adds some persistent data that
      // other modifiers need to use, but the modifier is run after the dependent
      // one.

      function runModifierEffects() {
        state.orderedModifiers.forEach(function (_ref3) {
          var name = _ref3.name,
              _ref3$options = _ref3.options,
              options = _ref3$options === void 0 ? {} : _ref3$options,
              effect = _ref3.effect;

          if (typeof effect === 'function') {
            var cleanupFn = effect({
              state: state,
              name: name,
              instance: instance,
              options: options
            });

            var noopFn = function noopFn() {};

            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }

      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function (fn) {
          return fn();
        });
        effectCleanupFns = [];
      }

      return instance;
    };
  }

  var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
  var createPopper = /*#__PURE__*/popperGenerator({
    defaultModifiers: defaultModifiers
  }); // eslint-disable-next-line import/no-unused-modules

  function getContainer$1(container) {
    return typeof container === 'function' ? container() : container;
  }
  /**
   * Portals provide a first-class way to render children into a DOM node
   * that exists outside the DOM hierarchy of the parent component.
   */


  var Portal = /*#__PURE__*/react.exports.forwardRef(function Portal(props, ref) {
    var children = props.children,
        container = props.container,
        _props$disablePortal = props.disablePortal,
        disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal;

    var _React$useState = react.exports.useState(null),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        mountNode = _React$useState2[0],
        setMountNode = _React$useState2[1];

    var handleRef = useForkRef( /*#__PURE__*/ /*#__PURE__*/react.exports.isValidElement(children) ? children.ref : null, ref);
    useEnhancedEffect$1(function () {
      if (!disablePortal) {
        setMountNode(getContainer$1(container) || document.body);
      }
    }, [container, disablePortal]);
    useEnhancedEffect$1(function () {
      if (mountNode && !disablePortal) {
        setRef(ref, mountNode);
        return function () {
          setRef(ref, null);
        };
      }

      return undefined;
    }, [ref, mountNode, disablePortal]);

    if (disablePortal) {
      if ( /*#__PURE__*/react.exports.isValidElement(children)) {
        return /*#__PURE__*/react.exports.cloneElement(children, {
          ref: handleRef
        });
      }

      return children;
    }

    return mountNode ? /*#__PURE__*/reactDom.exports.createPortal(children, mountNode) : mountNode;
  });

  var Portal$1 = Portal;

  var _excluded$s = ["anchorEl", "children", "direction", "disablePortal", "modifiers", "open", "ownerState", "placement", "popperOptions", "popperRef", "TransitionProps"],
      _excluded2$2 = ["anchorEl", "children", "container", "direction", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "style", "transition"];

  function flipPlacement(placement, direction) {
    if (direction === 'ltr') {
      return placement;
    }

    switch (placement) {
      case 'bottom-end':
        return 'bottom-start';

      case 'bottom-start':
        return 'bottom-end';

      case 'top-end':
        return 'top-start';

      case 'top-start':
        return 'top-end';

      default:
        return placement;
    }
  }

  function resolveAnchorEl$1(anchorEl) {
    return typeof anchorEl === 'function' ? anchorEl() : anchorEl;
  }

  var defaultPopperOptions = {};
  /* eslint-disable react/prop-types */

  var PopperTooltip = /*#__PURE__*/react.exports.forwardRef(function PopperTooltip(props, ref) {
    var anchorEl = props.anchorEl,
        children = props.children,
        direction = props.direction,
        disablePortal = props.disablePortal,
        modifiers = props.modifiers,
        open = props.open,
        initialPlacement = props.placement,
        popperOptions = props.popperOptions,
        popperRefProp = props.popperRef,
        TransitionProps = props.TransitionProps,
        other = _objectWithoutPropertiesLoose(props, _excluded$s);

    var tooltipRef = react.exports.useRef(null);
    var ownRef = useForkRef(tooltipRef, ref);
    var popperRef = react.exports.useRef(null);
    var handlePopperRef = useForkRef(popperRef, popperRefProp);
    var handlePopperRefRef = react.exports.useRef(handlePopperRef);
    useEnhancedEffect$1(function () {
      handlePopperRefRef.current = handlePopperRef;
    }, [handlePopperRef]);
    react.exports.useImperativeHandle(popperRefProp, function () {
      return popperRef.current;
    }, []);
    var rtlPlacement = flipPlacement(initialPlacement, direction);
    /**
     * placement initialized from prop but can change during lifetime if modifiers.flip.
     * modifiers.flip is essentially a flip for controlled/uncontrolled behavior
     */

    var _React$useState = react.exports.useState(rtlPlacement),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        placement = _React$useState2[0],
        setPlacement = _React$useState2[1];

    react.exports.useEffect(function () {
      if (popperRef.current) {
        popperRef.current.forceUpdate();
      }
    });
    useEnhancedEffect$1(function () {
      if (!anchorEl || !open) {
        return undefined;
      }

      var handlePopperUpdate = function handlePopperUpdate(data) {
        setPlacement(data.placement);
      };

      resolveAnchorEl$1(anchorEl);

      var popperModifiers = [{
        name: 'preventOverflow',
        options: {
          altBoundary: disablePortal
        }
      }, {
        name: 'flip',
        options: {
          altBoundary: disablePortal
        }
      }, {
        name: 'onUpdate',
        enabled: true,
        phase: 'afterWrite',
        fn: function fn(_ref) {
          var state = _ref.state;
          handlePopperUpdate(state);
        }
      }];

      if (modifiers != null) {
        popperModifiers = popperModifiers.concat(modifiers);
      }

      if (popperOptions && popperOptions.modifiers != null) {
        popperModifiers = popperModifiers.concat(popperOptions.modifiers);
      }

      var popper = createPopper(resolveAnchorEl$1(anchorEl), tooltipRef.current, _extends$1({
        placement: rtlPlacement
      }, popperOptions, {
        modifiers: popperModifiers
      }));
      handlePopperRefRef.current(popper);
      return function () {
        popper.destroy();
        handlePopperRefRef.current(null);
      };
    }, [anchorEl, disablePortal, modifiers, open, popperOptions, rtlPlacement]);
    var childProps = {
      placement: placement
    };

    if (TransitionProps !== null) {
      childProps.TransitionProps = TransitionProps;
    }

    return /*#__PURE__*/jsxRuntime.exports.jsx("div", _extends$1({
      ref: ownRef,
      role: "tooltip"
    }, other, {
      children: typeof children === 'function' ? children(childProps) : children
    }));
  });
  /* eslint-enable react/prop-types */

  /**
   * Poppers rely on the 3rd party library [Popper.js](https://popper.js.org/docs/v2/) for positioning.
   */

  var PopperUnstyled = /*#__PURE__*/react.exports.forwardRef(function PopperUnstyled(props, ref) {
    var anchorEl = props.anchorEl,
        children = props.children,
        containerProp = props.container,
        _props$direction = props.direction,
        direction = _props$direction === void 0 ? 'ltr' : _props$direction,
        _props$disablePortal = props.disablePortal,
        disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal,
        _props$keepMounted = props.keepMounted,
        keepMounted = _props$keepMounted === void 0 ? false : _props$keepMounted,
        modifiers = props.modifiers,
        open = props.open,
        _props$placement = props.placement,
        placement = _props$placement === void 0 ? 'bottom' : _props$placement,
        _props$popperOptions = props.popperOptions,
        popperOptions = _props$popperOptions === void 0 ? defaultPopperOptions : _props$popperOptions,
        popperRef = props.popperRef,
        style = props.style,
        _props$transition = props.transition,
        transition = _props$transition === void 0 ? false : _props$transition,
        other = _objectWithoutPropertiesLoose(props, _excluded2$2);

    var _React$useState3 = react.exports.useState(true),
        _React$useState4 = _slicedToArray$1(_React$useState3, 2),
        exited = _React$useState4[0],
        setExited = _React$useState4[1];

    var handleEnter = function handleEnter() {
      setExited(false);
    };

    var handleExited = function handleExited() {
      setExited(true);
    };

    if (!keepMounted && !open && (!transition || exited)) {
      return null;
    } // If the container prop is provided, use that
    // If the anchorEl prop is provided, use its parent body element as the container
    // If neither are provided let the Modal take care of choosing the container


    var container = containerProp || (anchorEl ? ownerDocument(resolveAnchorEl$1(anchorEl)).body : undefined);
    return /*#__PURE__*/jsxRuntime.exports.jsx(Portal$1, {
      disablePortal: disablePortal,
      container: container,
      children: /*#__PURE__*/jsxRuntime.exports.jsx(PopperTooltip, _extends$1({
        anchorEl: anchorEl,
        direction: direction,
        disablePortal: disablePortal,
        modifiers: modifiers,
        ref: ref,
        open: transition ? !exited : open,
        placement: placement,
        popperOptions: popperOptions,
        popperRef: popperRef
      }, other, {
        style: _extends$1({
          // Prevents scroll issue, waiting for Popper.js to add this style once initiated.
          position: 'fixed',
          // Fix Popper.js display issue
          top: 0,
          left: 0,
          display: !open && keepMounted && (!transition || exited) ? 'none' : null
        }, style),
        TransitionProps: transition ? {
          "in": open,
          onEnter: handleEnter,
          onExited: handleExited
        } : null,
        children: children
      }))
    });
  });
  var PopperUnstyled$1 = PopperUnstyled;

  function isOverflowing(container) {
    var doc = ownerDocument(container);

    if (doc.body === container) {
      return ownerWindow(container).innerWidth > doc.documentElement.clientWidth;
    }

    return container.scrollHeight > container.clientHeight;
  }

  function ariaHidden(element, show) {
    if (show) {
      element.setAttribute('aria-hidden', 'true');
    } else {
      element.removeAttribute('aria-hidden');
    }
  }

  function getPaddingRight(element) {
    return parseInt(ownerWindow(element).getComputedStyle(element).paddingRight, 10) || 0;
  }

  function ariaHiddenSiblings(container, mountElement, currentElement) {
    var elementsToExclude = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
    var show = arguments.length > 4 ? arguments[4] : undefined;
    var blacklist = [mountElement, currentElement].concat(_toConsumableArray(elementsToExclude));
    var blacklistTagNames = ['TEMPLATE', 'SCRIPT', 'STYLE'];
    [].forEach.call(container.children, function (element) {
      if (blacklist.indexOf(element) === -1 && blacklistTagNames.indexOf(element.tagName) === -1) {
        ariaHidden(element, show);
      }
    });
  }

  function findIndexOf(items, callback) {
    var idx = -1;
    items.some(function (item, index) {
      if (callback(item)) {
        idx = index;
        return true;
      }

      return false;
    });
    return idx;
  }

  function handleContainer(containerInfo, props) {
    var restoreStyle = [];
    var container = containerInfo.container;

    if (!props.disableScrollLock) {
      if (isOverflowing(container)) {
        // Compute the size before applying overflow hidden to avoid any scroll jumps.
        var scrollbarSize = getScrollbarSize(ownerDocument(container));
        restoreStyle.push({
          value: container.style.paddingRight,
          property: 'padding-right',
          el: container
        }); // Use computed style, here to get the real padding to add our scrollbar width.

        container.style.paddingRight = "".concat(getPaddingRight(container) + scrollbarSize, "px"); // .mui-fixed is a global helper.

        var fixedElements = ownerDocument(container).querySelectorAll('.mui-fixed');
        [].forEach.call(fixedElements, function (element) {
          restoreStyle.push({
            value: element.style.paddingRight,
            property: 'padding-right',
            el: element
          });
          element.style.paddingRight = "".concat(getPaddingRight(element) + scrollbarSize, "px");
        });
      } // Improve Gatsby support
      // https://css-tricks.com/snippets/css/force-vertical-scrollbar/


      var parent = container.parentElement;
      var containerWindow = ownerWindow(container);
      var scrollContainer = (parent == null ? void 0 : parent.nodeName) === 'HTML' && containerWindow.getComputedStyle(parent).overflowY === 'scroll' ? parent : container; // Block the scroll even if no scrollbar is visible to account for mobile keyboard
      // screensize shrink.

      restoreStyle.push({
        value: scrollContainer.style.overflow,
        property: 'overflow',
        el: scrollContainer
      }, {
        value: scrollContainer.style.overflowX,
        property: 'overflow-x',
        el: scrollContainer
      }, {
        value: scrollContainer.style.overflowY,
        property: 'overflow-y',
        el: scrollContainer
      });
      scrollContainer.style.overflow = 'hidden';
    }

    var restore = function restore() {
      restoreStyle.forEach(function (_ref) {
        var value = _ref.value,
            el = _ref.el,
            property = _ref.property;

        if (value) {
          el.style.setProperty(property, value);
        } else {
          el.style.removeProperty(property);
        }
      });
    };

    return restore;
  }

  function getHiddenSiblings(container) {
    var hiddenSiblings = [];
    [].forEach.call(container.children, function (element) {
      if (element.getAttribute('aria-hidden') === 'true') {
        hiddenSiblings.push(element);
      }
    });
    return hiddenSiblings;
  }
  /**
   * @ignore - do not document.
   *
   * Proper state management for containers and the modals in those containers.
   * Simplified, but inspired by react-overlay's ModalManager class.
   * Used by the Modal to ensure proper styling of containers.
   */


  var ModalManager = /*#__PURE__*/function () {
    function ModalManager() {
      _classCallCheck(this, ModalManager);

      this.containers = void 0;
      this.modals = void 0;
      this.modals = [];
      this.containers = [];
    }

    _createClass(ModalManager, [{
      key: "add",
      value: function add(modal, container) {
        var modalIndex = this.modals.indexOf(modal);

        if (modalIndex !== -1) {
          return modalIndex;
        }

        modalIndex = this.modals.length;
        this.modals.push(modal); // If the modal we are adding is already in the DOM.

        if (modal.modalRef) {
          ariaHidden(modal.modalRef, false);
        }

        var hiddenSiblings = getHiddenSiblings(container);
        ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);
        var containerIndex = findIndexOf(this.containers, function (item) {
          return item.container === container;
        });

        if (containerIndex !== -1) {
          this.containers[containerIndex].modals.push(modal);
          return modalIndex;
        }

        this.containers.push({
          modals: [modal],
          container: container,
          restore: null,
          hiddenSiblings: hiddenSiblings
        });
        return modalIndex;
      }
    }, {
      key: "mount",
      value: function mount(modal, props) {
        var containerIndex = findIndexOf(this.containers, function (item) {
          return item.modals.indexOf(modal) !== -1;
        });
        var containerInfo = this.containers[containerIndex];

        if (!containerInfo.restore) {
          containerInfo.restore = handleContainer(containerInfo, props);
        }
      }
    }, {
      key: "remove",
      value: function remove(modal) {
        var modalIndex = this.modals.indexOf(modal);

        if (modalIndex === -1) {
          return modalIndex;
        }

        var containerIndex = findIndexOf(this.containers, function (item) {
          return item.modals.indexOf(modal) !== -1;
        });
        var containerInfo = this.containers[containerIndex];
        containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
        this.modals.splice(modalIndex, 1); // If that was the last modal in a container, clean up the container.

        if (containerInfo.modals.length === 0) {
          // The modal might be closed before it had the chance to be mounted in the DOM.
          if (containerInfo.restore) {
            containerInfo.restore();
          }

          if (modal.modalRef) {
            // In case the modal wasn't in the DOM yet.
            ariaHidden(modal.modalRef, true);
          }

          ariaHiddenSiblings(containerInfo.container, modal.mount, modal.modalRef, containerInfo.hiddenSiblings, false);
          this.containers.splice(containerIndex, 1);
        } else {
          // Otherwise make sure the next top modal is visible to a screen reader.
          var nextTop = containerInfo.modals[containerInfo.modals.length - 1]; // as soon as a modal is adding its modalRef is undefined. it can't set
          // aria-hidden because the dom element doesn't exist either
          // when modal was unmounted before modalRef gets null

          if (nextTop.modalRef) {
            ariaHidden(nextTop.modalRef, false);
          }
        }

        return modalIndex;
      }
    }, {
      key: "isTopModal",
      value: function isTopModal(modal) {
        return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
      }
    }]);

    return ModalManager;
  }();

  /* eslint-disable @typescript-eslint/naming-convention, consistent-return, jsx-a11y/no-noninteractive-tabindex */
  var candidatesSelector = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable="false"])'].join(',');

  function getTabIndex(node) {
    var tabindexAttr = parseInt(node.getAttribute('tabindex'), 10);

    if (!Number.isNaN(tabindexAttr)) {
      return tabindexAttr;
    } // Browsers do not return `tabIndex` correctly for contentEditable nodes;
    // https://bugs.chromium.org/p/chromium/issues/detail?id=661108&q=contenteditable%20tabindex&can=2
    // so if they don't have a tabindex attribute specifically set, assume it's 0.
    // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default
    //  `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,
    //  yet they are still part of the regular tab order; in FF, they get a default
    //  `tabIndex` of 0; since Chrome still puts those elements in the regular tab
    //  order, consider their tab index to be 0.


    if (node.contentEditable === 'true' || (node.nodeName === 'AUDIO' || node.nodeName === 'VIDEO' || node.nodeName === 'DETAILS') && node.getAttribute('tabindex') === null) {
      return 0;
    }

    return node.tabIndex;
  }

  function isNonTabbableRadio(node) {
    if (node.tagName !== 'INPUT' || node.type !== 'radio') {
      return false;
    }

    if (!node.name) {
      return false;
    }

    var getRadio = function getRadio(selector) {
      return node.ownerDocument.querySelector("input[type=\"radio\"]".concat(selector));
    };

    var roving = getRadio("[name=\"".concat(node.name, "\"]:checked"));

    if (!roving) {
      roving = getRadio("[name=\"".concat(node.name, "\"]"));
    }

    return roving !== node;
  }

  function isNodeMatchingSelectorFocusable(node) {
    if (node.disabled || node.tagName === 'INPUT' && node.type === 'hidden' || isNonTabbableRadio(node)) {
      return false;
    }

    return true;
  }

  function defaultGetTabbable(root) {
    var regularTabNodes = [];
    var orderedTabNodes = [];
    Array.from(root.querySelectorAll(candidatesSelector)).forEach(function (node, i) {
      var nodeTabIndex = getTabIndex(node);

      if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node)) {
        return;
      }

      if (nodeTabIndex === 0) {
        regularTabNodes.push(node);
      } else {
        orderedTabNodes.push({
          documentOrder: i,
          tabIndex: nodeTabIndex,
          node: node
        });
      }
    });
    return orderedTabNodes.sort(function (a, b) {
      return a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex;
    }).map(function (a) {
      return a.node;
    }).concat(regularTabNodes);
  }

  function defaultIsEnabled() {
    return true;
  }
  /**
   * Utility component that locks focus inside the component.
   */


  function Unstable_TrapFocus(props) {
    var children = props.children,
        _props$disableAutoFoc = props.disableAutoFocus,
        disableAutoFocus = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc,
        _props$disableEnforce = props.disableEnforceFocus,
        disableEnforceFocus = _props$disableEnforce === void 0 ? false : _props$disableEnforce,
        _props$disableRestore = props.disableRestoreFocus,
        disableRestoreFocus = _props$disableRestore === void 0 ? false : _props$disableRestore,
        _props$getTabbable = props.getTabbable,
        getTabbable = _props$getTabbable === void 0 ? defaultGetTabbable : _props$getTabbable,
        _props$isEnabled = props.isEnabled,
        isEnabled = _props$isEnabled === void 0 ? defaultIsEnabled : _props$isEnabled,
        open = props.open;
    var ignoreNextEnforceFocus = react.exports.useRef();
    var sentinelStart = react.exports.useRef(null);
    var sentinelEnd = react.exports.useRef(null);
    var nodeToRestore = react.exports.useRef(null);
    var reactFocusEventTarget = react.exports.useRef(null); // This variable is useful when disableAutoFocus is true.
    // It waits for the active element to move into the component to activate.

    var activated = react.exports.useRef(false);
    var rootRef = react.exports.useRef(null);
    var handleRef = useForkRef(children.ref, rootRef);
    var lastKeydown = react.exports.useRef(null);
    react.exports.useEffect(function () {
      // We might render an empty child.
      if (!open || !rootRef.current) {
        return;
      }

      activated.current = !disableAutoFocus;
    }, [disableAutoFocus, open]);
    react.exports.useEffect(function () {
      // We might render an empty child.
      if (!open || !rootRef.current) {
        return;
      }

      var doc = ownerDocument(rootRef.current);

      if (!rootRef.current.contains(doc.activeElement)) {
        if (!rootRef.current.hasAttribute('tabIndex')) {

          rootRef.current.setAttribute('tabIndex', -1);
        }

        if (activated.current) {
          rootRef.current.focus();
        }
      }

      return function () {
        // restoreLastFocus()
        if (!disableRestoreFocus) {
          // In IE11 it is possible for document.activeElement to be null resulting
          // in nodeToRestore.current being null.
          // Not all elements in IE11 have a focus method.
          // Once IE11 support is dropped the focus() call can be unconditional.
          if (nodeToRestore.current && nodeToRestore.current.focus) {
            ignoreNextEnforceFocus.current = true;
            nodeToRestore.current.focus();
          }

          nodeToRestore.current = null;
        }
      }; // Missing `disableRestoreFocus` which is fine.
      // We don't support changing that prop on an open TrapFocus
      // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [open]);
    react.exports.useEffect(function () {
      // We might render an empty child.
      if (!open || !rootRef.current) {
        return;
      }

      var doc = ownerDocument(rootRef.current);

      var contain = function contain(nativeEvent) {
        var rootElement = rootRef.current; // Cleanup functions are executed lazily in React 17.
        // Contain can be called between the component being unmounted and its cleanup function being run.

        if (rootElement === null) {
          return;
        }

        if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {
          ignoreNextEnforceFocus.current = false;
          return;
        }

        if (!rootElement.contains(doc.activeElement)) {
          // if the focus event is not coming from inside the children's react tree, reset the refs
          if (nativeEvent && reactFocusEventTarget.current !== nativeEvent.target || doc.activeElement !== reactFocusEventTarget.current) {
            reactFocusEventTarget.current = null;
          } else if (reactFocusEventTarget.current !== null) {
            return;
          }

          if (!activated.current) {
            return;
          }

          var tabbable = [];

          if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {
            tabbable = getTabbable(rootRef.current);
          }

          if (tabbable.length > 0) {
            var _lastKeydown$current, _lastKeydown$current2;

            var isShiftTab = Boolean(((_lastKeydown$current = lastKeydown.current) == null ? void 0 : _lastKeydown$current.shiftKey) && ((_lastKeydown$current2 = lastKeydown.current) == null ? void 0 : _lastKeydown$current2.key) === 'Tab');
            var focusNext = tabbable[0];
            var focusPrevious = tabbable[tabbable.length - 1];

            if (isShiftTab) {
              focusPrevious.focus();
            } else {
              focusNext.focus();
            }
          } else {
            rootElement.focus();
          }
        }
      };

      var loopFocus = function loopFocus(nativeEvent) {
        lastKeydown.current = nativeEvent;

        if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== 'Tab') {
          return;
        } // Make sure the next tab starts from the right place.
        // doc.activeElement referes to the origin.


        if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {
          // We need to ignore the next contain as
          // it will try to move the focus back to the rootRef element.
          ignoreNextEnforceFocus.current = true;
          sentinelEnd.current.focus();
        }
      };

      doc.addEventListener('focusin', contain);
      doc.addEventListener('keydown', loopFocus, true); // With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area.
      // e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=559561.
      // Instead, we can look if the active element was restored on the BODY element.
      //
      // The whatwg spec defines how the browser should behave but does not explicitly mention any events:
      // https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.

      var interval = setInterval(function () {
        if (doc.activeElement.tagName === 'BODY') {
          contain();
        }
      }, 50);
      return function () {
        clearInterval(interval);
        doc.removeEventListener('focusin', contain);
        doc.removeEventListener('keydown', loopFocus, true);
      };
    }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open, getTabbable]);

    var onFocus = function onFocus(event) {
      if (nodeToRestore.current === null) {
        nodeToRestore.current = event.relatedTarget;
      }

      activated.current = true;
      reactFocusEventTarget.current = event.target;
      var childrenPropsHandler = children.props.onFocus;

      if (childrenPropsHandler) {
        childrenPropsHandler(event);
      }
    };

    var handleFocusSentinel = function handleFocusSentinel(event) {
      if (nodeToRestore.current === null) {
        nodeToRestore.current = event.relatedTarget;
      }

      activated.current = true;
    };

    return /*#__PURE__*/jsxRuntime.exports.jsxs(react.exports.Fragment, {
      children: [/*#__PURE__*/jsxRuntime.exports.jsx("div", {
        tabIndex: 0,
        onFocus: handleFocusSentinel,
        ref: sentinelStart,
        "data-test": "sentinelStart"
      }), /*#__PURE__*/react.exports.cloneElement(children, {
        ref: handleRef,
        onFocus: onFocus
      }), /*#__PURE__*/jsxRuntime.exports.jsx("div", {
        tabIndex: 0,
        onFocus: handleFocusSentinel,
        ref: sentinelEnd,
        "data-test": "sentinelEnd"
      })]
    });
  }

  function getModalUtilityClass(slot) {
    return generateUtilityClass('MuiModal', slot);
  }
  generateUtilityClasses('MuiModal', ['root', 'hidden']);

  var _excluded$r = ["BackdropComponent", "BackdropProps", "children", "classes", "className", "closeAfterTransition", "component", "components", "componentsProps", "container", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "manager", "onBackdropClick", "onClose", "onKeyDown", "open", "theme", "onTransitionEnter", "onTransitionExited"];

  var useUtilityClasses$g = function useUtilityClasses(ownerState) {
    var open = ownerState.open,
        exited = ownerState.exited,
        classes = ownerState.classes;
    var slots = {
      root: ['root', !open && exited && 'hidden']
    };
    return composeClasses(slots, getModalUtilityClass, classes);
  };

  function getContainer(container) {
    return typeof container === 'function' ? container() : container;
  }

  function getHasTransition(props) {
    return props.children ? props.children.props.hasOwnProperty('in') : false;
  } // A modal manager used to track and manage the state of open Modals.
  // Modals don't open on the server so this won't conflict with concurrent requests.


  var defaultManager = new ModalManager();
  /**
   * Modal is a lower-level construct that is leveraged by the following components:
   *
   * - [Dialog](/api/dialog/)
   * - [Drawer](/api/drawer/)
   * - [Menu](/api/menu/)
   * - [Popover](/api/popover/)
   *
   * If you are creating a modal dialog, you probably want to use the [Dialog](/api/dialog/) component
   * rather than directly using Modal.
   *
   * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).
   */

  var ModalUnstyled = /*#__PURE__*/react.exports.forwardRef(function ModalUnstyled(props, ref) {
    var BackdropComponent = props.BackdropComponent,
        BackdropProps = props.BackdropProps,
        children = props.children,
        classesProp = props.classes,
        className = props.className,
        _props$closeAfterTran = props.closeAfterTransition,
        closeAfterTransition = _props$closeAfterTran === void 0 ? false : _props$closeAfterTran,
        _props$component = props.component,
        component = _props$component === void 0 ? 'div' : _props$component,
        _props$components = props.components,
        components = _props$components === void 0 ? {} : _props$components,
        _props$componentsProp = props.componentsProps,
        componentsProps = _props$componentsProp === void 0 ? {} : _props$componentsProp,
        container = props.container,
        _props$disableAutoFoc = props.disableAutoFocus,
        disableAutoFocus = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc,
        _props$disableEnforce = props.disableEnforceFocus,
        disableEnforceFocus = _props$disableEnforce === void 0 ? false : _props$disableEnforce,
        _props$disableEscapeK = props.disableEscapeKeyDown,
        disableEscapeKeyDown = _props$disableEscapeK === void 0 ? false : _props$disableEscapeK,
        _props$disablePortal = props.disablePortal,
        disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal,
        _props$disableRestore = props.disableRestoreFocus,
        disableRestoreFocus = _props$disableRestore === void 0 ? false : _props$disableRestore,
        _props$disableScrollL = props.disableScrollLock,
        disableScrollLock = _props$disableScrollL === void 0 ? false : _props$disableScrollL,
        _props$hideBackdrop = props.hideBackdrop,
        hideBackdrop = _props$hideBackdrop === void 0 ? false : _props$hideBackdrop,
        _props$keepMounted = props.keepMounted,
        keepMounted = _props$keepMounted === void 0 ? false : _props$keepMounted,
        _props$manager = props.manager,
        manager = _props$manager === void 0 ? defaultManager : _props$manager,
        onBackdropClick = props.onBackdropClick,
        onClose = props.onClose,
        onKeyDown = props.onKeyDown,
        open = props.open,
        theme = props.theme,
        onTransitionEnter = props.onTransitionEnter,
        onTransitionExited = props.onTransitionExited,
        other = _objectWithoutPropertiesLoose(props, _excluded$r);

    var _React$useState = react.exports.useState(true),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        exited = _React$useState2[0],
        setExited = _React$useState2[1];

    var modal = react.exports.useRef({});
    var mountNodeRef = react.exports.useRef(null);
    var modalRef = react.exports.useRef(null);
    var handleRef = useForkRef(modalRef, ref);
    var hasTransition = getHasTransition(props);

    var getDoc = function getDoc() {
      return ownerDocument(mountNodeRef.current);
    };

    var getModal = function getModal() {
      modal.current.modalRef = modalRef.current;
      modal.current.mountNode = mountNodeRef.current;
      return modal.current;
    };

    var handleMounted = function handleMounted() {
      manager.mount(getModal(), {
        disableScrollLock: disableScrollLock
      }); // Fix a bug on Chrome where the scroll isn't initially 0.

      modalRef.current.scrollTop = 0;
    };

    var handleOpen = useEventCallback(function () {
      var resolvedContainer = getContainer(container) || getDoc().body;
      manager.add(getModal(), resolvedContainer); // The element was already mounted.

      if (modalRef.current) {
        handleMounted();
      }
    });
    var isTopModal = react.exports.useCallback(function () {
      return manager.isTopModal(getModal());
    }, [manager]);
    var handlePortalRef = useEventCallback(function (node) {
      mountNodeRef.current = node;

      if (!node) {
        return;
      }

      if (open && isTopModal()) {
        handleMounted();
      } else {
        ariaHidden(modalRef.current, true);
      }
    });
    var handleClose = react.exports.useCallback(function () {
      manager.remove(getModal());
    }, [manager]);
    react.exports.useEffect(function () {
      return function () {
        handleClose();
      };
    }, [handleClose]);
    react.exports.useEffect(function () {
      if (open) {
        handleOpen();
      } else if (!hasTransition || !closeAfterTransition) {
        handleClose();
      }
    }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);

    var ownerState = _extends$1({}, props, {
      classes: classesProp,
      closeAfterTransition: closeAfterTransition,
      disableAutoFocus: disableAutoFocus,
      disableEnforceFocus: disableEnforceFocus,
      disableEscapeKeyDown: disableEscapeKeyDown,
      disablePortal: disablePortal,
      disableRestoreFocus: disableRestoreFocus,
      disableScrollLock: disableScrollLock,
      exited: exited,
      hideBackdrop: hideBackdrop,
      keepMounted: keepMounted
    });

    var classes = useUtilityClasses$g(ownerState);

    if (!keepMounted && !open && (!hasTransition || exited)) {
      return null;
    }

    var handleEnter = function handleEnter() {
      setExited(false);

      if (onTransitionEnter) {
        onTransitionEnter();
      }
    };

    var handleExited = function handleExited() {
      setExited(true);

      if (onTransitionExited) {
        onTransitionExited();
      }

      if (closeAfterTransition) {
        handleClose();
      }
    };

    var handleBackdropClick = function handleBackdropClick(event) {
      if (event.target !== event.currentTarget) {
        return;
      }

      if (onBackdropClick) {
        onBackdropClick(event);
      }

      if (onClose) {
        onClose(event, 'backdropClick');
      }
    };

    var handleKeyDown = function handleKeyDown(event) {
      if (onKeyDown) {
        onKeyDown(event);
      } // The handler doesn't take event.defaultPrevented into account:
      //
      // event.preventDefault() is meant to stop default behaviors like
      // clicking a checkbox to check it, hitting a button to submit a form,
      // and hitting left arrow to move the cursor in a text input etc.
      // Only special HTML elements have these default behaviors.


      if (event.key !== 'Escape' || !isTopModal()) {
        return;
      }

      if (!disableEscapeKeyDown) {
        // Swallow the event, in case someone is listening for the escape key on the body.
        event.stopPropagation();

        if (onClose) {
          onClose(event, 'escapeKeyDown');
        }
      }
    };

    var childProps = {};

    if (children.props.tabIndex === undefined) {
      childProps.tabIndex = '-1';
    } // It's a Transition like component


    if (hasTransition) {
      childProps.onEnter = createChainedFunction(handleEnter, children.props.onEnter);
      childProps.onExited = createChainedFunction(handleExited, children.props.onExited);
    }

    var Root = components.Root || component;
    var rootProps = componentsProps.root || {};
    return /*#__PURE__*/jsxRuntime.exports.jsx(Portal$1, {
      ref: handlePortalRef,
      container: container,
      disablePortal: disablePortal,
      children: /*#__PURE__*/jsxRuntime.exports.jsxs(Root, _extends$1({
        role: "presentation"
      }, rootProps, !isHostComponent(Root) && {
        as: component,
        ownerState: _extends$1({}, ownerState, rootProps.ownerState),
        theme: theme
      }, other, {
        ref: handleRef,
        onKeyDown: handleKeyDown,
        className: clsx(classes.root, rootProps.className, className),
        children: [!hideBackdrop && BackdropComponent ? /*#__PURE__*/jsxRuntime.exports.jsx(BackdropComponent, _extends$1({
          open: open,
          onClick: handleBackdropClick
        }, BackdropProps)) : null, /*#__PURE__*/jsxRuntime.exports.jsx(Unstable_TrapFocus, {
          disableEnforceFocus: disableEnforceFocus,
          disableAutoFocus: disableAutoFocus,
          disableRestoreFocus: disableRestoreFocus,
          isEnabled: isTopModal,
          open: open,
          children: /*#__PURE__*/react.exports.cloneElement(children, childProps)
        })]
      }))
    });
  });
  var ModalUnstyled$1 = ModalUnstyled;

  function createMixins(breakpoints, spacing, mixins) {
    var _toolbar;

    return _extends$1({
      toolbar: (_toolbar = {
        minHeight: 56
      }, _defineProperty$1(_toolbar, "".concat(breakpoints.up('xs'), " and (orientation: landscape)"), {
        minHeight: 48
      }), _defineProperty$1(_toolbar, breakpoints.up('sm'), {
        minHeight: 64
      }), _toolbar)
    }, mixins);
  }

  var _excluded$q = ["mode", "contrastThreshold", "tonalOffset"];
  var light = {
    // The colors used to style the text.
    text: {
      // The most important text.
      primary: 'rgba(0, 0, 0, 0.87)',
      // Secondary text.
      secondary: 'rgba(0, 0, 0, 0.6)',
      // Disabled text have even lower visual prominence.
      disabled: 'rgba(0, 0, 0, 0.38)'
    },
    // The color used to divide different elements.
    divider: 'rgba(0, 0, 0, 0.12)',
    // The background colors used to style the surfaces.
    // Consistency between these values is important.
    background: {
      paper: common$7.white,
      "default": common$7.white
    },
    // The colors used to style the action elements.
    action: {
      // The color of an active action like an icon button.
      active: 'rgba(0, 0, 0, 0.54)',
      // The color of an hovered action.
      hover: 'rgba(0, 0, 0, 0.04)',
      hoverOpacity: 0.04,
      // The color of a selected action.
      selected: 'rgba(0, 0, 0, 0.08)',
      selectedOpacity: 0.08,
      // The color of a disabled action.
      disabled: 'rgba(0, 0, 0, 0.26)',
      // The background color of a disabled action.
      disabledBackground: 'rgba(0, 0, 0, 0.12)',
      disabledOpacity: 0.38,
      focus: 'rgba(0, 0, 0, 0.12)',
      focusOpacity: 0.12,
      activatedOpacity: 0.12
    }
  };
  var dark = {
    text: {
      primary: common$7.white,
      secondary: 'rgba(255, 255, 255, 0.7)',
      disabled: 'rgba(255, 255, 255, 0.5)',
      icon: 'rgba(255, 255, 255, 0.5)'
    },
    divider: 'rgba(255, 255, 255, 0.12)',
    background: {
      paper: '#121212',
      "default": '#121212'
    },
    action: {
      active: common$7.white,
      hover: 'rgba(255, 255, 255, 0.08)',
      hoverOpacity: 0.08,
      selected: 'rgba(255, 255, 255, 0.16)',
      selectedOpacity: 0.16,
      disabled: 'rgba(255, 255, 255, 0.3)',
      disabledBackground: 'rgba(255, 255, 255, 0.12)',
      disabledOpacity: 0.38,
      focus: 'rgba(255, 255, 255, 0.12)',
      focusOpacity: 0.12,
      activatedOpacity: 0.24
    }
  };

  function addLightOrDark(intent, direction, shade, tonalOffset) {
    var tonalOffsetLight = tonalOffset.light || tonalOffset;
    var tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;

    if (!intent[direction]) {
      if (intent.hasOwnProperty(shade)) {
        intent[direction] = intent[shade];
      } else if (direction === 'light') {
        intent.light = lighten(intent.main, tonalOffsetLight);
      } else if (direction === 'dark') {
        intent.dark = darken(intent.main, tonalOffsetDark);
      }
    }
  }

  function getDefaultPrimary() {
    var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'light';

    if (mode === 'dark') {
      return {
        main: blue$1[200],
        light: blue$1[50],
        dark: blue$1[400]
      };
    }

    return {
      main: blue$1[700],
      light: blue$1[400],
      dark: blue$1[800]
    };
  }

  function getDefaultSecondary() {
    var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'light';

    if (mode === 'dark') {
      return {
        main: purple$1[200],
        light: purple$1[50],
        dark: purple$1[400]
      };
    }

    return {
      main: purple$1[500],
      light: purple$1[300],
      dark: purple$1[700]
    };
  }

  function getDefaultError() {
    var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'light';

    if (mode === 'dark') {
      return {
        main: red$1[500],
        light: red$1[300],
        dark: red$1[700]
      };
    }

    return {
      main: red$1[700],
      light: red$1[400],
      dark: red$1[800]
    };
  }

  function getDefaultInfo() {
    var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'light';

    if (mode === 'dark') {
      return {
        main: lightBlue$1[400],
        light: lightBlue$1[300],
        dark: lightBlue$1[700]
      };
    }

    return {
      main: lightBlue$1[700],
      light: lightBlue$1[500],
      dark: lightBlue$1[900]
    };
  }

  function getDefaultSuccess() {
    var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'light';

    if (mode === 'dark') {
      return {
        main: green$1[400],
        light: green$1[300],
        dark: green$1[700]
      };
    }

    return {
      main: green$1[800],
      light: green$1[500],
      dark: green$1[900]
    };
  }

  function getDefaultWarning() {
    var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'light';

    if (mode === 'dark') {
      return {
        main: orange$1[400],
        light: orange$1[300],
        dark: orange$1[700]
      };
    }

    return {
      main: '#ed6c02',
      // closest to orange[800] that pass 3:1.
      light: orange$1[500],
      dark: orange$1[900]
    };
  }

  function createPalette(palette) {
    var _palette$mode = palette.mode,
        mode = _palette$mode === void 0 ? 'light' : _palette$mode,
        _palette$contrastThre = palette.contrastThreshold,
        contrastThreshold = _palette$contrastThre === void 0 ? 3 : _palette$contrastThre,
        _palette$tonalOffset = palette.tonalOffset,
        tonalOffset = _palette$tonalOffset === void 0 ? 0.2 : _palette$tonalOffset,
        other = _objectWithoutPropertiesLoose(palette, _excluded$q);

    var primary = palette.primary || getDefaultPrimary(mode);
    var secondary = palette.secondary || getDefaultSecondary(mode);
    var error = palette.error || getDefaultError(mode);
    var info = palette.info || getDefaultInfo(mode);
    var success = palette.success || getDefaultSuccess(mode);
    var warning = palette.warning || getDefaultWarning(mode); // Use the same logic as
    // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59
    // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54

    function getContrastText(background) {
      var contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;

      return contrastText;
    }

    var augmentColor = function augmentColor(_ref) {
      var color = _ref.color,
          name = _ref.name,
          _ref$mainShade = _ref.mainShade,
          mainShade = _ref$mainShade === void 0 ? 500 : _ref$mainShade,
          _ref$lightShade = _ref.lightShade,
          lightShade = _ref$lightShade === void 0 ? 300 : _ref$lightShade,
          _ref$darkShade = _ref.darkShade,
          darkShade = _ref$darkShade === void 0 ? 700 : _ref$darkShade;
      color = _extends$1({}, color);

      if (!color.main && color[mainShade]) {
        color.main = color[mainShade];
      }

      if (!color.hasOwnProperty('main')) {
        throw new Error(formatMuiErrorMessage(11, name ? " (".concat(name, ")") : '', mainShade));
      }

      if (typeof color.main !== 'string') {
        throw new Error(formatMuiErrorMessage(12, name ? " (".concat(name, ")") : '', JSON.stringify(color.main)));
      }

      addLightOrDark(color, 'light', lightShade, tonalOffset);
      addLightOrDark(color, 'dark', darkShade, tonalOffset);

      if (!color.contrastText) {
        color.contrastText = getContrastText(color.main);
      }

      return color;
    };

    var modes = {
      dark: dark,
      light: light
    };

    var paletteOutput = deepmerge(_extends$1({
      // A collection of common colors.
      common: common$7,
      // The palette mode, can be light or dark.
      mode: mode,
      // The colors used to represent primary interface elements for a user.
      primary: augmentColor({
        color: primary,
        name: 'primary'
      }),
      // The colors used to represent secondary interface elements for a user.
      secondary: augmentColor({
        color: secondary,
        name: 'secondary',
        mainShade: 'A400',
        lightShade: 'A200',
        darkShade: 'A700'
      }),
      // The colors used to represent interface elements that the user should be made aware of.
      error: augmentColor({
        color: error,
        name: 'error'
      }),
      // The colors used to represent potentially dangerous actions or important messages.
      warning: augmentColor({
        color: warning,
        name: 'warning'
      }),
      // The colors used to present information to the user that is neutral and not necessarily important.
      info: augmentColor({
        color: info,
        name: 'info'
      }),
      // The colors used to indicate the successful completion of an action that user triggered.
      success: augmentColor({
        color: success,
        name: 'success'
      }),
      // The grey colors.
      grey: grey$1,
      // Used by `getContrastText()` to maximize the contrast between
      // the background and the text.
      contrastThreshold: contrastThreshold,
      // Takes a background color and returns the text color that maximizes the contrast.
      getContrastText: getContrastText,
      // Generate a rich color object.
      augmentColor: augmentColor,
      // Used by the functions below to shift a color's luminance by approximately
      // two indexes within its tonal palette.
      // E.g., shift from Red 500 to Red 300 or Red 700.
      tonalOffset: tonalOffset
    }, modes[mode]), other);
    return paletteOutput;
  }

  var _excluded$p = ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"];

  function round$1(value) {
    return Math.round(value * 1e5) / 1e5;
  }

  var caseAllCaps = {
    textTransform: 'uppercase'
  };
  var defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
  /**
   * @see @link{https://material.io/design/typography/the-type-system.html}
   * @see @link{https://material.io/design/typography/understanding-typography.html}
   */

  function createTypography(palette, typography) {
    var _ref = typeof typography === 'function' ? typography(palette) : typography,
        _ref$fontFamily = _ref.fontFamily,
        fontFamily = _ref$fontFamily === void 0 ? defaultFontFamily : _ref$fontFamily,
        _ref$fontSize = _ref.fontSize,
        fontSize = _ref$fontSize === void 0 ? 14 : _ref$fontSize,
        _ref$fontWeightLight = _ref.fontWeightLight,
        fontWeightLight = _ref$fontWeightLight === void 0 ? 300 : _ref$fontWeightLight,
        _ref$fontWeightRegula = _ref.fontWeightRegular,
        fontWeightRegular = _ref$fontWeightRegula === void 0 ? 400 : _ref$fontWeightRegula,
        _ref$fontWeightMedium = _ref.fontWeightMedium,
        fontWeightMedium = _ref$fontWeightMedium === void 0 ? 500 : _ref$fontWeightMedium,
        _ref$fontWeightBold = _ref.fontWeightBold,
        fontWeightBold = _ref$fontWeightBold === void 0 ? 700 : _ref$fontWeightBold,
        _ref$htmlFontSize = _ref.htmlFontSize,
        htmlFontSize = _ref$htmlFontSize === void 0 ? 16 : _ref$htmlFontSize,
        allVariants = _ref.allVariants,
        pxToRem2 = _ref.pxToRem,
        other = _objectWithoutPropertiesLoose(_ref, _excluded$p);

    var coef = fontSize / 14;

    var pxToRem = pxToRem2 || function (size) {
      return "".concat(size / htmlFontSize * coef, "rem");
    };

    var buildVariant = function buildVariant(fontWeight, size, lineHeight, letterSpacing, casing) {
      return _extends$1({
        fontFamily: fontFamily,
        fontWeight: fontWeight,
        fontSize: pxToRem(size),
        // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
        lineHeight: lineHeight
      }, fontFamily === defaultFontFamily ? {
        letterSpacing: "".concat(round$1(letterSpacing / size), "em")
      } : {}, casing, allVariants);
    };

    var variants = {
      h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
      h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
      h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
      h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
      h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
      h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
      subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
      subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
      body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
      body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
      button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
      caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
      overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps)
    };
    return deepmerge(_extends$1({
      htmlFontSize: htmlFontSize,
      pxToRem: pxToRem,
      fontFamily: fontFamily,
      fontSize: fontSize,
      fontWeightLight: fontWeightLight,
      fontWeightRegular: fontWeightRegular,
      fontWeightMedium: fontWeightMedium,
      fontWeightBold: fontWeightBold
    }, variants), other, {
      clone: false // No need to clone deep

    });
  }

  var shadowKeyUmbraOpacity = 0.2;
  var shadowKeyPenumbraOpacity = 0.14;
  var shadowAmbientShadowOpacity = 0.12;

  function createShadow() {
    return ["".concat(arguments.length <= 0 ? undefined : arguments[0], "px ").concat(arguments.length <= 1 ? undefined : arguments[1], "px ").concat(arguments.length <= 2 ? undefined : arguments[2], "px ").concat(arguments.length <= 3 ? undefined : arguments[3], "px rgba(0,0,0,").concat(shadowKeyUmbraOpacity, ")"), "".concat(arguments.length <= 4 ? undefined : arguments[4], "px ").concat(arguments.length <= 5 ? undefined : arguments[5], "px ").concat(arguments.length <= 6 ? undefined : arguments[6], "px ").concat(arguments.length <= 7 ? undefined : arguments[7], "px rgba(0,0,0,").concat(shadowKeyPenumbraOpacity, ")"), "".concat(arguments.length <= 8 ? undefined : arguments[8], "px ").concat(arguments.length <= 9 ? undefined : arguments[9], "px ").concat(arguments.length <= 10 ? undefined : arguments[10], "px ").concat(arguments.length <= 11 ? undefined : arguments[11], "px rgba(0,0,0,").concat(shadowAmbientShadowOpacity, ")")].join(',');
  } // Values from https://github.com/material-components/material-components-web/blob/be8747f94574669cb5e7add1a7c54fa41a89cec7/packages/mdc-elevation/_variables.scss


  var shadows = ['none', createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
  var shadows$1 = shadows;

  var _excluded$o = ["duration", "easing", "delay"]; // Follow https://material.google.com/motion/duration-easing.html#duration-easing-natural-easing-curves
  // to learn the context in which each easing should be used.

  var easing = {
    // This is the most common easing curve.
    easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
    // Objects enter the screen at full velocity from off-screen and
    // slowly decelerate to a resting point.
    easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',
    // Objects leave the screen at full velocity. They do not decelerate when off-screen.
    easeIn: 'cubic-bezier(0.4, 0, 1, 1)',
    // The sharp curve is used by objects that may return to the screen at any time.
    sharp: 'cubic-bezier(0.4, 0, 0.6, 1)'
  }; // Follow https://material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations
  // to learn when use what timing

  var duration = {
    shortest: 150,
    shorter: 200,
    "short": 250,
    // most basic recommended timing
    standard: 300,
    // this is to be used in complex animations
    complex: 375,
    // recommended when something is entering screen
    enteringScreen: 225,
    // recommended when something is leaving screen
    leavingScreen: 195
  };

  function formatMs(milliseconds) {
    return "".concat(Math.round(milliseconds), "ms");
  }

  function getAutoHeightDuration(height) {
    if (!height) {
      return 0;
    }

    var constant = height / 36; // https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10

    return Math.round((4 + 15 * Math.pow(constant, 0.25) + constant / 5) * 10);
  }

  function createTransitions(inputTransitions) {
    var mergedEasing = _extends$1({}, easing, inputTransitions.easing);

    var mergedDuration = _extends$1({}, duration, inputTransitions.duration);

    var create = function create() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['all'];
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var _options$duration = options.duration,
          durationOption = _options$duration === void 0 ? mergedDuration.standard : _options$duration,
          _options$easing = options.easing,
          easingOption = _options$easing === void 0 ? mergedEasing.easeInOut : _options$easing,
          _options$delay = options.delay,
          delay = _options$delay === void 0 ? 0 : _options$delay;
          _objectWithoutPropertiesLoose(options, _excluded$o);

      return (Array.isArray(props) ? props : [props]).map(function (animatedProp) {
        return "".concat(animatedProp, " ").concat(typeof durationOption === 'string' ? durationOption : formatMs(durationOption), " ").concat(easingOption, " ").concat(typeof delay === 'string' ? delay : formatMs(delay));
      }).join(',');
    };

    return _extends$1({
      getAutoHeightDuration: getAutoHeightDuration,
      create: create
    }, inputTransitions, {
      easing: mergedEasing,
      duration: mergedDuration
    });
  }

  // We need to centralize the zIndex definitions as they work
  // like global values in the browser.
  var zIndex = {
    mobileStepper: 1000,
    fab: 1050,
    speedDial: 1050,
    appBar: 1100,
    drawer: 1200,
    modal: 1300,
    snackbar: 1400,
    tooltip: 1500
  };
  var zIndex$1 = zIndex;

  var _excluded$n = ["breakpoints", "mixins", "spacing", "palette", "transitions", "typography", "shape"];

  function createTheme() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var _options$mixins = options.mixins,
        mixinsInput = _options$mixins === void 0 ? {} : _options$mixins,
        _options$palette = options.palette,
        paletteInput = _options$palette === void 0 ? {} : _options$palette,
        _options$transitions = options.transitions,
        transitionsInput = _options$transitions === void 0 ? {} : _options$transitions,
        _options$typography = options.typography,
        typographyInput = _options$typography === void 0 ? {} : _options$typography,
        other = _objectWithoutPropertiesLoose(options, _excluded$n);

    var palette = createPalette(paletteInput);
    var systemTheme = createTheme$1(options);
    var muiTheme = deepmerge(systemTheme, {
      mixins: createMixins(systemTheme.breakpoints, systemTheme.spacing, mixinsInput),
      palette: palette,
      // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
      shadows: shadows$1.slice(),
      typography: createTypography(palette, typographyInput),
      transitions: createTransitions(transitionsInput),
      zIndex: _extends$1({}, zIndex$1)
    });
    muiTheme = deepmerge(muiTheme, other);

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    muiTheme = args.reduce(function (acc, argument) {
      return deepmerge(acc, argument);
    }, muiTheme);

    return muiTheme;
  }

  var defaultTheme$1 = createTheme();
  var defaultTheme$2 = defaultTheme$1;

  function useTheme() {
    var theme = useTheme$1(defaultTheme$2);

    return theme;
  }

  function useThemeProps(_ref) {
    var props = _ref.props,
        name = _ref.name;
    return useThemeProps$1({
      props: props,
      name: name,
      defaultTheme: defaultTheme$2
    });
  }

  var rootShouldForwardProp = function rootShouldForwardProp(prop) {
    return shouldForwardProp(prop) && prop !== 'classes';
  };
  var styled = createStyled({
    defaultTheme: defaultTheme$2,
    rootShouldForwardProp: rootShouldForwardProp
  });
  var styled$1 = styled;

  function getSvgIconUtilityClass(slot) {
    return generateUtilityClass('MuiSvgIcon', slot);
  }
  generateUtilityClasses('MuiSvgIcon', ['root', 'colorPrimary', 'colorSecondary', 'colorAction', 'colorError', 'colorDisabled', 'fontSizeInherit', 'fontSizeSmall', 'fontSizeMedium', 'fontSizeLarge']);

  var _excluded$m = ["children", "className", "color", "component", "fontSize", "htmlColor", "inheritViewBox", "titleAccess", "viewBox"];

  var useUtilityClasses$f = function useUtilityClasses(ownerState) {
    var color = ownerState.color,
        fontSize = ownerState.fontSize,
        classes = ownerState.classes;
    var slots = {
      root: ['root', color !== 'inherit' && "color".concat(capitalize(color)), "fontSize".concat(capitalize(fontSize))]
    };
    return composeClasses(slots, getSvgIconUtilityClass, classes);
  };

  var SvgIconRoot = styled$1('svg', {
    name: 'MuiSvgIcon',
    slot: 'Root',
    overridesResolver: function overridesResolver(props, styles) {
      var ownerState = props.ownerState;
      return [styles.root, ownerState.color !== 'inherit' && styles["color".concat(capitalize(ownerState.color))], styles["fontSize".concat(capitalize(ownerState.fontSize))]];
    }
  })(function (_ref) {
    var theme = _ref.theme,
        ownerState = _ref.ownerState;

    var _theme$transitions, _theme$transitions$cr, _theme$transitions2, _theme$transitions2$d, _theme$typography, _theme$typography$pxT, _theme$typography2, _theme$typography2$px, _theme$typography3, _theme$typography3$px, _theme$palette$ownerS, _theme$palette, _theme$palette$ownerS2, _theme$palette2, _theme$palette2$actio, _theme$palette3, _theme$palette3$actio;

    return {
      userSelect: 'none',
      width: '1em',
      height: '1em',
      display: 'inline-block',
      fill: 'currentColor',
      flexShrink: 0,
      transition: (_theme$transitions = theme.transitions) == null ? void 0 : (_theme$transitions$cr = _theme$transitions.create) == null ? void 0 : _theme$transitions$cr.call(_theme$transitions, 'fill', {
        duration: (_theme$transitions2 = theme.transitions) == null ? void 0 : (_theme$transitions2$d = _theme$transitions2.duration) == null ? void 0 : _theme$transitions2$d.shorter
      }),
      fontSize: {
        inherit: 'inherit',
        small: ((_theme$typography = theme.typography) == null ? void 0 : (_theme$typography$pxT = _theme$typography.pxToRem) == null ? void 0 : _theme$typography$pxT.call(_theme$typography, 20)) || '1.25rem',
        medium: ((_theme$typography2 = theme.typography) == null ? void 0 : (_theme$typography2$px = _theme$typography2.pxToRem) == null ? void 0 : _theme$typography2$px.call(_theme$typography2, 24)) || '1.5rem',
        large: ((_theme$typography3 = theme.typography) == null ? void 0 : (_theme$typography3$px = _theme$typography3.pxToRem) == null ? void 0 : _theme$typography3$px.call(_theme$typography3, 35)) || '2.1875'
      }[ownerState.fontSize],
      // TODO v5 deprecate, v6 remove for sx
      color: (_theme$palette$ownerS = (_theme$palette = theme.palette) == null ? void 0 : (_theme$palette$ownerS2 = _theme$palette[ownerState.color]) == null ? void 0 : _theme$palette$ownerS2.main) != null ? _theme$palette$ownerS : {
        action: (_theme$palette2 = theme.palette) == null ? void 0 : (_theme$palette2$actio = _theme$palette2.action) == null ? void 0 : _theme$palette2$actio.active,
        disabled: (_theme$palette3 = theme.palette) == null ? void 0 : (_theme$palette3$actio = _theme$palette3.action) == null ? void 0 : _theme$palette3$actio.disabled,
        inherit: undefined
      }[ownerState.color]
    };
  });
  var SvgIcon = /*#__PURE__*/react.exports.forwardRef(function SvgIcon(inProps, ref) {
    var props = useThemeProps({
      props: inProps,
      name: 'MuiSvgIcon'
    });

    var children = props.children,
        className = props.className,
        _props$color = props.color,
        color = _props$color === void 0 ? 'inherit' : _props$color,
        _props$component = props.component,
        component = _props$component === void 0 ? 'svg' : _props$component,
        _props$fontSize = props.fontSize,
        fontSize = _props$fontSize === void 0 ? 'medium' : _props$fontSize,
        htmlColor = props.htmlColor,
        _props$inheritViewBox = props.inheritViewBox,
        inheritViewBox = _props$inheritViewBox === void 0 ? false : _props$inheritViewBox,
        titleAccess = props.titleAccess,
        _props$viewBox = props.viewBox,
        viewBox = _props$viewBox === void 0 ? '0 0 24 24' : _props$viewBox,
        other = _objectWithoutPropertiesLoose(props, _excluded$m);

    var ownerState = _extends$1({}, props, {
      color: color,
      component: component,
      fontSize: fontSize,
      instanceFontSize: inProps.fontSize,
      inheritViewBox: inheritViewBox,
      viewBox: viewBox
    });

    var more = {};

    if (!inheritViewBox) {
      more.viewBox = viewBox;
    }

    var classes = useUtilityClasses$f(ownerState);
    return /*#__PURE__*/jsxRuntime.exports.jsxs(SvgIconRoot, _extends$1({
      as: component,
      className: clsx(classes.root, className),
      ownerState: ownerState,
      focusable: "false",
      color: htmlColor,
      "aria-hidden": titleAccess ? undefined : true,
      role: titleAccess ? 'img' : undefined,
      ref: ref
    }, more, other, {
      children: [children, titleAccess ? /*#__PURE__*/jsxRuntime.exports.jsx("title", {
        children: titleAccess
      }) : null]
    }));
  });
  SvgIcon.muiName = 'SvgIcon';
  var SvgIcon$1 = SvgIcon;

  function createSvgIcon$1(path, displayName) {
    var Component = function Component(props, ref) {
      return /*#__PURE__*/jsxRuntime.exports.jsx(SvgIcon$1, _extends$1({
        "data-testid": "".concat(displayName, "Icon"),
        ref: ref
      }, props, {
        children: path
      }));
    };

    Component.muiName = SvgIcon$1.muiName;
    return /*#__PURE__*/react.exports.memo( /*#__PURE__*/react.exports.forwardRef(Component));
  }

  // eslint-disable-next-line @typescript-eslint/naming-convention

  var unstable_ClassNameGenerator = {
    configure: function configure(generator) {
      console.warn(['MUI: `ClassNameGenerator` import from `@mui/material/utils` is outdated and might cause unexpected issues.', '', "You should use `import { unstable_ClassNameGenerator } from '@mui/material/className'` instead", '', 'The detail of the issue: https://github.com/mui/material-ui/issues/30011#issuecomment-1024993401', '', 'The updated documentation: https://mui.com/guides/classname-generator/'].join('\n'));
      ClassNameGenerator$1.configure(generator);
    }
  };

  var utils$a = /*#__PURE__*/Object.freeze({
    __proto__: null,
    unstable_ClassNameGenerator: unstable_ClassNameGenerator,
    capitalize: capitalize,
    createChainedFunction: createChainedFunction,
    createSvgIcon: createSvgIcon$1,
    debounce: debounce$1,
    deprecatedPropType: deprecatedPropType,
    isMuiElement: isMuiElement,
    ownerDocument: ownerDocument,
    ownerWindow: ownerWindow,
    requirePropFactory: requirePropFactory,
    setRef: setRef,
    unstable_useEnhancedEffect: useEnhancedEffect$1,
    unstable_useId: useId,
    unsupportedProp: unsupportedProp,
    useControlled: useControlled,
    useEventCallback: useEventCallback,
    useForkRef: useForkRef,
    useIsFocusVisible: useIsFocusVisible
  });

  var reactIs_production_min$2 = {};

  var b$2 = 60103,
      c$2 = 60106,
      d$2 = 60107,
      e$2 = 60108,
      f$3 = 60114,
      g$2 = 60109,
      h$2 = 60110,
      k$2 = 60112,
      l$2 = 60113,
      m$2 = 60120,
      n$2 = 60115,
      p$2 = 60116,
      q$2 = 60121,
      r$3 = 60122,
      u$2 = 60117,
      v$2 = 60129,
      w$2 = 60131;

  if ("function" === typeof Symbol && Symbol["for"]) {
    var x$3 = Symbol["for"];
    b$2 = x$3("react.element");
    c$2 = x$3("react.portal");
    d$2 = x$3("react.fragment");
    e$2 = x$3("react.strict_mode");
    f$3 = x$3("react.profiler");
    g$2 = x$3("react.provider");
    h$2 = x$3("react.context");
    k$2 = x$3("react.forward_ref");
    l$2 = x$3("react.suspense");
    m$2 = x$3("react.suspense_list");
    n$2 = x$3("react.memo");
    p$2 = x$3("react.lazy");
    q$2 = x$3("react.block");
    r$3 = x$3("react.server.block");
    u$2 = x$3("react.fundamental");
    v$2 = x$3("react.debug_trace_mode");
    w$2 = x$3("react.legacy_hidden");
  }

  function y$2(a) {
    if ("object" === _typeof(a) && null !== a) {
      var t = a.$$typeof;

      switch (t) {
        case b$2:
          switch (a = a.type, a) {
            case d$2:
            case f$3:
            case e$2:
            case l$2:
            case m$2:
              return a;

            default:
              switch (a = a && a.$$typeof, a) {
                case h$2:
                case k$2:
                case p$2:
                case n$2:
                case g$2:
                  return a;

                default:
                  return t;
              }

          }

        case c$2:
          return t;
      }
    }
  }

  var z$3 = g$2,
      A$2 = b$2,
      B$1 = k$2,
      C$1 = d$2,
      D$1 = p$2,
      E$1 = n$2,
      F$1 = c$2,
      G$1 = f$3,
      H$1 = e$2,
      I$1 = l$2;
  reactIs_production_min$2.ContextConsumer = h$2;
  reactIs_production_min$2.ContextProvider = z$3;
  reactIs_production_min$2.Element = A$2;
  reactIs_production_min$2.ForwardRef = B$1;
  reactIs_production_min$2.Fragment = C$1;
  reactIs_production_min$2.Lazy = D$1;
  reactIs_production_min$2.Memo = E$1;
  reactIs_production_min$2.Portal = F$1;
  reactIs_production_min$2.Profiler = G$1;
  reactIs_production_min$2.StrictMode = H$1;
  reactIs_production_min$2.Suspense = I$1;

  reactIs_production_min$2.isAsyncMode = function () {
    return !1;
  };

  reactIs_production_min$2.isConcurrentMode = function () {
    return !1;
  };

  reactIs_production_min$2.isContextConsumer = function (a) {
    return y$2(a) === h$2;
  };

  reactIs_production_min$2.isContextProvider = function (a) {
    return y$2(a) === g$2;
  };

  reactIs_production_min$2.isElement = function (a) {
    return "object" === _typeof(a) && null !== a && a.$$typeof === b$2;
  };

  reactIs_production_min$2.isForwardRef = function (a) {
    return y$2(a) === k$2;
  };

  reactIs_production_min$2.isFragment = function (a) {
    return y$2(a) === d$2;
  };

  reactIs_production_min$2.isLazy = function (a) {
    return y$2(a) === p$2;
  };

  reactIs_production_min$2.isMemo = function (a) {
    return y$2(a) === n$2;
  };

  reactIs_production_min$2.isPortal = function (a) {
    return y$2(a) === c$2;
  };

  reactIs_production_min$2.isProfiler = function (a) {
    return y$2(a) === f$3;
  };

  reactIs_production_min$2.isStrictMode = function (a) {
    return y$2(a) === e$2;
  };

  reactIs_production_min$2.isSuspense = function (a) {
    return y$2(a) === l$2;
  };

  reactIs_production_min$2.isValidElementType = function (a) {
    return "string" === typeof a || "function" === typeof a || a === d$2 || a === f$3 || a === v$2 || a === e$2 || a === l$2 || a === m$2 || a === w$2 || "object" === _typeof(a) && null !== a && (a.$$typeof === p$2 || a.$$typeof === n$2 || a.$$typeof === g$2 || a.$$typeof === h$2 || a.$$typeof === k$2 || a.$$typeof === u$2 || a.$$typeof === q$2 || a[0] === r$3) ? !0 : !1;
  };

  reactIs_production_min$2.typeOf = y$2;

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
  }

  var config = {
    disabled: false
  };

  var TransitionGroupContext = /*#__PURE__*/React.createContext(null);

  var UNMOUNTED = 'unmounted';
  var EXITED = 'exited';
  var ENTERING = 'entering';
  var ENTERED = 'entered';
  var EXITING = 'exiting';
  /**
   * The Transition component lets you describe a transition from one component
   * state to another _over time_ with a simple declarative API. Most commonly
   * it's used to animate the mounting and unmounting of a component, but can also
   * be used to describe in-place transition states as well.
   *
   * ---
   *
   * **Note**: `Transition` is a platform-agnostic base component. If you're using
   * transitions in CSS, you'll probably want to use
   * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
   * instead. It inherits all the features of `Transition`, but contains
   * additional features necessary to play nice with CSS transitions (hence the
   * name of the component).
   *
   * ---
   *
   * By default the `Transition` component does not alter the behavior of the
   * component it renders, it only tracks "enter" and "exit" states for the
   * components. It's up to you to give meaning and effect to those states. For
   * example we can add styles to a component when it enters or exits:
   *
   * ```jsx
   * import { Transition } from 'react-transition-group';
   *
   * const duration = 300;
   *
   * const defaultStyle = {
   *   transition: `opacity ${duration}ms ease-in-out`,
   *   opacity: 0,
   * }
   *
   * const transitionStyles = {
   *   entering: { opacity: 1 },
   *   entered:  { opacity: 1 },
   *   exiting:  { opacity: 0 },
   *   exited:  { opacity: 0 },
   * };
   *
   * const Fade = ({ in: inProp }) => (
   *   <Transition in={inProp} timeout={duration}>
   *     {state => (
   *       <div style={{
   *         ...defaultStyle,
   *         ...transitionStyles[state]
   *       }}>
   *         I'm a fade Transition!
   *       </div>
   *     )}
   *   </Transition>
   * );
   * ```
   *
   * There are 4 main states a Transition can be in:
   *  - `'entering'`
   *  - `'entered'`
   *  - `'exiting'`
   *  - `'exited'`
   *
   * Transition state is toggled via the `in` prop. When `true` the component
   * begins the "Enter" stage. During this stage, the component will shift from
   * its current transition state, to `'entering'` for the duration of the
   * transition and then to the `'entered'` stage once it's complete. Let's take
   * the following example (we'll use the
   * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
   *
   * ```jsx
   * function App() {
   *   const [inProp, setInProp] = useState(false);
   *   return (
   *     <div>
   *       <Transition in={inProp} timeout={500}>
   *         {state => (
   *           // ...
   *         )}
   *       </Transition>
   *       <button onClick={() => setInProp(true)}>
   *         Click to Enter
   *       </button>
   *     </div>
   *   );
   * }
   * ```
   *
   * When the button is clicked the component will shift to the `'entering'` state
   * and stay there for 500ms (the value of `timeout`) before it finally switches
   * to `'entered'`.
   *
   * When `in` is `false` the same thing happens except the state moves from
   * `'exiting'` to `'exited'`.
   */

  var Transition = /*#__PURE__*/function (_React$Component) {
    _inheritsLoose(Transition, _React$Component);

    function Transition(props, context) {
      var _this;

      _this = _React$Component.call(this, props, context) || this;
      var parentGroup = context; // In the context of a TransitionGroup all enters are really appears

      var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
      var initialStatus;
      _this.appearStatus = null;

      if (props["in"]) {
        if (appear) {
          initialStatus = EXITED;
          _this.appearStatus = ENTERING;
        } else {
          initialStatus = ENTERED;
        }
      } else {
        if (props.unmountOnExit || props.mountOnEnter) {
          initialStatus = UNMOUNTED;
        } else {
          initialStatus = EXITED;
        }
      }

      _this.state = {
        status: initialStatus
      };
      _this.nextCallback = null;
      return _this;
    }

    Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
      var nextIn = _ref["in"];

      if (nextIn && prevState.status === UNMOUNTED) {
        return {
          status: EXITED
        };
      }

      return null;
    } // getSnapshotBeforeUpdate(prevProps) {
    //   let nextStatus = null
    //   if (prevProps !== this.props) {
    //     const { status } = this.state
    //     if (this.props.in) {
    //       if (status !== ENTERING && status !== ENTERED) {
    //         nextStatus = ENTERING
    //       }
    //     } else {
    //       if (status === ENTERING || status === ENTERED) {
    //         nextStatus = EXITING
    //       }
    //     }
    //   }
    //   return { nextStatus }
    // }
    ;

    var _proto = Transition.prototype;

    _proto.componentDidMount = function componentDidMount() {
      this.updateStatus(true, this.appearStatus);
    };

    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      var nextStatus = null;

      if (prevProps !== this.props) {
        var status = this.state.status;

        if (this.props["in"]) {
          if (status !== ENTERING && status !== ENTERED) {
            nextStatus = ENTERING;
          }
        } else {
          if (status === ENTERING || status === ENTERED) {
            nextStatus = EXITING;
          }
        }
      }

      this.updateStatus(false, nextStatus);
    };

    _proto.componentWillUnmount = function componentWillUnmount() {
      this.cancelNextCallback();
    };

    _proto.getTimeouts = function getTimeouts() {
      var timeout = this.props.timeout;
      var exit, enter, appear;
      exit = enter = appear = timeout;

      if (timeout != null && typeof timeout !== 'number') {
        exit = timeout.exit;
        enter = timeout.enter; // TODO: remove fallback for next major

        appear = timeout.appear !== undefined ? timeout.appear : enter;
      }

      return {
        exit: exit,
        enter: enter,
        appear: appear
      };
    };

    _proto.updateStatus = function updateStatus(mounting, nextStatus) {
      if (mounting === void 0) {
        mounting = false;
      }

      if (nextStatus !== null) {
        // nextStatus will always be ENTERING or EXITING.
        this.cancelNextCallback();

        if (nextStatus === ENTERING) {
          this.performEnter(mounting);
        } else {
          this.performExit();
        }
      } else if (this.props.unmountOnExit && this.state.status === EXITED) {
        this.setState({
          status: UNMOUNTED
        });
      }
    };

    _proto.performEnter = function performEnter(mounting) {
      var _this2 = this;

      var enter = this.props.enter;
      var appearing = this.context ? this.context.isMounting : mounting;

      var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM.findDOMNode(this), appearing],
          maybeNode = _ref2[0],
          maybeAppearing = _ref2[1];

      var timeouts = this.getTimeouts();
      var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
      // if we are mounting and running this it means appear _must_ be set

      if (!mounting && !enter || config.disabled) {
        this.safeSetState({
          status: ENTERED
        }, function () {
          _this2.props.onEntered(maybeNode);
        });
        return;
      }

      this.props.onEnter(maybeNode, maybeAppearing);
      this.safeSetState({
        status: ENTERING
      }, function () {
        _this2.props.onEntering(maybeNode, maybeAppearing);

        _this2.onTransitionEnd(enterTimeout, function () {
          _this2.safeSetState({
            status: ENTERED
          }, function () {
            _this2.props.onEntered(maybeNode, maybeAppearing);
          });
        });
      });
    };

    _proto.performExit = function performExit() {
      var _this3 = this;

      var exit = this.props.exit;
      var timeouts = this.getTimeouts();
      var maybeNode = this.props.nodeRef ? undefined : ReactDOM.findDOMNode(this); // no exit animation skip right to EXITED

      if (!exit || config.disabled) {
        this.safeSetState({
          status: EXITED
        }, function () {
          _this3.props.onExited(maybeNode);
        });
        return;
      }

      this.props.onExit(maybeNode);
      this.safeSetState({
        status: EXITING
      }, function () {
        _this3.props.onExiting(maybeNode);

        _this3.onTransitionEnd(timeouts.exit, function () {
          _this3.safeSetState({
            status: EXITED
          }, function () {
            _this3.props.onExited(maybeNode);
          });
        });
      });
    };

    _proto.cancelNextCallback = function cancelNextCallback() {
      if (this.nextCallback !== null) {
        this.nextCallback.cancel();
        this.nextCallback = null;
      }
    };

    _proto.safeSetState = function safeSetState(nextState, callback) {
      // This shouldn't be necessary, but there are weird race conditions with
      // setState callbacks and unmounting in testing, so always make sure that
      // we can cancel any pending setState callbacks after we unmount.
      callback = this.setNextCallback(callback);
      this.setState(nextState, callback);
    };

    _proto.setNextCallback = function setNextCallback(callback) {
      var _this4 = this;

      var active = true;

      this.nextCallback = function (event) {
        if (active) {
          active = false;
          _this4.nextCallback = null;
          callback(event);
        }
      };

      this.nextCallback.cancel = function () {
        active = false;
      };

      return this.nextCallback;
    };

    _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
      this.setNextCallback(handler);
      var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);
      var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;

      if (!node || doesNotHaveTimeoutOrListener) {
        setTimeout(this.nextCallback, 0);
        return;
      }

      if (this.props.addEndListener) {
        var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],
            maybeNode = _ref3[0],
            maybeNextCallback = _ref3[1];

        this.props.addEndListener(maybeNode, maybeNextCallback);
      }

      if (timeout != null) {
        setTimeout(this.nextCallback, timeout);
      }
    };

    _proto.render = function render() {
      var status = this.state.status;

      if (status === UNMOUNTED) {
        return null;
      }

      var _this$props = this.props,
          children = _this$props.children;
          _this$props["in"];
          _this$props.mountOnEnter;
          _this$props.unmountOnExit;
          _this$props.appear;
          _this$props.enter;
          _this$props.exit;
          _this$props.timeout;
          _this$props.addEndListener;
          _this$props.onEnter;
          _this$props.onEntering;
          _this$props.onEntered;
          _this$props.onExit;
          _this$props.onExiting;
          _this$props.onExited;
          _this$props.nodeRef;
          var childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);

      return (
        /*#__PURE__*/
        // allows for nested Transitions
        React.createElement(TransitionGroupContext.Provider, {
          value: null
        }, typeof children === 'function' ? children(status, childProps) : /*#__PURE__*/React.cloneElement(React.Children.only(children), childProps))
      );
    };

    return Transition;
  }(React.Component);

  Transition.contextType = TransitionGroupContext;
  Transition.propTypes = {}; // Name the function so it is clearer in the documentation

  function noop$1() {}

  Transition.defaultProps = {
    "in": false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    enter: true,
    exit: true,
    onEnter: noop$1,
    onEntering: noop$1,
    onEntered: noop$1,
    onExit: noop$1,
    onExiting: noop$1,
    onExited: noop$1
  };
  Transition.UNMOUNTED = UNMOUNTED;
  Transition.EXITED = EXITED;
  Transition.ENTERING = ENTERING;
  Transition.ENTERED = ENTERED;
  Transition.EXITING = EXITING;
  var Transition$1 = Transition;

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  /**
   * Given `this.props.children`, return an object mapping key to child.
   *
   * @param {*} children `this.props.children`
   * @return {object} Mapping of key to child
   */

  function getChildMapping(children, mapFn) {
    var mapper = function mapper(child) {
      return mapFn && /*#__PURE__*/react.exports.isValidElement(child) ? mapFn(child) : child;
    };

    var result = Object.create(null);
    if (children) react.exports.Children.map(children, function (c) {
      return c;
    }).forEach(function (child) {
      // run the map function here instead so that the key is the computed one
      result[child.key] = mapper(child);
    });
    return result;
  }
  /**
   * When you're adding or removing children some may be added or removed in the
   * same render pass. We want to show *both* since we want to simultaneously
   * animate elements in and out. This function takes a previous set of keys
   * and a new set of keys and merges them with its best guess of the correct
   * ordering. In the future we may expose some of the utilities in
   * ReactMultiChild to make this easy, but for now React itself does not
   * directly have this concept of the union of prevChildren and nextChildren
   * so we implement it here.
   *
   * @param {object} prev prev children as returned from
   * `ReactTransitionChildMapping.getChildMapping()`.
   * @param {object} next next children as returned from
   * `ReactTransitionChildMapping.getChildMapping()`.
   * @return {object} a key set that contains all keys in `prev` and all keys
   * in `next` in a reasonable order.
   */

  function mergeChildMappings(prev, next) {
    prev = prev || {};
    next = next || {};

    function getValueForKey(key) {
      return key in next ? next[key] : prev[key];
    } // For each key of `next`, the list of keys to insert before that key in
    // the combined list


    var nextKeysPending = Object.create(null);
    var pendingKeys = [];

    for (var prevKey in prev) {
      if (prevKey in next) {
        if (pendingKeys.length) {
          nextKeysPending[prevKey] = pendingKeys;
          pendingKeys = [];
        }
      } else {
        pendingKeys.push(prevKey);
      }
    }

    var i;
    var childMapping = {};

    for (var nextKey in next) {
      if (nextKeysPending[nextKey]) {
        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
          var pendingNextKey = nextKeysPending[nextKey][i];
          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
        }
      }

      childMapping[nextKey] = getValueForKey(nextKey);
    } // Finally, add the keys which didn't appear before any key in `next`


    for (i = 0; i < pendingKeys.length; i++) {
      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
    }

    return childMapping;
  }

  function getProp(child, prop, props) {
    return props[prop] != null ? props[prop] : child.props[prop];
  }

  function getInitialChildMapping(props, onExited) {
    return getChildMapping(props.children, function (child) {
      return /*#__PURE__*/react.exports.cloneElement(child, {
        onExited: onExited.bind(null, child),
        "in": true,
        appear: getProp(child, 'appear', props),
        enter: getProp(child, 'enter', props),
        exit: getProp(child, 'exit', props)
      });
    });
  }
  function getNextChildMapping(nextProps, prevChildMapping, onExited) {
    var nextChildMapping = getChildMapping(nextProps.children);
    var children = mergeChildMappings(prevChildMapping, nextChildMapping);
    Object.keys(children).forEach(function (key) {
      var child = children[key];
      if (! /*#__PURE__*/react.exports.isValidElement(child)) return;
      var hasPrev = (key in prevChildMapping);
      var hasNext = (key in nextChildMapping);
      var prevChild = prevChildMapping[key];
      var isLeaving = /*#__PURE__*/react.exports.isValidElement(prevChild) && !prevChild.props["in"]; // item is new (entering)

      if (hasNext && (!hasPrev || isLeaving)) {
        // console.log('entering', key)
        children[key] = /*#__PURE__*/react.exports.cloneElement(child, {
          onExited: onExited.bind(null, child),
          "in": true,
          exit: getProp(child, 'exit', nextProps),
          enter: getProp(child, 'enter', nextProps)
        });
      } else if (!hasNext && hasPrev && !isLeaving) {
        // item is old (exiting)
        // console.log('leaving', key)
        children[key] = /*#__PURE__*/react.exports.cloneElement(child, {
          "in": false
        });
      } else if (hasNext && hasPrev && /*#__PURE__*/react.exports.isValidElement(prevChild)) {
        // item hasn't changed transition states
        // copy over the last transition props;
        // console.log('unchanged', key)
        children[key] = /*#__PURE__*/react.exports.cloneElement(child, {
          onExited: onExited.bind(null, child),
          "in": prevChild.props["in"],
          exit: getProp(child, 'exit', nextProps),
          enter: getProp(child, 'enter', nextProps)
        });
      }
    });
    return children;
  }

  var values = Object.values || function (obj) {
    return Object.keys(obj).map(function (k) {
      return obj[k];
    });
  };

  var defaultProps = {
    component: 'div',
    childFactory: function childFactory(child) {
      return child;
    }
  };
  /**
   * The `<TransitionGroup>` component manages a set of transition components
   * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
   * components, `<TransitionGroup>` is a state machine for managing the mounting
   * and unmounting of components over time.
   *
   * Consider the example below. As items are removed or added to the TodoList the
   * `in` prop is toggled automatically by the `<TransitionGroup>`.
   *
   * Note that `<TransitionGroup>`  does not define any animation behavior!
   * Exactly _how_ a list item animates is up to the individual transition
   * component. This means you can mix and match animations across different list
   * items.
   */

  var TransitionGroup = /*#__PURE__*/function (_React$Component) {
    _inheritsLoose(TransitionGroup, _React$Component);

    function TransitionGroup(props, context) {
      var _this;

      _this = _React$Component.call(this, props, context) || this;

      var handleExited = _this.handleExited.bind(_assertThisInitialized(_this)); // Initial children should all be entering, dependent on appear


      _this.state = {
        contextValue: {
          isMounting: true
        },
        handleExited: handleExited,
        firstRender: true
      };
      return _this;
    }

    var _proto = TransitionGroup.prototype;

    _proto.componentDidMount = function componentDidMount() {
      this.mounted = true;
      this.setState({
        contextValue: {
          isMounting: false
        }
      });
    };

    _proto.componentWillUnmount = function componentWillUnmount() {
      this.mounted = false;
    };

    TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
      var prevChildMapping = _ref.children,
          handleExited = _ref.handleExited,
          firstRender = _ref.firstRender;
      return {
        children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
        firstRender: false
      };
    } // node is `undefined` when user provided `nodeRef` prop
    ;

    _proto.handleExited = function handleExited(child, node) {
      var currentChildMapping = getChildMapping(this.props.children);
      if (child.key in currentChildMapping) return;

      if (child.props.onExited) {
        child.props.onExited(node);
      }

      if (this.mounted) {
        this.setState(function (state) {
          var children = _extends$1({}, state.children);

          delete children[child.key];
          return {
            children: children
          };
        });
      }
    };

    _proto.render = function render() {
      var _this$props = this.props,
          Component = _this$props.component,
          childFactory = _this$props.childFactory,
          props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);

      var contextValue = this.state.contextValue;
      var children = values(this.state.children).map(childFactory);
      delete props.appear;
      delete props.enter;
      delete props.exit;

      if (Component === null) {
        return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {
          value: contextValue
        }, children);
      }

      return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {
        value: contextValue
      }, /*#__PURE__*/React.createElement(Component, props, children));
    };

    return TransitionGroup;
  }(React.Component);

  TransitionGroup.propTypes = {};
  TransitionGroup.defaultProps = defaultProps;
  var TransitionGroup$1 = TransitionGroup;

  var reflow = function reflow(node) {
    return node.scrollTop;
  };
  function getTransitionProps(props, options) {
    var _style$transitionDura, _style$transitionTimi;

    var timeout = props.timeout,
        easing = props.easing,
        _props$style = props.style,
        style = _props$style === void 0 ? {} : _props$style;
    return {
      duration: (_style$transitionDura = style.transitionDuration) != null ? _style$transitionDura : typeof timeout === 'number' ? timeout : timeout[options.mode] || 0,
      easing: (_style$transitionTimi = style.transitionTimingFunction) != null ? _style$transitionTimi : _typeof(easing) === 'object' ? easing[options.mode] : easing,
      delay: style.transitionDelay
    };
  }

  function getPaperUtilityClass(slot) {
    return generateUtilityClass('MuiPaper', slot);
  }
  generateUtilityClasses('MuiPaper', ['root', 'rounded', 'outlined', 'elevation', 'elevation0', 'elevation1', 'elevation2', 'elevation3', 'elevation4', 'elevation5', 'elevation6', 'elevation7', 'elevation8', 'elevation9', 'elevation10', 'elevation11', 'elevation12', 'elevation13', 'elevation14', 'elevation15', 'elevation16', 'elevation17', 'elevation18', 'elevation19', 'elevation20', 'elevation21', 'elevation22', 'elevation23', 'elevation24']);

  var _excluded$l = ["className", "component", "elevation", "square", "variant"];

  var getOverlayAlpha = function getOverlayAlpha(elevation) {
    var alphaValue;

    if (elevation < 1) {
      alphaValue = 5.11916 * Math.pow(elevation, 2);
    } else {
      alphaValue = 4.5 * Math.log(elevation + 1) + 2;
    }

    return (alphaValue / 100).toFixed(2);
  };

  var useUtilityClasses$e = function useUtilityClasses(ownerState) {
    var square = ownerState.square,
        elevation = ownerState.elevation,
        variant = ownerState.variant,
        classes = ownerState.classes;
    var slots = {
      root: ['root', variant, !square && 'rounded', variant === 'elevation' && "elevation".concat(elevation)]
    };
    return composeClasses(slots, getPaperUtilityClass, classes);
  };

  var PaperRoot = styled$1('div', {
    name: 'MuiPaper',
    slot: 'Root',
    overridesResolver: function overridesResolver(props, styles) {
      var ownerState = props.ownerState;
      return [styles.root, styles[ownerState.variant], !ownerState.square && styles.rounded, ownerState.variant === 'elevation' && styles["elevation".concat(ownerState.elevation)]];
    }
  })(function (_ref) {
    var theme = _ref.theme,
        ownerState = _ref.ownerState;
    return _extends$1({
      backgroundColor: theme.palette.background.paper,
      color: theme.palette.text.primary,
      transition: theme.transitions.create('box-shadow')
    }, !ownerState.square && {
      borderRadius: theme.shape.borderRadius
    }, ownerState.variant === 'outlined' && {
      border: "1px solid ".concat(theme.palette.divider)
    }, ownerState.variant === 'elevation' && _extends$1({
      boxShadow: theme.shadows[ownerState.elevation]
    }, theme.palette.mode === 'dark' && {
      backgroundImage: "linear-gradient(".concat(alpha('#fff', getOverlayAlpha(ownerState.elevation)), ", ").concat(alpha('#fff', getOverlayAlpha(ownerState.elevation)), ")")
    }));
  });
  var Paper = /*#__PURE__*/react.exports.forwardRef(function Paper(inProps, ref) {
    var props = useThemeProps({
      props: inProps,
      name: 'MuiPaper'
    });

    var className = props.className,
        _props$component = props.component,
        component = _props$component === void 0 ? 'div' : _props$component,
        _props$elevation = props.elevation,
        elevation = _props$elevation === void 0 ? 1 : _props$elevation,
        _props$square = props.square,
        square = _props$square === void 0 ? false : _props$square,
        _props$variant = props.variant,
        variant = _props$variant === void 0 ? 'elevation' : _props$variant,
        other = _objectWithoutPropertiesLoose(props, _excluded$l);

    var ownerState = _extends$1({}, props, {
      component: component,
      elevation: elevation,
      square: square,
      variant: variant
    });

    var classes = useUtilityClasses$e(ownerState);

    return /*#__PURE__*/jsxRuntime.exports.jsx(PaperRoot, _extends$1({
      as: component,
      ownerState: ownerState,
      className: clsx(classes.root, className),
      ref: ref
    }, other));
  });
  var Paper$1 = Paper;

  function Ripple(props) {
    var className = props.className,
        classes = props.classes,
        _props$pulsate = props.pulsate,
        pulsate = _props$pulsate === void 0 ? false : _props$pulsate,
        rippleX = props.rippleX,
        rippleY = props.rippleY,
        rippleSize = props.rippleSize,
        inProp = props["in"],
        onExited = props.onExited,
        timeout = props.timeout;

    var _React$useState = react.exports.useState(false),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        leaving = _React$useState2[0],
        setLeaving = _React$useState2[1];

    var rippleClassName = clsx(className, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
    var rippleStyles = {
      width: rippleSize,
      height: rippleSize,
      top: -(rippleSize / 2) + rippleY,
      left: -(rippleSize / 2) + rippleX
    };
    var childClassName = clsx(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);

    if (!inProp && !leaving) {
      setLeaving(true);
    }

    react.exports.useEffect(function () {
      if (!inProp && onExited != null) {
        // react-transition-group#onExited
        var timeoutId = setTimeout(onExited, timeout);
        return function () {
          clearTimeout(timeoutId);
        };
      }

      return undefined;
    }, [onExited, inProp, timeout]);
    return /*#__PURE__*/jsxRuntime.exports.jsx("span", {
      className: rippleClassName,
      style: rippleStyles,
      children: /*#__PURE__*/jsxRuntime.exports.jsx("span", {
        className: childClassName
      })
    });
  }

  var touchRippleClasses = generateUtilityClasses('MuiTouchRipple', ['root', 'ripple', 'rippleVisible', 'ripplePulsate', 'child', 'childLeaving', 'childPulsate']);
  var touchRippleClasses$1 = touchRippleClasses;

  var _templateObject, _templateObject2, _templateObject3, _templateObject4;
  var _excluded$k = ["center", "classes", "className"];

  var _ = function _(t) {
    return t;
  },
      _t,
      _t2,
      _t3,
      _t4;
  var DURATION = 550;
  var DELAY_RIPPLE = 80;
  var enterKeyframe = keyframes(_t || (_t = _(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  0% {\n    transform: scale(0);\n    opacity: 0.1;\n  }\n\n  100% {\n    transform: scale(1);\n    opacity: 0.3;\n  }\n"])))));
  var exitKeyframe = keyframes(_t2 || (_t2 = _(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  0% {\n    opacity: 1;\n  }\n\n  100% {\n    opacity: 0;\n  }\n"])))));
  var pulsateKeyframe = keyframes(_t3 || (_t3 = _(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  0% {\n    transform: scale(1);\n  }\n\n  50% {\n    transform: scale(0.92);\n  }\n\n  100% {\n    transform: scale(1);\n  }\n"])))));
  var TouchRippleRoot = styled$1('span', {
    name: 'MuiTouchRipple',
    slot: 'Root'
  })({
    overflow: 'hidden',
    pointerEvents: 'none',
    position: 'absolute',
    zIndex: 0,
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    borderRadius: 'inherit'
  }); // This `styled()` function invokes keyframes. `styled-components` only supports keyframes
  // in string templates. Do not convert these styles in JS object as it will break.

  var TouchRippleRipple = styled$1(Ripple, {
    name: 'MuiTouchRipple',
    slot: 'Ripple'
  })(_t4 || (_t4 = _(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  opacity: 0;\n  position: absolute;\n\n  &.", " {\n    opacity: 0.3;\n    transform: scale(1);\n    animation-name: ", ";\n    animation-duration: ", "ms;\n    animation-timing-function: ", ";\n  }\n\n  &.", " {\n    animation-duration: ", "ms;\n  }\n\n  & .", " {\n    opacity: 1;\n    display: block;\n    width: 100%;\n    height: 100%;\n    border-radius: 50%;\n    background-color: currentColor;\n  }\n\n  & .", " {\n    opacity: 0;\n    animation-name: ", ";\n    animation-duration: ", "ms;\n    animation-timing-function: ", ";\n  }\n\n  & .", " {\n    position: absolute;\n    /* @noflip */\n    left: 0px;\n    top: 0;\n    animation-name: ", ";\n    animation-duration: 2500ms;\n    animation-timing-function: ", ";\n    animation-iteration-count: infinite;\n    animation-delay: 200ms;\n  }\n"])))), touchRippleClasses$1.rippleVisible, enterKeyframe, DURATION, function (_ref) {
    var theme = _ref.theme;
    return theme.transitions.easing.easeInOut;
  }, touchRippleClasses$1.ripplePulsate, function (_ref2) {
    var theme = _ref2.theme;
    return theme.transitions.duration.shorter;
  }, touchRippleClasses$1.child, touchRippleClasses$1.childLeaving, exitKeyframe, DURATION, function (_ref3) {
    var theme = _ref3.theme;
    return theme.transitions.easing.easeInOut;
  }, touchRippleClasses$1.childPulsate, pulsateKeyframe, function (_ref4) {
    var theme = _ref4.theme;
    return theme.transitions.easing.easeInOut;
  });
  /**
   * @ignore - internal component.
   *
   * TODO v5: Make private
   */

  var TouchRipple = /*#__PURE__*/react.exports.forwardRef(function TouchRipple(inProps, ref) {
    var props = useThemeProps({
      props: inProps,
      name: 'MuiTouchRipple'
    });

    var _props$center = props.center,
        centerProp = _props$center === void 0 ? false : _props$center,
        _props$classes = props.classes,
        classes = _props$classes === void 0 ? {} : _props$classes,
        className = props.className,
        other = _objectWithoutPropertiesLoose(props, _excluded$k);

    var _React$useState = react.exports.useState([]),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        ripples = _React$useState2[0],
        setRipples = _React$useState2[1];

    var nextKey = react.exports.useRef(0);
    var rippleCallback = react.exports.useRef(null);
    react.exports.useEffect(function () {
      if (rippleCallback.current) {
        rippleCallback.current();
        rippleCallback.current = null;
      }
    }, [ripples]); // Used to filter out mouse emulated events on mobile.

    var ignoringMouseDown = react.exports.useRef(false); // We use a timer in order to only show the ripples for touch "click" like events.
    // We don't want to display the ripple for touch scroll events.

    var startTimer = react.exports.useRef(null); // This is the hook called once the previous timeout is ready.

    var startTimerCommit = react.exports.useRef(null);
    var container = react.exports.useRef(null);
    react.exports.useEffect(function () {
      return function () {
        clearTimeout(startTimer.current);
      };
    }, []);
    var startCommit = react.exports.useCallback(function (params) {
      var pulsate = params.pulsate,
          rippleX = params.rippleX,
          rippleY = params.rippleY,
          rippleSize = params.rippleSize,
          cb = params.cb;
      setRipples(function (oldRipples) {
        return [].concat(_toConsumableArray(oldRipples), [/*#__PURE__*/jsxRuntime.exports.jsx(TouchRippleRipple, {
          classes: {
            ripple: clsx(classes.ripple, touchRippleClasses$1.ripple),
            rippleVisible: clsx(classes.rippleVisible, touchRippleClasses$1.rippleVisible),
            ripplePulsate: clsx(classes.ripplePulsate, touchRippleClasses$1.ripplePulsate),
            child: clsx(classes.child, touchRippleClasses$1.child),
            childLeaving: clsx(classes.childLeaving, touchRippleClasses$1.childLeaving),
            childPulsate: clsx(classes.childPulsate, touchRippleClasses$1.childPulsate)
          },
          timeout: DURATION,
          pulsate: pulsate,
          rippleX: rippleX,
          rippleY: rippleY,
          rippleSize: rippleSize
        }, nextKey.current)]);
      });
      nextKey.current += 1;
      rippleCallback.current = cb;
    }, [classes]);
    var start = react.exports.useCallback(function () {
      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var cb = arguments.length > 2 ? arguments[2] : undefined;
      var _options$pulsate = options.pulsate,
          pulsate = _options$pulsate === void 0 ? false : _options$pulsate,
          _options$center = options.center,
          center = _options$center === void 0 ? centerProp || options.pulsate : _options$center,
          _options$fakeElement = options.fakeElement,
          fakeElement = _options$fakeElement === void 0 ? false : _options$fakeElement;

      if (event.type === 'mousedown' && ignoringMouseDown.current) {
        ignoringMouseDown.current = false;
        return;
      }

      if (event.type === 'touchstart') {
        ignoringMouseDown.current = true;
      }

      var element = fakeElement ? null : container.current;
      var rect = element ? element.getBoundingClientRect() : {
        width: 0,
        height: 0,
        left: 0,
        top: 0
      }; // Get the size of the ripple

      var rippleX;
      var rippleY;
      var rippleSize;

      if (center || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
        rippleX = Math.round(rect.width / 2);
        rippleY = Math.round(rect.height / 2);
      } else {
        var _ref5 = event.touches ? event.touches[0] : event,
            clientX = _ref5.clientX,
            clientY = _ref5.clientY;

        rippleX = Math.round(clientX - rect.left);
        rippleY = Math.round(clientY - rect.top);
      }

      if (center) {
        rippleSize = Math.sqrt((2 * Math.pow(rect.width, 2) + Math.pow(rect.height, 2)) / 3); // For some reason the animation is broken on Mobile Chrome if the size is even.

        if (rippleSize % 2 === 0) {
          rippleSize += 1;
        }
      } else {
        var sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
        var sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
        rippleSize = Math.sqrt(Math.pow(sizeX, 2) + Math.pow(sizeY, 2));
      } // Touche devices


      if (event.touches) {
        // check that this isn't another touchstart due to multitouch
        // otherwise we will only clear a single timer when unmounting while two
        // are running
        if (startTimerCommit.current === null) {
          // Prepare the ripple effect.
          startTimerCommit.current = function () {
            startCommit({
              pulsate: pulsate,
              rippleX: rippleX,
              rippleY: rippleY,
              rippleSize: rippleSize,
              cb: cb
            });
          }; // Delay the execution of the ripple effect.


          startTimer.current = setTimeout(function () {
            if (startTimerCommit.current) {
              startTimerCommit.current();
              startTimerCommit.current = null;
            }
          }, DELAY_RIPPLE); // We have to make a tradeoff with this value.
        }
      } else {
        startCommit({
          pulsate: pulsate,
          rippleX: rippleX,
          rippleY: rippleY,
          rippleSize: rippleSize,
          cb: cb
        });
      }
    }, [centerProp, startCommit]);
    var pulsate = react.exports.useCallback(function () {
      start({}, {
        pulsate: true
      });
    }, [start]);
    var stop = react.exports.useCallback(function (event, cb) {
      clearTimeout(startTimer.current); // The touch interaction occurs too quickly.
      // We still want to show ripple effect.

      if (event.type === 'touchend' && startTimerCommit.current) {
        startTimerCommit.current();
        startTimerCommit.current = null;
        startTimer.current = setTimeout(function () {
          stop(event, cb);
        });
        return;
      }

      startTimerCommit.current = null;
      setRipples(function (oldRipples) {
        if (oldRipples.length > 0) {
          return oldRipples.slice(1);
        }

        return oldRipples;
      });
      rippleCallback.current = cb;
    }, []);
    react.exports.useImperativeHandle(ref, function () {
      return {
        pulsate: pulsate,
        start: start,
        stop: stop
      };
    }, [pulsate, start, stop]);
    return /*#__PURE__*/jsxRuntime.exports.jsx(TouchRippleRoot, _extends$1({
      className: clsx(classes.root, touchRippleClasses$1.root, className),
      ref: container
    }, other, {
      children: /*#__PURE__*/jsxRuntime.exports.jsx(TransitionGroup$1, {
        component: null,
        exit: true,
        children: ripples
      })
    }));
  });
  var TouchRipple$1 = TouchRipple;

  function getButtonBaseUtilityClass(slot) {
    return generateUtilityClass('MuiButtonBase', slot);
  }
  var buttonBaseClasses = generateUtilityClasses('MuiButtonBase', ['root', 'disabled', 'focusVisible']);
  var buttonBaseClasses$1 = buttonBaseClasses;

  var _styled;
  var _excluded$j = ["action", "centerRipple", "children", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "LinkComponent", "onBlur", "onClick", "onContextMenu", "onDragLeave", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "tabIndex", "TouchRippleProps", "touchRippleRef", "type"];

  var useUtilityClasses$d = function useUtilityClasses(ownerState) {
    var disabled = ownerState.disabled,
        focusVisible = ownerState.focusVisible,
        focusVisibleClassName = ownerState.focusVisibleClassName,
        classes = ownerState.classes;
    var slots = {
      root: ['root', disabled && 'disabled', focusVisible && 'focusVisible']
    };
    var composedClasses = composeClasses(slots, getButtonBaseUtilityClass, classes);

    if (focusVisible && focusVisibleClassName) {
      composedClasses.root += " ".concat(focusVisibleClassName);
    }

    return composedClasses;
  };

  var ButtonBaseRoot = styled$1('button', {
    name: 'MuiButtonBase',
    slot: 'Root',
    overridesResolver: function overridesResolver(props, styles) {
      return styles.root;
    }
  })((_styled = {
    display: 'inline-flex',
    alignItems: 'center',
    justifyContent: 'center',
    position: 'relative',
    boxSizing: 'border-box',
    WebkitTapHighlightColor: 'transparent',
    backgroundColor: 'transparent',
    // Reset default value
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0,
    border: 0,
    margin: 0,
    // Remove the margin in Safari
    borderRadius: 0,
    padding: 0,
    // Remove the padding in Firefox
    cursor: 'pointer',
    userSelect: 'none',
    verticalAlign: 'middle',
    MozAppearance: 'none',
    // Reset
    WebkitAppearance: 'none',
    // Reset
    textDecoration: 'none',
    // So we take precedent over the style of a native <a /> element.
    color: 'inherit',
    '&::-moz-focus-inner': {
      borderStyle: 'none' // Remove Firefox dotted outline.

    }
  }, _defineProperty$1(_styled, "&.".concat(buttonBaseClasses$1.disabled), {
    pointerEvents: 'none',
    // Disable link interactions
    cursor: 'default'
  }), _defineProperty$1(_styled, '@media print', {
    colorAdjust: 'exact'
  }), _styled));
  /**
   * `ButtonBase` contains as few styles as possible.
   * It aims to be a simple building block for creating a button.
   * It contains a load of style reset and some focus/ripple logic.
   */

  var ButtonBase = /*#__PURE__*/react.exports.forwardRef(function ButtonBase(inProps, ref) {
    var props = useThemeProps({
      props: inProps,
      name: 'MuiButtonBase'
    });

    var action = props.action,
        _props$centerRipple = props.centerRipple,
        centerRipple = _props$centerRipple === void 0 ? false : _props$centerRipple,
        children = props.children,
        className = props.className,
        _props$component = props.component,
        component = _props$component === void 0 ? 'button' : _props$component,
        _props$disabled = props.disabled,
        disabled = _props$disabled === void 0 ? false : _props$disabled,
        _props$disableRipple = props.disableRipple,
        disableRipple = _props$disableRipple === void 0 ? false : _props$disableRipple,
        _props$disableTouchRi = props.disableTouchRipple,
        disableTouchRipple = _props$disableTouchRi === void 0 ? false : _props$disableTouchRi,
        _props$focusRipple = props.focusRipple,
        focusRipple = _props$focusRipple === void 0 ? false : _props$focusRipple,
        _props$LinkComponent = props.LinkComponent,
        LinkComponent = _props$LinkComponent === void 0 ? 'a' : _props$LinkComponent,
        onBlur = props.onBlur,
        onClick = props.onClick,
        onContextMenu = props.onContextMenu,
        onDragLeave = props.onDragLeave,
        onFocus = props.onFocus,
        onFocusVisible = props.onFocusVisible,
        onKeyDown = props.onKeyDown,
        onKeyUp = props.onKeyUp,
        onMouseDown = props.onMouseDown,
        onMouseLeave = props.onMouseLeave,
        onMouseUp = props.onMouseUp,
        onTouchEnd = props.onTouchEnd,
        onTouchMove = props.onTouchMove,
        onTouchStart = props.onTouchStart,
        _props$tabIndex = props.tabIndex,
        tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex,
        TouchRippleProps = props.TouchRippleProps,
        touchRippleRef = props.touchRippleRef,
        type = props.type,
        other = _objectWithoutPropertiesLoose(props, _excluded$j);

    var buttonRef = react.exports.useRef(null);
    var rippleRef = react.exports.useRef(null);
    var handleRippleRef = useForkRef(rippleRef, touchRippleRef);

    var _useIsFocusVisible = useIsFocusVisible(),
        isFocusVisibleRef = _useIsFocusVisible.isFocusVisibleRef,
        handleFocusVisible = _useIsFocusVisible.onFocus,
        handleBlurVisible = _useIsFocusVisible.onBlur,
        focusVisibleRef = _useIsFocusVisible.ref;

    var _React$useState = react.exports.useState(false),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        focusVisible = _React$useState2[0],
        setFocusVisible = _React$useState2[1];

    if (disabled && focusVisible) {
      setFocusVisible(false);
    }

    react.exports.useImperativeHandle(action, function () {
      return {
        focusVisible: function focusVisible() {
          setFocusVisible(true);
          buttonRef.current.focus();
        }
      };
    }, []);
    react.exports.useEffect(function () {
      if (focusVisible && focusRipple && !disableRipple) {
        rippleRef.current.pulsate();
      }
    }, [disableRipple, focusRipple, focusVisible]);

    function useRippleHandler(rippleAction, eventCallback) {
      var skipRippleAction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : disableTouchRipple;
      return useEventCallback(function (event) {
        if (eventCallback) {
          eventCallback(event);
        }

        var ignore = skipRippleAction;

        if (!ignore && rippleRef.current) {
          rippleRef.current[rippleAction](event);
        }

        return true;
      });
    }

    var handleMouseDown = useRippleHandler('start', onMouseDown);
    var handleContextMenu = useRippleHandler('stop', onContextMenu);
    var handleDragLeave = useRippleHandler('stop', onDragLeave);
    var handleMouseUp = useRippleHandler('stop', onMouseUp);
    var handleMouseLeave = useRippleHandler('stop', function (event) {
      if (focusVisible) {
        event.preventDefault();
      }

      if (onMouseLeave) {
        onMouseLeave(event);
      }
    });
    var handleTouchStart = useRippleHandler('start', onTouchStart);
    var handleTouchEnd = useRippleHandler('stop', onTouchEnd);
    var handleTouchMove = useRippleHandler('stop', onTouchMove);
    var handleBlur = useRippleHandler('stop', function (event) {
      handleBlurVisible(event);

      if (isFocusVisibleRef.current === false) {
        setFocusVisible(false);
      }

      if (onBlur) {
        onBlur(event);
      }
    }, false);
    var handleFocus = useEventCallback(function (event) {
      // Fix for https://github.com/facebook/react/issues/7769
      if (!buttonRef.current) {
        buttonRef.current = event.currentTarget;
      }

      handleFocusVisible(event);

      if (isFocusVisibleRef.current === true) {
        setFocusVisible(true);

        if (onFocusVisible) {
          onFocusVisible(event);
        }
      }

      if (onFocus) {
        onFocus(event);
      }
    });

    var isNonNativeButton = function isNonNativeButton() {
      var button = buttonRef.current;
      return component && component !== 'button' && !(button.tagName === 'A' && button.href);
    };
    /**
     * IE11 shim for https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat
     */


    var keydownRef = react.exports.useRef(false);
    var handleKeyDown = useEventCallback(function (event) {
      // Check if key is already down to avoid repeats being counted as multiple activations
      if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === ' ') {
        keydownRef.current = true;
        rippleRef.current.stop(event, function () {
          rippleRef.current.start(event);
        });
      }

      if (event.target === event.currentTarget && isNonNativeButton() && event.key === ' ') {
        event.preventDefault();
      }

      if (onKeyDown) {
        onKeyDown(event);
      } // Keyboard accessibility for non interactive elements


      if (event.target === event.currentTarget && isNonNativeButton() && event.key === 'Enter' && !disabled) {
        event.preventDefault();

        if (onClick) {
          onClick(event);
        }
      }
    });
    var handleKeyUp = useEventCallback(function (event) {
      // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed
      // https://codesandbox.io/s/button-keyup-preventdefault-dn7f0
      if (focusRipple && event.key === ' ' && rippleRef.current && focusVisible && !event.defaultPrevented) {
        keydownRef.current = false;
        rippleRef.current.stop(event, function () {
          rippleRef.current.pulsate(event);
        });
      }

      if (onKeyUp) {
        onKeyUp(event);
      } // Keyboard accessibility for non interactive elements


      if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === ' ' && !event.defaultPrevented) {
        onClick(event);
      }
    });
    var ComponentProp = component;

    if (ComponentProp === 'button' && (other.href || other.to)) {
      ComponentProp = LinkComponent;
    }

    var buttonProps = {};

    if (ComponentProp === 'button') {
      buttonProps.type = type === undefined ? 'button' : type;
      buttonProps.disabled = disabled;
    } else {
      if (!other.href && !other.to) {
        buttonProps.role = 'button';
      }

      if (disabled) {
        buttonProps['aria-disabled'] = disabled;
      }
    }

    var handleOwnRef = useForkRef(focusVisibleRef, buttonRef);
    var handleRef = useForkRef(ref, handleOwnRef);

    var _React$useState3 = react.exports.useState(false),
        _React$useState4 = _slicedToArray$1(_React$useState3, 2),
        mountedState = _React$useState4[0],
        setMountedState = _React$useState4[1];

    react.exports.useEffect(function () {
      setMountedState(true);
    }, []);
    var enableTouchRipple = mountedState && !disableRipple && !disabled;

    var ownerState = _extends$1({}, props, {
      centerRipple: centerRipple,
      component: component,
      disabled: disabled,
      disableRipple: disableRipple,
      disableTouchRipple: disableTouchRipple,
      focusRipple: focusRipple,
      tabIndex: tabIndex,
      focusVisible: focusVisible
    });

    var classes = useUtilityClasses$d(ownerState);
    return /*#__PURE__*/jsxRuntime.exports.jsxs(ButtonBaseRoot, _extends$1({
      as: ComponentProp,
      className: clsx(classes.root, className),
      ownerState: ownerState,
      onBlur: handleBlur,
      onClick: onClick,
      onContextMenu: handleContextMenu,
      onFocus: handleFocus,
      onKeyDown: handleKeyDown,
      onKeyUp: handleKeyUp,
      onMouseDown: handleMouseDown,
      onMouseLeave: handleMouseLeave,
      onMouseUp: handleMouseUp,
      onDragLeave: handleDragLeave,
      onTouchEnd: handleTouchEnd,
      onTouchMove: handleTouchMove,
      onTouchStart: handleTouchStart,
      ref: handleRef,
      tabIndex: disabled ? -1 : tabIndex,
      type: type
    }, buttonProps, other, {
      children: [children, enableTouchRipple ?
      /*#__PURE__*/

      /* TouchRipple is only needed client-side, x2 boost on the server. */
      jsxRuntime.exports.jsx(TouchRipple$1, _extends$1({
        ref: handleRippleRef,
        center: centerRipple
      }, TouchRippleProps)) : null]
    }));
  });
  var ButtonBase$1 = ButtonBase;

  function getIconButtonUtilityClass(slot) {
    return generateUtilityClass('MuiIconButton', slot);
  }
  var iconButtonClasses = generateUtilityClasses('MuiIconButton', ['root', 'disabled', 'colorInherit', 'colorPrimary', 'colorSecondary', 'edgeStart', 'edgeEnd', 'sizeSmall', 'sizeMedium', 'sizeLarge']);
  var iconButtonClasses$1 = iconButtonClasses;

  var _excluded$i = ["edge", "children", "className", "color", "disabled", "disableFocusRipple", "size"];

  var useUtilityClasses$c = function useUtilityClasses(ownerState) {
    var classes = ownerState.classes,
        disabled = ownerState.disabled,
        color = ownerState.color,
        edge = ownerState.edge,
        size = ownerState.size;
    var slots = {
      root: ['root', disabled && 'disabled', color !== 'default' && "color".concat(capitalize(color)), edge && "edge".concat(capitalize(edge)), "size".concat(capitalize(size))]
    };
    return composeClasses(slots, getIconButtonUtilityClass, classes);
  };

  var IconButtonRoot = styled$1(ButtonBase$1, {
    name: 'MuiIconButton',
    slot: 'Root',
    overridesResolver: function overridesResolver(props, styles) {
      var ownerState = props.ownerState;
      return [styles.root, ownerState.color !== 'default' && styles["color".concat(capitalize(ownerState.color))], ownerState.edge && styles["edge".concat(capitalize(ownerState.edge))], styles["size".concat(capitalize(ownerState.size))]];
    }
  })(function (_ref) {
    var theme = _ref.theme,
        ownerState = _ref.ownerState;
    return _extends$1({
      textAlign: 'center',
      flex: '0 0 auto',
      fontSize: theme.typography.pxToRem(24),
      padding: 8,
      borderRadius: '50%',
      overflow: 'visible',
      // Explicitly set the default value to solve a bug on IE11.
      color: theme.palette.action.active,
      transition: theme.transitions.create('background-color', {
        duration: theme.transitions.duration.shortest
      })
    }, !ownerState.disableRipple && {
      '&:hover': {
        backgroundColor: alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: 'transparent'
        }
      }
    }, ownerState.edge === 'start' && {
      marginLeft: ownerState.size === 'small' ? -3 : -12
    }, ownerState.edge === 'end' && {
      marginRight: ownerState.size === 'small' ? -3 : -12
    });
  }, function (_ref2) {
    var theme = _ref2.theme,
        ownerState = _ref2.ownerState;
    return _extends$1({}, ownerState.color === 'inherit' && {
      color: 'inherit'
    }, ownerState.color !== 'inherit' && ownerState.color !== 'default' && _extends$1({
      color: theme.palette[ownerState.color].main
    }, !ownerState.disableRipple && {
      '&:hover': {
        backgroundColor: alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: 'transparent'
        }
      }
    }), ownerState.size === 'small' && {
      padding: 5,
      fontSize: theme.typography.pxToRem(18)
    }, ownerState.size === 'large' && {
      padding: 12,
      fontSize: theme.typography.pxToRem(28)
    }, _defineProperty$1({}, "&.".concat(iconButtonClasses$1.disabled), {
      backgroundColor: 'transparent',
      color: theme.palette.action.disabled
    }));
  });
  /**
   * Refer to the [Icons](/components/icons/) section of the documentation
   * regarding the available icon options.
   */

  var IconButton = /*#__PURE__*/react.exports.forwardRef(function IconButton(inProps, ref) {
    var props = useThemeProps({
      props: inProps,
      name: 'MuiIconButton'
    });

    var _props$edge = props.edge,
        edge = _props$edge === void 0 ? false : _props$edge,
        children = props.children,
        className = props.className,
        _props$color = props.color,
        color = _props$color === void 0 ? 'default' : _props$color,
        _props$disabled = props.disabled,
        disabled = _props$disabled === void 0 ? false : _props$disabled,
        _props$disableFocusRi = props.disableFocusRipple,
        disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi,
        _props$size = props.size,
        size = _props$size === void 0 ? 'medium' : _props$size,
        other = _objectWithoutPropertiesLoose(props, _excluded$i);

    var ownerState = _extends$1({}, props, {
      edge: edge,
      color: color,
      disabled: disabled,
      disableFocusRipple: disableFocusRipple,
      size: size
    });

    var classes = useUtilityClasses$c(ownerState);
    return /*#__PURE__*/jsxRuntime.exports.jsx(IconButtonRoot, _extends$1({
      className: clsx(classes.root, className),
      centerRipple: true,
      focusRipple: !disableFocusRipple,
      disabled: disabled,
      ref: ref,
      ownerState: ownerState
    }, other, {
      children: children
    }));
  });
  var IconButton$1 = IconButton;

  function getTypographyUtilityClass(slot) {
    return generateUtilityClass('MuiTypography', slot);
  }
  generateUtilityClasses('MuiTypography', ['root', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'inherit', 'button', 'caption', 'overline', 'alignLeft', 'alignRight', 'alignCenter', 'alignJustify', 'noWrap', 'gutterBottom', 'paragraph']);

  var _excluded$h = ["align", "className", "component", "gutterBottom", "noWrap", "paragraph", "variant", "variantMapping"];

  var useUtilityClasses$b = function useUtilityClasses(ownerState) {
    var align = ownerState.align,
        gutterBottom = ownerState.gutterBottom,
        noWrap = ownerState.noWrap,
        paragraph = ownerState.paragraph,
        variant = ownerState.variant,
        classes = ownerState.classes;
    var slots = {
      root: ['root', variant, ownerState.align !== 'inherit' && "align".concat(capitalize(align)), gutterBottom && 'gutterBottom', noWrap && 'noWrap', paragraph && 'paragraph']
    };
    return composeClasses(slots, getTypographyUtilityClass, classes);
  };

  var TypographyRoot = styled$1('span', {
    name: 'MuiTypography',
    slot: 'Root',
    overridesResolver: function overridesResolver(props, styles) {
      var ownerState = props.ownerState;
      return [styles.root, ownerState.variant && styles[ownerState.variant], ownerState.align !== 'inherit' && styles["align".concat(capitalize(ownerState.align))], ownerState.noWrap && styles.noWrap, ownerState.gutterBottom && styles.gutterBottom, ownerState.paragraph && styles.paragraph];
    }
  })(function (_ref) {
    var theme = _ref.theme,
        ownerState = _ref.ownerState;
    return _extends$1({
      margin: 0
    }, ownerState.variant && theme.typography[ownerState.variant], ownerState.align !== 'inherit' && {
      textAlign: ownerState.align
    }, ownerState.noWrap && {
      overflow: 'hidden',
      textOverflow: 'ellipsis',
      whiteSpace: 'nowrap'
    }, ownerState.gutterBottom && {
      marginBottom: '0.35em'
    }, ownerState.paragraph && {
      marginBottom: 16
    });
  });
  var defaultVariantMapping = {
    h1: 'h1',
    h2: 'h2',
    h3: 'h3',
    h4: 'h4',
    h5: 'h5',
    h6: 'h6',
    subtitle1: 'h6',
    subtitle2: 'h6',
    body1: 'p',
    body2: 'p',
    inherit: 'p'
  }; // TODO v6: deprecate these color values in v5.x and remove the transformation in v6

  var colorTransformations = {
    primary: 'primary.main',
    textPrimary: 'text.primary',
    secondary: 'secondary.main',
    textSecondary: 'text.secondary',
    error: 'error.main'
  };

  var transformDeprecatedColors = function transformDeprecatedColors(color) {
    return colorTransformations[color] || color;
  };

  var Typography = /*#__PURE__*/react.exports.forwardRef(function Typography(inProps, ref) {
    var themeProps = useThemeProps({
      props: inProps,
      name: 'MuiTypography'
    });
    var color = transformDeprecatedColors(themeProps.color);
    var props = extendSxProp(_extends$1({}, themeProps, {
      color: color
    }));

    var _props$align = props.align,
        align = _props$align === void 0 ? 'inherit' : _props$align,
        className = props.className,
        component = props.component,
        _props$gutterBottom = props.gutterBottom,
        gutterBottom = _props$gutterBottom === void 0 ? false : _props$gutterBottom,
        _props$noWrap = props.noWrap,
        noWrap = _props$noWrap === void 0 ? false : _props$noWrap,
        _props$paragraph = props.paragraph,
        paragraph = _props$paragraph === void 0 ? false : _props$paragraph,
        _props$variant = props.variant,
        variant = _props$variant === void 0 ? 'body1' : _props$variant,
        _props$variantMapping = props.variantMapping,
        variantMapping = _props$variantMapping === void 0 ? defaultVariantMapping : _props$variantMapping,
        other = _objectWithoutPropertiesLoose(props, _excluded$h);

    var ownerState = _extends$1({}, props, {
      align: align,
      color: color,
      className: className,
      component: component,
      gutterBottom: gutterBottom,
      noWrap: noWrap,
      paragraph: paragraph,
      variant: variant,
      variantMapping: variantMapping
    });

    var Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';
    var classes = useUtilityClasses$b(ownerState);
    return /*#__PURE__*/jsxRuntime.exports.jsx(TypographyRoot, _extends$1({
      as: Component,
      ref: ref,
      ownerState: ownerState,
      className: clsx(classes.root, className)
    }, other));
  });
  var Typography$1 = Typography;

  function getAppBarUtilityClass(slot) {
    return generateUtilityClass('MuiAppBar', slot);
  }
  generateUtilityClasses('MuiAppBar', ['root', 'positionFixed', 'positionAbsolute', 'positionSticky', 'positionStatic', 'positionRelative', 'colorDefault', 'colorPrimary', 'colorSecondary', 'colorInherit', 'colorTransparent']);

  var _excluded$g = ["className", "color", "enableColorOnDark", "position"];

  var useUtilityClasses$a = function useUtilityClasses(ownerState) {
    var color = ownerState.color,
        position = ownerState.position,
        classes = ownerState.classes;
    var slots = {
      root: ['root', "color".concat(capitalize(color)), "position".concat(capitalize(position))]
    };
    return composeClasses(slots, getAppBarUtilityClass, classes);
  };

  var AppBarRoot = styled$1(Paper$1, {
    name: 'MuiAppBar',
    slot: 'Root',
    overridesResolver: function overridesResolver(props, styles) {
      var ownerState = props.ownerState;
      return [styles.root, styles["position".concat(capitalize(ownerState.position))], styles["color".concat(capitalize(ownerState.color))]];
    }
  })(function (_ref) {
    var theme = _ref.theme,
        ownerState = _ref.ownerState;
    var backgroundColorDefault = theme.palette.mode === 'light' ? theme.palette.grey[100] : theme.palette.grey[900];
    return _extends$1({
      display: 'flex',
      flexDirection: 'column',
      width: '100%',
      boxSizing: 'border-box',
      // Prevent padding issue with the Modal and fixed positioned AppBar.
      flexShrink: 0
    }, ownerState.position === 'fixed' && {
      position: 'fixed',
      zIndex: theme.zIndex.appBar,
      top: 0,
      left: 'auto',
      right: 0,
      '@media print': {
        // Prevent the app bar to be visible on each printed page.
        position: 'absolute'
      }
    }, ownerState.position === 'absolute' && {
      position: 'absolute',
      zIndex: theme.zIndex.appBar,
      top: 0,
      left: 'auto',
      right: 0
    }, ownerState.position === 'sticky' && {
      // ⚠️ sticky is not supported by IE11.
      position: 'sticky',
      zIndex: theme.zIndex.appBar,
      top: 0,
      left: 'auto',
      right: 0
    }, ownerState.position === 'static' && {
      position: 'static'
    }, ownerState.position === 'relative' && {
      position: 'relative'
    }, ownerState.color === 'default' && {
      backgroundColor: backgroundColorDefault,
      color: theme.palette.getContrastText(backgroundColorDefault)
    }, ownerState.color && ownerState.color !== 'default' && ownerState.color !== 'inherit' && ownerState.color !== 'transparent' && {
      backgroundColor: theme.palette[ownerState.color].main,
      color: theme.palette[ownerState.color].contrastText
    }, ownerState.color === 'inherit' && {
      color: 'inherit'
    }, theme.palette.mode === 'dark' && !ownerState.enableColorOnDark && {
      backgroundColor: null,
      color: null
    }, ownerState.color === 'transparent' && _extends$1({
      backgroundColor: 'transparent',
      color: 'inherit'
    }, theme.palette.mode === 'dark' && {
      backgroundImage: 'none'
    }));
  });
  var AppBar = /*#__PURE__*/react.exports.forwardRef(function AppBar(inProps, ref) {
    var props = useThemeProps({
      props: inProps,
      name: 'MuiAppBar'
    });

    var className = props.className,
        _props$color = props.color,
        color = _props$color === void 0 ? 'primary' : _props$color,
        _props$enableColorOnD = props.enableColorOnDark,
        enableColorOnDark = _props$enableColorOnD === void 0 ? false : _props$enableColorOnD,
        _props$position = props.position,
        position = _props$position === void 0 ? 'fixed' : _props$position,
        other = _objectWithoutPropertiesLoose(props, _excluded$g);

    var ownerState = _extends$1({}, props, {
      color: color,
      position: position,
      enableColorOnDark: enableColorOnDark
    });

    var classes = useUtilityClasses$a(ownerState);
    return /*#__PURE__*/jsxRuntime.exports.jsx(AppBarRoot, _extends$1({
      square: true,
      component: "header",
      ownerState: ownerState,
      elevation: 4,
      className: clsx(classes.root, className, position === 'fixed' && 'mui-fixed'),
      ref: ref
    }, other));
  });
  var AppBar$1 = AppBar;

  /**
   *
   * Demos:
   *
   * - [Autocomplete](https://mui.com/components/autocomplete/)
   * - [Menus](https://mui.com/components/menus/)
   * - [Popper](https://mui.com/components/popper/)
   *
   * API:
   *
   * - [Popper API](https://mui.com/api/popper/)
   */

  var Popper = /*#__PURE__*/react.exports.forwardRef(function Popper(inProps, ref) {
    var theme = useTheme$2();
    var props = useThemeProps({
      props: inProps,
      name: 'MuiPopper'
    });
    return /*#__PURE__*/jsxRuntime.exports.jsx(PopperUnstyled$1, _extends$1({
      direction: theme == null ? void 0 : theme.direction
    }, props, {
      ref: ref
    }));
  });
  var Popper$1 = Popper;

  function GlobalStyles(props) {
    return /*#__PURE__*/jsxRuntime.exports.jsx(GlobalStyles$1, _extends$1({}, props, {
      defaultTheme: defaultTheme$2
    }));
  }

  var Person = createSvgIcon$1( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
    d: "M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
  }), 'Person');

  function getAvatarUtilityClass(slot) {
    return generateUtilityClass('MuiAvatar', slot);
  }
  generateUtilityClasses('MuiAvatar', ['root', 'colorDefault', 'circular', 'rounded', 'square', 'img', 'fallback']);

  var _excluded$f = ["alt", "children", "className", "component", "imgProps", "sizes", "src", "srcSet", "variant"];

  var useUtilityClasses$9 = function useUtilityClasses(ownerState) {
    var classes = ownerState.classes,
        variant = ownerState.variant,
        colorDefault = ownerState.colorDefault;
    var slots = {
      root: ['root', variant, colorDefault && 'colorDefault'],
      img: ['img'],
      fallback: ['fallback']
    };
    return composeClasses(slots, getAvatarUtilityClass, classes);
  };

  var AvatarRoot = styled$1('div', {
    name: 'MuiAvatar',
    slot: 'Root',
    overridesResolver: function overridesResolver(props, styles) {
      var ownerState = props.ownerState;
      return [styles.root, styles[ownerState.variant], ownerState.colorDefault && styles.colorDefault];
    }
  })(function (_ref) {
    var theme = _ref.theme,
        ownerState = _ref.ownerState;
    return _extends$1({
      position: 'relative',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      flexShrink: 0,
      width: 40,
      height: 40,
      fontFamily: theme.typography.fontFamily,
      fontSize: theme.typography.pxToRem(20),
      lineHeight: 1,
      borderRadius: '50%',
      overflow: 'hidden',
      userSelect: 'none'
    }, ownerState.variant === 'rounded' && {
      borderRadius: theme.shape.borderRadius
    }, ownerState.variant === 'square' && {
      borderRadius: 0
    }, ownerState.colorDefault && {
      color: theme.palette.background["default"],
      backgroundColor: theme.palette.mode === 'light' ? theme.palette.grey[400] : theme.palette.grey[600]
    });
  });
  var AvatarImg = styled$1('img', {
    name: 'MuiAvatar',
    slot: 'Img',
    overridesResolver: function overridesResolver(props, styles) {
      return styles.img;
    }
  })({
    width: '100%',
    height: '100%',
    textAlign: 'center',
    // Handle non-square image. The property isn't supported by IE11.
    objectFit: 'cover',
    // Hide alt text.
    color: 'transparent',
    // Hide the image broken icon, only works on Chrome.
    textIndent: 10000
  });
  var AvatarFallback = styled$1(Person, {
    name: 'MuiAvatar',
    slot: 'Fallback',
    overridesResolver: function overridesResolver(props, styles) {
      return styles.fallback;
    }
  })({
    width: '75%',
    height: '75%'
  });

  function useLoaded(_ref2) {
    var crossOrigin = _ref2.crossOrigin,
        referrerPolicy = _ref2.referrerPolicy,
        src = _ref2.src,
        srcSet = _ref2.srcSet;

    var _React$useState = react.exports.useState(false),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        loaded = _React$useState2[0],
        setLoaded = _React$useState2[1];

    react.exports.useEffect(function () {
      if (!src && !srcSet) {
        return undefined;
      }

      setLoaded(false);
      var active = true;
      var image = new Image();

      image.onload = function () {
        if (!active) {
          return;
        }

        setLoaded('loaded');
      };

      image.onerror = function () {
        if (!active) {
          return;
        }

        setLoaded('error');
      };

      image.crossOrigin = crossOrigin;
      image.referrerPolicy = referrerPolicy;
      image.src = src;

      if (srcSet) {
        image.srcset = srcSet;
      }

      return function () {
        active = false;
      };
    }, [crossOrigin, referrerPolicy, src, srcSet]);
    return loaded;
  }

  var Avatar = /*#__PURE__*/react.exports.forwardRef(function Avatar(inProps, ref) {
    var props = useThemeProps({
      props: inProps,
      name: 'MuiAvatar'
    });

    var alt = props.alt,
        childrenProp = props.children,
        className = props.className,
        _props$component = props.component,
        component = _props$component === void 0 ? 'div' : _props$component,
        imgProps = props.imgProps,
        sizes = props.sizes,
        src = props.src,
        srcSet = props.srcSet,
        _props$variant = props.variant,
        variant = _props$variant === void 0 ? 'circular' : _props$variant,
        other = _objectWithoutPropertiesLoose(props, _excluded$f);

    var children = null; // Use a hook instead of onError on the img element to support server-side rendering.

    var loaded = useLoaded(_extends$1({}, imgProps, {
      src: src,
      srcSet: srcSet
    }));
    var hasImg = src || srcSet;
    var hasImgNotFailing = hasImg && loaded !== 'error';

    var ownerState = _extends$1({}, props, {
      colorDefault: !hasImgNotFailing,
      component: component,
      variant: variant
    });

    var classes = useUtilityClasses$9(ownerState);

    if (hasImgNotFailing) {
      children = /*#__PURE__*/jsxRuntime.exports.jsx(AvatarImg, _extends$1({
        alt: alt,
        src: src,
        srcSet: srcSet,
        sizes: sizes,
        ownerState: ownerState,
        className: classes.img
      }, imgProps));
    } else if (childrenProp != null) {
      children = childrenProp;
    } else if (hasImg && alt) {
      children = alt[0];
    } else {
      children = /*#__PURE__*/jsxRuntime.exports.jsx(AvatarFallback, {
        className: classes.fallback
      });
    }

    return /*#__PURE__*/jsxRuntime.exports.jsx(AvatarRoot, _extends$1({
      as: component,
      ownerState: ownerState,
      className: clsx(classes.root, className),
      ref: ref
    }, other, {
      children: children
    }));
  });
  var Avatar$1 = Avatar;

  var _excluded$e = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
  var styles$1 = {
    entering: {
      opacity: 1
    },
    entered: {
      opacity: 1
    }
  };
  /**
   * The Fade transition is used by the [Modal](/components/modal/) component.
   * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
   */

  var Fade = /*#__PURE__*/react.exports.forwardRef(function Fade(props, ref) {
    var theme = useTheme();
    var defaultTimeout = {
      enter: theme.transitions.duration.enteringScreen,
      exit: theme.transitions.duration.leavingScreen
    };

    var addEndListener = props.addEndListener,
        _props$appear = props.appear,
        appear = _props$appear === void 0 ? true : _props$appear,
        _children = props.children,
        easing = props.easing,
        inProp = props["in"],
        onEnter = props.onEnter,
        onEntered = props.onEntered,
        onEntering = props.onEntering,
        onExit = props.onExit,
        onExited = props.onExited,
        onExiting = props.onExiting,
        style = props.style,
        _props$timeout = props.timeout,
        timeout = _props$timeout === void 0 ? defaultTimeout : _props$timeout,
        _props$TransitionComp = props.TransitionComponent,
        TransitionComponent = _props$TransitionComp === void 0 ? Transition$1 : _props$TransitionComp,
        other = _objectWithoutPropertiesLoose(props, _excluded$e);
    var nodeRef = react.exports.useRef(null);
    var foreignRef = useForkRef(_children.ref, ref);
    var handleRef = useForkRef(nodeRef, foreignRef);

    var normalizedTransitionCallback = function normalizedTransitionCallback(callback) {
      return function (maybeIsAppearing) {
        if (callback) {
          var node = nodeRef.current; // onEnterXxx and onExitXxx callbacks have a different arguments.length value.

          if (maybeIsAppearing === undefined) {
            callback(node);
          } else {
            callback(node, maybeIsAppearing);
          }
        }
      };
    };

    var handleEntering = normalizedTransitionCallback(onEntering);
    var handleEnter = normalizedTransitionCallback(function (node, isAppearing) {
      reflow(node); // So the animation always start from the start.

      var transitionProps = getTransitionProps({
        style: style,
        timeout: timeout,
        easing: easing
      }, {
        mode: 'enter'
      });
      node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);
      node.style.transition = theme.transitions.create('opacity', transitionProps);

      if (onEnter) {
        onEnter(node, isAppearing);
      }
    });
    var handleEntered = normalizedTransitionCallback(onEntered);
    var handleExiting = normalizedTransitionCallback(onExiting);
    var handleExit = normalizedTransitionCallback(function (node) {
      var transitionProps = getTransitionProps({
        style: style,
        timeout: timeout,
        easing: easing
      }, {
        mode: 'exit'
      });
      node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);
      node.style.transition = theme.transitions.create('opacity', transitionProps);

      if (onExit) {
        onExit(node);
      }
    });
    var handleExited = normalizedTransitionCallback(onExited);

    var handleAddEndListener = function handleAddEndListener(next) {
      if (addEndListener) {
        // Old call signature before `react-transition-group` implemented `nodeRef`
        addEndListener(nodeRef.current, next);
      }
    };

    return /*#__PURE__*/jsxRuntime.exports.jsx(TransitionComponent, _extends$1({
      appear: appear,
      "in": inProp,
      nodeRef: nodeRef ,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      timeout: timeout
    }, other, {
      children: function children(state, childProps) {
        return /*#__PURE__*/react.exports.cloneElement(_children, _extends$1({
          style: _extends$1({
            opacity: 0,
            visibility: state === 'exited' && !inProp ? 'hidden' : undefined
          }, styles$1[state], style, _children.props.style),
          ref: handleRef
        }, childProps));
      }
    }));
  });
  var Fade$1 = Fade;

  var _excluded$d = ["children", "components", "componentsProps", "className", "invisible", "open", "transitionDuration", "TransitionComponent"];

  var extendUtilityClasses$1 = function extendUtilityClasses(ownerState) {
    var classes = ownerState.classes;
    return classes;
  };

  var BackdropRoot = styled$1('div', {
    name: 'MuiBackdrop',
    slot: 'Root',
    overridesResolver: function overridesResolver(props, styles) {
      var ownerState = props.ownerState;
      return [styles.root, ownerState.invisible && styles.invisible];
    }
  })(function (_ref) {
    var ownerState = _ref.ownerState;
    return _extends$1({
      position: 'fixed',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      right: 0,
      bottom: 0,
      top: 0,
      left: 0,
      backgroundColor: 'rgba(0, 0, 0, 0.5)',
      WebkitTapHighlightColor: 'transparent'
    }, ownerState.invisible && {
      backgroundColor: 'transparent'
    });
  });
  var Backdrop = /*#__PURE__*/react.exports.forwardRef(function Backdrop(inProps, ref) {
    var _componentsProps$root;

    var props = useThemeProps({
      props: inProps,
      name: 'MuiBackdrop'
    });

    var children = props.children,
        _props$components = props.components,
        components = _props$components === void 0 ? {} : _props$components,
        _props$componentsProp = props.componentsProps,
        componentsProps = _props$componentsProp === void 0 ? {} : _props$componentsProp,
        className = props.className,
        _props$invisible = props.invisible,
        invisible = _props$invisible === void 0 ? false : _props$invisible,
        open = props.open,
        transitionDuration = props.transitionDuration,
        _props$TransitionComp = props.TransitionComponent,
        TransitionComponent = _props$TransitionComp === void 0 ? Fade$1 : _props$TransitionComp,
        other = _objectWithoutPropertiesLoose(props, _excluded$d);

    var ownerState = _extends$1({}, props, {
      invisible: invisible
    });

    var classes = extendUtilityClasses$1(ownerState);
    return /*#__PURE__*/jsxRuntime.exports.jsx(TransitionComponent, _extends$1({
      "in": open,
      timeout: transitionDuration
    }, other, {
      children: /*#__PURE__*/jsxRuntime.exports.jsx(BackdropUnstyled$1, {
        className: className,
        invisible: invisible,
        components: _extends$1({
          Root: BackdropRoot
        }, components),
        componentsProps: {
          root: _extends$1({}, componentsProps.root, (!components.Root || !isHostComponent(components.Root)) && {
            ownerState: _extends$1({}, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.ownerState)
          })
        },
        classes: classes,
        ref: ref,
        children: children
      })
    }));
  });
  var Backdrop$1 = Backdrop;

  var defaultTheme = createTheme();
  /**
   * @ignore - do not document.
   */

  var Box = createBox({
    defaultTheme: defaultTheme,
    defaultClassName: 'MuiBox-root',
    generateClassName: ClassNameGenerator$1.generate
  });
  var Box$1 = Box;

  function getButtonUtilityClass(slot) {
    return generateUtilityClass('MuiButton', slot);
  }
  var buttonClasses = generateUtilityClasses('MuiButton', ['root', 'text', 'textInherit', 'textPrimary', 'textSecondary', 'outlined', 'outlinedInherit', 'outlinedPrimary', 'outlinedSecondary', 'contained', 'containedInherit', 'containedPrimary', 'containedSecondary', 'disableElevation', 'focusVisible', 'disabled', 'colorInherit', 'textSizeSmall', 'textSizeMedium', 'textSizeLarge', 'outlinedSizeSmall', 'outlinedSizeMedium', 'outlinedSizeLarge', 'containedSizeSmall', 'containedSizeMedium', 'containedSizeLarge', 'sizeMedium', 'sizeSmall', 'sizeLarge', 'fullWidth', 'startIcon', 'endIcon', 'iconSizeSmall', 'iconSizeMedium', 'iconSizeLarge']);
  var buttonClasses$1 = buttonClasses;

  /**
   * @ignore - internal component.
   */

  var ButtonGroupContext = /*#__PURE__*/react.exports.createContext({});

  var ButtonGroupContext$1 = ButtonGroupContext;

  var _excluded$c = ["children", "color", "component", "className", "disabled", "disableElevation", "disableFocusRipple", "endIcon", "focusVisibleClassName", "fullWidth", "size", "startIcon", "type", "variant"];

  var useUtilityClasses$8 = function useUtilityClasses(ownerState) {
    var color = ownerState.color,
        disableElevation = ownerState.disableElevation,
        fullWidth = ownerState.fullWidth,
        size = ownerState.size,
        variant = ownerState.variant,
        classes = ownerState.classes;
    var slots = {
      root: ['root', variant, "".concat(variant).concat(capitalize(color)), "size".concat(capitalize(size)), "".concat(variant, "Size").concat(capitalize(size)), color === 'inherit' && 'colorInherit', disableElevation && 'disableElevation', fullWidth && 'fullWidth'],
      label: ['label'],
      startIcon: ['startIcon', "iconSize".concat(capitalize(size))],
      endIcon: ['endIcon', "iconSize".concat(capitalize(size))]
    };
    var composedClasses = composeClasses(slots, getButtonUtilityClass, classes);
    return _extends$1({}, classes, composedClasses);
  };

  var commonIconStyles = function commonIconStyles(ownerState) {
    return _extends$1({}, ownerState.size === 'small' && {
      '& > *:nth-of-type(1)': {
        fontSize: 18
      }
    }, ownerState.size === 'medium' && {
      '& > *:nth-of-type(1)': {
        fontSize: 20
      }
    }, ownerState.size === 'large' && {
      '& > *:nth-of-type(1)': {
        fontSize: 22
      }
    });
  };

  var ButtonRoot = styled$1(ButtonBase$1, {
    shouldForwardProp: function shouldForwardProp(prop) {
      return rootShouldForwardProp(prop) || prop === 'classes';
    },
    name: 'MuiButton',
    slot: 'Root',
    overridesResolver: function overridesResolver(props, styles) {
      var ownerState = props.ownerState;
      return [styles.root, styles[ownerState.variant], styles["".concat(ownerState.variant).concat(capitalize(ownerState.color))], styles["size".concat(capitalize(ownerState.size))], styles["".concat(ownerState.variant, "Size").concat(capitalize(ownerState.size))], ownerState.color === 'inherit' && styles.colorInherit, ownerState.disableElevation && styles.disableElevation, ownerState.fullWidth && styles.fullWidth];
    }
  })(function (_ref) {
    var _extends2;

    var theme = _ref.theme,
        ownerState = _ref.ownerState;
    return _extends$1({}, theme.typography.button, (_extends2 = {
      minWidth: 64,
      padding: '6px 16px',
      borderRadius: theme.shape.borderRadius,
      transition: theme.transitions.create(['background-color', 'box-shadow', 'border-color', 'color'], {
        duration: theme.transitions.duration["short"]
      }),
      '&:hover': _extends$1({
        textDecoration: 'none',
        backgroundColor: alpha(theme.palette.text.primary, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: 'transparent'
        }
      }, ownerState.variant === 'text' && ownerState.color !== 'inherit' && {
        backgroundColor: alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: 'transparent'
        }
      }, ownerState.variant === 'outlined' && ownerState.color !== 'inherit' && {
        border: "1px solid ".concat(theme.palette[ownerState.color].main),
        backgroundColor: alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: 'transparent'
        }
      }, ownerState.variant === 'contained' && {
        backgroundColor: theme.palette.grey.A100,
        boxShadow: theme.shadows[4],
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          boxShadow: theme.shadows[2],
          backgroundColor: theme.palette.grey[300]
        }
      }, ownerState.variant === 'contained' && ownerState.color !== 'inherit' && {
        backgroundColor: theme.palette[ownerState.color].dark,
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: theme.palette[ownerState.color].main
        }
      }),
      '&:active': _extends$1({}, ownerState.variant === 'contained' && {
        boxShadow: theme.shadows[8]
      })
    }, _defineProperty$1(_extends2, "&.".concat(buttonClasses$1.focusVisible), _extends$1({}, ownerState.variant === 'contained' && {
      boxShadow: theme.shadows[6]
    })), _defineProperty$1(_extends2, "&.".concat(buttonClasses$1.disabled), _extends$1({
      color: theme.palette.action.disabled
    }, ownerState.variant === 'outlined' && {
      border: "1px solid ".concat(theme.palette.action.disabledBackground)
    }, ownerState.variant === 'outlined' && ownerState.color === 'secondary' && {
      border: "1px solid ".concat(theme.palette.action.disabled)
    }, ownerState.variant === 'contained' && {
      color: theme.palette.action.disabled,
      boxShadow: theme.shadows[0],
      backgroundColor: theme.palette.action.disabledBackground
    })), _extends2), ownerState.variant === 'text' && {
      padding: '6px 8px'
    }, ownerState.variant === 'text' && ownerState.color !== 'inherit' && {
      color: theme.palette[ownerState.color].main
    }, ownerState.variant === 'outlined' && {
      padding: '5px 15px',
      border: "1px solid ".concat(theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)')
    }, ownerState.variant === 'outlined' && ownerState.color !== 'inherit' && {
      color: theme.palette[ownerState.color].main,
      border: "1px solid ".concat(alpha(theme.palette[ownerState.color].main, 0.5))
    }, ownerState.variant === 'contained' && {
      color: theme.palette.getContrastText(theme.palette.grey[300]),
      backgroundColor: theme.palette.grey[300],
      boxShadow: theme.shadows[2]
    }, ownerState.variant === 'contained' && ownerState.color !== 'inherit' && {
      color: theme.palette[ownerState.color].contrastText,
      backgroundColor: theme.palette[ownerState.color].main
    }, ownerState.color === 'inherit' && {
      color: 'inherit',
      borderColor: 'currentColor'
    }, ownerState.size === 'small' && ownerState.variant === 'text' && {
      padding: '4px 5px',
      fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === 'large' && ownerState.variant === 'text' && {
      padding: '8px 11px',
      fontSize: theme.typography.pxToRem(15)
    }, ownerState.size === 'small' && ownerState.variant === 'outlined' && {
      padding: '3px 9px',
      fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === 'large' && ownerState.variant === 'outlined' && {
      padding: '7px 21px',
      fontSize: theme.typography.pxToRem(15)
    }, ownerState.size === 'small' && ownerState.variant === 'contained' && {
      padding: '4px 10px',
      fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === 'large' && ownerState.variant === 'contained' && {
      padding: '8px 22px',
      fontSize: theme.typography.pxToRem(15)
    }, ownerState.fullWidth && {
      width: '100%'
    });
  }, function (_ref2) {
    var _ref3;

    var ownerState = _ref2.ownerState;
    return ownerState.disableElevation && (_ref3 = {
      boxShadow: 'none',
      '&:hover': {
        boxShadow: 'none'
      }
    }, _defineProperty$1(_ref3, "&.".concat(buttonClasses$1.focusVisible), {
      boxShadow: 'none'
    }), _defineProperty$1(_ref3, '&:active', {
      boxShadow: 'none'
    }), _defineProperty$1(_ref3, "&.".concat(buttonClasses$1.disabled), {
      boxShadow: 'none'
    }), _ref3);
  });
  var ButtonStartIcon = styled$1('span', {
    name: 'MuiButton',
    slot: 'StartIcon',
    overridesResolver: function overridesResolver(props, styles) {
      var ownerState = props.ownerState;
      return [styles.startIcon, styles["iconSize".concat(capitalize(ownerState.size))]];
    }
  })(function (_ref4) {
    var ownerState = _ref4.ownerState;
    return _extends$1({
      display: 'inherit',
      marginRight: 8,
      marginLeft: -4
    }, ownerState.size === 'small' && {
      marginLeft: -2
    }, commonIconStyles(ownerState));
  });
  var ButtonEndIcon = styled$1('span', {
    name: 'MuiButton',
    slot: 'EndIcon',
    overridesResolver: function overridesResolver(props, styles) {
      var ownerState = props.ownerState;
      return [styles.endIcon, styles["iconSize".concat(capitalize(ownerState.size))]];
    }
  })(function (_ref5) {
    var ownerState = _ref5.ownerState;
    return _extends$1({
      display: 'inherit',
      marginRight: -4,
      marginLeft: 8
    }, ownerState.size === 'small' && {
      marginRight: -2
    }, commonIconStyles(ownerState));
  });
  var Button = /*#__PURE__*/react.exports.forwardRef(function Button(inProps, ref) {
    // props priority: `inProps` > `contextProps` > `themeDefaultProps`
    var contextProps = react.exports.useContext(ButtonGroupContext$1);
    var resolvedProps = resolveProps(contextProps, inProps);
    var props = useThemeProps({
      props: resolvedProps,
      name: 'MuiButton'
    });

    var children = props.children,
        _props$color = props.color,
        color = _props$color === void 0 ? 'primary' : _props$color,
        _props$component = props.component,
        component = _props$component === void 0 ? 'button' : _props$component,
        className = props.className,
        _props$disabled = props.disabled,
        disabled = _props$disabled === void 0 ? false : _props$disabled,
        _props$disableElevati = props.disableElevation,
        disableElevation = _props$disableElevati === void 0 ? false : _props$disableElevati,
        _props$disableFocusRi = props.disableFocusRipple,
        disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi,
        endIconProp = props.endIcon,
        focusVisibleClassName = props.focusVisibleClassName,
        _props$fullWidth = props.fullWidth,
        fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
        _props$size = props.size,
        size = _props$size === void 0 ? 'medium' : _props$size,
        startIconProp = props.startIcon,
        type = props.type,
        _props$variant = props.variant,
        variant = _props$variant === void 0 ? 'text' : _props$variant,
        other = _objectWithoutPropertiesLoose(props, _excluded$c);

    var ownerState = _extends$1({}, props, {
      color: color,
      component: component,
      disabled: disabled,
      disableElevation: disableElevation,
      disableFocusRipple: disableFocusRipple,
      fullWidth: fullWidth,
      size: size,
      type: type,
      variant: variant
    });

    var classes = useUtilityClasses$8(ownerState);

    var startIcon = startIconProp && /*#__PURE__*/jsxRuntime.exports.jsx(ButtonStartIcon, {
      className: classes.startIcon,
      ownerState: ownerState,
      children: startIconProp
    });

    var endIcon = endIconProp && /*#__PURE__*/jsxRuntime.exports.jsx(ButtonEndIcon, {
      className: classes.endIcon,
      ownerState: ownerState,
      children: endIconProp
    });

    return /*#__PURE__*/jsxRuntime.exports.jsxs(ButtonRoot, _extends$1({
      ownerState: ownerState,
      className: clsx(className, contextProps.className),
      component: component,
      disabled: disabled,
      focusRipple: !disableFocusRipple,
      focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
      ref: ref,
      type: type
    }, other, {
      classes: classes,
      children: [startIcon, children, endIcon]
    }));
  });
  var Button$1 = Button;

  function getContainerUtilityClass(slot) {
    return generateUtilityClass('MuiContainer', slot);
  }
  generateUtilityClasses('MuiContainer', ['root', 'disableGutters', 'fixed', 'maxWidthXs', 'maxWidthSm', 'maxWidthMd', 'maxWidthLg', 'maxWidthXl']);

  var _excluded$b = ["className", "component", "disableGutters", "fixed", "maxWidth"];

  var useUtilityClasses$7 = function useUtilityClasses(ownerState) {
    var classes = ownerState.classes,
        fixed = ownerState.fixed,
        disableGutters = ownerState.disableGutters,
        maxWidth = ownerState.maxWidth;
    var slots = {
      root: ['root', maxWidth && "maxWidth".concat(capitalize(String(maxWidth))), fixed && 'fixed', disableGutters && 'disableGutters']
    };
    return composeClasses(slots, getContainerUtilityClass, classes);
  };

  var ContainerRoot = styled$1('div', {
    name: 'MuiContainer',
    slot: 'Root',
    overridesResolver: function overridesResolver(props, styles) {
      var ownerState = props.ownerState;
      return [styles.root, styles["maxWidth".concat(capitalize(String(ownerState.maxWidth)))], ownerState.fixed && styles.fixed, ownerState.disableGutters && styles.disableGutters];
    }
  })(function (_ref) {
    var theme = _ref.theme,
        ownerState = _ref.ownerState;
    return _extends$1({
      width: '100%',
      marginLeft: 'auto',
      boxSizing: 'border-box',
      marginRight: 'auto',
      display: 'block'
    }, !ownerState.disableGutters && _defineProperty$1({
      paddingLeft: theme.spacing(2),
      paddingRight: theme.spacing(2)
    }, theme.breakpoints.up('sm'), {
      paddingLeft: theme.spacing(3),
      paddingRight: theme.spacing(3)
    }));
  }, function (_ref3) {
    var theme = _ref3.theme,
        ownerState = _ref3.ownerState;
    return ownerState.fixed && Object.keys(theme.breakpoints.values).reduce(function (acc, breakpoint) {
      var value = theme.breakpoints.values[breakpoint];

      if (value !== 0) {
        acc[theme.breakpoints.up(breakpoint)] = {
          maxWidth: "".concat(value).concat(theme.breakpoints.unit)
        };
      }

      return acc;
    }, {});
  }, function (_ref4) {
    var theme = _ref4.theme,
        ownerState = _ref4.ownerState;
    return _extends$1({}, ownerState.maxWidth === 'xs' && _defineProperty$1({}, theme.breakpoints.up('xs'), {
      maxWidth: Math.max(theme.breakpoints.values.xs, 444)
    }), ownerState.maxWidth && ownerState.maxWidth !== 'xs' && _defineProperty$1({}, theme.breakpoints.up(ownerState.maxWidth), {
      maxWidth: "".concat(theme.breakpoints.values[ownerState.maxWidth]).concat(theme.breakpoints.unit)
    }));
  });
  var Container = /*#__PURE__*/react.exports.forwardRef(function Container(inProps, ref) {
    var props = useThemeProps({
      props: inProps,
      name: 'MuiContainer'
    });

    var className = props.className,
        _props$component = props.component,
        component = _props$component === void 0 ? 'div' : _props$component,
        _props$disableGutters = props.disableGutters,
        disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,
        _props$fixed = props.fixed,
        fixed = _props$fixed === void 0 ? false : _props$fixed,
        _props$maxWidth = props.maxWidth,
        maxWidth = _props$maxWidth === void 0 ? 'lg' : _props$maxWidth,
        other = _objectWithoutPropertiesLoose(props, _excluded$b);

    var ownerState = _extends$1({}, props, {
      component: component,
      disableGutters: disableGutters,
      fixed: fixed,
      maxWidth: maxWidth
    });

    var classes = useUtilityClasses$7(ownerState);
    return /*#__PURE__*/jsxRuntime.exports.jsx(ContainerRoot, _extends$1({
      as: component,
      ownerState: ownerState,
      className: clsx(classes.root, className),
      ref: ref
    }, other));
  });
  var Container$1 = Container;

  var html$3 = function html(theme, enableColorScheme) {
    return _extends$1({
      WebkitFontSmoothing: 'antialiased',
      // Antialiasing.
      MozOsxFontSmoothing: 'grayscale',
      // Antialiasing.
      // Change from `box-sizing: content-box` so that `width`
      // is not affected by `padding` or `border`.
      boxSizing: 'border-box',
      // Fix font resize problem in iOS
      WebkitTextSizeAdjust: '100%'
    }, enableColorScheme && {
      colorScheme: theme.palette.mode
    });
  };
  var body = function body(theme) {
    return _extends$1({
      color: theme.palette.text.primary
    }, theme.typography.body1, {
      backgroundColor: theme.palette.background["default"],
      '@media print': {
        // Save printer ink.
        backgroundColor: theme.palette.common.white
      }
    });
  };

  var _styles = function styles(theme) {
    var enableColorScheme = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    var _theme$components, _theme$components$Mui;

    var defaultStyles = {
      html: html$3(theme, enableColorScheme),
      '*, *::before, *::after': {
        boxSizing: 'inherit'
      },
      'strong, b': {
        fontWeight: theme.typography.fontWeightBold
      },
      body: _extends$1({
        margin: 0
      }, body(theme), {
        // Add support for document.body.requestFullScreen().
        // Other elements, if background transparent, are not supported.
        '&::backdrop': {
          backgroundColor: theme.palette.background["default"]
        }
      })
    };
    var themeOverrides = (_theme$components = theme.components) == null ? void 0 : (_theme$components$Mui = _theme$components.MuiCssBaseline) == null ? void 0 : _theme$components$Mui.styleOverrides;

    if (themeOverrides) {
      defaultStyles = [defaultStyles, themeOverrides];
    }

    return defaultStyles;
  };

  function CssBaseline(inProps) {
    var props = useThemeProps({
      props: inProps,
      name: 'MuiCssBaseline'
    });
    var children = props.children,
        _props$enableColorSch = props.enableColorScheme,
        enableColorScheme = _props$enableColorSch === void 0 ? false : _props$enableColorSch;
    return /*#__PURE__*/jsxRuntime.exports.jsxs(react.exports.Fragment, {
      children: [/*#__PURE__*/jsxRuntime.exports.jsx(GlobalStyles, {
        styles: function styles(theme) {
          return _styles(theme, enableColorScheme);
        }
      }), children]
    });
  }

  var _excluded$a = ["BackdropComponent", "closeAfterTransition", "children", "components", "componentsProps", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted"];

  var extendUtilityClasses = function extendUtilityClasses(ownerState) {
    return ownerState.classes;
  };

  var ModalRoot = styled$1('div', {
    name: 'MuiModal',
    slot: 'Root',
    overridesResolver: function overridesResolver(props, styles) {
      var ownerState = props.ownerState;
      return [styles.root, !ownerState.open && ownerState.exited && styles.hidden];
    }
  })(function (_ref) {
    var theme = _ref.theme,
        ownerState = _ref.ownerState;
    return _extends$1({
      position: 'fixed',
      zIndex: theme.zIndex.modal,
      right: 0,
      bottom: 0,
      top: 0,
      left: 0
    }, !ownerState.open && ownerState.exited && {
      visibility: 'hidden'
    });
  });
  var ModalBackdrop = styled$1(Backdrop$1, {
    name: 'MuiModal',
    slot: 'Backdrop',
    overridesResolver: function overridesResolver(props, styles) {
      return styles.backdrop;
    }
  })({
    zIndex: -1
  });
  /**
   * Modal is a lower-level construct that is leveraged by the following components:
   *
   * - [Dialog](/api/dialog/)
   * - [Drawer](/api/drawer/)
   * - [Menu](/api/menu/)
   * - [Popover](/api/popover/)
   *
   * If you are creating a modal dialog, you probably want to use the [Dialog](/api/dialog/) component
   * rather than directly using Modal.
   *
   * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).
   */

  var Modal = /*#__PURE__*/react.exports.forwardRef(function Modal(inProps, ref) {
    var _componentsProps$root;

    var props = useThemeProps({
      name: 'MuiModal',
      props: inProps
    });

    var _props$BackdropCompon = props.BackdropComponent,
        BackdropComponent = _props$BackdropCompon === void 0 ? ModalBackdrop : _props$BackdropCompon,
        _props$closeAfterTran = props.closeAfterTransition,
        closeAfterTransition = _props$closeAfterTran === void 0 ? false : _props$closeAfterTran,
        children = props.children,
        _props$components = props.components,
        components = _props$components === void 0 ? {} : _props$components,
        _props$componentsProp = props.componentsProps,
        componentsProps = _props$componentsProp === void 0 ? {} : _props$componentsProp,
        _props$disableAutoFoc = props.disableAutoFocus,
        disableAutoFocus = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc,
        _props$disableEnforce = props.disableEnforceFocus,
        disableEnforceFocus = _props$disableEnforce === void 0 ? false : _props$disableEnforce,
        _props$disableEscapeK = props.disableEscapeKeyDown,
        disableEscapeKeyDown = _props$disableEscapeK === void 0 ? false : _props$disableEscapeK,
        _props$disablePortal = props.disablePortal,
        disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal,
        _props$disableRestore = props.disableRestoreFocus,
        disableRestoreFocus = _props$disableRestore === void 0 ? false : _props$disableRestore,
        _props$disableScrollL = props.disableScrollLock,
        disableScrollLock = _props$disableScrollL === void 0 ? false : _props$disableScrollL,
        _props$hideBackdrop = props.hideBackdrop,
        hideBackdrop = _props$hideBackdrop === void 0 ? false : _props$hideBackdrop,
        _props$keepMounted = props.keepMounted,
        keepMounted = _props$keepMounted === void 0 ? false : _props$keepMounted,
        other = _objectWithoutPropertiesLoose(props, _excluded$a);

    var _React$useState = react.exports.useState(true),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        exited = _React$useState2[0],
        setExited = _React$useState2[1];

    var commonProps = {
      closeAfterTransition: closeAfterTransition,
      disableAutoFocus: disableAutoFocus,
      disableEnforceFocus: disableEnforceFocus,
      disableEscapeKeyDown: disableEscapeKeyDown,
      disablePortal: disablePortal,
      disableRestoreFocus: disableRestoreFocus,
      disableScrollLock: disableScrollLock,
      hideBackdrop: hideBackdrop,
      keepMounted: keepMounted
    };

    var ownerState = _extends$1({}, props, commonProps, {
      exited: exited
    });

    var classes = extendUtilityClasses(ownerState);
    return /*#__PURE__*/jsxRuntime.exports.jsx(ModalUnstyled$1, _extends$1({
      components: _extends$1({
        Root: ModalRoot
      }, components),
      componentsProps: {
        root: _extends$1({}, componentsProps.root, (!components.Root || !isHostComponent(components.Root)) && {
          ownerState: _extends$1({}, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.ownerState)
        })
      },
      BackdropComponent: BackdropComponent,
      onTransitionEnter: function onTransitionEnter() {
        return setExited(false);
      },
      onTransitionExited: function onTransitionExited() {
        return setExited(true);
      },
      ref: ref
    }, other, {
      classes: classes
    }, commonProps, {
      children: children
    }));
  });
  var Modal$1 = Modal;

  var dividerClasses = generateUtilityClasses('MuiDivider', ['root', 'absolute', 'fullWidth', 'inset', 'middle', 'flexItem', 'light', 'vertical', 'withChildren', 'withChildrenVertical', 'textAlignRight', 'textAlignLeft', 'wrapper', 'wrapperVertical']);
  var dividerClasses$1 = dividerClasses;

  /**
   * @ignore - internal component.
   */

  var GridContext = /*#__PURE__*/react.exports.createContext();

  var GridContext$1 = GridContext;

  function getGridUtilityClass(slot) {
    return generateUtilityClass('MuiGrid', slot);
  }
  var SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
  var DIRECTIONS = ['column-reverse', 'column', 'row-reverse', 'row'];
  var WRAPS = ['nowrap', 'wrap-reverse', 'wrap'];
  var GRID_SIZES = ['auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
  var gridClasses = generateUtilityClasses('MuiGrid', ['root', 'container', 'item', 'zeroMinWidth'].concat(_toConsumableArray(SPACINGS.map(function (spacing) {
    return "spacing-xs-".concat(spacing);
  })), _toConsumableArray(DIRECTIONS.map(function (direction) {
    return "direction-xs-".concat(direction);
  })), _toConsumableArray(WRAPS.map(function (wrap) {
    return "wrap-xs-".concat(wrap);
  })), _toConsumableArray(GRID_SIZES.map(function (size) {
    return "grid-xs-".concat(size);
  })), _toConsumableArray(GRID_SIZES.map(function (size) {
    return "grid-sm-".concat(size);
  })), _toConsumableArray(GRID_SIZES.map(function (size) {
    return "grid-md-".concat(size);
  })), _toConsumableArray(GRID_SIZES.map(function (size) {
    return "grid-lg-".concat(size);
  })), _toConsumableArray(GRID_SIZES.map(function (size) {
    return "grid-xl-".concat(size);
  }))));

  var _excluded$9 = ["className", "columns", "columnSpacing", "component", "container", "direction", "item", "lg", "md", "rowSpacing", "sm", "spacing", "wrap", "xl", "xs", "zeroMinWidth"]; // A grid component using the following libs as inspiration.

  function getOffset(val) {
    var parse = parseFloat(val);
    return "".concat(parse).concat(String(val).replace(String(parse), '') || 'px');
  }

  function generateGrid(_ref) {
    var theme = _ref.theme,
        ownerState = _ref.ownerState;
    var size;
    return theme.breakpoints.keys.reduce(function (globalStyles, breakpoint) {
      // Use side effect over immutability for better performance.
      var styles = {};

      if (ownerState[breakpoint]) {
        size = ownerState[breakpoint];
      }

      if (!size) {
        return globalStyles;
      }

      if (size === true) {
        // For the auto layouting
        styles = {
          flexBasis: 0,
          flexGrow: 1,
          maxWidth: '100%'
        };
      } else if (size === 'auto') {
        styles = {
          flexBasis: 'auto',
          flexGrow: 0,
          flexShrink: 0,
          maxWidth: 'none',
          width: 'auto'
        };
      } else {
        var columnsBreakpointValues = resolveBreakpointValues({
          values: ownerState.columns,
          breakpoints: theme.breakpoints.values
        });
        var columnValue = _typeof(columnsBreakpointValues) === 'object' ? columnsBreakpointValues[breakpoint] : columnsBreakpointValues;

        if (columnValue === undefined || columnValue === null) {
          return globalStyles;
        } // Keep 7 significant numbers.


        var width = "".concat(Math.round(size / columnValue * 10e7) / 10e5, "%");
        var more = {};

        if (ownerState.container && ownerState.item && ownerState.columnSpacing !== 0) {
          var themeSpacing = theme.spacing(ownerState.columnSpacing);

          if (themeSpacing !== '0px') {
            var fullWidth = "calc(".concat(width, " + ").concat(getOffset(themeSpacing), ")");
            more = {
              flexBasis: fullWidth,
              maxWidth: fullWidth
            };
          }
        } // Close to the bootstrap implementation:
        // https://github.com/twbs/bootstrap/blob/8fccaa2439e97ec72a4b7dc42ccc1f649790adb0/scss/mixins/_grid.scss#L41


        styles = _extends$1({
          flexBasis: width,
          flexGrow: 0,
          maxWidth: width
        }, more);
      } // No need for a media query for the first size.


      if (theme.breakpoints.values[breakpoint] === 0) {
        Object.assign(globalStyles, styles);
      } else {
        globalStyles[theme.breakpoints.up(breakpoint)] = styles;
      }

      return globalStyles;
    }, {});
  }
  function generateDirection(_ref2) {
    var theme = _ref2.theme,
        ownerState = _ref2.ownerState;
    var directionValues = resolveBreakpointValues({
      values: ownerState.direction,
      breakpoints: theme.breakpoints.values
    });
    return handleBreakpoints({
      theme: theme
    }, directionValues, function (propValue) {
      var output = {
        flexDirection: propValue
      };

      if (propValue.indexOf('column') === 0) {
        output["& > .".concat(gridClasses.item)] = {
          maxWidth: 'none'
        };
      }

      return output;
    });
  }
  function generateRowGap(_ref3) {
    var theme = _ref3.theme,
        ownerState = _ref3.ownerState;
    var container = ownerState.container,
        rowSpacing = ownerState.rowSpacing;
    var styles = {};

    if (container && rowSpacing !== 0) {
      var rowSpacingValues = resolveBreakpointValues({
        values: rowSpacing,
        breakpoints: theme.breakpoints.values
      });
      styles = handleBreakpoints({
        theme: theme
      }, rowSpacingValues, function (propValue) {
        var themeSpacing = theme.spacing(propValue);

        if (themeSpacing !== '0px') {
          return _defineProperty$1({
            marginTop: "-".concat(getOffset(themeSpacing))
          }, "& > .".concat(gridClasses.item), {
            paddingTop: getOffset(themeSpacing)
          });
        }

        return {};
      });
    }

    return styles;
  }
  function generateColumnGap(_ref5) {
    var theme = _ref5.theme,
        ownerState = _ref5.ownerState;
    var container = ownerState.container,
        columnSpacing = ownerState.columnSpacing;
    var styles = {};

    if (container && columnSpacing !== 0) {
      var columnSpacingValues = resolveBreakpointValues({
        values: columnSpacing,
        breakpoints: theme.breakpoints.values
      });
      styles = handleBreakpoints({
        theme: theme
      }, columnSpacingValues, function (propValue) {
        var themeSpacing = theme.spacing(propValue);

        if (themeSpacing !== '0px') {
          return _defineProperty$1({
            width: "calc(100% + ".concat(getOffset(themeSpacing), ")"),
            marginLeft: "-".concat(getOffset(themeSpacing))
          }, "& > .".concat(gridClasses.item), {
            paddingLeft: getOffset(themeSpacing)
          });
        }

        return {};
      });
    }

    return styles;
  }
  function resolveSpacingClasses(spacing, container) {
    var styles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    // in case of grid item or undefined/null or `spacing` <= 0
    if (!container || !spacing || spacing <= 0) {
      return [];
    } // in case of string/number `spacing`


    if (typeof spacing === 'string' && !Number.isNaN(Number(spacing)) || typeof spacing === 'number') {
      return [styles["spacing-xs-".concat(String(spacing))] || "spacing-xs-".concat(String(spacing))];
    } // in case of object `spacing`


    var xs = spacing.xs,
        sm = spacing.sm,
        md = spacing.md,
        lg = spacing.lg,
        xl = spacing.xl;
    return [Number(xs) > 0 && (styles["spacing-xs-".concat(String(xs))] || "spacing-xs-".concat(String(xs))), Number(sm) > 0 && (styles["spacing-sm-".concat(String(sm))] || "spacing-sm-".concat(String(sm))), Number(md) > 0 && (styles["spacing-md-".concat(String(md))] || "spacing-md-".concat(String(md))), Number(lg) > 0 && (styles["spacing-lg-".concat(String(lg))] || "spacing-lg-".concat(String(lg))), Number(xl) > 0 && (styles["spacing-xl-".concat(String(xl))] || "spacing-xl-".concat(String(xl)))];
  } // Default CSS values
  // flex: '0 1 auto',
  // flexDirection: 'row',
  // alignItems: 'flex-start',
  // flexWrap: 'nowrap',
  // justifyContent: 'flex-start',

  var GridRoot = styled$1('div', {
    name: 'MuiGrid',
    slot: 'Root',
    overridesResolver: function overridesResolver(props, styles) {
      var _props$ownerState = props.ownerState,
          container = _props$ownerState.container,
          direction = _props$ownerState.direction,
          item = _props$ownerState.item,
          lg = _props$ownerState.lg,
          md = _props$ownerState.md,
          sm = _props$ownerState.sm,
          spacing = _props$ownerState.spacing,
          wrap = _props$ownerState.wrap,
          xl = _props$ownerState.xl,
          xs = _props$ownerState.xs,
          zeroMinWidth = _props$ownerState.zeroMinWidth;
      return [styles.root, container && styles.container, item && styles.item, zeroMinWidth && styles.zeroMinWidth].concat(_toConsumableArray(resolveSpacingClasses(spacing, container, styles)), [direction !== 'row' && styles["direction-xs-".concat(String(direction))], wrap !== 'wrap' && styles["wrap-xs-".concat(String(wrap))], xs !== false && styles["grid-xs-".concat(String(xs))], sm !== false && styles["grid-sm-".concat(String(sm))], md !== false && styles["grid-md-".concat(String(md))], lg !== false && styles["grid-lg-".concat(String(lg))], xl !== false && styles["grid-xl-".concat(String(xl))]]);
    }
  })(function (_ref7) {
    var ownerState = _ref7.ownerState;
    return _extends$1({
      boxSizing: 'border-box'
    }, ownerState.container && {
      display: 'flex',
      flexWrap: 'wrap',
      width: '100%'
    }, ownerState.item && {
      margin: 0 // For instance, it's useful when used with a `figure` element.

    }, ownerState.zeroMinWidth && {
      minWidth: 0
    }, ownerState.wrap !== 'wrap' && {
      flexWrap: ownerState.wrap
    });
  }, generateDirection, generateRowGap, generateColumnGap, generateGrid);

  var useUtilityClasses$6 = function useUtilityClasses(ownerState) {
    var classes = ownerState.classes,
        container = ownerState.container,
        direction = ownerState.direction,
        item = ownerState.item,
        lg = ownerState.lg,
        md = ownerState.md,
        sm = ownerState.sm,
        spacing = ownerState.spacing,
        wrap = ownerState.wrap,
        xl = ownerState.xl,
        xs = ownerState.xs,
        zeroMinWidth = ownerState.zeroMinWidth;
    var slots = {
      root: ['root', container && 'container', item && 'item', zeroMinWidth && 'zeroMinWidth'].concat(_toConsumableArray(resolveSpacingClasses(spacing, container)), [direction !== 'row' && "direction-xs-".concat(String(direction)), wrap !== 'wrap' && "wrap-xs-".concat(String(wrap)), xs !== false && "grid-xs-".concat(String(xs)), sm !== false && "grid-sm-".concat(String(sm)), md !== false && "grid-md-".concat(String(md)), lg !== false && "grid-lg-".concat(String(lg)), xl !== false && "grid-xl-".concat(String(xl))])
    };
    return composeClasses(slots, getGridUtilityClass, classes);
  };

  var Grid = /*#__PURE__*/react.exports.forwardRef(function Grid(inProps, ref) {
    var themeProps = useThemeProps({
      props: inProps,
      name: 'MuiGrid'
    });
    var props = extendSxProp(themeProps);

    var className = props.className,
        columnsProp = props.columns,
        columnSpacingProp = props.columnSpacing,
        _props$component = props.component,
        component = _props$component === void 0 ? 'div' : _props$component,
        _props$container = props.container,
        container = _props$container === void 0 ? false : _props$container,
        _props$direction = props.direction,
        direction = _props$direction === void 0 ? 'row' : _props$direction,
        _props$item = props.item,
        item = _props$item === void 0 ? false : _props$item,
        _props$lg = props.lg,
        lg = _props$lg === void 0 ? false : _props$lg,
        _props$md = props.md,
        md = _props$md === void 0 ? false : _props$md,
        rowSpacingProp = props.rowSpacing,
        _props$sm = props.sm,
        sm = _props$sm === void 0 ? false : _props$sm,
        _props$spacing = props.spacing,
        spacing = _props$spacing === void 0 ? 0 : _props$spacing,
        _props$wrap = props.wrap,
        wrap = _props$wrap === void 0 ? 'wrap' : _props$wrap,
        _props$xl = props.xl,
        xl = _props$xl === void 0 ? false : _props$xl,
        _props$xs = props.xs,
        xs = _props$xs === void 0 ? false : _props$xs,
        _props$zeroMinWidth = props.zeroMinWidth,
        zeroMinWidth = _props$zeroMinWidth === void 0 ? false : _props$zeroMinWidth,
        other = _objectWithoutPropertiesLoose(props, _excluded$9);

    var rowSpacing = rowSpacingProp || spacing;
    var columnSpacing = columnSpacingProp || spacing;
    var columnsContext = react.exports.useContext(GridContext$1); // columns set with default breakpoint unit of 12

    var columns = container ? columnsProp || 12 : columnsContext;

    var ownerState = _extends$1({}, props, {
      columns: columns,
      container: container,
      direction: direction,
      item: item,
      lg: lg,
      md: md,
      sm: sm,
      rowSpacing: rowSpacing,
      columnSpacing: columnSpacing,
      wrap: wrap,
      xl: xl,
      xs: xs,
      zeroMinWidth: zeroMinWidth
    });

    var classes = useUtilityClasses$6(ownerState);
    return /*#__PURE__*/jsxRuntime.exports.jsx(GridContext$1.Provider, {
      value: columns,
      children: /*#__PURE__*/jsxRuntime.exports.jsx(GridRoot, _extends$1({
        ownerState: ownerState,
        className: clsx(classes.root, className),
        as: component,
        ref: ref
      }, other))
    });
  });

  var Grid$1 = Grid;

  var _excluded$8 = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];

  function getScale(value) {
    return "scale(".concat(value, ", ").concat(Math.pow(value, 2), ")");
  }

  var styles = {
    entering: {
      opacity: 1,
      transform: getScale(1)
    },
    entered: {
      opacity: 1,
      transform: 'none'
    }
  };
  /**
   * The Grow transition is used by the [Tooltip](/components/tooltips/) and
   * [Popover](/components/popover/) components.
   * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
   */

  var Grow = /*#__PURE__*/react.exports.forwardRef(function Grow(props, ref) {
    var addEndListener = props.addEndListener,
        _props$appear = props.appear,
        appear = _props$appear === void 0 ? true : _props$appear,
        _children = props.children,
        easing = props.easing,
        inProp = props["in"],
        onEnter = props.onEnter,
        onEntered = props.onEntered,
        onEntering = props.onEntering,
        onExit = props.onExit,
        onExited = props.onExited,
        onExiting = props.onExiting,
        style = props.style,
        _props$timeout = props.timeout,
        timeout = _props$timeout === void 0 ? 'auto' : _props$timeout,
        _props$TransitionComp = props.TransitionComponent,
        TransitionComponent = _props$TransitionComp === void 0 ? Transition$1 : _props$TransitionComp,
        other = _objectWithoutPropertiesLoose(props, _excluded$8);

    var timer = react.exports.useRef();
    var autoTimeout = react.exports.useRef();
    var theme = useTheme();
    var nodeRef = react.exports.useRef(null);
    var foreignRef = useForkRef(_children.ref, ref);
    var handleRef = useForkRef(nodeRef, foreignRef);

    var normalizedTransitionCallback = function normalizedTransitionCallback(callback) {
      return function (maybeIsAppearing) {
        if (callback) {
          var node = nodeRef.current; // onEnterXxx and onExitXxx callbacks have a different arguments.length value.

          if (maybeIsAppearing === undefined) {
            callback(node);
          } else {
            callback(node, maybeIsAppearing);
          }
        }
      };
    };

    var handleEntering = normalizedTransitionCallback(onEntering);
    var handleEnter = normalizedTransitionCallback(function (node, isAppearing) {
      reflow(node); // So the animation always start from the start.

      var _getTransitionProps = getTransitionProps({
        style: style,
        timeout: timeout,
        easing: easing
      }, {
        mode: 'enter'
      }),
          transitionDuration = _getTransitionProps.duration,
          delay = _getTransitionProps.delay,
          transitionTimingFunction = _getTransitionProps.easing;

      var duration;

      if (timeout === 'auto') {
        duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
        autoTimeout.current = duration;
      } else {
        duration = transitionDuration;
      }

      node.style.transition = [theme.transitions.create('opacity', {
        duration: duration,
        delay: delay
      }), theme.transitions.create('transform', {
        duration: duration * 0.666,
        delay: delay,
        easing: transitionTimingFunction
      })].join(',');

      if (onEnter) {
        onEnter(node, isAppearing);
      }
    });
    var handleEntered = normalizedTransitionCallback(onEntered);
    var handleExiting = normalizedTransitionCallback(onExiting);
    var handleExit = normalizedTransitionCallback(function (node) {
      var _getTransitionProps2 = getTransitionProps({
        style: style,
        timeout: timeout,
        easing: easing
      }, {
        mode: 'exit'
      }),
          transitionDuration = _getTransitionProps2.duration,
          delay = _getTransitionProps2.delay,
          transitionTimingFunction = _getTransitionProps2.easing;

      var duration;

      if (timeout === 'auto') {
        duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
        autoTimeout.current = duration;
      } else {
        duration = transitionDuration;
      }

      node.style.transition = [theme.transitions.create('opacity', {
        duration: duration,
        delay: delay
      }), theme.transitions.create('transform', {
        duration: duration * 0.666,
        delay: delay || duration * 0.333,
        easing: transitionTimingFunction
      })].join(',');
      node.style.opacity = '0';
      node.style.transform = getScale(0.75);

      if (onExit) {
        onExit(node);
      }
    });
    var handleExited = normalizedTransitionCallback(onExited);

    var handleAddEndListener = function handleAddEndListener(next) {
      if (timeout === 'auto') {
        timer.current = setTimeout(next, autoTimeout.current || 0);
      }

      if (addEndListener) {
        // Old call signature before `react-transition-group` implemented `nodeRef`
        addEndListener(nodeRef.current, next);
      }
    };

    react.exports.useEffect(function () {
      return function () {
        clearTimeout(timer.current);
      };
    }, []);
    return /*#__PURE__*/jsxRuntime.exports.jsx(TransitionComponent, _extends$1({
      appear: appear,
      "in": inProp,
      nodeRef: nodeRef,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      timeout: timeout === 'auto' ? null : timeout
    }, other, {
      children: function children(state, childProps) {
        return /*#__PURE__*/react.exports.cloneElement(_children, _extends$1({
          style: _extends$1({
            opacity: 0,
            transform: getScale(0.75),
            visibility: state === 'exited' && !inProp ? 'hidden' : undefined
          }, styles[state], style, _children.props.style),
          ref: handleRef
        }, childProps));
      }
    }));
  });
  Grow.muiSupportAuto = true;
  var Grow$1 = Grow;

  /**
   * @ignore - internal component.
   */

  var ListContext = /*#__PURE__*/react.exports.createContext({});

  var ListContext$1 = ListContext;

  function getListUtilityClass(slot) {
    return generateUtilityClass('MuiList', slot);
  }
  generateUtilityClasses('MuiList', ['root', 'padding', 'dense', 'subheader']);

  var _excluded$7 = ["children", "className", "component", "dense", "disablePadding", "subheader"];

  var useUtilityClasses$5 = function useUtilityClasses(ownerState) {
    var classes = ownerState.classes,
        disablePadding = ownerState.disablePadding,
        dense = ownerState.dense,
        subheader = ownerState.subheader;
    var slots = {
      root: ['root', !disablePadding && 'padding', dense && 'dense', subheader && 'subheader']
    };
    return composeClasses(slots, getListUtilityClass, classes);
  };

  var ListRoot = styled$1('ul', {
    name: 'MuiList',
    slot: 'Root',
    overridesResolver: function overridesResolver(props, styles) {
      var ownerState = props.ownerState;
      return [styles.root, !ownerState.disablePadding && styles.padding, ownerState.dense && styles.dense, ownerState.subheader && styles.subheader];
    }
  })(function (_ref) {
    var ownerState = _ref.ownerState;
    return _extends$1({
      listStyle: 'none',
      margin: 0,
      padding: 0,
      position: 'relative'
    }, !ownerState.disablePadding && {
      paddingTop: 8,
      paddingBottom: 8
    }, ownerState.subheader && {
      paddingTop: 0
    });
  });
  var List = /*#__PURE__*/react.exports.forwardRef(function List(inProps, ref) {
    var props = useThemeProps({
      props: inProps,
      name: 'MuiList'
    });

    var children = props.children,
        className = props.className,
        _props$component = props.component,
        component = _props$component === void 0 ? 'ul' : _props$component,
        _props$dense = props.dense,
        dense = _props$dense === void 0 ? false : _props$dense,
        _props$disablePadding = props.disablePadding,
        disablePadding = _props$disablePadding === void 0 ? false : _props$disablePadding,
        subheader = props.subheader,
        other = _objectWithoutPropertiesLoose(props, _excluded$7);

    var context = react.exports.useMemo(function () {
      return {
        dense: dense
      };
    }, [dense]);

    var ownerState = _extends$1({}, props, {
      component: component,
      dense: dense,
      disablePadding: disablePadding
    });

    var classes = useUtilityClasses$5(ownerState);
    return /*#__PURE__*/jsxRuntime.exports.jsx(ListContext$1.Provider, {
      value: context,
      children: /*#__PURE__*/jsxRuntime.exports.jsxs(ListRoot, _extends$1({
        as: component,
        className: clsx(classes.root, className),
        ref: ref,
        ownerState: ownerState
      }, other, {
        children: [subheader, children]
      }))
    });
  });
  var List$1 = List;

  var listItemIconClasses = generateUtilityClasses('MuiListItemIcon', ['root', 'alignItemsFlexStart']);
  var listItemIconClasses$1 = listItemIconClasses;

  var listItemTextClasses = generateUtilityClasses('MuiListItemText', ['root', 'multiline', 'dense', 'inset', 'primary', 'secondary']);
  var listItemTextClasses$1 = listItemTextClasses;

  var _excluded$6 = ["actions", "autoFocus", "autoFocusItem", "children", "className", "disabledItemsFocusable", "disableListWrap", "onKeyDown", "variant"];

  function nextItem(list, item, disableListWrap) {
    if (list === item) {
      return list.firstChild;
    }

    if (item && item.nextElementSibling) {
      return item.nextElementSibling;
    }

    return disableListWrap ? null : list.firstChild;
  }

  function previousItem(list, item, disableListWrap) {
    if (list === item) {
      return disableListWrap ? list.firstChild : list.lastChild;
    }

    if (item && item.previousElementSibling) {
      return item.previousElementSibling;
    }

    return disableListWrap ? null : list.lastChild;
  }

  function textCriteriaMatches(nextFocus, textCriteria) {
    if (textCriteria === undefined) {
      return true;
    }

    var text = nextFocus.innerText;

    if (text === undefined) {
      // jsdom doesn't support innerText
      text = nextFocus.textContent;
    }

    text = text.trim().toLowerCase();

    if (text.length === 0) {
      return false;
    }

    if (textCriteria.repeating) {
      return text[0] === textCriteria.keys[0];
    }

    return text.indexOf(textCriteria.keys.join('')) === 0;
  }

  function moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, traversalFunction, textCriteria) {
    var wrappedOnce = false;
    var nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);

    while (nextFocus) {
      // Prevent infinite loop.
      if (nextFocus === list.firstChild) {
        if (wrappedOnce) {
          return false;
        }

        wrappedOnce = true;
      } // Same logic as useAutocomplete.js


      var nextFocusDisabled = disabledItemsFocusable ? false : nextFocus.disabled || nextFocus.getAttribute('aria-disabled') === 'true';

      if (!nextFocus.hasAttribute('tabindex') || !textCriteriaMatches(nextFocus, textCriteria) || nextFocusDisabled) {
        // Move to the next element.
        nextFocus = traversalFunction(list, nextFocus, disableListWrap);
      } else {
        nextFocus.focus();
        return true;
      }
    }

    return false;
  }
  /**
   * A permanently displayed menu following https://www.w3.org/TR/wai-aria-practices/#menubutton.
   * It's exposed to help customization of the [`Menu`](/api/menu/) component if you
   * use it separately you need to move focus into the component manually. Once
   * the focus is placed inside the component it is fully keyboard accessible.
   */


  var MenuList = /*#__PURE__*/react.exports.forwardRef(function MenuList(props, ref) {
    var actions = props.actions,
        _props$autoFocus = props.autoFocus,
        autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,
        _props$autoFocusItem = props.autoFocusItem,
        autoFocusItem = _props$autoFocusItem === void 0 ? false : _props$autoFocusItem,
        children = props.children,
        className = props.className,
        _props$disabledItemsF = props.disabledItemsFocusable,
        disabledItemsFocusable = _props$disabledItemsF === void 0 ? false : _props$disabledItemsF,
        _props$disableListWra = props.disableListWrap,
        disableListWrap = _props$disableListWra === void 0 ? false : _props$disableListWra,
        onKeyDown = props.onKeyDown,
        _props$variant = props.variant,
        variant = _props$variant === void 0 ? 'selectedMenu' : _props$variant,
        other = _objectWithoutPropertiesLoose(props, _excluded$6);

    var listRef = react.exports.useRef(null);
    var textCriteriaRef = react.exports.useRef({
      keys: [],
      repeating: true,
      previousKeyMatched: true,
      lastTime: null
    });
    useEnhancedEffect$1(function () {
      if (autoFocus) {
        listRef.current.focus();
      }
    }, [autoFocus]);
    react.exports.useImperativeHandle(actions, function () {
      return {
        adjustStyleForScrollbar: function adjustStyleForScrollbar(containerElement, theme) {
          // Let's ignore that piece of logic if users are already overriding the width
          // of the menu.
          var noExplicitWidth = !listRef.current.style.width;

          if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {
            var scrollbarSize = "".concat(getScrollbarSize(ownerDocument(containerElement)), "px");
            listRef.current.style[theme.direction === 'rtl' ? 'paddingLeft' : 'paddingRight'] = scrollbarSize;
            listRef.current.style.width = "calc(100% + ".concat(scrollbarSize, ")");
          }

          return listRef.current;
        }
      };
    }, []);

    var handleKeyDown = function handleKeyDown(event) {
      var list = listRef.current;
      var key = event.key;
      /**
       * @type {Element} - will always be defined since we are in a keydown handler
       * attached to an element. A keydown event is either dispatched to the activeElement
       * or document.body or document.documentElement. Only the first case will
       * trigger this specific handler.
       */

      var currentFocus = ownerDocument(list).activeElement;

      if (key === 'ArrowDown') {
        // Prevent scroll of the page
        event.preventDefault();
        moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, nextItem);
      } else if (key === 'ArrowUp') {
        event.preventDefault();
        moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, previousItem);
      } else if (key === 'Home') {
        event.preventDefault();
        moveFocus(list, null, disableListWrap, disabledItemsFocusable, nextItem);
      } else if (key === 'End') {
        event.preventDefault();
        moveFocus(list, null, disableListWrap, disabledItemsFocusable, previousItem);
      } else if (key.length === 1) {
        var criteria = textCriteriaRef.current;
        var lowerKey = key.toLowerCase();
        var currTime = performance.now();

        if (criteria.keys.length > 0) {
          // Reset
          if (currTime - criteria.lastTime > 500) {
            criteria.keys = [];
            criteria.repeating = true;
            criteria.previousKeyMatched = true;
          } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {
            criteria.repeating = false;
          }
        }

        criteria.lastTime = currTime;
        criteria.keys.push(lowerKey);
        var keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);

        if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus(list, currentFocus, false, disabledItemsFocusable, nextItem, criteria))) {
          event.preventDefault();
        } else {
          criteria.previousKeyMatched = false;
        }
      }

      if (onKeyDown) {
        onKeyDown(event);
      }
    };

    var handleRef = useForkRef(listRef, ref);
    /**
     * the index of the item should receive focus
     * in a `variant="selectedMenu"` it's the first `selected` item
     * otherwise it's the very first item.
     */

    var activeItemIndex = -1; // since we inject focus related props into children we have to do a lookahead
    // to check if there is a `selected` item. We're looking for the last `selected`
    // item and use the first valid item as a fallback

    react.exports.Children.forEach(children, function (child, index) {
      if (! /*#__PURE__*/react.exports.isValidElement(child)) {
        return;
      }

      if (!child.props.disabled) {
        if (variant === 'selectedMenu' && child.props.selected) {
          activeItemIndex = index;
        } else if (activeItemIndex === -1) {
          activeItemIndex = index;
        }
      }
    });
    var items = react.exports.Children.map(children, function (child, index) {
      if (index === activeItemIndex) {
        var newChildProps = {};

        if (autoFocusItem) {
          newChildProps.autoFocus = true;
        }

        if (child.props.tabIndex === undefined && variant === 'selectedMenu') {
          newChildProps.tabIndex = 0;
        }

        return /*#__PURE__*/react.exports.cloneElement(child, newChildProps);
      }

      return child;
    });
    return /*#__PURE__*/jsxRuntime.exports.jsx(List$1, _extends$1({
      role: "menu",
      ref: handleRef,
      className: className,
      onKeyDown: handleKeyDown,
      tabIndex: autoFocus ? 0 : -1
    }, other, {
      children: items
    }));
  });
  var MenuList$1 = MenuList;

  function getPopoverUtilityClass(slot) {
    return generateUtilityClass('MuiPopover', slot);
  }
  generateUtilityClasses('MuiPopover', ['root', 'paper']);

  var _excluded$5 = ["onEntering"],
      _excluded2$1 = ["action", "anchorEl", "anchorOrigin", "anchorPosition", "anchorReference", "children", "className", "container", "elevation", "marginThreshold", "open", "PaperProps", "transformOrigin", "TransitionComponent", "transitionDuration", "TransitionProps"];
  function getOffsetTop(rect, vertical) {
    var offset = 0;

    if (typeof vertical === 'number') {
      offset = vertical;
    } else if (vertical === 'center') {
      offset = rect.height / 2;
    } else if (vertical === 'bottom') {
      offset = rect.height;
    }

    return offset;
  }
  function getOffsetLeft(rect, horizontal) {
    var offset = 0;

    if (typeof horizontal === 'number') {
      offset = horizontal;
    } else if (horizontal === 'center') {
      offset = rect.width / 2;
    } else if (horizontal === 'right') {
      offset = rect.width;
    }

    return offset;
  }

  function getTransformOriginValue(transformOrigin) {
    return [transformOrigin.horizontal, transformOrigin.vertical].map(function (n) {
      return typeof n === 'number' ? "".concat(n, "px") : n;
    }).join(' ');
  }

  function resolveAnchorEl(anchorEl) {
    return typeof anchorEl === 'function' ? anchorEl() : anchorEl;
  }

  var useUtilityClasses$4 = function useUtilityClasses(ownerState) {
    var classes = ownerState.classes;
    var slots = {
      root: ['root'],
      paper: ['paper']
    };
    return composeClasses(slots, getPopoverUtilityClass, classes);
  };

  var PopoverRoot = styled$1(Modal$1, {
    name: 'MuiPopover',
    slot: 'Root',
    overridesResolver: function overridesResolver(props, styles) {
      return styles.root;
    }
  })({});
  var PopoverPaper = styled$1(Paper$1, {
    name: 'MuiPopover',
    slot: 'Paper',
    overridesResolver: function overridesResolver(props, styles) {
      return styles.paper;
    }
  })({
    position: 'absolute',
    overflowY: 'auto',
    overflowX: 'hidden',
    // So we see the popover when it's empty.
    // It's most likely on issue on userland.
    minWidth: 16,
    minHeight: 16,
    maxWidth: 'calc(100% - 32px)',
    maxHeight: 'calc(100% - 32px)',
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0
  });
  var Popover = /*#__PURE__*/react.exports.forwardRef(function Popover(inProps, ref) {
    var props = useThemeProps({
      props: inProps,
      name: 'MuiPopover'
    });
    var action = props.action,
        anchorEl = props.anchorEl,
        _props$anchorOrigin = props.anchorOrigin,
        anchorOrigin = _props$anchorOrigin === void 0 ? {
      vertical: 'top',
      horizontal: 'left'
    } : _props$anchorOrigin,
        anchorPosition = props.anchorPosition,
        _props$anchorReferenc = props.anchorReference,
        anchorReference = _props$anchorReferenc === void 0 ? 'anchorEl' : _props$anchorReferenc,
        children = props.children,
        className = props.className,
        containerProp = props.container,
        _props$elevation = props.elevation,
        elevation = _props$elevation === void 0 ? 8 : _props$elevation,
        _props$marginThreshol = props.marginThreshold,
        marginThreshold = _props$marginThreshol === void 0 ? 16 : _props$marginThreshol,
        open = props.open,
        _props$PaperProps = props.PaperProps,
        PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps,
        _props$transformOrigi = props.transformOrigin,
        transformOrigin = _props$transformOrigi === void 0 ? {
      vertical: 'top',
      horizontal: 'left'
    } : _props$transformOrigi,
        _props$TransitionComp = props.TransitionComponent,
        TransitionComponent = _props$TransitionComp === void 0 ? Grow$1 : _props$TransitionComp,
        _props$transitionDura = props.transitionDuration,
        transitionDurationProp = _props$transitionDura === void 0 ? 'auto' : _props$transitionDura,
        _props$TransitionProp = props.TransitionProps;
    _props$TransitionProp = _props$TransitionProp === void 0 ? {} : _props$TransitionProp;

    var onEntering = _props$TransitionProp.onEntering,
        TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded$5),
        other = _objectWithoutPropertiesLoose(props, _excluded2$1);

    var paperRef = react.exports.useRef();
    var handlePaperRef = useForkRef(paperRef, PaperProps.ref);

    var ownerState = _extends$1({}, props, {
      anchorOrigin: anchorOrigin,
      anchorReference: anchorReference,
      elevation: elevation,
      marginThreshold: marginThreshold,
      PaperProps: PaperProps,
      transformOrigin: transformOrigin,
      TransitionComponent: TransitionComponent,
      transitionDuration: transitionDurationProp,
      TransitionProps: TransitionProps
    });

    var classes = useUtilityClasses$4(ownerState); // Returns the top/left offset of the position
    // to attach to on the anchor element (or body if none is provided)

    var getAnchorOffset = react.exports.useCallback(function () {
      if (anchorReference === 'anchorPosition') {

        return anchorPosition;
      }

      var resolvedAnchorEl = resolveAnchorEl(anchorEl); // If an anchor element wasn't provided, just use the parent body element of this Popover

      var anchorElement = resolvedAnchorEl && resolvedAnchorEl.nodeType === 1 ? resolvedAnchorEl : ownerDocument(paperRef.current).body;
      var anchorRect = anchorElement.getBoundingClientRect();

      return {
        top: anchorRect.top + getOffsetTop(anchorRect, anchorOrigin.vertical),
        left: anchorRect.left + getOffsetLeft(anchorRect, anchorOrigin.horizontal)
      };
    }, [anchorEl, anchorOrigin.horizontal, anchorOrigin.vertical, anchorPosition, anchorReference]); // Returns the base transform origin using the element

    var getTransformOrigin = react.exports.useCallback(function (elemRect) {
      return {
        vertical: getOffsetTop(elemRect, transformOrigin.vertical),
        horizontal: getOffsetLeft(elemRect, transformOrigin.horizontal)
      };
    }, [transformOrigin.horizontal, transformOrigin.vertical]);
    var getPositioningStyle = react.exports.useCallback(function (element) {
      var elemRect = {
        width: element.offsetWidth,
        height: element.offsetHeight
      }; // Get the transform origin point on the element itself

      var elemTransformOrigin = getTransformOrigin(elemRect);

      if (anchorReference === 'none') {
        return {
          top: null,
          left: null,
          transformOrigin: getTransformOriginValue(elemTransformOrigin)
        };
      } // Get the offset of the anchoring element


      var anchorOffset = getAnchorOffset(); // Calculate element positioning

      var top = anchorOffset.top - elemTransformOrigin.vertical;
      var left = anchorOffset.left - elemTransformOrigin.horizontal;
      var bottom = top + elemRect.height;
      var right = left + elemRect.width; // Use the parent window of the anchorEl if provided

      var containerWindow = ownerWindow(resolveAnchorEl(anchorEl)); // Window thresholds taking required margin into account

      var heightThreshold = containerWindow.innerHeight - marginThreshold;
      var widthThreshold = containerWindow.innerWidth - marginThreshold; // Check if the vertical axis needs shifting

      if (top < marginThreshold) {
        var diff = top - marginThreshold;
        top -= diff;
        elemTransformOrigin.vertical += diff;
      } else if (bottom > heightThreshold) {
        var _diff = bottom - heightThreshold;

        top -= _diff;
        elemTransformOrigin.vertical += _diff;
      }


      if (left < marginThreshold) {
        var _diff2 = left - marginThreshold;

        left -= _diff2;
        elemTransformOrigin.horizontal += _diff2;
      } else if (right > widthThreshold) {
        var _diff3 = right - widthThreshold;

        left -= _diff3;
        elemTransformOrigin.horizontal += _diff3;
      }

      return {
        top: "".concat(Math.round(top), "px"),
        left: "".concat(Math.round(left), "px"),
        transformOrigin: getTransformOriginValue(elemTransformOrigin)
      };
    }, [anchorEl, anchorReference, getAnchorOffset, getTransformOrigin, marginThreshold]);
    var setPositioningStyles = react.exports.useCallback(function () {
      var element = paperRef.current;

      if (!element) {
        return;
      }

      var positioning = getPositioningStyle(element);

      if (positioning.top !== null) {
        element.style.top = positioning.top;
      }

      if (positioning.left !== null) {
        element.style.left = positioning.left;
      }

      element.style.transformOrigin = positioning.transformOrigin;
    }, [getPositioningStyle]);

    var handleEntering = function handleEntering(element, isAppearing) {
      if (onEntering) {
        onEntering(element, isAppearing);
      }

      setPositioningStyles();
    };

    react.exports.useEffect(function () {
      if (open) {
        setPositioningStyles();
      }
    });
    react.exports.useImperativeHandle(action, function () {
      return open ? {
        updatePosition: function updatePosition() {
          setPositioningStyles();
        }
      } : null;
    }, [open, setPositioningStyles]);
    react.exports.useEffect(function () {
      if (!open) {
        return undefined;
      }

      var handleResize = debounce$1(function () {
        setPositioningStyles();
      });
      var containerWindow = ownerWindow(anchorEl);
      containerWindow.addEventListener('resize', handleResize);
      return function () {
        handleResize.clear();
        containerWindow.removeEventListener('resize', handleResize);
      };
    }, [anchorEl, open, setPositioningStyles]);
    var transitionDuration = transitionDurationProp;

    if (transitionDurationProp === 'auto' && !TransitionComponent.muiSupportAuto) {
      transitionDuration = undefined;
    } // If the container prop is provided, use that
    // If the anchorEl prop is provided, use its parent body element as the container
    // If neither are provided let the Modal take care of choosing the container


    var container = containerProp || (anchorEl ? ownerDocument(resolveAnchorEl(anchorEl)).body : undefined);
    return /*#__PURE__*/jsxRuntime.exports.jsx(PopoverRoot, _extends$1({
      BackdropProps: {
        invisible: true
      },
      className: clsx(classes.root, className),
      container: container,
      open: open,
      ref: ref,
      ownerState: ownerState
    }, other, {
      children: /*#__PURE__*/jsxRuntime.exports.jsx(TransitionComponent, _extends$1({
        appear: true,
        "in": open,
        onEntering: handleEntering,
        timeout: transitionDuration
      }, TransitionProps, {
        children: /*#__PURE__*/jsxRuntime.exports.jsx(PopoverPaper, _extends$1({
          elevation: elevation
        }, PaperProps, {
          ref: handlePaperRef,
          className: clsx(classes.paper, PaperProps.className),
          children: children
        }))
      }))
    }));
  });
  var Popover$1 = Popover;

  function getMenuUtilityClass(slot) {
    return generateUtilityClass('MuiMenu', slot);
  }
  generateUtilityClasses('MuiMenu', ['root', 'paper', 'list']);

  var _excluded$4 = ["onEntering"],
      _excluded2 = ["autoFocus", "children", "disableAutoFocusItem", "MenuListProps", "onClose", "open", "PaperProps", "PopoverClasses", "transitionDuration", "TransitionProps", "variant"];
  var RTL_ORIGIN = {
    vertical: 'top',
    horizontal: 'right'
  };
  var LTR_ORIGIN = {
    vertical: 'top',
    horizontal: 'left'
  };

  var useUtilityClasses$3 = function useUtilityClasses(ownerState) {
    var classes = ownerState.classes;
    var slots = {
      root: ['root'],
      paper: ['paper'],
      list: ['list']
    };
    return composeClasses(slots, getMenuUtilityClass, classes);
  };

  var MenuRoot = styled$1(Popover$1, {
    shouldForwardProp: function shouldForwardProp(prop) {
      return rootShouldForwardProp(prop) || prop === 'classes';
    },
    name: 'MuiMenu',
    slot: 'Root',
    overridesResolver: function overridesResolver(props, styles) {
      return styles.root;
    }
  })({});
  var MenuPaper = styled$1(Paper$1, {
    name: 'MuiMenu',
    slot: 'Paper',
    overridesResolver: function overridesResolver(props, styles) {
      return styles.paper;
    }
  })({
    // specZ: The maximum height of a simple menu should be one or more rows less than the view
    // height. This ensures a tapable area outside of the simple menu with which to dismiss
    // the menu.
    maxHeight: 'calc(100% - 96px)',
    // Add iOS momentum scrolling for iOS < 13.0
    WebkitOverflowScrolling: 'touch'
  });
  var MenuMenuList = styled$1(MenuList$1, {
    name: 'MuiMenu',
    slot: 'List',
    overridesResolver: function overridesResolver(props, styles) {
      return styles.list;
    }
  })({
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0
  });
  var Menu$1 = /*#__PURE__*/react.exports.forwardRef(function Menu(inProps, ref) {
    var props = useThemeProps({
      props: inProps,
      name: 'MuiMenu'
    });
    var _props$autoFocus = props.autoFocus,
        autoFocus = _props$autoFocus === void 0 ? true : _props$autoFocus,
        children = props.children,
        _props$disableAutoFoc = props.disableAutoFocusItem,
        disableAutoFocusItem = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc,
        _props$MenuListProps = props.MenuListProps,
        MenuListProps = _props$MenuListProps === void 0 ? {} : _props$MenuListProps,
        onClose = props.onClose,
        open = props.open,
        _props$PaperProps = props.PaperProps,
        PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps,
        PopoverClasses = props.PopoverClasses,
        _props$transitionDura = props.transitionDuration,
        transitionDuration = _props$transitionDura === void 0 ? 'auto' : _props$transitionDura,
        _props$TransitionProp = props.TransitionProps;
    _props$TransitionProp = _props$TransitionProp === void 0 ? {} : _props$TransitionProp;

    var onEntering = _props$TransitionProp.onEntering,
        _props$variant = props.variant,
        variant = _props$variant === void 0 ? 'selectedMenu' : _props$variant,
        TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded$4),
        other = _objectWithoutPropertiesLoose(props, _excluded2);

    var theme = useTheme();
    var isRtl = theme.direction === 'rtl';

    var ownerState = _extends$1({}, props, {
      autoFocus: autoFocus,
      disableAutoFocusItem: disableAutoFocusItem,
      MenuListProps: MenuListProps,
      onEntering: onEntering,
      PaperProps: PaperProps,
      transitionDuration: transitionDuration,
      TransitionProps: TransitionProps,
      variant: variant
    });

    var classes = useUtilityClasses$3(ownerState);
    var autoFocusItem = autoFocus && !disableAutoFocusItem && open;
    var menuListActionsRef = react.exports.useRef(null);

    var handleEntering = function handleEntering(element, isAppearing) {
      if (menuListActionsRef.current) {
        menuListActionsRef.current.adjustStyleForScrollbar(element, theme);
      }

      if (onEntering) {
        onEntering(element, isAppearing);
      }
    };

    var handleListKeyDown = function handleListKeyDown(event) {
      if (event.key === 'Tab') {
        event.preventDefault();

        if (onClose) {
          onClose(event, 'tabKeyDown');
        }
      }
    };
    /**
     * the index of the item should receive focus
     * in a `variant="selectedMenu"` it's the first `selected` item
     * otherwise it's the very first item.
     */


    var activeItemIndex = -1; // since we inject focus related props into children we have to do a lookahead
    // to check if there is a `selected` item. We're looking for the last `selected`
    // item and use the first valid item as a fallback

    react.exports.Children.map(children, function (child, index) {
      if (! /*#__PURE__*/react.exports.isValidElement(child)) {
        return;
      }

      if (!child.props.disabled) {
        if (variant === 'selectedMenu' && child.props.selected) {
          activeItemIndex = index;
        } else if (activeItemIndex === -1) {
          activeItemIndex = index;
        }
      }
    });
    return /*#__PURE__*/jsxRuntime.exports.jsx(MenuRoot, _extends$1({
      classes: PopoverClasses,
      onClose: onClose,
      anchorOrigin: {
        vertical: 'bottom',
        horizontal: isRtl ? 'right' : 'left'
      },
      transformOrigin: isRtl ? RTL_ORIGIN : LTR_ORIGIN,
      PaperProps: _extends$1({
        component: MenuPaper
      }, PaperProps, {
        classes: _extends$1({}, PaperProps.classes, {
          root: classes.paper
        })
      }),
      className: classes.root,
      open: open,
      ref: ref,
      transitionDuration: transitionDuration,
      TransitionProps: _extends$1({
        onEntering: handleEntering
      }, TransitionProps),
      ownerState: ownerState
    }, other, {
      children: /*#__PURE__*/jsxRuntime.exports.jsx(MenuMenuList, _extends$1({
        onKeyDown: handleListKeyDown,
        actions: menuListActionsRef,
        autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),
        autoFocusItem: autoFocusItem,
        variant: variant
      }, MenuListProps, {
        className: clsx(classes.list, MenuListProps.className),
        children: children
      }))
    }));
  });
  var Menu$2 = Menu$1;

  function getMenuItemUtilityClass(slot) {
    return generateUtilityClass('MuiMenuItem', slot);
  }
  var menuItemClasses = generateUtilityClasses('MuiMenuItem', ['root', 'focusVisible', 'dense', 'disabled', 'divider', 'gutters', 'selected']);
  var menuItemClasses$1 = menuItemClasses;

  var _excluded$3 = ["autoFocus", "component", "dense", "divider", "disableGutters", "focusVisibleClassName", "role", "tabIndex"];
  var overridesResolver = function overridesResolver(props, styles) {
    var ownerState = props.ownerState;
    return [styles.root, ownerState.dense && styles.dense, ownerState.divider && styles.divider, !ownerState.disableGutters && styles.gutters];
  };

  var useUtilityClasses$2 = function useUtilityClasses(ownerState) {
    var disabled = ownerState.disabled,
        dense = ownerState.dense,
        divider = ownerState.divider,
        disableGutters = ownerState.disableGutters,
        selected = ownerState.selected,
        classes = ownerState.classes;
    var slots = {
      root: ['root', dense && 'dense', disabled && 'disabled', !disableGutters && 'gutters', divider && 'divider', selected && 'selected']
    };
    var composedClasses = composeClasses(slots, getMenuItemUtilityClass, classes);
    return _extends$1({}, classes, composedClasses);
  };

  var MenuItemRoot = styled$1(ButtonBase$1, {
    shouldForwardProp: function shouldForwardProp(prop) {
      return rootShouldForwardProp(prop) || prop === 'classes';
    },
    name: 'MuiMenuItem',
    slot: 'Root',
    overridesResolver: overridesResolver
  })(function (_ref) {
    var _extends2;

    var theme = _ref.theme,
        ownerState = _ref.ownerState;
    return _extends$1({}, theme.typography.body1, {
      display: 'flex',
      justifyContent: 'flex-start',
      alignItems: 'center',
      position: 'relative',
      textDecoration: 'none',
      minHeight: 48,
      paddingTop: 6,
      paddingBottom: 6,
      boxSizing: 'border-box',
      whiteSpace: 'nowrap'
    }, !ownerState.disableGutters && {
      paddingLeft: 16,
      paddingRight: 16
    }, ownerState.divider && {
      borderBottom: "1px solid ".concat(theme.palette.divider),
      backgroundClip: 'padding-box'
    }, (_extends2 = {
      '&:hover': {
        textDecoration: 'none',
        backgroundColor: theme.palette.action.hover,
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: 'transparent'
        }
      }
    }, _defineProperty$1(_extends2, "&.".concat(menuItemClasses$1.selected), _defineProperty$1({
      backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
    }, "&.".concat(menuItemClasses$1.focusVisible), {
      backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
    })), _defineProperty$1(_extends2, "&.".concat(menuItemClasses$1.selected, ":hover"), {
      backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      '@media (hover: none)': {
        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
      }
    }), _defineProperty$1(_extends2, "&.".concat(menuItemClasses$1.focusVisible), {
      backgroundColor: theme.palette.action.focus
    }), _defineProperty$1(_extends2, "&.".concat(menuItemClasses$1.disabled), {
      opacity: theme.palette.action.disabledOpacity
    }), _defineProperty$1(_extends2, "& + .".concat(dividerClasses$1.root), {
      marginTop: theme.spacing(1),
      marginBottom: theme.spacing(1)
    }), _defineProperty$1(_extends2, "& + .".concat(dividerClasses$1.inset), {
      marginLeft: 52
    }), _defineProperty$1(_extends2, "& .".concat(listItemTextClasses$1.root), {
      marginTop: 0,
      marginBottom: 0
    }), _defineProperty$1(_extends2, "& .".concat(listItemTextClasses$1.inset), {
      paddingLeft: 36
    }), _defineProperty$1(_extends2, "& .".concat(listItemIconClasses$1.root), {
      minWidth: 36
    }), _extends2), !ownerState.dense && _defineProperty$1({}, theme.breakpoints.up('sm'), {
      minHeight: 'auto'
    }), ownerState.dense && _extends$1({
      minHeight: 32,
      // https://material.io/components/menus#specs > Dense
      paddingTop: 4,
      paddingBottom: 4
    }, theme.typography.body2, _defineProperty$1({}, "& .".concat(listItemIconClasses$1.root, " svg"), {
      fontSize: '1.25rem'
    })));
  });
  var MenuItem = /*#__PURE__*/react.exports.forwardRef(function MenuItem(inProps, ref) {
    var props = useThemeProps({
      props: inProps,
      name: 'MuiMenuItem'
    });

    var _props$autoFocus = props.autoFocus,
        autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,
        _props$component = props.component,
        component = _props$component === void 0 ? 'li' : _props$component,
        _props$dense = props.dense,
        dense = _props$dense === void 0 ? false : _props$dense,
        _props$divider = props.divider,
        divider = _props$divider === void 0 ? false : _props$divider,
        _props$disableGutters = props.disableGutters,
        disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,
        focusVisibleClassName = props.focusVisibleClassName,
        _props$role = props.role,
        role = _props$role === void 0 ? 'menuitem' : _props$role,
        tabIndexProp = props.tabIndex,
        other = _objectWithoutPropertiesLoose(props, _excluded$3);

    var context = react.exports.useContext(ListContext$1);
    var childContext = {
      dense: dense || context.dense || false,
      disableGutters: disableGutters
    };
    var menuItemRef = react.exports.useRef(null);
    useEnhancedEffect$1(function () {
      if (autoFocus) {
        if (menuItemRef.current) {
          menuItemRef.current.focus();
        }
      }
    }, [autoFocus]);

    var ownerState = _extends$1({}, props, {
      dense: childContext.dense,
      divider: divider,
      disableGutters: disableGutters
    });

    var classes = useUtilityClasses$2(props);
    var handleRef = useForkRef(menuItemRef, ref);
    var tabIndex;

    if (!props.disabled) {
      tabIndex = tabIndexProp !== undefined ? tabIndexProp : -1;
    }

    return /*#__PURE__*/jsxRuntime.exports.jsx(ListContext$1.Provider, {
      value: childContext,
      children: /*#__PURE__*/jsxRuntime.exports.jsx(MenuItemRoot, _extends$1({
        ref: handleRef,
        role: role,
        tabIndex: tabIndex,
        component: component,
        focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName)
      }, other, {
        ownerState: ownerState,
        classes: classes
      }))
    });
  });
  var MenuItem$1 = MenuItem;

  function getTooltipUtilityClass(slot) {
    return generateUtilityClass('MuiTooltip', slot);
  }
  var tooltipClasses = generateUtilityClasses('MuiTooltip', ['popper', 'popperInteractive', 'popperArrow', 'popperClose', 'tooltip', 'tooltipArrow', 'touch', 'tooltipPlacementLeft', 'tooltipPlacementRight', 'tooltipPlacementTop', 'tooltipPlacementBottom', 'arrow']);
  var tooltipClasses$1 = tooltipClasses;

  var _excluded$2 = ["arrow", "children", "classes", "components", "componentsProps", "describeChild", "disableFocusListener", "disableHoverListener", "disableInteractive", "disableTouchListener", "enterDelay", "enterNextDelay", "enterTouchDelay", "followCursor", "id", "leaveDelay", "leaveTouchDelay", "onClose", "onOpen", "open", "placement", "PopperComponent", "PopperProps", "title", "TransitionComponent", "TransitionProps"];

  function round(value) {
    return Math.round(value * 1e5) / 1e5;
  }

  var useUtilityClasses$1 = function useUtilityClasses(ownerState) {
    var classes = ownerState.classes,
        disableInteractive = ownerState.disableInteractive,
        arrow = ownerState.arrow,
        touch = ownerState.touch,
        placement = ownerState.placement;
    var slots = {
      popper: ['popper', !disableInteractive && 'popperInteractive', arrow && 'popperArrow'],
      tooltip: ['tooltip', arrow && 'tooltipArrow', touch && 'touch', "tooltipPlacement".concat(capitalize(placement.split('-')[0]))],
      arrow: ['arrow']
    };
    return composeClasses(slots, getTooltipUtilityClass, classes);
  };

  var TooltipPopper = styled$1(Popper$1, {
    name: 'MuiTooltip',
    slot: 'Popper',
    overridesResolver: function overridesResolver(props, styles) {
      var ownerState = props.ownerState;
      return [styles.popper, !ownerState.disableInteractive && styles.popperInteractive, ownerState.arrow && styles.popperArrow, !ownerState.open && styles.popperClose];
    }
  })(function (_ref2) {
    var _ref3;

    var theme = _ref2.theme,
        ownerState = _ref2.ownerState,
        open = _ref2.open;
    return _extends$1({
      zIndex: theme.zIndex.tooltip,
      pointerEvents: 'none'
    }, !ownerState.disableInteractive && {
      pointerEvents: 'auto'
    }, !open && {
      pointerEvents: 'none'
    }, ownerState.arrow && (_ref3 = {}, _defineProperty$1(_ref3, "&[data-popper-placement*=\"bottom\"] .".concat(tooltipClasses$1.arrow), {
      top: 0,
      marginTop: '-0.71em',
      '&::before': {
        transformOrigin: '0 100%'
      }
    }), _defineProperty$1(_ref3, "&[data-popper-placement*=\"top\"] .".concat(tooltipClasses$1.arrow), {
      bottom: 0,
      marginBottom: '-0.71em',
      '&::before': {
        transformOrigin: '100% 0'
      }
    }), _defineProperty$1(_ref3, "&[data-popper-placement*=\"right\"] .".concat(tooltipClasses$1.arrow), _extends$1({}, !ownerState.isRtl ? {
      left: 0,
      marginLeft: '-0.71em'
    } : {
      right: 0,
      marginRight: '-0.71em'
    }, {
      height: '1em',
      width: '0.71em',
      '&::before': {
        transformOrigin: '100% 100%'
      }
    })), _defineProperty$1(_ref3, "&[data-popper-placement*=\"left\"] .".concat(tooltipClasses$1.arrow), _extends$1({}, !ownerState.isRtl ? {
      right: 0,
      marginRight: '-0.71em'
    } : {
      left: 0,
      marginLeft: '-0.71em'
    }, {
      height: '1em',
      width: '0.71em',
      '&::before': {
        transformOrigin: '0 0'
      }
    })), _ref3));
  });
  var TooltipTooltip = styled$1('div', {
    name: 'MuiTooltip',
    slot: 'Tooltip',
    overridesResolver: function overridesResolver(props, styles) {
      var ownerState = props.ownerState;
      return [styles.tooltip, ownerState.touch && styles.touch, ownerState.arrow && styles.tooltipArrow, styles["tooltipPlacement".concat(capitalize(ownerState.placement.split('-')[0]))]];
    }
  })(function (_ref4) {
    var _extends2;

    var theme = _ref4.theme,
        ownerState = _ref4.ownerState;
    return _extends$1({
      backgroundColor: alpha(theme.palette.grey[700], 0.92),
      borderRadius: theme.shape.borderRadius,
      color: theme.palette.common.white,
      fontFamily: theme.typography.fontFamily,
      padding: '4px 8px',
      fontSize: theme.typography.pxToRem(11),
      maxWidth: 300,
      margin: 2,
      wordWrap: 'break-word',
      fontWeight: theme.typography.fontWeightMedium
    }, ownerState.arrow && {
      position: 'relative',
      margin: 0
    }, ownerState.touch && {
      padding: '8px 16px',
      fontSize: theme.typography.pxToRem(14),
      lineHeight: "".concat(round(16 / 14), "em"),
      fontWeight: theme.typography.fontWeightRegular
    }, (_extends2 = {}, _defineProperty$1(_extends2, ".".concat(tooltipClasses$1.popper, "[data-popper-placement*=\"left\"] &"), _extends$1({
      transformOrigin: 'right center'
    }, !ownerState.isRtl ? _extends$1({
      marginRight: '14px'
    }, ownerState.touch && {
      marginRight: '24px'
    }) : _extends$1({
      marginLeft: '14px'
    }, ownerState.touch && {
      marginLeft: '24px'
    }))), _defineProperty$1(_extends2, ".".concat(tooltipClasses$1.popper, "[data-popper-placement*=\"right\"] &"), _extends$1({
      transformOrigin: 'left center'
    }, !ownerState.isRtl ? _extends$1({
      marginLeft: '14px'
    }, ownerState.touch && {
      marginLeft: '24px'
    }) : _extends$1({
      marginRight: '14px'
    }, ownerState.touch && {
      marginRight: '24px'
    }))), _defineProperty$1(_extends2, ".".concat(tooltipClasses$1.popper, "[data-popper-placement*=\"top\"] &"), _extends$1({
      transformOrigin: 'center bottom',
      marginBottom: '14px'
    }, ownerState.touch && {
      marginBottom: '24px'
    })), _defineProperty$1(_extends2, ".".concat(tooltipClasses$1.popper, "[data-popper-placement*=\"bottom\"] &"), _extends$1({
      transformOrigin: 'center top',
      marginTop: '14px'
    }, ownerState.touch && {
      marginTop: '24px'
    })), _extends2));
  });
  var TooltipArrow = styled$1('span', {
    name: 'MuiTooltip',
    slot: 'Arrow',
    overridesResolver: function overridesResolver(props, styles) {
      return styles.arrow;
    }
  })(function (_ref5) {
    var theme = _ref5.theme;
    return {
      overflow: 'hidden',
      position: 'absolute',
      width: '1em',
      height: '0.71em'
      /* = width / sqrt(2) = (length of the hypotenuse) */
      ,
      boxSizing: 'border-box',
      color: alpha(theme.palette.grey[700], 0.9),
      '&::before': {
        content: '""',
        margin: 'auto',
        display: 'block',
        width: '100%',
        height: '100%',
        backgroundColor: 'currentColor',
        transform: 'rotate(45deg)'
      }
    };
  });
  var hystersisOpen = false;
  var hystersisTimer = null;

  function composeEventHandler(handler, eventHandler) {
    return function (event) {
      if (eventHandler) {
        eventHandler(event);
      }

      handler(event);
    };
  } // TODO v6: Remove PopperComponent, PopperProps, TransitionComponent and TransitionProps.


  var Tooltip = /*#__PURE__*/react.exports.forwardRef(function Tooltip(inProps, ref) {
    var _components$Popper, _ref, _components$Transitio, _components$Tooltip, _components$Arrow, _componentsProps$popp;

    var props = useThemeProps({
      props: inProps,
      name: 'MuiTooltip'
    });

    var _props$arrow = props.arrow,
        arrow = _props$arrow === void 0 ? false : _props$arrow,
        children = props.children,
        _props$components = props.components,
        components = _props$components === void 0 ? {} : _props$components,
        _props$componentsProp = props.componentsProps,
        componentsProps = _props$componentsProp === void 0 ? {} : _props$componentsProp,
        _props$describeChild = props.describeChild,
        describeChild = _props$describeChild === void 0 ? false : _props$describeChild,
        _props$disableFocusLi = props.disableFocusListener,
        disableFocusListener = _props$disableFocusLi === void 0 ? false : _props$disableFocusLi,
        _props$disableHoverLi = props.disableHoverListener,
        disableHoverListener = _props$disableHoverLi === void 0 ? false : _props$disableHoverLi,
        _props$disableInterac = props.disableInteractive,
        disableInteractiveProp = _props$disableInterac === void 0 ? false : _props$disableInterac,
        _props$disableTouchLi = props.disableTouchListener,
        disableTouchListener = _props$disableTouchLi === void 0 ? false : _props$disableTouchLi,
        _props$enterDelay = props.enterDelay,
        enterDelay = _props$enterDelay === void 0 ? 100 : _props$enterDelay,
        _props$enterNextDelay = props.enterNextDelay,
        enterNextDelay = _props$enterNextDelay === void 0 ? 0 : _props$enterNextDelay,
        _props$enterTouchDela = props.enterTouchDelay,
        enterTouchDelay = _props$enterTouchDela === void 0 ? 700 : _props$enterTouchDela,
        _props$followCursor = props.followCursor,
        followCursor = _props$followCursor === void 0 ? false : _props$followCursor,
        idProp = props.id,
        _props$leaveDelay = props.leaveDelay,
        leaveDelay = _props$leaveDelay === void 0 ? 0 : _props$leaveDelay,
        _props$leaveTouchDela = props.leaveTouchDelay,
        leaveTouchDelay = _props$leaveTouchDela === void 0 ? 1500 : _props$leaveTouchDela,
        onClose = props.onClose,
        onOpen = props.onOpen,
        openProp = props.open,
        _props$placement = props.placement,
        placement = _props$placement === void 0 ? 'bottom' : _props$placement,
        PopperComponentProp = props.PopperComponent,
        _props$PopperProps = props.PopperProps,
        PopperProps = _props$PopperProps === void 0 ? {} : _props$PopperProps,
        title = props.title,
        _props$TransitionComp = props.TransitionComponent,
        TransitionComponentProp = _props$TransitionComp === void 0 ? Grow$1 : _props$TransitionComp,
        TransitionProps = props.TransitionProps,
        other = _objectWithoutPropertiesLoose(props, _excluded$2);

    var theme = useTheme();
    var isRtl = theme.direction === 'rtl';

    var _React$useState = react.exports.useState(),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        childNode = _React$useState2[0],
        setChildNode = _React$useState2[1];

    var _React$useState3 = react.exports.useState(null),
        _React$useState4 = _slicedToArray$1(_React$useState3, 2),
        arrowRef = _React$useState4[0],
        setArrowRef = _React$useState4[1];

    var ignoreNonTouchEvents = react.exports.useRef(false);
    var disableInteractive = disableInteractiveProp || followCursor;
    var closeTimer = react.exports.useRef();
    var enterTimer = react.exports.useRef();
    var leaveTimer = react.exports.useRef();
    var touchTimer = react.exports.useRef();

    var _useControlled = useControlled({
      controlled: openProp,
      "default": false,
      name: 'Tooltip',
      state: 'open'
    }),
        _useControlled2 = _slicedToArray$1(_useControlled, 2),
        openState = _useControlled2[0],
        setOpenState = _useControlled2[1];

    var open = openState;

    var id = useId(idProp);
    var prevUserSelect = react.exports.useRef();
    var stopTouchInteraction = react.exports.useCallback(function () {
      if (prevUserSelect.current !== undefined) {
        document.body.style.WebkitUserSelect = prevUserSelect.current;
        prevUserSelect.current = undefined;
      }

      clearTimeout(touchTimer.current);
    }, []);
    react.exports.useEffect(function () {
      return function () {
        clearTimeout(closeTimer.current);
        clearTimeout(enterTimer.current);
        clearTimeout(leaveTimer.current);
        stopTouchInteraction();
      };
    }, [stopTouchInteraction]);

    var handleOpen = function handleOpen(event) {
      clearTimeout(hystersisTimer);
      hystersisOpen = true; // The mouseover event will trigger for every nested element in the tooltip.
      // We can skip rerendering when the tooltip is already open.
      // We are using the mouseover event instead of the mouseenter event to fix a hide/show issue.

      setOpenState(true);

      if (onOpen && !open) {
        onOpen(event);
      }
    };

    var handleClose = useEventCallback(
    /**
     * @param {React.SyntheticEvent | Event} event
     */
    function (event) {
      clearTimeout(hystersisTimer);
      hystersisTimer = setTimeout(function () {
        hystersisOpen = false;
      }, 800 + leaveDelay);
      setOpenState(false);

      if (onClose && open) {
        onClose(event);
      }

      clearTimeout(closeTimer.current);
      closeTimer.current = setTimeout(function () {
        ignoreNonTouchEvents.current = false;
      }, theme.transitions.duration.shortest);
    });

    var handleEnter = function handleEnter(event) {
      if (ignoreNonTouchEvents.current && event.type !== 'touchstart') {
        return;
      } // Remove the title ahead of time.
      // We don't want to wait for the next render commit.
      // We would risk displaying two tooltips at the same time (native + this one).


      if (childNode) {
        childNode.removeAttribute('title');
      }

      clearTimeout(enterTimer.current);
      clearTimeout(leaveTimer.current);

      if (enterDelay || hystersisOpen && enterNextDelay) {
        enterTimer.current = setTimeout(function () {
          handleOpen(event);
        }, hystersisOpen ? enterNextDelay : enterDelay);
      } else {
        handleOpen(event);
      }
    };

    var handleLeave = function handleLeave(event) {
      clearTimeout(enterTimer.current);
      clearTimeout(leaveTimer.current);
      leaveTimer.current = setTimeout(function () {
        handleClose(event);
      }, leaveDelay);
    };

    var _useIsFocusVisible = useIsFocusVisible(),
        isFocusVisibleRef = _useIsFocusVisible.isFocusVisibleRef,
        handleBlurVisible = _useIsFocusVisible.onBlur,
        handleFocusVisible = _useIsFocusVisible.onFocus,
        focusVisibleRef = _useIsFocusVisible.ref; // We don't necessarily care about the focusVisible state (which is safe to access via ref anyway).
    // We just need to re-render the Tooltip if the focus-visible state changes.


    var _React$useState5 = react.exports.useState(false),
        _React$useState6 = _slicedToArray$1(_React$useState5, 2),
        setChildIsFocusVisible = _React$useState6[1];

    var handleBlur = function handleBlur(event) {
      handleBlurVisible(event);

      if (isFocusVisibleRef.current === false) {
        setChildIsFocusVisible(false);
        handleLeave(event);
      }
    };

    var handleFocus = function handleFocus(event) {
      // Workaround for https://github.com/facebook/react/issues/7769
      // The autoFocus of React might trigger the event before the componentDidMount.
      // We need to account for this eventuality.
      if (!childNode) {
        setChildNode(event.currentTarget);
      }

      handleFocusVisible(event);

      if (isFocusVisibleRef.current === true) {
        setChildIsFocusVisible(true);
        handleEnter(event);
      }
    };

    var detectTouchStart = function detectTouchStart(event) {
      ignoreNonTouchEvents.current = true;
      var childrenProps = children.props;

      if (childrenProps.onTouchStart) {
        childrenProps.onTouchStart(event);
      }
    };

    var handleMouseOver = handleEnter;
    var handleMouseLeave = handleLeave;

    var handleTouchStart = function handleTouchStart(event) {
      detectTouchStart(event);
      clearTimeout(leaveTimer.current);
      clearTimeout(closeTimer.current);
      stopTouchInteraction();
      prevUserSelect.current = document.body.style.WebkitUserSelect; // Prevent iOS text selection on long-tap.

      document.body.style.WebkitUserSelect = 'none';
      touchTimer.current = setTimeout(function () {
        document.body.style.WebkitUserSelect = prevUserSelect.current;
        handleEnter(event);
      }, enterTouchDelay);
    };

    var handleTouchEnd = function handleTouchEnd(event) {
      if (children.props.onTouchEnd) {
        children.props.onTouchEnd(event);
      }

      stopTouchInteraction();
      clearTimeout(leaveTimer.current);
      leaveTimer.current = setTimeout(function () {
        handleClose(event);
      }, leaveTouchDelay);
    };

    react.exports.useEffect(function () {
      if (!open) {
        return undefined;
      }
      /**
       * @param {KeyboardEvent} nativeEvent
       */


      function handleKeyDown(nativeEvent) {
        // IE11, Edge (prior to using Bink?) use 'Esc'
        if (nativeEvent.key === 'Escape' || nativeEvent.key === 'Esc') {
          handleClose(nativeEvent);
        }
      }

      document.addEventListener('keydown', handleKeyDown);
      return function () {
        document.removeEventListener('keydown', handleKeyDown);
      };
    }, [handleClose, open]);
    var handleUseRef = useForkRef(setChildNode, ref);
    var handleFocusRef = useForkRef(focusVisibleRef, handleUseRef);
    var handleRef = useForkRef(children.ref, handleFocusRef); // There is no point in displaying an empty tooltip.

    if (title === '') {
      open = false;
    }

    var positionRef = react.exports.useRef({
      x: 0,
      y: 0
    });
    var popperRef = react.exports.useRef();

    var handleMouseMove = function handleMouseMove(event) {
      var childrenProps = children.props;

      if (childrenProps.onMouseMove) {
        childrenProps.onMouseMove(event);
      }

      positionRef.current = {
        x: event.clientX,
        y: event.clientY
      };

      if (popperRef.current) {
        popperRef.current.update();
      }
    };

    var nameOrDescProps = {};
    var titleIsString = typeof title === 'string';

    if (describeChild) {
      nameOrDescProps.title = !open && titleIsString && !disableHoverListener ? title : null;
      nameOrDescProps['aria-describedby'] = open ? id : null;
    } else {
      nameOrDescProps['aria-label'] = titleIsString ? title : null;
      nameOrDescProps['aria-labelledby'] = open && !titleIsString ? id : null;
    }

    var childrenProps = _extends$1({}, nameOrDescProps, other, children.props, {
      className: clsx(other.className, children.props.className),
      onTouchStart: detectTouchStart,
      ref: handleRef
    }, followCursor ? {
      onMouseMove: handleMouseMove
    } : {});

    var interactiveWrapperListeners = {};

    if (!disableTouchListener) {
      childrenProps.onTouchStart = handleTouchStart;
      childrenProps.onTouchEnd = handleTouchEnd;
    }

    if (!disableHoverListener) {
      childrenProps.onMouseOver = composeEventHandler(handleMouseOver, childrenProps.onMouseOver);
      childrenProps.onMouseLeave = composeEventHandler(handleMouseLeave, childrenProps.onMouseLeave);

      if (!disableInteractive) {
        interactiveWrapperListeners.onMouseOver = handleMouseOver;
        interactiveWrapperListeners.onMouseLeave = handleMouseLeave;
      }
    }

    if (!disableFocusListener) {
      childrenProps.onFocus = composeEventHandler(handleFocus, childrenProps.onFocus);
      childrenProps.onBlur = composeEventHandler(handleBlur, childrenProps.onBlur);

      if (!disableInteractive) {
        interactiveWrapperListeners.onFocus = handleFocus;
        interactiveWrapperListeners.onBlur = handleBlur;
      }
    }

    var popperOptions = react.exports.useMemo(function () {
      var _PopperProps$popperOp;

      var tooltipModifiers = [{
        name: 'arrow',
        enabled: Boolean(arrowRef),
        options: {
          element: arrowRef,
          padding: 4
        }
      }];

      if ((_PopperProps$popperOp = PopperProps.popperOptions) != null && _PopperProps$popperOp.modifiers) {
        tooltipModifiers = tooltipModifiers.concat(PopperProps.popperOptions.modifiers);
      }

      return _extends$1({}, PopperProps.popperOptions, {
        modifiers: tooltipModifiers
      });
    }, [arrowRef, PopperProps]);

    var ownerState = _extends$1({}, props, {
      isRtl: isRtl,
      arrow: arrow,
      disableInteractive: disableInteractive,
      placement: placement,
      PopperComponentProp: PopperComponentProp,
      touch: ignoreNonTouchEvents.current
    });

    var classes = useUtilityClasses$1(ownerState);
    var PopperComponent = (_components$Popper = components.Popper) != null ? _components$Popper : TooltipPopper;
    var TransitionComponent = (_ref = (_components$Transitio = components.Transition) != null ? _components$Transitio : TransitionComponentProp) != null ? _ref : Grow$1;
    var TooltipComponent = (_components$Tooltip = components.Tooltip) != null ? _components$Tooltip : TooltipTooltip;
    var ArrowComponent = (_components$Arrow = components.Arrow) != null ? _components$Arrow : TooltipArrow;
    var popperProps = appendOwnerState(PopperComponent, _extends$1({}, PopperProps, componentsProps.popper), ownerState);
    var transitionProps = appendOwnerState(TransitionComponent, _extends$1({}, TransitionProps, componentsProps.transition), ownerState);
    var tooltipProps = appendOwnerState(TooltipComponent, _extends$1({}, componentsProps.tooltip), ownerState);
    var tooltipArrowProps = appendOwnerState(ArrowComponent, _extends$1({}, componentsProps.arrow), ownerState);
    return /*#__PURE__*/jsxRuntime.exports.jsxs(react.exports.Fragment, {
      children: [/*#__PURE__*/react.exports.cloneElement(children, childrenProps), /*#__PURE__*/jsxRuntime.exports.jsx(PopperComponent, _extends$1({
        as: PopperComponentProp != null ? PopperComponentProp : Popper$1,
        placement: placement,
        anchorEl: followCursor ? {
          getBoundingClientRect: function getBoundingClientRect() {
            return {
              top: positionRef.current.y,
              left: positionRef.current.x,
              right: positionRef.current.x,
              bottom: positionRef.current.y,
              width: 0,
              height: 0
            };
          }
        } : childNode,
        popperRef: popperRef,
        open: childNode ? open : false,
        id: id,
        transition: true
      }, interactiveWrapperListeners, popperProps, {
        className: clsx(classes.popper, PopperProps == null ? void 0 : PopperProps.className, (_componentsProps$popp = componentsProps.popper) == null ? void 0 : _componentsProps$popp.className),
        popperOptions: popperOptions,
        children: function children(_ref6) {
          var TransitionPropsInner = _ref6.TransitionProps;

          var _componentsProps$tool, _componentsProps$arro;

          return /*#__PURE__*/jsxRuntime.exports.jsx(TransitionComponent, _extends$1({
            timeout: theme.transitions.duration.shorter
          }, TransitionPropsInner, transitionProps, {
            children: /*#__PURE__*/jsxRuntime.exports.jsxs(TooltipComponent, _extends$1({}, tooltipProps, {
              className: clsx(classes.tooltip, (_componentsProps$tool = componentsProps.tooltip) == null ? void 0 : _componentsProps$tool.className),
              children: [title, arrow ? /*#__PURE__*/jsxRuntime.exports.jsx(ArrowComponent, _extends$1({}, tooltipArrowProps, {
                className: clsx(classes.arrow, (_componentsProps$arro = componentsProps.arrow) == null ? void 0 : _componentsProps$arro.className),
                ref: setArrowRef
              })) : null]
            }))
          }));
        }
      }))]
    });
  });
  var Tooltip$1 = Tooltip;

  var _excluded$1 = ["component", "direction", "spacing", "divider", "children"];

  function joinChildren(children, separator) {
    var childrenArray = react.exports.Children.toArray(children).filter(Boolean);
    return childrenArray.reduce(function (output, child, index) {
      output.push(child);

      if (index < childrenArray.length - 1) {
        output.push( /*#__PURE__*/react.exports.cloneElement(separator, {
          key: "separator-".concat(index)
        }));
      }

      return output;
    }, []);
  }

  var getSideFromDirection = function getSideFromDirection(direction) {
    return {
      row: 'Left',
      'row-reverse': 'Right',
      column: 'Top',
      'column-reverse': 'Bottom'
    }[direction];
  };

  var style = function style(_ref) {
    var ownerState = _ref.ownerState,
        theme = _ref.theme;

    var styles = _extends$1({
      display: 'flex'
    }, handleBreakpoints({
      theme: theme
    }, resolveBreakpointValues({
      values: ownerState.direction,
      breakpoints: theme.breakpoints.values
    }), function (propValue) {
      return {
        flexDirection: propValue
      };
    }));

    if (ownerState.spacing) {
      var transformer = createUnarySpacing(theme);
      var base = Object.keys(theme.breakpoints.values).reduce(function (acc, breakpoint) {
        if (ownerState.spacing[breakpoint] != null || ownerState.direction[breakpoint] != null) {
          acc[breakpoint] = true;
        }

        return acc;
      }, {});
      var directionValues = resolveBreakpointValues({
        values: ownerState.direction,
        base: base
      });
      var spacingValues = resolveBreakpointValues({
        values: ownerState.spacing,
        base: base
      });

      var styleFromPropValue = function styleFromPropValue(propValue, breakpoint) {
        return {
          '& > :not(style) + :not(style)': _defineProperty$1({
            margin: 0
          }, "margin".concat(getSideFromDirection(breakpoint ? directionValues[breakpoint] : ownerState.direction)), getValue(transformer, propValue))
        };
      };

      styles = deepmerge(styles, handleBreakpoints({
        theme: theme
      }, spacingValues, styleFromPropValue));
    }

    return styles;
  };
  var StackRoot = styled$1('div', {
    name: 'MuiStack',
    slot: 'Root',
    overridesResolver: function overridesResolver(props, styles) {
      return [styles.root];
    }
  })(style);
  var Stack = /*#__PURE__*/react.exports.forwardRef(function Stack(inProps, ref) {
    var themeProps = useThemeProps({
      props: inProps,
      name: 'MuiStack'
    });
    var props = extendSxProp(themeProps);

    var _props$component = props.component,
        component = _props$component === void 0 ? 'div' : _props$component,
        _props$direction = props.direction,
        direction = _props$direction === void 0 ? 'column' : _props$direction,
        _props$spacing = props.spacing,
        spacing = _props$spacing === void 0 ? 0 : _props$spacing,
        divider = props.divider,
        children = props.children,
        other = _objectWithoutPropertiesLoose(props, _excluded$1);

    var ownerState = {
      direction: direction,
      spacing: spacing
    };
    return /*#__PURE__*/jsxRuntime.exports.jsx(StackRoot, _extends$1({
      as: component,
      ownerState: ownerState,
      ref: ref
    }, other, {
      children: divider ? joinChildren(children, divider) : children
    }));
  });
  var Stack$1 = Stack;

  function getToolbarUtilityClass(slot) {
    return generateUtilityClass('MuiToolbar', slot);
  }
  generateUtilityClasses('MuiToolbar', ['root', 'gutters', 'regular', 'dense']);

  var _excluded = ["className", "component", "disableGutters", "variant"];

  var useUtilityClasses = function useUtilityClasses(ownerState) {
    var classes = ownerState.classes,
        disableGutters = ownerState.disableGutters,
        variant = ownerState.variant;
    var slots = {
      root: ['root', !disableGutters && 'gutters', variant]
    };
    return composeClasses(slots, getToolbarUtilityClass, classes);
  };

  var ToolbarRoot = styled$1('div', {
    name: 'MuiToolbar',
    slot: 'Root',
    overridesResolver: function overridesResolver(props, styles) {
      var ownerState = props.ownerState;
      return [styles.root, !ownerState.disableGutters && styles.gutters, styles[ownerState.variant]];
    }
  })(function (_ref) {
    var theme = _ref.theme,
        ownerState = _ref.ownerState;
    return _extends$1({
      position: 'relative',
      display: 'flex',
      alignItems: 'center'
    }, !ownerState.disableGutters && _defineProperty$1({
      paddingLeft: theme.spacing(2),
      paddingRight: theme.spacing(2)
    }, theme.breakpoints.up('sm'), {
      paddingLeft: theme.spacing(3),
      paddingRight: theme.spacing(3)
    }), ownerState.variant === 'dense' && {
      minHeight: 48
    });
  }, function (_ref3) {
    var theme = _ref3.theme,
        ownerState = _ref3.ownerState;
    return ownerState.variant === 'regular' && theme.mixins.toolbar;
  });
  var Toolbar = /*#__PURE__*/react.exports.forwardRef(function Toolbar(inProps, ref) {
    var props = useThemeProps({
      props: inProps,
      name: 'MuiToolbar'
    });

    var className = props.className,
        _props$component = props.component,
        component = _props$component === void 0 ? 'div' : _props$component,
        _props$disableGutters = props.disableGutters,
        disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,
        _props$variant = props.variant,
        variant = _props$variant === void 0 ? 'regular' : _props$variant,
        other = _objectWithoutPropertiesLoose(props, _excluded);

    var ownerState = _extends$1({}, props, {
      component: component,
      disableGutters: disableGutters,
      variant: variant
    });

    var classes = useUtilityClasses(ownerState);
    return /*#__PURE__*/jsxRuntime.exports.jsx(ToolbarRoot, _extends$1({
      as: component,
      className: clsx(classes.root, className),
      ref: ref,
      ownerState: ownerState
    }, other));
  });
  var Toolbar$1 = Toolbar;

  function isAbsolute(pathname) {
    return pathname.charAt(0) === '/';
  } // About 1.5x faster than the two-arg version of Array#splice()


  function spliceOne(list, index) {
    for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
      list[i] = list[k];
    }

    list.pop();
  } // This implementation is based heavily on node's url.parse


  function resolvePathname(to, from) {
    if (from === undefined) from = '';
    var toParts = to && to.split('/') || [];
    var fromParts = from && from.split('/') || [];
    var isToAbs = to && isAbsolute(to);
    var isFromAbs = from && isAbsolute(from);
    var mustEndAbs = isToAbs || isFromAbs;

    if (to && isAbsolute(to)) {
      // to is absolute
      fromParts = toParts;
    } else if (toParts.length) {
      // to is relative, drop the filename
      fromParts.pop();
      fromParts = fromParts.concat(toParts);
    }

    if (!fromParts.length) return '/';
    var hasTrailingSlash;

    if (fromParts.length) {
      var last = fromParts[fromParts.length - 1];
      hasTrailingSlash = last === '.' || last === '..' || last === '';
    } else {
      hasTrailingSlash = false;
    }

    var up = 0;

    for (var i = fromParts.length; i >= 0; i--) {
      var part = fromParts[i];

      if (part === '.') {
        spliceOne(fromParts, i);
      } else if (part === '..') {
        spliceOne(fromParts, i);
        up++;
      } else if (up) {
        spliceOne(fromParts, i);
        up--;
      }
    }

    if (!mustEndAbs) for (; up--; up) {
      fromParts.unshift('..');
    }
    if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift('');
    var result = fromParts.join('/');
    if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';
    return result;
  }

  var isProduction = "production" === 'production';
  var prefix = 'Invariant failed';

  function invariant(condition, message) {
    if (condition) {
      return;
    }

    if (isProduction) {
      throw new Error(prefix);
    }

    var provided = typeof message === 'function' ? message() : message;
    var value = provided ? prefix + ": " + provided : prefix;
    throw new Error(value);
  }

  function addLeadingSlash$1(path) {
    return path.charAt(0) === '/' ? path : '/' + path;
  }

  function stripLeadingSlash(path) {
    return path.charAt(0) === '/' ? path.substr(1) : path;
  }

  function hasBasename(path, prefix) {
    return path.toLowerCase().indexOf(prefix.toLowerCase()) === 0 && '/?#'.indexOf(path.charAt(prefix.length)) !== -1;
  }

  function stripBasename$1(path, prefix) {
    return hasBasename(path, prefix) ? path.substr(prefix.length) : path;
  }

  function stripTrailingSlash(path) {
    return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;
  }

  function parsePath(path) {
    var pathname = path || '/';
    var search = '';
    var hash = '';
    var hashIndex = pathname.indexOf('#');

    if (hashIndex !== -1) {
      hash = pathname.substr(hashIndex);
      pathname = pathname.substr(0, hashIndex);
    }

    var searchIndex = pathname.indexOf('?');

    if (searchIndex !== -1) {
      search = pathname.substr(searchIndex);
      pathname = pathname.substr(0, searchIndex);
    }

    return {
      pathname: pathname,
      search: search === '?' ? '' : search,
      hash: hash === '#' ? '' : hash
    };
  }

  function createPath(location) {
    var pathname = location.pathname,
        search = location.search,
        hash = location.hash;
    var path = pathname || '/';
    if (search && search !== '?') path += search.charAt(0) === '?' ? search : "?" + search;
    if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : "#" + hash;
    return path;
  }

  function createLocation(path, state, key, currentLocation) {
    var location;

    if (typeof path === 'string') {
      // Two-arg form: push(path, state)
      location = parsePath(path);
      location.state = state;
    } else {
      // One-arg form: push(location)
      location = _extends$1({}, path);
      if (location.pathname === undefined) location.pathname = '';

      if (location.search) {
        if (location.search.charAt(0) !== '?') location.search = '?' + location.search;
      } else {
        location.search = '';
      }

      if (location.hash) {
        if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;
      } else {
        location.hash = '';
      }

      if (state !== undefined && location.state === undefined) location.state = state;
    }

    try {
      location.pathname = decodeURI(location.pathname);
    } catch (e) {
      if (e instanceof URIError) {
        throw new URIError('Pathname "' + location.pathname + '" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');
      } else {
        throw e;
      }
    }

    if (key) location.key = key;

    if (currentLocation) {
      // Resolve incomplete/relative pathname relative to current location.
      if (!location.pathname) {
        location.pathname = currentLocation.pathname;
      } else if (location.pathname.charAt(0) !== '/') {
        location.pathname = resolvePathname(location.pathname, currentLocation.pathname);
      }
    } else {
      // When there is no prior location and pathname is empty, set it to /
      if (!location.pathname) {
        location.pathname = '/';
      }
    }

    return location;
  }

  function createTransitionManager() {
    var prompt = null;

    function setPrompt(nextPrompt) {
      prompt = nextPrompt;
      return function () {
        if (prompt === nextPrompt) prompt = null;
      };
    }

    function confirmTransitionTo(location, action, getUserConfirmation, callback) {
      // TODO: If another transition starts while we're still confirming
      // the previous one, we may end up in a weird state. Figure out the
      // best way to handle this.
      if (prompt != null) {
        var result = typeof prompt === 'function' ? prompt(location, action) : prompt;

        if (typeof result === 'string') {
          if (typeof getUserConfirmation === 'function') {
            getUserConfirmation(result, callback);
          } else {
            callback(true);
          }
        } else {
          // Return false from a transition hook to cancel the transition.
          callback(result !== false);
        }
      } else {
        callback(true);
      }
    }

    var listeners = [];

    function appendListener(fn) {
      var isActive = true;

      function listener() {
        if (isActive) fn.apply(void 0, arguments);
      }

      listeners.push(listener);
      return function () {
        isActive = false;
        listeners = listeners.filter(function (item) {
          return item !== listener;
        });
      };
    }

    function notifyListeners() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      listeners.forEach(function (listener) {
        return listener.apply(void 0, args);
      });
    }

    return {
      setPrompt: setPrompt,
      confirmTransitionTo: confirmTransitionTo,
      appendListener: appendListener,
      notifyListeners: notifyListeners
    };
  }

  var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

  function getConfirmation(message, callback) {
    callback(window.confirm(message)); // eslint-disable-line no-alert
  }
  /**
   * Returns true if the HTML5 history API is supported. Taken from Modernizr.
   *
   * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
   * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
   * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
   */


  function supportsHistory() {
    var ua = window.navigator.userAgent;
    if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;
    return window.history && 'pushState' in window.history;
  }
  /**
   * Returns true if browser fires popstate on hash change.
   * IE10 and IE11 do not.
   */


  function supportsPopStateOnHashChange() {
    return window.navigator.userAgent.indexOf('Trident') === -1;
  }
  /**
   * Returns false if using go(n) with hash history causes a full page reload.
   */


  function supportsGoWithoutReloadUsingHash() {
    return window.navigator.userAgent.indexOf('Firefox') === -1;
  }
  /**
   * Returns true if a given popstate event is an extraneous WebKit event.
   * Accounts for the fact that Chrome on iOS fires real popstate events
   * containing undefined state when pressing the back button.
   */


  function isExtraneousPopstateEvent(event) {
    return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;
  }

  var PopStateEvent = 'popstate';
  var HashChangeEvent = 'hashchange';

  function getHistoryState() {
    try {
      return window.history.state || {};
    } catch (e) {
      // IE 11 sometimes throws when accessing window.history.state
      // See https://github.com/ReactTraining/history/pull/289
      return {};
    }
  }
  /**
   * Creates a history object that uses the HTML5 history API including
   * pushState, replaceState, and the popstate event.
   */


  function createBrowserHistory(props) {
    if (props === void 0) {
      props = {};
    }

    !canUseDOM ? invariant(false) : void 0;
    var globalHistory = window.history;
    var canUseHistory = supportsHistory();
    var needsHashChangeListener = !supportsPopStateOnHashChange();
    var _props = props,
        _props$forceRefresh = _props.forceRefresh,
        forceRefresh = _props$forceRefresh === void 0 ? false : _props$forceRefresh,
        _props$getUserConfirm = _props.getUserConfirmation,
        getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,
        _props$keyLength = _props.keyLength,
        keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
    var basename = props.basename ? stripTrailingSlash(addLeadingSlash$1(props.basename)) : '';

    function getDOMLocation(historyState) {
      var _ref = historyState || {},
          key = _ref.key,
          state = _ref.state;

      var _window$location = window.location,
          pathname = _window$location.pathname,
          search = _window$location.search,
          hash = _window$location.hash;
      var path = pathname + search + hash;
      if (basename) path = stripBasename$1(path, basename);
      return createLocation(path, state, key);
    }

    function createKey() {
      return Math.random().toString(36).substr(2, keyLength);
    }

    var transitionManager = createTransitionManager();

    function setState(nextState) {
      _extends$1(history, nextState);

      history.length = globalHistory.length;
      transitionManager.notifyListeners(history.location, history.action);
    }

    function handlePopState(event) {
      // Ignore extraneous popstate events in WebKit.
      if (isExtraneousPopstateEvent(event)) return;
      handlePop(getDOMLocation(event.state));
    }

    function handleHashChange() {
      handlePop(getDOMLocation(getHistoryState()));
    }

    var forceNextPop = false;

    function handlePop(location) {
      if (forceNextPop) {
        forceNextPop = false;
        setState();
      } else {
        var action = 'POP';
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
          if (ok) {
            setState({
              action: action,
              location: location
            });
          } else {
            revertPop(location);
          }
        });
      }
    }

    function revertPop(fromLocation) {
      var toLocation = history.location; // TODO: We could probably make this more reliable by
      // keeping a list of keys we've seen in sessionStorage.
      // Instead, we just default to 0 for keys we don't know.

      var toIndex = allKeys.indexOf(toLocation.key);
      if (toIndex === -1) toIndex = 0;
      var fromIndex = allKeys.indexOf(fromLocation.key);
      if (fromIndex === -1) fromIndex = 0;
      var delta = toIndex - fromIndex;

      if (delta) {
        forceNextPop = true;
        go(delta);
      }
    }

    var initialLocation = getDOMLocation(getHistoryState());
    var allKeys = [initialLocation.key]; // Public interface

    function createHref(location) {
      return basename + createPath(location);
    }

    function push(path, state) {
      var action = 'PUSH';
      var location = createLocation(path, state, createKey(), history.location);
      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
        if (!ok) return;
        var href = createHref(location);
        var key = location.key,
            state = location.state;

        if (canUseHistory) {
          globalHistory.pushState({
            key: key,
            state: state
          }, null, href);

          if (forceRefresh) {
            window.location.href = href;
          } else {
            var prevIndex = allKeys.indexOf(history.location.key);
            var nextKeys = allKeys.slice(0, prevIndex + 1);
            nextKeys.push(location.key);
            allKeys = nextKeys;
            setState({
              action: action,
              location: location
            });
          }
        } else {
          window.location.href = href;
        }
      });
    }

    function replace(path, state) {
      var action = 'REPLACE';
      var location = createLocation(path, state, createKey(), history.location);
      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
        if (!ok) return;
        var href = createHref(location);
        var key = location.key,
            state = location.state;

        if (canUseHistory) {
          globalHistory.replaceState({
            key: key,
            state: state
          }, null, href);

          if (forceRefresh) {
            window.location.replace(href);
          } else {
            var prevIndex = allKeys.indexOf(history.location.key);
            if (prevIndex !== -1) allKeys[prevIndex] = location.key;
            setState({
              action: action,
              location: location
            });
          }
        } else {
          window.location.replace(href);
        }
      });
    }

    function go(n) {
      globalHistory.go(n);
    }

    function goBack() {
      go(-1);
    }

    function goForward() {
      go(1);
    }

    var listenerCount = 0;

    function checkDOMListeners(delta) {
      listenerCount += delta;

      if (listenerCount === 1 && delta === 1) {
        window.addEventListener(PopStateEvent, handlePopState);
        if (needsHashChangeListener) window.addEventListener(HashChangeEvent, handleHashChange);
      } else if (listenerCount === 0) {
        window.removeEventListener(PopStateEvent, handlePopState);
        if (needsHashChangeListener) window.removeEventListener(HashChangeEvent, handleHashChange);
      }
    }

    var isBlocked = false;

    function block(prompt) {
      if (prompt === void 0) {
        prompt = false;
      }

      var unblock = transitionManager.setPrompt(prompt);

      if (!isBlocked) {
        checkDOMListeners(1);
        isBlocked = true;
      }

      return function () {
        if (isBlocked) {
          isBlocked = false;
          checkDOMListeners(-1);
        }

        return unblock();
      };
    }

    function listen(listener) {
      var unlisten = transitionManager.appendListener(listener);
      checkDOMListeners(1);
      return function () {
        checkDOMListeners(-1);
        unlisten();
      };
    }

    var history = {
      length: globalHistory.length,
      action: 'POP',
      location: initialLocation,
      createHref: createHref,
      push: push,
      replace: replace,
      go: go,
      goBack: goBack,
      goForward: goForward,
      block: block,
      listen: listen
    };
    return history;
  }

  var HashChangeEvent$1 = 'hashchange';
  var HashPathCoders = {
    hashbang: {
      encodePath: function encodePath(path) {
        return path.charAt(0) === '!' ? path : '!/' + stripLeadingSlash(path);
      },
      decodePath: function decodePath(path) {
        return path.charAt(0) === '!' ? path.substr(1) : path;
      }
    },
    noslash: {
      encodePath: stripLeadingSlash,
      decodePath: addLeadingSlash$1
    },
    slash: {
      encodePath: addLeadingSlash$1,
      decodePath: addLeadingSlash$1
    }
  };

  function stripHash(url) {
    var hashIndex = url.indexOf('#');
    return hashIndex === -1 ? url : url.slice(0, hashIndex);
  }

  function getHashPath() {
    // We can't use window.location.hash here because it's not
    // consistent across browsers - Firefox will pre-decode it!
    var href = window.location.href;
    var hashIndex = href.indexOf('#');
    return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
  }

  function pushHashPath(path) {
    window.location.hash = path;
  }

  function replaceHashPath(path) {
    window.location.replace(stripHash(window.location.href) + '#' + path);
  }

  function createHashHistory(props) {
    if (props === void 0) {
      props = {};
    }

    !canUseDOM ? invariant(false) : void 0;
    var globalHistory = window.history;
    supportsGoWithoutReloadUsingHash();
    var _props = props,
        _props$getUserConfirm = _props.getUserConfirmation,
        getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,
        _props$hashType = _props.hashType,
        hashType = _props$hashType === void 0 ? 'slash' : _props$hashType;
    var basename = props.basename ? stripTrailingSlash(addLeadingSlash$1(props.basename)) : '';
    var _HashPathCoders$hashT = HashPathCoders[hashType],
        encodePath = _HashPathCoders$hashT.encodePath,
        decodePath = _HashPathCoders$hashT.decodePath;

    function getDOMLocation() {
      var path = decodePath(getHashPath());
      if (basename) path = stripBasename$1(path, basename);
      return createLocation(path);
    }

    var transitionManager = createTransitionManager();

    function setState(nextState) {
      _extends$1(history, nextState);

      history.length = globalHistory.length;
      transitionManager.notifyListeners(history.location, history.action);
    }

    var forceNextPop = false;
    var ignorePath = null;

    function locationsAreEqual$$1(a, b) {
      return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash;
    }

    function handleHashChange() {
      var path = getHashPath();
      var encodedPath = encodePath(path);

      if (path !== encodedPath) {
        // Ensure we always have a properly-encoded hash.
        replaceHashPath(encodedPath);
      } else {
        var location = getDOMLocation();
        var prevLocation = history.location;
        if (!forceNextPop && locationsAreEqual$$1(prevLocation, location)) return; // A hashchange doesn't always == location change.

        if (ignorePath === createPath(location)) return; // Ignore this change; we already setState in push/replace.

        ignorePath = null;
        handlePop(location);
      }
    }

    function handlePop(location) {
      if (forceNextPop) {
        forceNextPop = false;
        setState();
      } else {
        var action = 'POP';
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
          if (ok) {
            setState({
              action: action,
              location: location
            });
          } else {
            revertPop(location);
          }
        });
      }
    }

    function revertPop(fromLocation) {
      var toLocation = history.location; // TODO: We could probably make this more reliable by
      // keeping a list of paths we've seen in sessionStorage.
      // Instead, we just default to 0 for paths we don't know.

      var toIndex = allPaths.lastIndexOf(createPath(toLocation));
      if (toIndex === -1) toIndex = 0;
      var fromIndex = allPaths.lastIndexOf(createPath(fromLocation));
      if (fromIndex === -1) fromIndex = 0;
      var delta = toIndex - fromIndex;

      if (delta) {
        forceNextPop = true;
        go(delta);
      }
    } // Ensure the hash is encoded properly before doing anything else.


    var path = getHashPath();
    var encodedPath = encodePath(path);
    if (path !== encodedPath) replaceHashPath(encodedPath);
    var initialLocation = getDOMLocation();
    var allPaths = [createPath(initialLocation)]; // Public interface

    function createHref(location) {
      var baseTag = document.querySelector('base');
      var href = '';

      if (baseTag && baseTag.getAttribute('href')) {
        href = stripHash(window.location.href);
      }

      return href + '#' + encodePath(basename + createPath(location));
    }

    function push(path, state) {
      var action = 'PUSH';
      var location = createLocation(path, undefined, undefined, history.location);
      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
        if (!ok) return;
        var path = createPath(location);
        var encodedPath = encodePath(basename + path);
        var hashChanged = getHashPath() !== encodedPath;

        if (hashChanged) {
          // We cannot tell if a hashchange was caused by a PUSH, so we'd
          // rather setState here and ignore the hashchange. The caveat here
          // is that other hash histories in the page will consider it a POP.
          ignorePath = path;
          pushHashPath(encodedPath);
          var prevIndex = allPaths.lastIndexOf(createPath(history.location));
          var nextPaths = allPaths.slice(0, prevIndex + 1);
          nextPaths.push(path);
          allPaths = nextPaths;
          setState({
            action: action,
            location: location
          });
        } else {
          setState();
        }
      });
    }

    function replace(path, state) {
      var action = 'REPLACE';
      var location = createLocation(path, undefined, undefined, history.location);
      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
        if (!ok) return;
        var path = createPath(location);
        var encodedPath = encodePath(basename + path);
        var hashChanged = getHashPath() !== encodedPath;

        if (hashChanged) {
          // We cannot tell if a hashchange was caused by a REPLACE, so we'd
          // rather setState here and ignore the hashchange. The caveat here
          // is that other hash histories in the page will consider it a POP.
          ignorePath = path;
          replaceHashPath(encodedPath);
        }

        var prevIndex = allPaths.indexOf(createPath(history.location));
        if (prevIndex !== -1) allPaths[prevIndex] = path;
        setState({
          action: action,
          location: location
        });
      });
    }

    function go(n) {
      globalHistory.go(n);
    }

    function goBack() {
      go(-1);
    }

    function goForward() {
      go(1);
    }

    var listenerCount = 0;

    function checkDOMListeners(delta) {
      listenerCount += delta;

      if (listenerCount === 1 && delta === 1) {
        window.addEventListener(HashChangeEvent$1, handleHashChange);
      } else if (listenerCount === 0) {
        window.removeEventListener(HashChangeEvent$1, handleHashChange);
      }
    }

    var isBlocked = false;

    function block(prompt) {
      if (prompt === void 0) {
        prompt = false;
      }

      var unblock = transitionManager.setPrompt(prompt);

      if (!isBlocked) {
        checkDOMListeners(1);
        isBlocked = true;
      }

      return function () {
        if (isBlocked) {
          isBlocked = false;
          checkDOMListeners(-1);
        }

        return unblock();
      };
    }

    function listen(listener) {
      var unlisten = transitionManager.appendListener(listener);
      checkDOMListeners(1);
      return function () {
        checkDOMListeners(-1);
        unlisten();
      };
    }

    var history = {
      length: globalHistory.length,
      action: 'POP',
      location: initialLocation,
      createHref: createHref,
      push: push,
      replace: replace,
      go: go,
      goBack: goBack,
      goForward: goForward,
      block: block,
      listen: listen
    };
    return history;
  }

  function clamp(n, lowerBound, upperBound) {
    return Math.min(Math.max(n, lowerBound), upperBound);
  }
  /**
   * Creates a history object that stores locations in memory.
   */


  function createMemoryHistory(props) {
    if (props === void 0) {
      props = {};
    }

    var _props = props,
        getUserConfirmation = _props.getUserConfirmation,
        _props$initialEntries = _props.initialEntries,
        initialEntries = _props$initialEntries === void 0 ? ['/'] : _props$initialEntries,
        _props$initialIndex = _props.initialIndex,
        initialIndex = _props$initialIndex === void 0 ? 0 : _props$initialIndex,
        _props$keyLength = _props.keyLength,
        keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
    var transitionManager = createTransitionManager();

    function setState(nextState) {
      _extends$1(history, nextState);

      history.length = history.entries.length;
      transitionManager.notifyListeners(history.location, history.action);
    }

    function createKey() {
      return Math.random().toString(36).substr(2, keyLength);
    }

    var index = clamp(initialIndex, 0, initialEntries.length - 1);
    var entries = initialEntries.map(function (entry) {
      return typeof entry === 'string' ? createLocation(entry, undefined, createKey()) : createLocation(entry, undefined, entry.key || createKey());
    }); // Public interface

    var createHref = createPath;

    function push(path, state) {
      var action = 'PUSH';
      var location = createLocation(path, state, createKey(), history.location);
      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
        if (!ok) return;
        var prevIndex = history.index;
        var nextIndex = prevIndex + 1;
        var nextEntries = history.entries.slice(0);

        if (nextEntries.length > nextIndex) {
          nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);
        } else {
          nextEntries.push(location);
        }

        setState({
          action: action,
          location: location,
          index: nextIndex,
          entries: nextEntries
        });
      });
    }

    function replace(path, state) {
      var action = 'REPLACE';
      var location = createLocation(path, state, createKey(), history.location);
      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
        if (!ok) return;
        history.entries[history.index] = location;
        setState({
          action: action,
          location: location
        });
      });
    }

    function go(n) {
      var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);
      var action = 'POP';
      var location = history.entries[nextIndex];
      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
        if (ok) {
          setState({
            action: action,
            location: location,
            index: nextIndex
          });
        } else {
          // Mimic the behavior of DOM histories by
          // causing a render after a cancelled POP.
          setState();
        }
      });
    }

    function goBack() {
      go(-1);
    }

    function goForward() {
      go(1);
    }

    function canGo(n) {
      var nextIndex = history.index + n;
      return nextIndex >= 0 && nextIndex < history.entries.length;
    }

    function block(prompt) {
      if (prompt === void 0) {
        prompt = false;
      }

      return transitionManager.setPrompt(prompt);
    }

    function listen(listener) {
      return transitionManager.appendListener(listener);
    }

    var history = {
      length: entries.length,
      action: 'POP',
      location: entries[index],
      index: index,
      entries: entries,
      createHref: createHref,
      push: push,
      replace: replace,
      go: go,
      goBack: goBack,
      goForward: goForward,
      canGo: canGo,
      block: block,
      listen: listen
    };
    return history;
  }

  var MAX_SIGNED_31_BIT_INT = 1073741823;
  var commonjsGlobal$1 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : {};

  function getUniqueId() {
    var key = '__global_unique_id__';
    return commonjsGlobal$1[key] = (commonjsGlobal$1[key] || 0) + 1;
  }

  function objectIs(x, y) {
    if (x === y) {
      return x !== 0 || 1 / x === 1 / y;
    } else {
      return x !== x && y !== y;
    }
  }

  function createEventEmitter(value) {
    var handlers = [];
    return {
      on: function on(handler) {
        handlers.push(handler);
      },
      off: function off(handler) {
        handlers = handlers.filter(function (h) {
          return h !== handler;
        });
      },
      get: function get() {
        return value;
      },
      set: function set(newValue, changedBits) {
        value = newValue;
        handlers.forEach(function (handler) {
          return handler(value, changedBits);
        });
      }
    };
  }

  function onlyChild(children) {
    return Array.isArray(children) ? children[0] : children;
  }

  function createReactContext(defaultValue, calculateChangedBits) {
    var _Provider$childContex, _Consumer$contextType;

    var contextProp = '__create-react-context-' + getUniqueId() + '__';

    var Provider = /*#__PURE__*/function (_Component) {
      _inheritsLoose(Provider, _Component);

      function Provider() {
        var _this;

        _this = _Component.apply(this, arguments) || this;
        _this.emitter = createEventEmitter(_this.props.value);
        return _this;
      }

      var _proto = Provider.prototype;

      _proto.getChildContext = function getChildContext() {
        var _ref;

        return _ref = {}, _ref[contextProp] = this.emitter, _ref;
      };

      _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if (this.props.value !== nextProps.value) {
          var oldValue = this.props.value;
          var newValue = nextProps.value;
          var changedBits;

          if (objectIs(oldValue, newValue)) {
            changedBits = 0;
          } else {
            changedBits = typeof calculateChangedBits === 'function' ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;

            changedBits |= 0;

            if (changedBits !== 0) {
              this.emitter.set(nextProps.value, changedBits);
            }
          }
        }
      };

      _proto.render = function render() {
        return this.props.children;
      };

      return Provider;
    }(react.exports.Component);

    Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[contextProp] = PropTypes$1.object.isRequired, _Provider$childContex);

    var Consumer = /*#__PURE__*/function (_Component2) {
      _inheritsLoose(Consumer, _Component2);

      function Consumer() {
        var _this2;

        _this2 = _Component2.apply(this, arguments) || this;
        _this2.state = {
          value: _this2.getValue()
        };

        _this2.onUpdate = function (newValue, changedBits) {
          var observedBits = _this2.observedBits | 0;

          if ((observedBits & changedBits) !== 0) {
            _this2.setState({
              value: _this2.getValue()
            });
          }
        };

        return _this2;
      }

      var _proto2 = Consumer.prototype;

      _proto2.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        var observedBits = nextProps.observedBits;
        this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
      };

      _proto2.componentDidMount = function componentDidMount() {
        if (this.context[contextProp]) {
          this.context[contextProp].on(this.onUpdate);
        }

        var observedBits = this.props.observedBits;
        this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
      };

      _proto2.componentWillUnmount = function componentWillUnmount() {
        if (this.context[contextProp]) {
          this.context[contextProp].off(this.onUpdate);
        }
      };

      _proto2.getValue = function getValue() {
        if (this.context[contextProp]) {
          return this.context[contextProp].get();
        } else {
          return defaultValue;
        }
      };

      _proto2.render = function render() {
        return onlyChild(this.props.children)(this.state.value);
      };

      return Consumer;
    }(react.exports.Component);

    Consumer.contextTypes = (_Consumer$contextType = {}, _Consumer$contextType[contextProp] = PropTypes$1.object, _Consumer$contextType);
    return {
      Provider: Provider,
      Consumer: Consumer
    };
  }

  var index$2 = React.createContext || createReactContext;

  var pathToRegexp$2 = {exports: {}};

  var isarray$1 = Array.isArray || function (arr) {
    return Object.prototype.toString.call(arr) == '[object Array]';
  };

  var isarray = isarray$1;
  /**
   * Expose `pathToRegexp`.
   */

  pathToRegexp$2.exports = pathToRegexp;
  pathToRegexp$2.exports.parse = parse$2;
  pathToRegexp$2.exports.compile = compile;
  pathToRegexp$2.exports.tokensToFunction = tokensToFunction;
  pathToRegexp$2.exports.tokensToRegExp = tokensToRegExp;
  /**
   * The main path matching regexp utility.
   *
   * @type {RegExp}
   */

  var PATH_REGEXP = new RegExp([// Match escaped characters that would otherwise appear in future matches.
  // This allows the user to escape special characters that won't transform.
  '(\\\\.)', // Match Express-style parameters and un-named parameters with a prefix
  // and optional suffixes. Matches appear as:
  //
  // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
  // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
  // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
  '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'].join('|'), 'g');
  /**
   * Parse a string for the raw tokens.
   *
   * @param  {string}  str
   * @param  {Object=} options
   * @return {!Array}
   */

  function parse$2(str, options) {
    var tokens = [];
    var key = 0;
    var index = 0;
    var path = '';
    var defaultDelimiter = options && options.delimiter || '/';
    var res;

    while ((res = PATH_REGEXP.exec(str)) != null) {
      var m = res[0];
      var escaped = res[1];
      var offset = res.index;
      path += str.slice(index, offset);
      index = offset + m.length; // Ignore already escaped sequences.

      if (escaped) {
        path += escaped[1];
        continue;
      }

      var next = str[index];
      var prefix = res[2];
      var name = res[3];
      var capture = res[4];
      var group = res[5];
      var modifier = res[6];
      var asterisk = res[7]; // Push the current path onto the tokens.

      if (path) {
        tokens.push(path);
        path = '';
      }

      var partial = prefix != null && next != null && next !== prefix;
      var repeat = modifier === '+' || modifier === '*';
      var optional = modifier === '?' || modifier === '*';
      var delimiter = res[2] || defaultDelimiter;
      var pattern = capture || group;
      tokens.push({
        name: name || key++,
        prefix: prefix || '',
        delimiter: delimiter,
        optional: optional,
        repeat: repeat,
        partial: partial,
        asterisk: !!asterisk,
        pattern: pattern ? escapeGroup(pattern) : asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?'
      });
    } // Match any characters still remaining.


    if (index < str.length) {
      path += str.substr(index);
    } // If the path exists, push it onto the end.


    if (path) {
      tokens.push(path);
    }

    return tokens;
  }
  /**
   * Compile a string to a template function for the path.
   *
   * @param  {string}             str
   * @param  {Object=}            options
   * @return {!function(Object=, Object=)}
   */


  function compile(str, options) {
    return tokensToFunction(parse$2(str, options), options);
  }
  /**
   * Prettier encoding of URI path segments.
   *
   * @param  {string}
   * @return {string}
   */


  function encodeURIComponentPretty(str) {
    return encodeURI(str).replace(/[\/?#]/g, function (c) {
      return '%' + c.charCodeAt(0).toString(16).toUpperCase();
    });
  }
  /**
   * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
   *
   * @param  {string}
   * @return {string}
   */


  function encodeAsterisk(str) {
    return encodeURI(str).replace(/[?#]/g, function (c) {
      return '%' + c.charCodeAt(0).toString(16).toUpperCase();
    });
  }
  /**
   * Expose a method for transforming tokens into the path function.
   */


  function tokensToFunction(tokens, options) {
    // Compile all the tokens into regexps.
    var matches = new Array(tokens.length); // Compile all the patterns before compilation.

    for (var i = 0; i < tokens.length; i++) {
      if (_typeof(tokens[i]) === 'object') {
        matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags(options));
      }
    }

    return function (obj, opts) {
      var path = '';
      var data = obj || {};
      var options = opts || {};
      var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;

      for (var i = 0; i < tokens.length; i++) {
        var token = tokens[i];

        if (typeof token === 'string') {
          path += token;
          continue;
        }

        var value = data[token.name];
        var segment;

        if (value == null) {
          if (token.optional) {
            // Prepend partial segment prefixes.
            if (token.partial) {
              path += token.prefix;
            }

            continue;
          } else {
            throw new TypeError('Expected "' + token.name + '" to be defined');
          }
        }

        if (isarray(value)) {
          if (!token.repeat) {
            throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`');
          }

          if (value.length === 0) {
            if (token.optional) {
              continue;
            } else {
              throw new TypeError('Expected "' + token.name + '" to not be empty');
            }
          }

          for (var j = 0; j < value.length; j++) {
            segment = encode(value[j]);

            if (!matches[i].test(segment)) {
              throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`');
            }

            path += (j === 0 ? token.prefix : token.delimiter) + segment;
          }

          continue;
        }

        segment = token.asterisk ? encodeAsterisk(value) : encode(value);

        if (!matches[i].test(segment)) {
          throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"');
        }

        path += token.prefix + segment;
      }

      return path;
    };
  }
  /**
   * Escape a regular expression string.
   *
   * @param  {string} str
   * @return {string}
   */


  function escapeString(str) {
    return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1');
  }
  /**
   * Escape the capturing group by escaping special characters and meaning.
   *
   * @param  {string} group
   * @return {string}
   */


  function escapeGroup(group) {
    return group.replace(/([=!:$\/()])/g, '\\$1');
  }
  /**
   * Attach the keys as a property of the regexp.
   *
   * @param  {!RegExp} re
   * @param  {Array}   keys
   * @return {!RegExp}
   */


  function attachKeys(re, keys) {
    re.keys = keys;
    return re;
  }
  /**
   * Get the flags for a regexp from the options.
   *
   * @param  {Object} options
   * @return {string}
   */


  function flags(options) {
    return options && options.sensitive ? '' : 'i';
  }
  /**
   * Pull out keys from a regexp.
   *
   * @param  {!RegExp} path
   * @param  {!Array}  keys
   * @return {!RegExp}
   */


  function regexpToRegexp(path, keys) {
    // Use a negative lookahead to match only capturing groups.
    var groups = path.source.match(/\((?!\?)/g);

    if (groups) {
      for (var i = 0; i < groups.length; i++) {
        keys.push({
          name: i,
          prefix: null,
          delimiter: null,
          optional: false,
          repeat: false,
          partial: false,
          asterisk: false,
          pattern: null
        });
      }
    }

    return attachKeys(path, keys);
  }
  /**
   * Transform an array into a regexp.
   *
   * @param  {!Array}  path
   * @param  {Array}   keys
   * @param  {!Object} options
   * @return {!RegExp}
   */


  function arrayToRegexp(path, keys, options) {
    var parts = [];

    for (var i = 0; i < path.length; i++) {
      parts.push(pathToRegexp(path[i], keys, options).source);
    }

    var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));
    return attachKeys(regexp, keys);
  }
  /**
   * Create a path regexp from string input.
   *
   * @param  {string}  path
   * @param  {!Array}  keys
   * @param  {!Object} options
   * @return {!RegExp}
   */


  function stringToRegexp(path, keys, options) {
    return tokensToRegExp(parse$2(path, options), keys, options);
  }
  /**
   * Expose a function for taking tokens and returning a RegExp.
   *
   * @param  {!Array}          tokens
   * @param  {(Array|Object)=} keys
   * @param  {Object=}         options
   * @return {!RegExp}
   */


  function tokensToRegExp(tokens, keys, options) {
    if (!isarray(keys)) {
      options =
      /** @type {!Object} */
      keys || options;
      keys = [];
    }

    options = options || {};
    var strict = options.strict;
    var end = options.end !== false;
    var route = ''; // Iterate over the tokens and create our regexp string.

    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i];

      if (typeof token === 'string') {
        route += escapeString(token);
      } else {
        var prefix = escapeString(token.prefix);
        var capture = '(?:' + token.pattern + ')';
        keys.push(token);

        if (token.repeat) {
          capture += '(?:' + prefix + capture + ')*';
        }

        if (token.optional) {
          if (!token.partial) {
            capture = '(?:' + prefix + '(' + capture + '))?';
          } else {
            capture = prefix + '(' + capture + ')?';
          }
        } else {
          capture = prefix + '(' + capture + ')';
        }

        route += capture;
      }
    }

    var delimiter = escapeString(options.delimiter || '/');
    var endsWithDelimiter = route.slice(-delimiter.length) === delimiter; // In non-strict mode we allow a slash at the end of match. If the path to
    // match already ends with a slash, we remove it for consistency. The slash
    // is valid at the end of a path match, not in the middle. This is important
    // in non-ending mode, where "/test/" shouldn't match "/test//route".

    if (!strict) {
      route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
    }

    if (end) {
      route += '$';
    } else {
      // In non-ending mode, we need the capturing groups to match as much as
      // possible by using a positive lookahead to the end or next path segment.
      route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
    }

    return attachKeys(new RegExp('^' + route, flags(options)), keys);
  }
  /**
   * Normalize the given path string, returning a regular expression.
   *
   * An empty array can be passed in for the keys, which will hold the
   * placeholder key descriptions. For example, using `/user/:id`, `keys` will
   * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
   *
   * @param  {(string|RegExp|Array)} path
   * @param  {(Array|Object)=}       keys
   * @param  {Object=}               options
   * @return {!RegExp}
   */


  function pathToRegexp(path, keys, options) {
    if (!isarray(keys)) {
      options =
      /** @type {!Object} */
      keys || options;
      keys = [];
    }

    options = options || {};

    if (path instanceof RegExp) {
      return regexpToRegexp(path,
      /** @type {!Array} */
      keys);
    }

    if (isarray(path)) {
      return arrayToRegexp(
      /** @type {!Array} */
      path,
      /** @type {!Array} */
      keys, options);
    }

    return stringToRegexp(
    /** @type {string} */
    path,
    /** @type {!Array} */
    keys, options);
  }

  var pathToRegexp$1 = pathToRegexp$2.exports;

  var createNamedContext = function createNamedContext(name) {
    var context = index$2();
    context.displayName = name;
    return context;
  };

  var historyContext = /*#__PURE__*/createNamedContext("Router-History");
  var context = /*#__PURE__*/createNamedContext("Router");
  /**
   * The public API for putting history on context.
   */

  var Router = /*#__PURE__*/function (_React$Component) {
    _inheritsLoose(Router, _React$Component);

    Router.computeRootMatch = function computeRootMatch(pathname) {
      return {
        path: "/",
        url: "/",
        params: {},
        isExact: pathname === "/"
      };
    };

    function Router(props) {
      var _this;

      _this = _React$Component.call(this, props) || this;
      _this.state = {
        location: props.history.location
      }; // This is a bit of a hack. We have to start listening for location
      // changes here in the constructor in case there are any <Redirect>s
      // on the initial render. If there are, they will replace/push when
      // they mount and since cDM fires in children before parents, we may
      // get a new location before the <Router> is mounted.

      _this._isMounted = false;
      _this._pendingLocation = null;

      if (!props.staticContext) {
        _this.unlisten = props.history.listen(function (location) {
          if (_this._isMounted) {
            _this.setState({
              location: location
            });
          } else {
            _this._pendingLocation = location;
          }
        });
      }

      return _this;
    }

    var _proto = Router.prototype;

    _proto.componentDidMount = function componentDidMount() {
      this._isMounted = true;

      if (this._pendingLocation) {
        this.setState({
          location: this._pendingLocation
        });
      }
    };

    _proto.componentWillUnmount = function componentWillUnmount() {
      if (this.unlisten) {
        this.unlisten();
        this._isMounted = false;
        this._pendingLocation = null;
      }
    };

    _proto.render = function render() {
      return /*#__PURE__*/React.createElement(context.Provider, {
        value: {
          history: this.props.history,
          location: this.state.location,
          match: Router.computeRootMatch(this.state.location.pathname),
          staticContext: this.props.staticContext
        }
      }, /*#__PURE__*/React.createElement(historyContext.Provider, {
        children: this.props.children || null,
        value: this.props.history
      }));
    };

    return Router;
  }(React.Component);
  /**
   * The public API for a <Router> that stores location in memory.
   */


  /*#__PURE__*/(function (_React$Component) {
    _inheritsLoose(MemoryRouter, _React$Component);

    function MemoryRouter() {
      var _this;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.history = createMemoryHistory(_this.props);
      return _this;
    }

    var _proto = MemoryRouter.prototype;

    _proto.render = function render() {
      return /*#__PURE__*/React.createElement(Router, {
        history: this.history,
        children: this.props.children
      });
    };

    return MemoryRouter;
  })(React.Component);

  /*#__PURE__*/(function (_React$Component) {
    _inheritsLoose(Lifecycle, _React$Component);

    function Lifecycle() {
      return _React$Component.apply(this, arguments) || this;
    }

    var _proto = Lifecycle.prototype;

    _proto.componentDidMount = function componentDidMount() {
      if (this.props.onMount) this.props.onMount.call(this, this);
    };

    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      if (this.props.onUpdate) this.props.onUpdate.call(this, this, prevProps);
    };

    _proto.componentWillUnmount = function componentWillUnmount() {
      if (this.props.onUnmount) this.props.onUnmount.call(this, this);
    };

    _proto.render = function render() {
      return null;
    };

    return Lifecycle;
  })(React.Component);

  var cache$1 = {};
  var cacheLimit$1 = 10000;
  var cacheCount$1 = 0;

  function compilePath$1(path, options) {
    var cacheKey = "" + options.end + options.strict + options.sensitive;
    var pathCache = cache$1[cacheKey] || (cache$1[cacheKey] = {});
    if (pathCache[path]) return pathCache[path];
    var keys = [];
    var regexp = pathToRegexp$1(path, keys, options);
    var result = {
      regexp: regexp,
      keys: keys
    };

    if (cacheCount$1 < cacheLimit$1) {
      pathCache[path] = result;
      cacheCount$1++;
    }

    return result;
  }
  /**
   * Public API for matching a URL pathname to a path.
   */


  function matchPath(pathname, options) {
    if (options === void 0) {
      options = {};
    }

    if (typeof options === "string" || Array.isArray(options)) {
      options = {
        path: options
      };
    }

    var _options = options,
        path = _options.path,
        _options$exact = _options.exact,
        exact = _options$exact === void 0 ? false : _options$exact,
        _options$strict = _options.strict,
        strict = _options$strict === void 0 ? false : _options$strict,
        _options$sensitive = _options.sensitive,
        sensitive = _options$sensitive === void 0 ? false : _options$sensitive;
    var paths = [].concat(path);
    return paths.reduce(function (matched, path) {
      if (!path && path !== "") return null;
      if (matched) return matched;

      var _compilePath = compilePath$1(path, {
        end: exact,
        strict: strict,
        sensitive: sensitive
      }),
          regexp = _compilePath.regexp,
          keys = _compilePath.keys;

      var match = regexp.exec(pathname);
      if (!match) return null;
      var url = match[0],
          values = match.slice(1);
      var isExact = pathname === url;
      if (exact && !isExact) return null;
      return {
        path: path,
        // the path used to match
        url: path === "/" && url === "" ? "/" : url,
        // the matched portion of the URL
        isExact: isExact,
        // whether or not we matched exactly
        params: keys.reduce(function (memo, key, index) {
          memo[key.name] = values[index];
          return memo;
        }, {})
      };
    }, null);
  }

  function isEmptyChildren(children) {
    return React.Children.count(children) === 0;
  }
  /**
   * The public API for matching a single path and rendering.
   */


  var Route = /*#__PURE__*/function (_React$Component) {
    _inheritsLoose(Route, _React$Component);

    function Route() {
      return _React$Component.apply(this, arguments) || this;
    }

    var _proto = Route.prototype;

    _proto.render = function render() {
      var _this = this;

      return /*#__PURE__*/React.createElement(context.Consumer, null, function (context$1) {
        !context$1 ? invariant(false) : void 0;
        var location = _this.props.location || context$1.location;
        var match = _this.props.computedMatch ? _this.props.computedMatch // <Switch> already computed the match for us
        : _this.props.path ? matchPath(location.pathname, _this.props) : context$1.match;

        var props = _extends$1({}, context$1, {
          location: location,
          match: match
        });

        var _this$props = _this.props,
            children = _this$props.children,
            component = _this$props.component,
            render = _this$props.render; // Preact uses an empty array as children by
        // default, so use null if that's the case.

        if (Array.isArray(children) && isEmptyChildren(children)) {
          children = null;
        }

        return /*#__PURE__*/React.createElement(context.Provider, {
          value: props
        }, props.match ? children ? typeof children === "function" ? children(props) : children : component ? /*#__PURE__*/React.createElement(component, props) : render ? render(props) : null : typeof children === "function" ? children(props) : null);
      });
    };

    return Route;
  }(React.Component);

  function addLeadingSlash(path) {
    return path.charAt(0) === "/" ? path : "/" + path;
  }

  function addBasename(basename, location) {
    if (!basename) return location;
    return _extends$1({}, location, {
      pathname: addLeadingSlash(basename) + location.pathname
    });
  }

  function stripBasename(basename, location) {
    if (!basename) return location;
    var base = addLeadingSlash(basename);
    if (location.pathname.indexOf(base) !== 0) return location;
    return _extends$1({}, location, {
      pathname: location.pathname.substr(base.length)
    });
  }

  function createURL(location) {
    return typeof location === "string" ? location : createPath(location);
  }

  function staticHandler(methodName) {
    return function () {
      invariant(false);
    };
  }

  function noop() {}
  /**
   * The public top-level API for a "static" <Router>, so-called because it
   * can't actually change the current location. Instead, it just records
   * location changes in a context object. Useful mainly in testing and
   * server-rendering scenarios.
   */


  /*#__PURE__*/(function (_React$Component) {
    _inheritsLoose(StaticRouter, _React$Component);

    function StaticRouter() {
      var _this;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

      _this.handlePush = function (location) {
        return _this.navigateTo(location, "PUSH");
      };

      _this.handleReplace = function (location) {
        return _this.navigateTo(location, "REPLACE");
      };

      _this.handleListen = function () {
        return noop;
      };

      _this.handleBlock = function () {
        return noop;
      };

      return _this;
    }

    var _proto = StaticRouter.prototype;

    _proto.navigateTo = function navigateTo(location, action) {
      var _this$props = this.props,
          _this$props$basename = _this$props.basename,
          basename = _this$props$basename === void 0 ? "" : _this$props$basename,
          _this$props$context = _this$props.context,
          context = _this$props$context === void 0 ? {} : _this$props$context;
      context.action = action;
      context.location = addBasename(basename, createLocation(location));
      context.url = createURL(context.location);
    };

    _proto.render = function render() {
      var _this$props2 = this.props,
          _this$props2$basename = _this$props2.basename,
          basename = _this$props2$basename === void 0 ? "" : _this$props2$basename,
          _this$props2$context = _this$props2.context,
          context = _this$props2$context === void 0 ? {} : _this$props2$context,
          _this$props2$location = _this$props2.location,
          location = _this$props2$location === void 0 ? "/" : _this$props2$location,
          rest = _objectWithoutPropertiesLoose(_this$props2, ["basename", "context", "location"]);

      var history = {
        createHref: function createHref(path) {
          return addLeadingSlash(basename + createURL(path));
        },
        action: "POP",
        location: stripBasename(basename, createLocation(location)),
        push: this.handlePush,
        replace: this.handleReplace,
        go: staticHandler(),
        goBack: staticHandler(),
        goForward: staticHandler(),
        listen: this.handleListen,
        block: this.handleBlock
      };
      return /*#__PURE__*/React.createElement(Router, _extends$1({}, rest, {
        history: history,
        staticContext: context
      }));
    };

    return StaticRouter;
  })(React.Component);
  /**
   * The public API for rendering the first <Route> that matches.
   */


  var Switch = /*#__PURE__*/function (_React$Component) {
    _inheritsLoose(Switch, _React$Component);

    function Switch() {
      return _React$Component.apply(this, arguments) || this;
    }

    var _proto = Switch.prototype;

    _proto.render = function render() {
      var _this = this;

      return /*#__PURE__*/React.createElement(context.Consumer, null, function (context) {
        !context ? invariant(false) : void 0;
        var location = _this.props.location || context.location;
        var element, match; // We use React.Children.forEach instead of React.Children.toArray().find()
        // here because toArray adds keys to all child elements and we do not want
        // to trigger an unmount/remount for two <Route>s that render the same
        // component at different URLs.

        React.Children.forEach(_this.props.children, function (child) {
          if (match == null && /*#__PURE__*/React.isValidElement(child)) {
            element = child;
            var path = child.props.path || child.props.from;
            match = path ? matchPath(location.pathname, _extends$1({}, child.props, {
              path: path
            })) : context.match;
          }
        });
        return match ? /*#__PURE__*/React.cloneElement(element, {
          location: location,
          computedMatch: match
        }) : null;
      });
    };

    return Switch;
  }(React.Component);

  React.useContext;

  /**
   * The public API for a <Router> that uses HTML5 history.
   */

  var BrowserRouter = /*#__PURE__*/function (_React$Component) {
    _inheritsLoose(BrowserRouter, _React$Component);

    function BrowserRouter() {
      var _this;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.history = createBrowserHistory(_this.props);
      return _this;
    }

    var _proto = BrowserRouter.prototype;

    _proto.render = function render() {
      return /*#__PURE__*/React.createElement(Router, {
        history: this.history,
        children: this.props.children
      });
    };

    return BrowserRouter;
  }(React.Component);
  /**
   * The public API for a <Router> that uses window.location.hash.
   */


  /*#__PURE__*/(function (_React$Component) {
    _inheritsLoose(HashRouter, _React$Component);

    function HashRouter() {
      var _this;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.history = createHashHistory(_this.props);
      return _this;
    }

    var _proto = HashRouter.prototype;

    _proto.render = function render() {
      return /*#__PURE__*/React.createElement(Router, {
        history: this.history,
        children: this.props.children
      });
    };

    return HashRouter;
  })(React.Component);

  var resolveToLocation = function resolveToLocation(to, currentLocation) {
    return typeof to === "function" ? to(currentLocation) : to;
  };

  var normalizeToLocation = function normalizeToLocation(to, currentLocation) {
    return typeof to === "string" ? createLocation(to, null, null, currentLocation) : to;
  };

  var forwardRefShim = function forwardRefShim(C) {
    return C;
  };

  var forwardRef = React.forwardRef;

  if (typeof forwardRef === "undefined") {
    forwardRef = forwardRefShim;
  }

  function isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
  }

  var LinkAnchor = forwardRef(function (_ref, forwardedRef) {
    var innerRef = _ref.innerRef,
        navigate = _ref.navigate,
        _onClick = _ref.onClick,
        rest = _objectWithoutPropertiesLoose(_ref, ["innerRef", "navigate", "onClick"]);

    var target = rest.target;

    var props = _extends$1({}, rest, {
      onClick: function onClick(event) {
        try {
          if (_onClick) _onClick(event);
        } catch (ex) {
          event.preventDefault();
          throw ex;
        }

        if (!event.defaultPrevented && // onClick prevented default
        event.button === 0 && ( // ignore everything but left clicks
        !target || target === "_self") && // let browser handle "target=_blank" etc.
        !isModifiedEvent(event) // ignore clicks with modifier keys
        ) {
          event.preventDefault();
          navigate();
        }
      }
    }); // React 15 compat


    if (forwardRefShim !== forwardRef) {
      props.ref = forwardedRef || innerRef;
    } else {
      props.ref = innerRef;
    }
    /* eslint-disable-next-line jsx-a11y/anchor-has-content */


    return /*#__PURE__*/React.createElement("a", props);
  });
  /**
   * The public API for rendering a history-aware <a>.
   */


  var Link = forwardRef(function (_ref2, forwardedRef) {
    var _ref2$component = _ref2.component,
        component = _ref2$component === void 0 ? LinkAnchor : _ref2$component,
        replace = _ref2.replace,
        to = _ref2.to,
        innerRef = _ref2.innerRef,
        rest = _objectWithoutPropertiesLoose(_ref2, ["component", "replace", "to", "innerRef"]);

    return /*#__PURE__*/React.createElement(context.Consumer, null, function (context) {
      !context ? invariant(false) : void 0;
      var history = context.history;
      var location = normalizeToLocation(resolveToLocation(to, context.location), context.location);
      var href = location ? history.createHref(location) : "";

      var props = _extends$1({}, rest, {
        href: href,
        navigate: function navigate() {
          var location = resolveToLocation(to, context.location);
          var isDuplicateNavigation = createPath(context.location) === createPath(normalizeToLocation(location));
          var method = replace || isDuplicateNavigation ? history.replace : history.push;
          method(location);
        }
      }); // React 15 compat


      if (forwardRefShim !== forwardRef) {
        props.ref = forwardedRef || innerRef;
      } else {
        props.innerRef = innerRef;
      }

      return /*#__PURE__*/React.createElement(component, props);
    });
  });

  var forwardRefShim$1 = function forwardRefShim(C) {
    return C;
  };

  var forwardRef$1 = React.forwardRef;

  if (typeof forwardRef$1 === "undefined") {
    forwardRef$1 = forwardRefShim$1;
  }

  function joinClassnames() {
    for (var _len = arguments.length, classnames = new Array(_len), _key = 0; _key < _len; _key++) {
      classnames[_key] = arguments[_key];
    }

    return classnames.filter(function (i) {
      return i;
    }).join(" ");
  }
  /**
   * A <Link> wrapper that knows if it's "active" or not.
   */


  forwardRef$1(function (_ref, forwardedRef) {
    var _ref$ariaCurrent = _ref["aria-current"],
        ariaCurrent = _ref$ariaCurrent === void 0 ? "page" : _ref$ariaCurrent,
        _ref$activeClassName = _ref.activeClassName,
        activeClassName = _ref$activeClassName === void 0 ? "active" : _ref$activeClassName,
        activeStyle = _ref.activeStyle,
        classNameProp = _ref.className,
        exact = _ref.exact,
        isActiveProp = _ref.isActive,
        locationProp = _ref.location,
        sensitive = _ref.sensitive,
        strict = _ref.strict,
        styleProp = _ref.style,
        to = _ref.to,
        innerRef = _ref.innerRef,
        rest = _objectWithoutPropertiesLoose(_ref, ["aria-current", "activeClassName", "activeStyle", "className", "exact", "isActive", "location", "sensitive", "strict", "style", "to", "innerRef"]);

    return /*#__PURE__*/React.createElement(context.Consumer, null, function (context) {
      !context ? invariant(false) : void 0;
      var currentLocation = locationProp || context.location;
      var toLocation = normalizeToLocation(resolveToLocation(to, currentLocation), currentLocation);
      var path = toLocation.pathname; // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202

      var escapedPath = path && path.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
      var match = escapedPath ? matchPath(currentLocation.pathname, {
        path: escapedPath,
        exact: exact,
        sensitive: sensitive,
        strict: strict
      }) : null;
      var isActive = !!(isActiveProp ? isActiveProp(match, currentLocation) : match);
      var className = typeof classNameProp === "function" ? classNameProp(isActive) : classNameProp;
      var style = typeof styleProp === "function" ? styleProp(isActive) : styleProp;

      if (isActive) {
        className = joinClassnames(className, activeClassName);
        style = _extends$1({}, style, activeStyle);
      }

      var props = _extends$1({
        "aria-current": isActive && ariaCurrent || null,
        className: className,
        style: style,
        to: toLocation
      }, rest); // React 15 compat


      if (forwardRefShim$1 !== forwardRef$1) {
        props.ref = forwardedRef || innerRef;
      } else {
        props.innerRef = innerRef;
      }

      return /*#__PURE__*/React.createElement(Link, props);
    });
  });

  // react

  var mainTheme = createTheme({
    palette: {
      primary: {
        main: '#001e3c'
      },
      background: {
        "default": '#0A1929'
      }
    }
  }); // theme

  window.theme = mainTheme; // export default

  var Menu = {};

  var interopRequireDefault = {exports: {}};

  (function (module) {
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(interopRequireDefault);

  var createSvgIcon = {};

  var require$$0 = /*@__PURE__*/getAugmentedNamespace(utils$a);

  (function (exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "default", {
      enumerable: true,
      get: function get() {
        return _utils.createSvgIcon;
      }
    });
    var _utils = require$$0;
  })(createSvgIcon);

  var _interopRequireDefault$4 = interopRequireDefault.exports;
  Object.defineProperty(Menu, "__esModule", {
    value: true
  });
  var default_1$4 = Menu["default"] = void 0;

  var _createSvgIcon$4 = _interopRequireDefault$4(createSvgIcon);

  var _jsxRuntime$4 = jsxRuntime.exports;

  var _default$4 = (0, _createSvgIcon$4["default"])( /*#__PURE__*/(0, _jsxRuntime$4.jsx)("path", {
    d: "M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"
  }), 'Menu');

  default_1$4 = Menu["default"] = _default$4;

  var pages = ['Home']; // settings

  var settings = ['Profile', 'Account', 'Dashboard', 'Logout']; // main layout bar

  var MainBar = function MainBar() {
    // theme
    var theme = useTheme();

    var _React$useState = React.useState(null),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        anchorElNav = _React$useState2[0],
        setAnchorElNav = _React$useState2[1];

    var _React$useState3 = React.useState(null),
        _React$useState4 = _slicedToArray$1(_React$useState3, 2),
        anchorElUser = _React$useState4[0],
        setAnchorElUser = _React$useState4[1];

    var handleOpenNavMenu = function handleOpenNavMenu(event) {
      setAnchorElNav(event.currentTarget);
    };

    var handleOpenUserMenu = function handleOpenUserMenu(event) {
      setAnchorElUser(event.currentTarget);
    };

    var handleCloseNavMenu = function handleCloseNavMenu() {
      setAnchorElNav(null);
    };

    var handleCloseUserMenu = function handleCloseUserMenu() {
      setAnchorElUser(null);
    };

    return /*#__PURE__*/React.createElement(AppBar$1, {
      position: "static",
      elevation: 0,
      sx: {
        borderBottom: "1px solid ".concat(theme.palette.primary.light)
      }
    }, /*#__PURE__*/React.createElement(Container$1, {
      maxWidth: "xl"
    }, /*#__PURE__*/React.createElement(Toolbar$1, {
      disableGutters: true
    }, /*#__PURE__*/React.createElement(Typography$1, {
      variant: "h6",
      noWrap: true,
      component: "div",
      sx: {
        mr: 2,
        display: {
          xs: 'none',
          md: 'flex'
        }
      }
    }, "NFT"), /*#__PURE__*/React.createElement(Box$1, {
      sx: {
        flexGrow: 1,
        display: {
          xs: 'flex',
          md: 'none'
        }
      }
    }, /*#__PURE__*/React.createElement(IconButton$1, {
      size: "large",
      "aria-label": "account of current user",
      "aria-controls": "menu-appbar",
      "aria-haspopup": "true",
      onClick: handleOpenNavMenu,
      color: "inherit"
    }, /*#__PURE__*/React.createElement(default_1$4, null)), /*#__PURE__*/React.createElement(Menu$2, {
      id: "menu-appbar",
      anchorEl: anchorElNav,
      anchorOrigin: {
        vertical: 'bottom',
        horizontal: 'left'
      },
      keepMounted: true,
      transformOrigin: {
        vertical: 'top',
        horizontal: 'left'
      },
      open: Boolean(anchorElNav),
      onClose: handleCloseNavMenu,
      sx: {
        display: {
          xs: 'block',
          md: 'none'
        }
      }
    }, pages.map(function (page) {
      return /*#__PURE__*/React.createElement(MenuItem$1, {
        key: page,
        onClick: handleCloseNavMenu
      }, /*#__PURE__*/React.createElement(Typography$1, {
        textAlign: "center"
      }, page));
    }))), /*#__PURE__*/React.createElement(Typography$1, {
      variant: "h6",
      noWrap: true,
      component: "div",
      sx: {
        flexGrow: 1,
        display: {
          xs: 'flex',
          md: 'none'
        }
      }
    }, "LOGO"), /*#__PURE__*/React.createElement(Box$1, {
      sx: {
        flexGrow: 1,
        display: {
          xs: 'none',
          md: 'flex'
        }
      }
    }, pages.map(function (page) {
      return /*#__PURE__*/React.createElement(Button$1, {
        key: page,
        onClick: handleCloseNavMenu,
        sx: {
          my: 2,
          color: 'white',
          display: 'block'
        }
      }, page);
    })), /*#__PURE__*/React.createElement(Box$1, {
      sx: {
        flexGrow: 0
      }
    }, /*#__PURE__*/React.createElement(Tooltip$1, {
      title: "Open settings"
    }, /*#__PURE__*/React.createElement(IconButton$1, {
      onClick: handleOpenUserMenu,
      sx: {
        p: 0
      }
    }, /*#__PURE__*/React.createElement(Avatar$1, {
      alt: "Remy Sharp",
      src: "/static/images/avatar/2.jpg"
    }))), /*#__PURE__*/React.createElement(Menu$2, {
      sx: {
        mt: '45px'
      },
      id: "menu-appbar",
      anchorEl: anchorElUser,
      anchorOrigin: {
        vertical: 'top',
        horizontal: 'right'
      },
      keepMounted: true,
      transformOrigin: {
        vertical: 'top',
        horizontal: 'right'
      },
      open: Boolean(anchorElUser),
      onClose: handleCloseUserMenu
    }, settings.map(function (setting) {
      return /*#__PURE__*/React.createElement(MenuItem$1, {
        key: setting,
        onClick: handleCloseUserMenu
      }, /*#__PURE__*/React.createElement(Typography$1, {
        textAlign: "center"
      }, setting));
    }))))));
  };

  /**
   * home page
   *
   * @param props 
   */

  var MainLayout = function MainLayout() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    // theme
    var theme = useTheme(); // width

    var sidebarWidth = '260px'; // return jsx

    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MainBar, null), /*#__PURE__*/React.createElement(Container$1, {
      maxWidth: "xl",
      sx: {
        mt: theme.spacing(4)
      }
    }, /*#__PURE__*/React.createElement(Stack$1, {
      direction: "row",
      spacing: 2
    }, /*#__PURE__*/React.createElement(Box$1, {
      width: sidebarWidth
    }, /*#__PURE__*/React.createElement(Typography$1, {
      variant: "body2"
    }, "LEFT")), /*#__PURE__*/React.createElement(Box$1, {
      flex: 1
    }, props.children), /*#__PURE__*/React.createElement(Box$1, {
      width: sidebarWidth
    }, /*#__PURE__*/React.createElement(Typography$1, {
      variant: "body2"
    }, "Right")))));
  }; // export default

  var Share = {};

  var _interopRequireDefault$3 = interopRequireDefault.exports;
  Object.defineProperty(Share, "__esModule", {
    value: true
  });
  var default_1$3 = Share["default"] = void 0;

  var _createSvgIcon$3 = _interopRequireDefault$3(createSvgIcon);

  var _jsxRuntime$3 = jsxRuntime.exports;

  var _default$3 = (0, _createSvgIcon$3["default"])( /*#__PURE__*/(0, _jsxRuntime$3.jsx)("path", {
    d: "M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81 1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65 0 1.61 1.31 2.92 2.92 2.92 1.61 0 2.92-1.31 2.92-2.92s-1.31-2.92-2.92-2.92z"
  }), 'Share');

  default_1$3 = Share["default"] = _default$3;

  var Forum = {};

  var _interopRequireDefault$2 = interopRequireDefault.exports;
  Object.defineProperty(Forum, "__esModule", {
    value: true
  });
  var default_1$2 = Forum["default"] = void 0;

  var _createSvgIcon$2 = _interopRequireDefault$2(createSvgIcon);

  var _jsxRuntime$2 = jsxRuntime.exports;

  var _default$2 = (0, _createSvgIcon$2["default"])( /*#__PURE__*/(0, _jsxRuntime$2.jsx)("path", {
    d: "M21 6h-2v9H6v2c0 .55.45 1 1 1h11l4 4V7c0-.55-.45-1-1-1zm-4 6V3c0-.55-.45-1-1-1H3c-.55 0-1 .45-1 1v14l4-4h10c.55 0 1-.45 1-1z"
  }), 'Forum');

  default_1$2 = Forum["default"] = _default$2;

  var MoreVert = {};

  var _interopRequireDefault$1 = interopRequireDefault.exports;
  Object.defineProperty(MoreVert, "__esModule", {
    value: true
  });
  var default_1$1 = MoreVert["default"] = void 0;

  var _createSvgIcon$1 = _interopRequireDefault$1(createSvgIcon);

  var _jsxRuntime$1 = jsxRuntime.exports;

  var _default$1 = (0, _createSvgIcon$1["default"])( /*#__PURE__*/(0, _jsxRuntime$1.jsx)("path", {
    d: "M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
  }), 'MoreVert');

  default_1$1 = MoreVert["default"] = _default$1;

  var ThumbUpOffAlt = {};

  var _interopRequireDefault = interopRequireDefault.exports;
  Object.defineProperty(ThumbUpOffAlt, "__esModule", {
    value: true
  });
  var default_1 = ThumbUpOffAlt["default"] = void 0;

  var _createSvgIcon = _interopRequireDefault(createSvgIcon);

  var _jsxRuntime = jsxRuntime.exports;

  var _default = (0, _createSvgIcon["default"])( /*#__PURE__*/(0, _jsxRuntime.jsx)("path", {
    d: "m13.11 5.72-.57 2.89c-.12.59.04 1.2.42 1.66.38.46.94.73 1.54.73H20v1.08L17.43 18H9.34c-.18 0-.34-.16-.34-.34V9.82l4.11-4.1M14 2 7.59 8.41C7.21 8.79 7 9.3 7 9.83v7.83C7 18.95 8.05 20 9.34 20h8.1c.71 0 1.36-.37 1.72-.97l2.67-6.15c.11-.25.17-.52.17-.8V11c0-1.1-.9-2-2-2h-5.5l.92-4.65c.05-.22.02-.46-.08-.66-.23-.45-.52-.86-.88-1.22L14 2zM4 9H2v11h2c.55 0 1-.45 1-1v-9c0-.55-.45-1-1-1z"
  }), 'ThumbUpOffAlt');

  default_1 = ThumbUpOffAlt["default"] = _default;

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;

    var _s, _e;

    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var NFTBox = function NFTBox() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    // theme
    var theme = useTheme(); // return jsx

    return /*#__PURE__*/React.createElement(Box$1, _extends({}, props, {
      sx: _objectSpread2({
        color: '#fff',
        border: "1px solid ".concat(theme.palette.primary.light),
        padding: theme.spacing(2),
        background: theme.palette.primary.main,
        borderRadius: theme.spacing(1)
      }, props.sx || {})
    }), props.children);
  }; // box

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  var bn$1 = {exports: {}};

  (function (module) {
  (function (module, exports) {

    // Utils
    function assert (val, msg) {
      if (!val) throw new Error(msg || 'Assertion failed');
    }

    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits (ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }

    // BN

    function BN (number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }

      this.negative = 0;
      this.words = null;
      this.length = 0;

      // Reduction context
      this.red = null;

      if (number !== null) {
        if (base === 'le' || base === 'be') {
          endian = base;
          base = 10;
        }

        this._init(number || 0, base || 10, endian || 'be');
      }
    }
    if (typeof module === 'object') {
      module.exports = BN;
    } else {
      exports.BN = BN;
    }

    BN.BN = BN;
    BN.wordSize = 26;

    var Buffer;
    try {
      if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
        Buffer = window.Buffer;
      } else {
        Buffer = require('buffer').Buffer;
      }
    } catch (e) {
    }

    BN.isBN = function isBN (num) {
      if (num instanceof BN) {
        return true;
      }

      return num !== null && typeof num === 'object' &&
        num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };

    BN.max = function max (left, right) {
      if (left.cmp(right) > 0) return left;
      return right;
    };

    BN.min = function min (left, right) {
      if (left.cmp(right) < 0) return left;
      return right;
    };

    BN.prototype._init = function init (number, base, endian) {
      if (typeof number === 'number') {
        return this._initNumber(number, base, endian);
      }

      if (typeof number === 'object') {
        return this._initArray(number, base, endian);
      }

      if (base === 'hex') {
        base = 16;
      }
      assert(base === (base | 0) && base >= 2 && base <= 36);

      number = number.toString().replace(/\s+/g, '');
      var start = 0;
      if (number[0] === '-') {
        start++;
        this.negative = 1;
      }

      if (start < number.length) {
        if (base === 16) {
          this._parseHex(number, start, endian);
        } else {
          this._parseBase(number, base, start);
          if (endian === 'le') {
            this._initArray(this.toArray(), base, endian);
          }
        }
      }
    };

    BN.prototype._initNumber = function _initNumber (number, base, endian) {
      if (number < 0) {
        this.negative = 1;
        number = -number;
      }
      if (number < 0x4000000) {
        this.words = [ number & 0x3ffffff ];
        this.length = 1;
      } else if (number < 0x10000000000000) {
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff
        ];
        this.length = 2;
      } else {
        assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff,
          1
        ];
        this.length = 3;
      }

      if (endian !== 'le') return;

      // Reverse the bytes
      this._initArray(this.toArray(), base, endian);
    };

    BN.prototype._initArray = function _initArray (number, base, endian) {
      // Perhaps a Uint8Array
      assert(typeof number.length === 'number');
      if (number.length <= 0) {
        this.words = [ 0 ];
        this.length = 1;
        return this;
      }

      this.length = Math.ceil(number.length / 3);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      var j, w;
      var off = 0;
      if (endian === 'be') {
        for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
          w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      } else if (endian === 'le') {
        for (i = 0, j = 0; i < number.length; i += 3) {
          w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      }
      return this.strip();
    };

    function parseHex4Bits (string, index) {
      var c = string.charCodeAt(index);
      // 'A' - 'F'
      if (c >= 65 && c <= 70) {
        return c - 55;
      // 'a' - 'f'
      } else if (c >= 97 && c <= 102) {
        return c - 87;
      // '0' - '9'
      } else {
        return (c - 48) & 0xf;
      }
    }

    function parseHexByte (string, lowerBound, index) {
      var r = parseHex4Bits(string, index);
      if (index - 1 >= lowerBound) {
        r |= parseHex4Bits(string, index - 1) << 4;
      }
      return r;
    }

    BN.prototype._parseHex = function _parseHex (number, start, endian) {
      // Create possibly bigger array to ensure that it fits the number
      this.length = Math.ceil((number.length - start) / 6);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      // 24-bits chunks
      var off = 0;
      var j = 0;

      var w;
      if (endian === 'be') {
        for (i = number.length - 1; i >= start; i -= 2) {
          w = parseHexByte(number, start, i) << off;
          this.words[j] |= w & 0x3ffffff;
          if (off >= 18) {
            off -= 18;
            j += 1;
            this.words[j] |= w >>> 26;
          } else {
            off += 8;
          }
        }
      } else {
        var parseLength = number.length - start;
        for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
          w = parseHexByte(number, start, i) << off;
          this.words[j] |= w & 0x3ffffff;
          if (off >= 18) {
            off -= 18;
            j += 1;
            this.words[j] |= w >>> 26;
          } else {
            off += 8;
          }
        }
      }

      this.strip();
    };

    function parseBase (str, start, end, mul) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;

        r *= mul;

        // 'a'
        if (c >= 49) {
          r += c - 49 + 0xa;

        // 'A'
        } else if (c >= 17) {
          r += c - 17 + 0xa;

        // '0' - '9'
        } else {
          r += c;
        }
      }
      return r;
    }

    BN.prototype._parseBase = function _parseBase (number, base, start) {
      // Initialize as zero
      this.words = [ 0 ];
      this.length = 1;

      // Find length of limb in base
      for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = (limbPow / base) | 0;

      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;

      var word = 0;
      for (var i = start; i < end; i += limbLen) {
        word = parseBase(number, i, i + limbLen, base);

        this.imuln(limbPow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }

      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i, number.length, base);

        for (i = 0; i < mod; i++) {
          pow *= base;
        }

        this.imuln(pow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }

      this.strip();
    };

    BN.prototype.copy = function copy (dest) {
      dest.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        dest.words[i] = this.words[i];
      }
      dest.length = this.length;
      dest.negative = this.negative;
      dest.red = this.red;
    };

    BN.prototype.clone = function clone () {
      var r = new BN(null);
      this.copy(r);
      return r;
    };

    BN.prototype._expand = function _expand (size) {
      while (this.length < size) {
        this.words[this.length++] = 0;
      }
      return this;
    };

    // Remove leading `0` from `this`
    BN.prototype.strip = function strip () {
      while (this.length > 1 && this.words[this.length - 1] === 0) {
        this.length--;
      }
      return this._normSign();
    };

    BN.prototype._normSign = function _normSign () {
      // -0 = 0
      if (this.length === 1 && this.words[0] === 0) {
        this.negative = 0;
      }
      return this;
    };

    BN.prototype.inspect = function inspect () {
      return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };

    /*

    var zeros = [];
    var groupSizes = [];
    var groupBases = [];

    var s = '';
    var i = -1;
    while (++i < BN.wordSize) {
      zeros[i] = s;
      s += '0';
    }
    groupSizes[0] = 0;
    groupSizes[1] = 0;
    groupBases[0] = 0;
    groupBases[1] = 0;
    var base = 2 - 1;
    while (++base < 36 + 1) {
      var groupSize = 0;
      var groupBase = 1;
      while (groupBase < (1 << BN.wordSize) / base) {
        groupBase *= base;
        groupSize += 1;
      }
      groupSizes[base] = groupSize;
      groupBases[base] = groupBase;
    }

    */

    var zeros = [
      '',
      '0',
      '00',
      '000',
      '0000',
      '00000',
      '000000',
      '0000000',
      '00000000',
      '000000000',
      '0000000000',
      '00000000000',
      '000000000000',
      '0000000000000',
      '00000000000000',
      '000000000000000',
      '0000000000000000',
      '00000000000000000',
      '000000000000000000',
      '0000000000000000000',
      '00000000000000000000',
      '000000000000000000000',
      '0000000000000000000000',
      '00000000000000000000000',
      '000000000000000000000000',
      '0000000000000000000000000'
    ];

    var groupSizes = [
      0, 0,
      25, 16, 12, 11, 10, 9, 8,
      8, 7, 7, 7, 7, 6, 6,
      6, 6, 6, 6, 6, 5, 5,
      5, 5, 5, 5, 5, 5, 5,
      5, 5, 5, 5, 5, 5, 5
    ];

    var groupBases = [
      0, 0,
      33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
      43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
      16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
      6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
      24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
    ];

    BN.prototype.toString = function toString (base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;

      var out;
      if (base === 16 || base === 'hex') {
        out = '';
        var off = 0;
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = this.words[i];
          var word = (((w << off) | carry) & 0xffffff).toString(16);
          carry = (w >>> (24 - off)) & 0xffffff;
          if (carry !== 0 || i !== this.length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
          off += 2;
          if (off >= 26) {
            off -= 26;
            i--;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }

      if (base === (base | 0) && base >= 2 && base <= 36) {
        // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
        var groupSize = groupSizes[base];
        // var groupBase = Math.pow(base, groupSize);
        var groupBase = groupBases[base];
        out = '';
        var c = this.clone();
        c.negative = 0;
        while (!c.isZero()) {
          var r = c.modn(groupBase).toString(base);
          c = c.idivn(groupBase);

          if (!c.isZero()) {
            out = zeros[groupSize - r.length] + r + out;
          } else {
            out = r + out;
          }
        }
        if (this.isZero()) {
          out = '0' + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }

      assert(false, 'Base should be between 2 and 36');
    };

    BN.prototype.toNumber = function toNumber () {
      var ret = this.words[0];
      if (this.length === 2) {
        ret += this.words[1] * 0x4000000;
      } else if (this.length === 3 && this.words[2] === 0x01) {
        // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + (this.words[1] * 0x4000000);
      } else if (this.length > 2) {
        assert(false, 'Number can only safely store up to 53 bits');
      }
      return (this.negative !== 0) ? -ret : ret;
    };

    BN.prototype.toJSON = function toJSON () {
      return this.toString(16);
    };

    BN.prototype.toBuffer = function toBuffer (endian, length) {
      assert(typeof Buffer !== 'undefined');
      return this.toArrayLike(Buffer, endian, length);
    };

    BN.prototype.toArray = function toArray (endian, length) {
      return this.toArrayLike(Array, endian, length);
    };

    BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert(byteLength <= reqLength, 'byte array longer than desired length');
      assert(reqLength > 0, 'Requested array length <= 0');

      this.strip();
      var littleEndian = endian === 'le';
      var res = new ArrayType(reqLength);

      var b, i;
      var q = this.clone();
      if (!littleEndian) {
        // Assume big-endian
        for (i = 0; i < reqLength - byteLength; i++) {
          res[i] = 0;
        }

        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);

          res[reqLength - i - 1] = b;
        }
      } else {
        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);

          res[i] = b;
        }

        for (; i < reqLength; i++) {
          res[i] = 0;
        }
      }

      return res;
    };

    if (Math.clz32) {
      BN.prototype._countBits = function _countBits (w) {
        return 32 - Math.clz32(w);
      };
    } else {
      BN.prototype._countBits = function _countBits (w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
          r += 13;
          t >>>= 13;
        }
        if (t >= 0x40) {
          r += 7;
          t >>>= 7;
        }
        if (t >= 0x8) {
          r += 4;
          t >>>= 4;
        }
        if (t >= 0x02) {
          r += 2;
          t >>>= 2;
        }
        return r + t;
      };
    }

    BN.prototype._zeroBits = function _zeroBits (w) {
      // Short-cut
      if (w === 0) return 26;

      var t = w;
      var r = 0;
      if ((t & 0x1fff) === 0) {
        r += 13;
        t >>>= 13;
      }
      if ((t & 0x7f) === 0) {
        r += 7;
        t >>>= 7;
      }
      if ((t & 0xf) === 0) {
        r += 4;
        t >>>= 4;
      }
      if ((t & 0x3) === 0) {
        r += 2;
        t >>>= 2;
      }
      if ((t & 0x1) === 0) {
        r++;
      }
      return r;
    };

    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength () {
      var w = this.words[this.length - 1];
      var hi = this._countBits(w);
      return (this.length - 1) * 26 + hi;
    };

    function toBitArray (num) {
      var w = new Array(num.bitLength());

      for (var bit = 0; bit < w.length; bit++) {
        var off = (bit / 26) | 0;
        var wbit = bit % 26;

        w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
      }

      return w;
    }

    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits () {
      if (this.isZero()) return 0;

      var r = 0;
      for (var i = 0; i < this.length; i++) {
        var b = this._zeroBits(this.words[i]);
        r += b;
        if (b !== 26) break;
      }
      return r;
    };

    BN.prototype.byteLength = function byteLength () {
      return Math.ceil(this.bitLength() / 8);
    };

    BN.prototype.toTwos = function toTwos (width) {
      if (this.negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };

    BN.prototype.fromTwos = function fromTwos (width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };

    BN.prototype.isNeg = function isNeg () {
      return this.negative !== 0;
    };

    // Return negative clone of `this`
    BN.prototype.neg = function neg () {
      return this.clone().ineg();
    };

    BN.prototype.ineg = function ineg () {
      if (!this.isZero()) {
        this.negative ^= 1;
      }

      return this;
    };

    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor (num) {
      while (this.length < num.length) {
        this.words[this.length++] = 0;
      }

      for (var i = 0; i < num.length; i++) {
        this.words[i] = this.words[i] | num.words[i];
      }

      return this.strip();
    };

    BN.prototype.ior = function ior (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuor(num);
    };

    // Or `num` with `this`
    BN.prototype.or = function or (num) {
      if (this.length > num.length) return this.clone().ior(num);
      return num.clone().ior(this);
    };

    BN.prototype.uor = function uor (num) {
      if (this.length > num.length) return this.clone().iuor(num);
      return num.clone().iuor(this);
    };

    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand (num) {
      // b = min-length(num, this)
      var b;
      if (this.length > num.length) {
        b = num;
      } else {
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = this.words[i] & num.words[i];
      }

      this.length = b.length;

      return this.strip();
    };

    BN.prototype.iand = function iand (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuand(num);
    };

    // And `num` with `this`
    BN.prototype.and = function and (num) {
      if (this.length > num.length) return this.clone().iand(num);
      return num.clone().iand(this);
    };

    BN.prototype.uand = function uand (num) {
      if (this.length > num.length) return this.clone().iuand(num);
      return num.clone().iuand(this);
    };

    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor (num) {
      // a.length > b.length
      var a;
      var b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = a.words[i] ^ b.words[i];
      }

      if (this !== a) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = a.length;

      return this.strip();
    };

    BN.prototype.ixor = function ixor (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuxor(num);
    };

    // Xor `num` with `this`
    BN.prototype.xor = function xor (num) {
      if (this.length > num.length) return this.clone().ixor(num);
      return num.clone().ixor(this);
    };

    BN.prototype.uxor = function uxor (num) {
      if (this.length > num.length) return this.clone().iuxor(num);
      return num.clone().iuxor(this);
    };

    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn (width) {
      assert(typeof width === 'number' && width >= 0);

      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;

      // Extend the buffer with leading zeroes
      this._expand(bytesNeeded);

      if (bitsLeft > 0) {
        bytesNeeded--;
      }

      // Handle complete words
      for (var i = 0; i < bytesNeeded; i++) {
        this.words[i] = ~this.words[i] & 0x3ffffff;
      }

      // Handle the residue
      if (bitsLeft > 0) {
        this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
      }

      // And remove leading zeroes
      return this.strip();
    };

    BN.prototype.notn = function notn (width) {
      return this.clone().inotn(width);
    };

    // Set `bit` of `this`
    BN.prototype.setn = function setn (bit, val) {
      assert(typeof bit === 'number' && bit >= 0);

      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      this._expand(off + 1);

      if (val) {
        this.words[off] = this.words[off] | (1 << wbit);
      } else {
        this.words[off] = this.words[off] & ~(1 << wbit);
      }

      return this.strip();
    };

    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd (num) {
      var r;

      // negative + positive
      if (this.negative !== 0 && num.negative === 0) {
        this.negative = 0;
        r = this.isub(num);
        this.negative ^= 1;
        return this._normSign();

      // positive + negative
      } else if (this.negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r = this.isub(num);
        num.negative = 1;
        return r._normSign();
      }

      // a.length > b.length
      var a, b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }

      this.length = a.length;
      if (carry !== 0) {
        this.words[this.length] = carry;
        this.length++;
      // Copy the rest of the words
      } else if (a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      return this;
    };

    // Add `num` to `this`
    BN.prototype.add = function add (num) {
      var res;
      if (num.negative !== 0 && this.negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && this.negative !== 0) {
        this.negative = 0;
        res = num.sub(this);
        this.negative = 1;
        return res;
      }

      if (this.length > num.length) return this.clone().iadd(num);

      return num.clone().iadd(this);
    };

    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub (num) {
      // this - (-num) = this + num
      if (num.negative !== 0) {
        num.negative = 0;
        var r = this.iadd(num);
        num.negative = 1;
        return r._normSign();

      // -this - num = -(this + num)
      } else if (this.negative !== 0) {
        this.negative = 0;
        this.iadd(num);
        this.negative = 1;
        return this._normSign();
      }

      // At this point both numbers are positive
      var cmp = this.cmp(num);

      // Optimization - zeroify
      if (cmp === 0) {
        this.negative = 0;
        this.length = 1;
        this.words[0] = 0;
        return this;
      }

      // a > b
      var a, b;
      if (cmp > 0) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }

      // Copy rest of the words
      if (carry === 0 && i < a.length && a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = Math.max(this.length, i);

      if (a !== this) {
        this.negative = 1;
      }

      return this.strip();
    };

    // Subtract `num` from `this`
    BN.prototype.sub = function sub (num) {
      return this.clone().isub(num);
    };

    function smallMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      var len = (self.length + num.length) | 0;
      out.length = len;
      len = (len - 1) | 0;

      // Peel one iteration (compiler can't do it, because of code complexity)
      var a = self.words[0] | 0;
      var b = num.words[0] | 0;
      var r = a * b;

      var lo = r & 0x3ffffff;
      var carry = (r / 0x4000000) | 0;
      out.words[0] = lo;

      for (var k = 1; k < len; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = carry >>> 26;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = (k - j) | 0;
          a = self.words[i] | 0;
          b = num.words[j] | 0;
          r = a * b + rword;
          ncarry += (r / 0x4000000) | 0;
          rword = r & 0x3ffffff;
        }
        out.words[k] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k] = carry | 0;
      } else {
        out.length--;
      }

      return out.strip();
    }

    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo (self, num, out) {
      var a = self.words;
      var b = num.words;
      var o = out.words;
      var c = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a[0] | 0;
      var al0 = a0 & 0x1fff;
      var ah0 = a0 >>> 13;
      var a1 = a[1] | 0;
      var al1 = a1 & 0x1fff;
      var ah1 = a1 >>> 13;
      var a2 = a[2] | 0;
      var al2 = a2 & 0x1fff;
      var ah2 = a2 >>> 13;
      var a3 = a[3] | 0;
      var al3 = a3 & 0x1fff;
      var ah3 = a3 >>> 13;
      var a4 = a[4] | 0;
      var al4 = a4 & 0x1fff;
      var ah4 = a4 >>> 13;
      var a5 = a[5] | 0;
      var al5 = a5 & 0x1fff;
      var ah5 = a5 >>> 13;
      var a6 = a[6] | 0;
      var al6 = a6 & 0x1fff;
      var ah6 = a6 >>> 13;
      var a7 = a[7] | 0;
      var al7 = a7 & 0x1fff;
      var ah7 = a7 >>> 13;
      var a8 = a[8] | 0;
      var al8 = a8 & 0x1fff;
      var ah8 = a8 >>> 13;
      var a9 = a[9] | 0;
      var al9 = a9 & 0x1fff;
      var ah9 = a9 >>> 13;
      var b0 = b[0] | 0;
      var bl0 = b0 & 0x1fff;
      var bh0 = b0 >>> 13;
      var b1 = b[1] | 0;
      var bl1 = b1 & 0x1fff;
      var bh1 = b1 >>> 13;
      var b2 = b[2] | 0;
      var bl2 = b2 & 0x1fff;
      var bh2 = b2 >>> 13;
      var b3 = b[3] | 0;
      var bl3 = b3 & 0x1fff;
      var bh3 = b3 >>> 13;
      var b4 = b[4] | 0;
      var bl4 = b4 & 0x1fff;
      var bh4 = b4 >>> 13;
      var b5 = b[5] | 0;
      var bl5 = b5 & 0x1fff;
      var bh5 = b5 >>> 13;
      var b6 = b[6] | 0;
      var bl6 = b6 & 0x1fff;
      var bh6 = b6 >>> 13;
      var b7 = b[7] | 0;
      var bl7 = b7 & 0x1fff;
      var bh7 = b7 >>> 13;
      var b8 = b[8] | 0;
      var bl8 = b8 & 0x1fff;
      var bh8 = b8 >>> 13;
      var b9 = b[9] | 0;
      var bl9 = b9 & 0x1fff;
      var bh9 = b9 >>> 13;

      out.negative = self.negative ^ num.negative;
      out.length = 19;
      /* k = 0 */
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = (mid + Math.imul(ah0, bl0)) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
      w0 &= 0x3ffffff;
      /* k = 1 */
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = (mid + Math.imul(ah1, bl0)) | 0;
      hi = Math.imul(ah1, bh0);
      lo = (lo + Math.imul(al0, bl1)) | 0;
      mid = (mid + Math.imul(al0, bh1)) | 0;
      mid = (mid + Math.imul(ah0, bl1)) | 0;
      hi = (hi + Math.imul(ah0, bh1)) | 0;
      var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
      w1 &= 0x3ffffff;
      /* k = 2 */
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = (mid + Math.imul(ah2, bl0)) | 0;
      hi = Math.imul(ah2, bh0);
      lo = (lo + Math.imul(al1, bl1)) | 0;
      mid = (mid + Math.imul(al1, bh1)) | 0;
      mid = (mid + Math.imul(ah1, bl1)) | 0;
      hi = (hi + Math.imul(ah1, bh1)) | 0;
      lo = (lo + Math.imul(al0, bl2)) | 0;
      mid = (mid + Math.imul(al0, bh2)) | 0;
      mid = (mid + Math.imul(ah0, bl2)) | 0;
      hi = (hi + Math.imul(ah0, bh2)) | 0;
      var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
      w2 &= 0x3ffffff;
      /* k = 3 */
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = (mid + Math.imul(ah3, bl0)) | 0;
      hi = Math.imul(ah3, bh0);
      lo = (lo + Math.imul(al2, bl1)) | 0;
      mid = (mid + Math.imul(al2, bh1)) | 0;
      mid = (mid + Math.imul(ah2, bl1)) | 0;
      hi = (hi + Math.imul(ah2, bh1)) | 0;
      lo = (lo + Math.imul(al1, bl2)) | 0;
      mid = (mid + Math.imul(al1, bh2)) | 0;
      mid = (mid + Math.imul(ah1, bl2)) | 0;
      hi = (hi + Math.imul(ah1, bh2)) | 0;
      lo = (lo + Math.imul(al0, bl3)) | 0;
      mid = (mid + Math.imul(al0, bh3)) | 0;
      mid = (mid + Math.imul(ah0, bl3)) | 0;
      hi = (hi + Math.imul(ah0, bh3)) | 0;
      var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
      w3 &= 0x3ffffff;
      /* k = 4 */
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = (mid + Math.imul(ah4, bl0)) | 0;
      hi = Math.imul(ah4, bh0);
      lo = (lo + Math.imul(al3, bl1)) | 0;
      mid = (mid + Math.imul(al3, bh1)) | 0;
      mid = (mid + Math.imul(ah3, bl1)) | 0;
      hi = (hi + Math.imul(ah3, bh1)) | 0;
      lo = (lo + Math.imul(al2, bl2)) | 0;
      mid = (mid + Math.imul(al2, bh2)) | 0;
      mid = (mid + Math.imul(ah2, bl2)) | 0;
      hi = (hi + Math.imul(ah2, bh2)) | 0;
      lo = (lo + Math.imul(al1, bl3)) | 0;
      mid = (mid + Math.imul(al1, bh3)) | 0;
      mid = (mid + Math.imul(ah1, bl3)) | 0;
      hi = (hi + Math.imul(ah1, bh3)) | 0;
      lo = (lo + Math.imul(al0, bl4)) | 0;
      mid = (mid + Math.imul(al0, bh4)) | 0;
      mid = (mid + Math.imul(ah0, bl4)) | 0;
      hi = (hi + Math.imul(ah0, bh4)) | 0;
      var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
      w4 &= 0x3ffffff;
      /* k = 5 */
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = (mid + Math.imul(ah5, bl0)) | 0;
      hi = Math.imul(ah5, bh0);
      lo = (lo + Math.imul(al4, bl1)) | 0;
      mid = (mid + Math.imul(al4, bh1)) | 0;
      mid = (mid + Math.imul(ah4, bl1)) | 0;
      hi = (hi + Math.imul(ah4, bh1)) | 0;
      lo = (lo + Math.imul(al3, bl2)) | 0;
      mid = (mid + Math.imul(al3, bh2)) | 0;
      mid = (mid + Math.imul(ah3, bl2)) | 0;
      hi = (hi + Math.imul(ah3, bh2)) | 0;
      lo = (lo + Math.imul(al2, bl3)) | 0;
      mid = (mid + Math.imul(al2, bh3)) | 0;
      mid = (mid + Math.imul(ah2, bl3)) | 0;
      hi = (hi + Math.imul(ah2, bh3)) | 0;
      lo = (lo + Math.imul(al1, bl4)) | 0;
      mid = (mid + Math.imul(al1, bh4)) | 0;
      mid = (mid + Math.imul(ah1, bl4)) | 0;
      hi = (hi + Math.imul(ah1, bh4)) | 0;
      lo = (lo + Math.imul(al0, bl5)) | 0;
      mid = (mid + Math.imul(al0, bh5)) | 0;
      mid = (mid + Math.imul(ah0, bl5)) | 0;
      hi = (hi + Math.imul(ah0, bh5)) | 0;
      var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
      w5 &= 0x3ffffff;
      /* k = 6 */
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = (mid + Math.imul(ah6, bl0)) | 0;
      hi = Math.imul(ah6, bh0);
      lo = (lo + Math.imul(al5, bl1)) | 0;
      mid = (mid + Math.imul(al5, bh1)) | 0;
      mid = (mid + Math.imul(ah5, bl1)) | 0;
      hi = (hi + Math.imul(ah5, bh1)) | 0;
      lo = (lo + Math.imul(al4, bl2)) | 0;
      mid = (mid + Math.imul(al4, bh2)) | 0;
      mid = (mid + Math.imul(ah4, bl2)) | 0;
      hi = (hi + Math.imul(ah4, bh2)) | 0;
      lo = (lo + Math.imul(al3, bl3)) | 0;
      mid = (mid + Math.imul(al3, bh3)) | 0;
      mid = (mid + Math.imul(ah3, bl3)) | 0;
      hi = (hi + Math.imul(ah3, bh3)) | 0;
      lo = (lo + Math.imul(al2, bl4)) | 0;
      mid = (mid + Math.imul(al2, bh4)) | 0;
      mid = (mid + Math.imul(ah2, bl4)) | 0;
      hi = (hi + Math.imul(ah2, bh4)) | 0;
      lo = (lo + Math.imul(al1, bl5)) | 0;
      mid = (mid + Math.imul(al1, bh5)) | 0;
      mid = (mid + Math.imul(ah1, bl5)) | 0;
      hi = (hi + Math.imul(ah1, bh5)) | 0;
      lo = (lo + Math.imul(al0, bl6)) | 0;
      mid = (mid + Math.imul(al0, bh6)) | 0;
      mid = (mid + Math.imul(ah0, bl6)) | 0;
      hi = (hi + Math.imul(ah0, bh6)) | 0;
      var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
      w6 &= 0x3ffffff;
      /* k = 7 */
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = (mid + Math.imul(ah7, bl0)) | 0;
      hi = Math.imul(ah7, bh0);
      lo = (lo + Math.imul(al6, bl1)) | 0;
      mid = (mid + Math.imul(al6, bh1)) | 0;
      mid = (mid + Math.imul(ah6, bl1)) | 0;
      hi = (hi + Math.imul(ah6, bh1)) | 0;
      lo = (lo + Math.imul(al5, bl2)) | 0;
      mid = (mid + Math.imul(al5, bh2)) | 0;
      mid = (mid + Math.imul(ah5, bl2)) | 0;
      hi = (hi + Math.imul(ah5, bh2)) | 0;
      lo = (lo + Math.imul(al4, bl3)) | 0;
      mid = (mid + Math.imul(al4, bh3)) | 0;
      mid = (mid + Math.imul(ah4, bl3)) | 0;
      hi = (hi + Math.imul(ah4, bh3)) | 0;
      lo = (lo + Math.imul(al3, bl4)) | 0;
      mid = (mid + Math.imul(al3, bh4)) | 0;
      mid = (mid + Math.imul(ah3, bl4)) | 0;
      hi = (hi + Math.imul(ah3, bh4)) | 0;
      lo = (lo + Math.imul(al2, bl5)) | 0;
      mid = (mid + Math.imul(al2, bh5)) | 0;
      mid = (mid + Math.imul(ah2, bl5)) | 0;
      hi = (hi + Math.imul(ah2, bh5)) | 0;
      lo = (lo + Math.imul(al1, bl6)) | 0;
      mid = (mid + Math.imul(al1, bh6)) | 0;
      mid = (mid + Math.imul(ah1, bl6)) | 0;
      hi = (hi + Math.imul(ah1, bh6)) | 0;
      lo = (lo + Math.imul(al0, bl7)) | 0;
      mid = (mid + Math.imul(al0, bh7)) | 0;
      mid = (mid + Math.imul(ah0, bl7)) | 0;
      hi = (hi + Math.imul(ah0, bh7)) | 0;
      var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
      w7 &= 0x3ffffff;
      /* k = 8 */
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = (mid + Math.imul(ah8, bl0)) | 0;
      hi = Math.imul(ah8, bh0);
      lo = (lo + Math.imul(al7, bl1)) | 0;
      mid = (mid + Math.imul(al7, bh1)) | 0;
      mid = (mid + Math.imul(ah7, bl1)) | 0;
      hi = (hi + Math.imul(ah7, bh1)) | 0;
      lo = (lo + Math.imul(al6, bl2)) | 0;
      mid = (mid + Math.imul(al6, bh2)) | 0;
      mid = (mid + Math.imul(ah6, bl2)) | 0;
      hi = (hi + Math.imul(ah6, bh2)) | 0;
      lo = (lo + Math.imul(al5, bl3)) | 0;
      mid = (mid + Math.imul(al5, bh3)) | 0;
      mid = (mid + Math.imul(ah5, bl3)) | 0;
      hi = (hi + Math.imul(ah5, bh3)) | 0;
      lo = (lo + Math.imul(al4, bl4)) | 0;
      mid = (mid + Math.imul(al4, bh4)) | 0;
      mid = (mid + Math.imul(ah4, bl4)) | 0;
      hi = (hi + Math.imul(ah4, bh4)) | 0;
      lo = (lo + Math.imul(al3, bl5)) | 0;
      mid = (mid + Math.imul(al3, bh5)) | 0;
      mid = (mid + Math.imul(ah3, bl5)) | 0;
      hi = (hi + Math.imul(ah3, bh5)) | 0;
      lo = (lo + Math.imul(al2, bl6)) | 0;
      mid = (mid + Math.imul(al2, bh6)) | 0;
      mid = (mid + Math.imul(ah2, bl6)) | 0;
      hi = (hi + Math.imul(ah2, bh6)) | 0;
      lo = (lo + Math.imul(al1, bl7)) | 0;
      mid = (mid + Math.imul(al1, bh7)) | 0;
      mid = (mid + Math.imul(ah1, bl7)) | 0;
      hi = (hi + Math.imul(ah1, bh7)) | 0;
      lo = (lo + Math.imul(al0, bl8)) | 0;
      mid = (mid + Math.imul(al0, bh8)) | 0;
      mid = (mid + Math.imul(ah0, bl8)) | 0;
      hi = (hi + Math.imul(ah0, bh8)) | 0;
      var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
      w8 &= 0x3ffffff;
      /* k = 9 */
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = (mid + Math.imul(ah9, bl0)) | 0;
      hi = Math.imul(ah9, bh0);
      lo = (lo + Math.imul(al8, bl1)) | 0;
      mid = (mid + Math.imul(al8, bh1)) | 0;
      mid = (mid + Math.imul(ah8, bl1)) | 0;
      hi = (hi + Math.imul(ah8, bh1)) | 0;
      lo = (lo + Math.imul(al7, bl2)) | 0;
      mid = (mid + Math.imul(al7, bh2)) | 0;
      mid = (mid + Math.imul(ah7, bl2)) | 0;
      hi = (hi + Math.imul(ah7, bh2)) | 0;
      lo = (lo + Math.imul(al6, bl3)) | 0;
      mid = (mid + Math.imul(al6, bh3)) | 0;
      mid = (mid + Math.imul(ah6, bl3)) | 0;
      hi = (hi + Math.imul(ah6, bh3)) | 0;
      lo = (lo + Math.imul(al5, bl4)) | 0;
      mid = (mid + Math.imul(al5, bh4)) | 0;
      mid = (mid + Math.imul(ah5, bl4)) | 0;
      hi = (hi + Math.imul(ah5, bh4)) | 0;
      lo = (lo + Math.imul(al4, bl5)) | 0;
      mid = (mid + Math.imul(al4, bh5)) | 0;
      mid = (mid + Math.imul(ah4, bl5)) | 0;
      hi = (hi + Math.imul(ah4, bh5)) | 0;
      lo = (lo + Math.imul(al3, bl6)) | 0;
      mid = (mid + Math.imul(al3, bh6)) | 0;
      mid = (mid + Math.imul(ah3, bl6)) | 0;
      hi = (hi + Math.imul(ah3, bh6)) | 0;
      lo = (lo + Math.imul(al2, bl7)) | 0;
      mid = (mid + Math.imul(al2, bh7)) | 0;
      mid = (mid + Math.imul(ah2, bl7)) | 0;
      hi = (hi + Math.imul(ah2, bh7)) | 0;
      lo = (lo + Math.imul(al1, bl8)) | 0;
      mid = (mid + Math.imul(al1, bh8)) | 0;
      mid = (mid + Math.imul(ah1, bl8)) | 0;
      hi = (hi + Math.imul(ah1, bh8)) | 0;
      lo = (lo + Math.imul(al0, bl9)) | 0;
      mid = (mid + Math.imul(al0, bh9)) | 0;
      mid = (mid + Math.imul(ah0, bl9)) | 0;
      hi = (hi + Math.imul(ah0, bh9)) | 0;
      var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
      w9 &= 0x3ffffff;
      /* k = 10 */
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = (mid + Math.imul(ah9, bl1)) | 0;
      hi = Math.imul(ah9, bh1);
      lo = (lo + Math.imul(al8, bl2)) | 0;
      mid = (mid + Math.imul(al8, bh2)) | 0;
      mid = (mid + Math.imul(ah8, bl2)) | 0;
      hi = (hi + Math.imul(ah8, bh2)) | 0;
      lo = (lo + Math.imul(al7, bl3)) | 0;
      mid = (mid + Math.imul(al7, bh3)) | 0;
      mid = (mid + Math.imul(ah7, bl3)) | 0;
      hi = (hi + Math.imul(ah7, bh3)) | 0;
      lo = (lo + Math.imul(al6, bl4)) | 0;
      mid = (mid + Math.imul(al6, bh4)) | 0;
      mid = (mid + Math.imul(ah6, bl4)) | 0;
      hi = (hi + Math.imul(ah6, bh4)) | 0;
      lo = (lo + Math.imul(al5, bl5)) | 0;
      mid = (mid + Math.imul(al5, bh5)) | 0;
      mid = (mid + Math.imul(ah5, bl5)) | 0;
      hi = (hi + Math.imul(ah5, bh5)) | 0;
      lo = (lo + Math.imul(al4, bl6)) | 0;
      mid = (mid + Math.imul(al4, bh6)) | 0;
      mid = (mid + Math.imul(ah4, bl6)) | 0;
      hi = (hi + Math.imul(ah4, bh6)) | 0;
      lo = (lo + Math.imul(al3, bl7)) | 0;
      mid = (mid + Math.imul(al3, bh7)) | 0;
      mid = (mid + Math.imul(ah3, bl7)) | 0;
      hi = (hi + Math.imul(ah3, bh7)) | 0;
      lo = (lo + Math.imul(al2, bl8)) | 0;
      mid = (mid + Math.imul(al2, bh8)) | 0;
      mid = (mid + Math.imul(ah2, bl8)) | 0;
      hi = (hi + Math.imul(ah2, bh8)) | 0;
      lo = (lo + Math.imul(al1, bl9)) | 0;
      mid = (mid + Math.imul(al1, bh9)) | 0;
      mid = (mid + Math.imul(ah1, bl9)) | 0;
      hi = (hi + Math.imul(ah1, bh9)) | 0;
      var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
      w10 &= 0x3ffffff;
      /* k = 11 */
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = (mid + Math.imul(ah9, bl2)) | 0;
      hi = Math.imul(ah9, bh2);
      lo = (lo + Math.imul(al8, bl3)) | 0;
      mid = (mid + Math.imul(al8, bh3)) | 0;
      mid = (mid + Math.imul(ah8, bl3)) | 0;
      hi = (hi + Math.imul(ah8, bh3)) | 0;
      lo = (lo + Math.imul(al7, bl4)) | 0;
      mid = (mid + Math.imul(al7, bh4)) | 0;
      mid = (mid + Math.imul(ah7, bl4)) | 0;
      hi = (hi + Math.imul(ah7, bh4)) | 0;
      lo = (lo + Math.imul(al6, bl5)) | 0;
      mid = (mid + Math.imul(al6, bh5)) | 0;
      mid = (mid + Math.imul(ah6, bl5)) | 0;
      hi = (hi + Math.imul(ah6, bh5)) | 0;
      lo = (lo + Math.imul(al5, bl6)) | 0;
      mid = (mid + Math.imul(al5, bh6)) | 0;
      mid = (mid + Math.imul(ah5, bl6)) | 0;
      hi = (hi + Math.imul(ah5, bh6)) | 0;
      lo = (lo + Math.imul(al4, bl7)) | 0;
      mid = (mid + Math.imul(al4, bh7)) | 0;
      mid = (mid + Math.imul(ah4, bl7)) | 0;
      hi = (hi + Math.imul(ah4, bh7)) | 0;
      lo = (lo + Math.imul(al3, bl8)) | 0;
      mid = (mid + Math.imul(al3, bh8)) | 0;
      mid = (mid + Math.imul(ah3, bl8)) | 0;
      hi = (hi + Math.imul(ah3, bh8)) | 0;
      lo = (lo + Math.imul(al2, bl9)) | 0;
      mid = (mid + Math.imul(al2, bh9)) | 0;
      mid = (mid + Math.imul(ah2, bl9)) | 0;
      hi = (hi + Math.imul(ah2, bh9)) | 0;
      var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
      w11 &= 0x3ffffff;
      /* k = 12 */
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = (mid + Math.imul(ah9, bl3)) | 0;
      hi = Math.imul(ah9, bh3);
      lo = (lo + Math.imul(al8, bl4)) | 0;
      mid = (mid + Math.imul(al8, bh4)) | 0;
      mid = (mid + Math.imul(ah8, bl4)) | 0;
      hi = (hi + Math.imul(ah8, bh4)) | 0;
      lo = (lo + Math.imul(al7, bl5)) | 0;
      mid = (mid + Math.imul(al7, bh5)) | 0;
      mid = (mid + Math.imul(ah7, bl5)) | 0;
      hi = (hi + Math.imul(ah7, bh5)) | 0;
      lo = (lo + Math.imul(al6, bl6)) | 0;
      mid = (mid + Math.imul(al6, bh6)) | 0;
      mid = (mid + Math.imul(ah6, bl6)) | 0;
      hi = (hi + Math.imul(ah6, bh6)) | 0;
      lo = (lo + Math.imul(al5, bl7)) | 0;
      mid = (mid + Math.imul(al5, bh7)) | 0;
      mid = (mid + Math.imul(ah5, bl7)) | 0;
      hi = (hi + Math.imul(ah5, bh7)) | 0;
      lo = (lo + Math.imul(al4, bl8)) | 0;
      mid = (mid + Math.imul(al4, bh8)) | 0;
      mid = (mid + Math.imul(ah4, bl8)) | 0;
      hi = (hi + Math.imul(ah4, bh8)) | 0;
      lo = (lo + Math.imul(al3, bl9)) | 0;
      mid = (mid + Math.imul(al3, bh9)) | 0;
      mid = (mid + Math.imul(ah3, bl9)) | 0;
      hi = (hi + Math.imul(ah3, bh9)) | 0;
      var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
      w12 &= 0x3ffffff;
      /* k = 13 */
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = (mid + Math.imul(ah9, bl4)) | 0;
      hi = Math.imul(ah9, bh4);
      lo = (lo + Math.imul(al8, bl5)) | 0;
      mid = (mid + Math.imul(al8, bh5)) | 0;
      mid = (mid + Math.imul(ah8, bl5)) | 0;
      hi = (hi + Math.imul(ah8, bh5)) | 0;
      lo = (lo + Math.imul(al7, bl6)) | 0;
      mid = (mid + Math.imul(al7, bh6)) | 0;
      mid = (mid + Math.imul(ah7, bl6)) | 0;
      hi = (hi + Math.imul(ah7, bh6)) | 0;
      lo = (lo + Math.imul(al6, bl7)) | 0;
      mid = (mid + Math.imul(al6, bh7)) | 0;
      mid = (mid + Math.imul(ah6, bl7)) | 0;
      hi = (hi + Math.imul(ah6, bh7)) | 0;
      lo = (lo + Math.imul(al5, bl8)) | 0;
      mid = (mid + Math.imul(al5, bh8)) | 0;
      mid = (mid + Math.imul(ah5, bl8)) | 0;
      hi = (hi + Math.imul(ah5, bh8)) | 0;
      lo = (lo + Math.imul(al4, bl9)) | 0;
      mid = (mid + Math.imul(al4, bh9)) | 0;
      mid = (mid + Math.imul(ah4, bl9)) | 0;
      hi = (hi + Math.imul(ah4, bh9)) | 0;
      var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
      w13 &= 0x3ffffff;
      /* k = 14 */
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = (mid + Math.imul(ah9, bl5)) | 0;
      hi = Math.imul(ah9, bh5);
      lo = (lo + Math.imul(al8, bl6)) | 0;
      mid = (mid + Math.imul(al8, bh6)) | 0;
      mid = (mid + Math.imul(ah8, bl6)) | 0;
      hi = (hi + Math.imul(ah8, bh6)) | 0;
      lo = (lo + Math.imul(al7, bl7)) | 0;
      mid = (mid + Math.imul(al7, bh7)) | 0;
      mid = (mid + Math.imul(ah7, bl7)) | 0;
      hi = (hi + Math.imul(ah7, bh7)) | 0;
      lo = (lo + Math.imul(al6, bl8)) | 0;
      mid = (mid + Math.imul(al6, bh8)) | 0;
      mid = (mid + Math.imul(ah6, bl8)) | 0;
      hi = (hi + Math.imul(ah6, bh8)) | 0;
      lo = (lo + Math.imul(al5, bl9)) | 0;
      mid = (mid + Math.imul(al5, bh9)) | 0;
      mid = (mid + Math.imul(ah5, bl9)) | 0;
      hi = (hi + Math.imul(ah5, bh9)) | 0;
      var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
      w14 &= 0x3ffffff;
      /* k = 15 */
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = (mid + Math.imul(ah9, bl6)) | 0;
      hi = Math.imul(ah9, bh6);
      lo = (lo + Math.imul(al8, bl7)) | 0;
      mid = (mid + Math.imul(al8, bh7)) | 0;
      mid = (mid + Math.imul(ah8, bl7)) | 0;
      hi = (hi + Math.imul(ah8, bh7)) | 0;
      lo = (lo + Math.imul(al7, bl8)) | 0;
      mid = (mid + Math.imul(al7, bh8)) | 0;
      mid = (mid + Math.imul(ah7, bl8)) | 0;
      hi = (hi + Math.imul(ah7, bh8)) | 0;
      lo = (lo + Math.imul(al6, bl9)) | 0;
      mid = (mid + Math.imul(al6, bh9)) | 0;
      mid = (mid + Math.imul(ah6, bl9)) | 0;
      hi = (hi + Math.imul(ah6, bh9)) | 0;
      var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
      w15 &= 0x3ffffff;
      /* k = 16 */
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = (mid + Math.imul(ah9, bl7)) | 0;
      hi = Math.imul(ah9, bh7);
      lo = (lo + Math.imul(al8, bl8)) | 0;
      mid = (mid + Math.imul(al8, bh8)) | 0;
      mid = (mid + Math.imul(ah8, bl8)) | 0;
      hi = (hi + Math.imul(ah8, bh8)) | 0;
      lo = (lo + Math.imul(al7, bl9)) | 0;
      mid = (mid + Math.imul(al7, bh9)) | 0;
      mid = (mid + Math.imul(ah7, bl9)) | 0;
      hi = (hi + Math.imul(ah7, bh9)) | 0;
      var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
      w16 &= 0x3ffffff;
      /* k = 17 */
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = (mid + Math.imul(ah9, bl8)) | 0;
      hi = Math.imul(ah9, bh8);
      lo = (lo + Math.imul(al8, bl9)) | 0;
      mid = (mid + Math.imul(al8, bh9)) | 0;
      mid = (mid + Math.imul(ah8, bl9)) | 0;
      hi = (hi + Math.imul(ah8, bh9)) | 0;
      var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
      w17 &= 0x3ffffff;
      /* k = 18 */
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = (mid + Math.imul(ah9, bl9)) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
      w18 &= 0x3ffffff;
      o[0] = w0;
      o[1] = w1;
      o[2] = w2;
      o[3] = w3;
      o[4] = w4;
      o[5] = w5;
      o[6] = w6;
      o[7] = w7;
      o[8] = w8;
      o[9] = w9;
      o[10] = w10;
      o[11] = w11;
      o[12] = w12;
      o[13] = w13;
      o[14] = w14;
      o[15] = w15;
      o[16] = w16;
      o[17] = w17;
      o[18] = w18;
      if (c !== 0) {
        o[19] = c;
        out.length++;
      }
      return out;
    };

    // Polyfill comb
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }

    function bigMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      out.length = self.length + num.length;

      var carry = 0;
      var hncarry = 0;
      for (var k = 0; k < out.length - 1; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = k - j;
          var a = self.words[i] | 0;
          var b = num.words[j] | 0;
          var r = a * b;

          var lo = r & 0x3ffffff;
          ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
          lo = (lo + rword) | 0;
          rword = lo & 0x3ffffff;
          ncarry = (ncarry + (lo >>> 26)) | 0;

          hncarry += ncarry >>> 26;
          ncarry &= 0x3ffffff;
        }
        out.words[k] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k] = carry;
      } else {
        out.length--;
      }

      return out.strip();
    }

    function jumboMulTo (self, num, out) {
      var fftm = new FFTM();
      return fftm.mulp(self, num, out);
    }

    BN.prototype.mulTo = function mulTo (num, out) {
      var res;
      var len = this.length + num.length;
      if (this.length === 10 && num.length === 10) {
        res = comb10MulTo(this, num, out);
      } else if (len < 63) {
        res = smallMulTo(this, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this, num, out);
      } else {
        res = jumboMulTo(this, num, out);
      }

      return res;
    };

    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion

    function FFTM (x, y) {
      this.x = x;
      this.y = y;
    }

    FFTM.prototype.makeRBT = function makeRBT (N) {
      var t = new Array(N);
      var l = BN.prototype._countBits(N) - 1;
      for (var i = 0; i < N; i++) {
        t[i] = this.revBin(i, l, N);
      }

      return t;
    };

    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin (x, l, N) {
      if (x === 0 || x === N - 1) return x;

      var rb = 0;
      for (var i = 0; i < l; i++) {
        rb |= (x & 1) << (l - i - 1);
        x >>= 1;
      }

      return rb;
    };

    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
      for (var i = 0; i < N; i++) {
        rtws[i] = rws[rbt[i]];
        itws[i] = iws[rbt[i]];
      }
    };

    FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
      this.permute(rbt, rws, iws, rtws, itws, N);

      for (var s = 1; s < N; s <<= 1) {
        var l = s << 1;

        var rtwdf = Math.cos(2 * Math.PI / l);
        var itwdf = Math.sin(2 * Math.PI / l);

        for (var p = 0; p < N; p += l) {
          var rtwdf_ = rtwdf;
          var itwdf_ = itwdf;

          for (var j = 0; j < s; j++) {
            var re = rtws[p + j];
            var ie = itws[p + j];

            var ro = rtws[p + j + s];
            var io = itws[p + j + s];

            var rx = rtwdf_ * ro - itwdf_ * io;

            io = rtwdf_ * io + itwdf_ * ro;
            ro = rx;

            rtws[p + j] = re + ro;
            itws[p + j] = ie + io;

            rtws[p + j + s] = re - ro;
            itws[p + j + s] = ie - io;

            /* jshint maxdepth : false */
            if (j !== l) {
              rx = rtwdf * rtwdf_ - itwdf * itwdf_;

              itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
              rtwdf_ = rx;
            }
          }
        }
      }
    };

    FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
      var N = Math.max(m, n) | 1;
      var odd = N & 1;
      var i = 0;
      for (N = N / 2 | 0; N; N = N >>> 1) {
        i++;
      }

      return 1 << i + 1 + odd;
    };

    FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
      if (N <= 1) return;

      for (var i = 0; i < N / 2; i++) {
        var t = rws[i];

        rws[i] = rws[N - i - 1];
        rws[N - i - 1] = t;

        t = iws[i];

        iws[i] = -iws[N - i - 1];
        iws[N - i - 1] = -t;
      }
    };

    FFTM.prototype.normalize13b = function normalize13b (ws, N) {
      var carry = 0;
      for (var i = 0; i < N / 2; i++) {
        var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
          Math.round(ws[2 * i] / N) +
          carry;

        ws[i] = w & 0x3ffffff;

        if (w < 0x4000000) {
          carry = 0;
        } else {
          carry = w / 0x4000000 | 0;
        }
      }

      return ws;
    };

    FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
      var carry = 0;
      for (var i = 0; i < len; i++) {
        carry = carry + (ws[i] | 0);

        rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
        rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
      }

      // Pad with zeroes
      for (i = 2 * len; i < N; ++i) {
        rws[i] = 0;
      }

      assert(carry === 0);
      assert((carry & ~0x1fff) === 0);
    };

    FFTM.prototype.stub = function stub (N) {
      var ph = new Array(N);
      for (var i = 0; i < N; i++) {
        ph[i] = 0;
      }

      return ph;
    };

    FFTM.prototype.mulp = function mulp (x, y, out) {
      var N = 2 * this.guessLen13b(x.length, y.length);

      var rbt = this.makeRBT(N);

      var _ = this.stub(N);

      var rws = new Array(N);
      var rwst = new Array(N);
      var iwst = new Array(N);

      var nrws = new Array(N);
      var nrwst = new Array(N);
      var niwst = new Array(N);

      var rmws = out.words;
      rmws.length = N;

      this.convert13b(x.words, x.length, rws, N);
      this.convert13b(y.words, y.length, nrws, N);

      this.transform(rws, _, rwst, iwst, N, rbt);
      this.transform(nrws, _, nrwst, niwst, N, rbt);

      for (var i = 0; i < N; i++) {
        var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
        iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
        rwst[i] = rx;
      }

      this.conjugate(rwst, iwst, N);
      this.transform(rwst, iwst, rmws, _, N, rbt);
      this.conjugate(rmws, _, N);
      this.normalize13b(rmws, N);

      out.negative = x.negative ^ y.negative;
      out.length = x.length + y.length;
      return out.strip();
    };

    // Multiply `this` by `num`
    BN.prototype.mul = function mul (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return this.mulTo(num, out);
    };

    // Multiply employing FFT
    BN.prototype.mulf = function mulf (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return jumboMulTo(this, num, out);
    };

    // In-place Multiplication
    BN.prototype.imul = function imul (num) {
      return this.clone().mulTo(num, this);
    };

    BN.prototype.imuln = function imuln (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);

      // Carry
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = (this.words[i] | 0) * num;
        var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
        carry >>= 26;
        carry += (w / 0x4000000) | 0;
        // NOTE: lo is 27bit maximum
        carry += lo >>> 26;
        this.words[i] = lo & 0x3ffffff;
      }

      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }

      return this;
    };

    BN.prototype.muln = function muln (num) {
      return this.clone().imuln(num);
    };

    // `this` * `this`
    BN.prototype.sqr = function sqr () {
      return this.mul(this);
    };

    // `this` * `this` in-place
    BN.prototype.isqr = function isqr () {
      return this.imul(this.clone());
    };

    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow (num) {
      var w = toBitArray(num);
      if (w.length === 0) return new BN(1);

      // Skip leading zeroes
      var res = this;
      for (var i = 0; i < w.length; i++, res = res.sqr()) {
        if (w[i] !== 0) break;
      }

      if (++i < w.length) {
        for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
          if (w[i] === 0) continue;

          res = res.mul(q);
        }
      }

      return res;
    };

    // Shift-left in-place
    BN.prototype.iushln = function iushln (bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;
      var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
      var i;

      if (r !== 0) {
        var carry = 0;

        for (i = 0; i < this.length; i++) {
          var newCarry = this.words[i] & carryMask;
          var c = ((this.words[i] | 0) - newCarry) << r;
          this.words[i] = c | carry;
          carry = newCarry >>> (26 - r);
        }

        if (carry) {
          this.words[i] = carry;
          this.length++;
        }
      }

      if (s !== 0) {
        for (i = this.length - 1; i >= 0; i--) {
          this.words[i + s] = this.words[i];
        }

        for (i = 0; i < s; i++) {
          this.words[i] = 0;
        }

        this.length += s;
      }

      return this.strip();
    };

    BN.prototype.ishln = function ishln (bits) {
      // TODO(indutny): implement me
      assert(this.negative === 0);
      return this.iushln(bits);
    };

    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn (bits, hint, extended) {
      assert(typeof bits === 'number' && bits >= 0);
      var h;
      if (hint) {
        h = (hint - (hint % 26)) / 26;
      } else {
        h = 0;
      }

      var r = bits % 26;
      var s = Math.min((bits - r) / 26, this.length);
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      var maskedWords = extended;

      h -= s;
      h = Math.max(0, h);

      // Extended mode, copy masked part
      if (maskedWords) {
        for (var i = 0; i < s; i++) {
          maskedWords.words[i] = this.words[i];
        }
        maskedWords.length = s;
      }

      if (s === 0) ; else if (this.length > s) {
        this.length -= s;
        for (i = 0; i < this.length; i++) {
          this.words[i] = this.words[i + s];
        }
      } else {
        this.words[0] = 0;
        this.length = 1;
      }

      var carry = 0;
      for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
        var word = this.words[i] | 0;
        this.words[i] = (carry << (26 - r)) | (word >>> r);
        carry = word & mask;
      }

      // Push carried bits as a mask
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }

      if (this.length === 0) {
        this.words[0] = 0;
        this.length = 1;
      }

      return this.strip();
    };

    BN.prototype.ishrn = function ishrn (bits, hint, extended) {
      // TODO(indutny): implement me
      assert(this.negative === 0);
      return this.iushrn(bits, hint, extended);
    };

    // Shift-left
    BN.prototype.shln = function shln (bits) {
      return this.clone().ishln(bits);
    };

    BN.prototype.ushln = function ushln (bits) {
      return this.clone().iushln(bits);
    };

    // Shift-right
    BN.prototype.shrn = function shrn (bits) {
      return this.clone().ishrn(bits);
    };

    BN.prototype.ushrn = function ushrn (bits) {
      return this.clone().iushrn(bits);
    };

    // Test if n bit is set
    BN.prototype.testn = function testn (bit) {
      assert(typeof bit === 'number' && bit >= 0);
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) return false;

      // Check bit and return
      var w = this.words[s];

      return !!(w & q);
    };

    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn (bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;

      assert(this.negative === 0, 'imaskn works only with positive numbers');

      if (this.length <= s) {
        return this;
      }

      if (r !== 0) {
        s++;
      }
      this.length = Math.min(s, this.length);

      if (r !== 0) {
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        this.words[this.length - 1] &= mask;
      }

      return this.strip();
    };

    // Return only lowers bits of number
    BN.prototype.maskn = function maskn (bits) {
      return this.clone().imaskn(bits);
    };

    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.isubn(-num);

      // Possible sign change
      if (this.negative !== 0) {
        if (this.length === 1 && (this.words[0] | 0) < num) {
          this.words[0] = num - (this.words[0] | 0);
          this.negative = 0;
          return this;
        }

        this.negative = 0;
        this.isubn(num);
        this.negative = 1;
        return this;
      }

      // Add without checks
      return this._iaddn(num);
    };

    BN.prototype._iaddn = function _iaddn (num) {
      this.words[0] += num;

      // Carry
      for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
        this.words[i] -= 0x4000000;
        if (i === this.length - 1) {
          this.words[i + 1] = 1;
        } else {
          this.words[i + 1]++;
        }
      }
      this.length = Math.max(this.length, i + 1);

      return this;
    };

    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.iaddn(-num);

      if (this.negative !== 0) {
        this.negative = 0;
        this.iaddn(num);
        this.negative = 1;
        return this;
      }

      this.words[0] -= num;

      if (this.length === 1 && this.words[0] < 0) {
        this.words[0] = -this.words[0];
        this.negative = 1;
      } else {
        // Carry
        for (var i = 0; i < this.length && this.words[i] < 0; i++) {
          this.words[i] += 0x4000000;
          this.words[i + 1] -= 1;
        }
      }

      return this.strip();
    };

    BN.prototype.addn = function addn (num) {
      return this.clone().iaddn(num);
    };

    BN.prototype.subn = function subn (num) {
      return this.clone().isubn(num);
    };

    BN.prototype.iabs = function iabs () {
      this.negative = 0;

      return this;
    };

    BN.prototype.abs = function abs () {
      return this.clone().iabs();
    };

    BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
      var len = num.length + shift;
      var i;

      this._expand(len);

      var w;
      var carry = 0;
      for (i = 0; i < num.length; i++) {
        w = (this.words[i + shift] | 0) + carry;
        var right = (num.words[i] | 0) * mul;
        w -= right & 0x3ffffff;
        carry = (w >> 26) - ((right / 0x4000000) | 0);
        this.words[i + shift] = w & 0x3ffffff;
      }
      for (; i < this.length - shift; i++) {
        w = (this.words[i + shift] | 0) + carry;
        carry = w >> 26;
        this.words[i + shift] = w & 0x3ffffff;
      }

      if (carry === 0) return this.strip();

      // Subtraction overflow
      assert(carry === -1);
      carry = 0;
      for (i = 0; i < this.length; i++) {
        w = -(this.words[i] | 0) + carry;
        carry = w >> 26;
        this.words[i] = w & 0x3ffffff;
      }
      this.negative = 1;

      return this.strip();
    };

    BN.prototype._wordDiv = function _wordDiv (num, mode) {
      var shift = this.length - num.length;

      var a = this.clone();
      var b = num;

      // Normalize
      var bhi = b.words[b.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b = b.ushln(shift);
        a.iushln(shift);
        bhi = b.words[b.length - 1] | 0;
      }

      // Initialize quotient
      var m = a.length - b.length;
      var q;

      if (mode !== 'mod') {
        q = new BN(null);
        q.length = m + 1;
        q.words = new Array(q.length);
        for (var i = 0; i < q.length; i++) {
          q.words[i] = 0;
        }
      }

      var diff = a.clone()._ishlnsubmul(b, 1, m);
      if (diff.negative === 0) {
        a = diff;
        if (q) {
          q.words[m] = 1;
        }
      }

      for (var j = m - 1; j >= 0; j--) {
        var qj = (a.words[b.length + j] | 0) * 0x4000000 +
          (a.words[b.length + j - 1] | 0);

        // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
        // (0x7ffffff)
        qj = Math.min((qj / bhi) | 0, 0x3ffffff);

        a._ishlnsubmul(b, qj, j);
        while (a.negative !== 0) {
          qj--;
          a.negative = 0;
          a._ishlnsubmul(b, 1, j);
          if (!a.isZero()) {
            a.negative ^= 1;
          }
        }
        if (q) {
          q.words[j] = qj;
        }
      }
      if (q) {
        q.strip();
      }
      a.strip();

      // Denormalize
      if (mode !== 'div' && shift !== 0) {
        a.iushrn(shift);
      }

      return {
        div: q || null,
        mod: a
      };
    };

    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod (num, mode, positive) {
      assert(!num.isZero());

      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }

      var div, mod, res;
      if (this.negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }

        return {
          div: div,
          mod: mod
        };
      }

      if (this.negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        return {
          div: div,
          mod: res.mod
        };
      }

      if ((this.negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);

        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }

        return {
          div: res.div,
          mod: mod
        };
      }

      // Both numbers are positive at this point

      // Strip both numbers to approximate shift value
      if (num.length > this.length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this
        };
      }

      // Very short reduction
      if (num.length === 1) {
        if (mode === 'div') {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }

        if (mode === 'mod') {
          return {
            div: null,
            mod: new BN(this.modn(num.words[0]))
          };
        }

        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return this._wordDiv(num, mode);
    };

    // Find `this` / `num`
    BN.prototype.div = function div (num) {
      return this.divmod(num, 'div', false).div;
    };

    // Find `this` % `num`
    BN.prototype.mod = function mod (num) {
      return this.divmod(num, 'mod', false).mod;
    };

    BN.prototype.umod = function umod (num) {
      return this.divmod(num, 'mod', true).mod;
    };

    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound (num) {
      var dm = this.divmod(num);

      // Fast case - exact division
      if (dm.mod.isZero()) return dm.div;

      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

      var half = num.ushrn(1);
      var r2 = num.andln(1);
      var cmp = mod.cmp(half);

      // Round down
      if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

      // Round up
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };

    BN.prototype.modn = function modn (num) {
      assert(num <= 0x3ffffff);
      var p = (1 << 26) % num;

      var acc = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        acc = (p * acc + (this.words[i] | 0)) % num;
      }

      return acc;
    };

    // In-place division by number
    BN.prototype.idivn = function idivn (num) {
      assert(num <= 0x3ffffff);

      var carry = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var w = (this.words[i] | 0) + carry * 0x4000000;
        this.words[i] = (w / num) | 0;
        carry = w % num;
      }

      return this.strip();
    };

    BN.prototype.divn = function divn (num) {
      return this.clone().idivn(num);
    };

    BN.prototype.egcd = function egcd (p) {
      assert(p.negative === 0);
      assert(!p.isZero());

      var x = this;
      var y = p.clone();

      if (x.negative !== 0) {
        x = x.umod(p);
      } else {
        x = x.clone();
      }

      // A * x + B * y = x
      var A = new BN(1);
      var B = new BN(0);

      // C * x + D * y = y
      var C = new BN(0);
      var D = new BN(1);

      var g = 0;

      while (x.isEven() && y.isEven()) {
        x.iushrn(1);
        y.iushrn(1);
        ++g;
      }

      var yp = y.clone();
      var xp = x.clone();

      while (!x.isZero()) {
        for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          x.iushrn(i);
          while (i-- > 0) {
            if (A.isOdd() || B.isOdd()) {
              A.iadd(yp);
              B.isub(xp);
            }

            A.iushrn(1);
            B.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          y.iushrn(j);
          while (j-- > 0) {
            if (C.isOdd() || D.isOdd()) {
              C.iadd(yp);
              D.isub(xp);
            }

            C.iushrn(1);
            D.iushrn(1);
          }
        }

        if (x.cmp(y) >= 0) {
          x.isub(y);
          A.isub(C);
          B.isub(D);
        } else {
          y.isub(x);
          C.isub(A);
          D.isub(B);
        }
      }

      return {
        a: C,
        b: D,
        gcd: y.iushln(g)
      };
    };

    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp (p) {
      assert(p.negative === 0);
      assert(!p.isZero());

      var a = this;
      var b = p.clone();

      if (a.negative !== 0) {
        a = a.umod(p);
      } else {
        a = a.clone();
      }

      var x1 = new BN(1);
      var x2 = new BN(0);

      var delta = b.clone();

      while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
        for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          a.iushrn(i);
          while (i-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }

            x1.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          b.iushrn(j);
          while (j-- > 0) {
            if (x2.isOdd()) {
              x2.iadd(delta);
            }

            x2.iushrn(1);
          }
        }

        if (a.cmp(b) >= 0) {
          a.isub(b);
          x1.isub(x2);
        } else {
          b.isub(a);
          x2.isub(x1);
        }
      }

      var res;
      if (a.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x2;
      }

      if (res.cmpn(0) < 0) {
        res.iadd(p);
      }

      return res;
    };

    BN.prototype.gcd = function gcd (num) {
      if (this.isZero()) return num.abs();
      if (num.isZero()) return this.abs();

      var a = this.clone();
      var b = num.clone();
      a.negative = 0;
      b.negative = 0;

      // Remove common factor of two
      for (var shift = 0; a.isEven() && b.isEven(); shift++) {
        a.iushrn(1);
        b.iushrn(1);
      }

      do {
        while (a.isEven()) {
          a.iushrn(1);
        }
        while (b.isEven()) {
          b.iushrn(1);
        }

        var r = a.cmp(b);
        if (r < 0) {
          // Swap `a` and `b` to make `a` always bigger than `b`
          var t = a;
          a = b;
          b = t;
        } else if (r === 0 || b.cmpn(1) === 0) {
          break;
        }

        a.isub(b);
      } while (true);

      return b.iushln(shift);
    };

    // Invert number in the field F(num)
    BN.prototype.invm = function invm (num) {
      return this.egcd(num).a.umod(num);
    };

    BN.prototype.isEven = function isEven () {
      return (this.words[0] & 1) === 0;
    };

    BN.prototype.isOdd = function isOdd () {
      return (this.words[0] & 1) === 1;
    };

    // And first word and num
    BN.prototype.andln = function andln (num) {
      return this.words[0] & num;
    };

    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn (bit) {
      assert(typeof bit === 'number');
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) {
        this._expand(s + 1);
        this.words[s] |= q;
        return this;
      }

      // Add bit and propagate, if needed
      var carry = q;
      for (var i = s; carry !== 0 && i < this.length; i++) {
        var w = this.words[i] | 0;
        w += carry;
        carry = w >>> 26;
        w &= 0x3ffffff;
        this.words[i] = w;
      }
      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }
      return this;
    };

    BN.prototype.isZero = function isZero () {
      return this.length === 1 && this.words[0] === 0;
    };

    BN.prototype.cmpn = function cmpn (num) {
      var negative = num < 0;

      if (this.negative !== 0 && !negative) return -1;
      if (this.negative === 0 && negative) return 1;

      this.strip();

      var res;
      if (this.length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }

        assert(num <= 0x3ffffff, 'Number is too big');

        var w = this.words[0] | 0;
        res = w === num ? 0 : w < num ? -1 : 1;
      }
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp (num) {
      if (this.negative !== 0 && num.negative === 0) return -1;
      if (this.negative === 0 && num.negative !== 0) return 1;

      var res = this.ucmp(num);
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Unsigned comparison
    BN.prototype.ucmp = function ucmp (num) {
      // At this point both numbers have the same sign
      if (this.length > num.length) return 1;
      if (this.length < num.length) return -1;

      var res = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var a = this.words[i] | 0;
        var b = num.words[i] | 0;

        if (a === b) continue;
        if (a < b) {
          res = -1;
        } else if (a > b) {
          res = 1;
        }
        break;
      }
      return res;
    };

    BN.prototype.gtn = function gtn (num) {
      return this.cmpn(num) === 1;
    };

    BN.prototype.gt = function gt (num) {
      return this.cmp(num) === 1;
    };

    BN.prototype.gten = function gten (num) {
      return this.cmpn(num) >= 0;
    };

    BN.prototype.gte = function gte (num) {
      return this.cmp(num) >= 0;
    };

    BN.prototype.ltn = function ltn (num) {
      return this.cmpn(num) === -1;
    };

    BN.prototype.lt = function lt (num) {
      return this.cmp(num) === -1;
    };

    BN.prototype.lten = function lten (num) {
      return this.cmpn(num) <= 0;
    };

    BN.prototype.lte = function lte (num) {
      return this.cmp(num) <= 0;
    };

    BN.prototype.eqn = function eqn (num) {
      return this.cmpn(num) === 0;
    };

    BN.prototype.eq = function eq (num) {
      return this.cmp(num) === 0;
    };

    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red (num) {
      return new Red(num);
    };

    BN.prototype.toRed = function toRed (ctx) {
      assert(!this.red, 'Already a number in reduction context');
      assert(this.negative === 0, 'red works only with positives');
      return ctx.convertTo(this)._forceRed(ctx);
    };

    BN.prototype.fromRed = function fromRed () {
      assert(this.red, 'fromRed works only with numbers in reduction context');
      return this.red.convertFrom(this);
    };

    BN.prototype._forceRed = function _forceRed (ctx) {
      this.red = ctx;
      return this;
    };

    BN.prototype.forceRed = function forceRed (ctx) {
      assert(!this.red, 'Already a number in reduction context');
      return this._forceRed(ctx);
    };

    BN.prototype.redAdd = function redAdd (num) {
      assert(this.red, 'redAdd works only with red numbers');
      return this.red.add(this, num);
    };

    BN.prototype.redIAdd = function redIAdd (num) {
      assert(this.red, 'redIAdd works only with red numbers');
      return this.red.iadd(this, num);
    };

    BN.prototype.redSub = function redSub (num) {
      assert(this.red, 'redSub works only with red numbers');
      return this.red.sub(this, num);
    };

    BN.prototype.redISub = function redISub (num) {
      assert(this.red, 'redISub works only with red numbers');
      return this.red.isub(this, num);
    };

    BN.prototype.redShl = function redShl (num) {
      assert(this.red, 'redShl works only with red numbers');
      return this.red.shl(this, num);
    };

    BN.prototype.redMul = function redMul (num) {
      assert(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.mul(this, num);
    };

    BN.prototype.redIMul = function redIMul (num) {
      assert(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.imul(this, num);
    };

    BN.prototype.redSqr = function redSqr () {
      assert(this.red, 'redSqr works only with red numbers');
      this.red._verify1(this);
      return this.red.sqr(this);
    };

    BN.prototype.redISqr = function redISqr () {
      assert(this.red, 'redISqr works only with red numbers');
      this.red._verify1(this);
      return this.red.isqr(this);
    };

    // Square root over p
    BN.prototype.redSqrt = function redSqrt () {
      assert(this.red, 'redSqrt works only with red numbers');
      this.red._verify1(this);
      return this.red.sqrt(this);
    };

    BN.prototype.redInvm = function redInvm () {
      assert(this.red, 'redInvm works only with red numbers');
      this.red._verify1(this);
      return this.red.invm(this);
    };

    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg () {
      assert(this.red, 'redNeg works only with red numbers');
      this.red._verify1(this);
      return this.red.neg(this);
    };

    BN.prototype.redPow = function redPow (num) {
      assert(this.red && !num.red, 'redPow(normalNum)');
      this.red._verify1(this);
      return this.red.pow(this, num);
    };

    // Prime numbers with efficient reduction
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };

    // Pseudo-Mersenne prime
    function MPrime (name, p) {
      // P = 2 ^ N - K
      this.name = name;
      this.p = new BN(p, 16);
      this.n = this.p.bitLength();
      this.k = new BN(1).iushln(this.n).isub(this.p);

      this.tmp = this._tmp();
    }

    MPrime.prototype._tmp = function _tmp () {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil(this.n / 13));
      return tmp;
    };

    MPrime.prototype.ireduce = function ireduce (num) {
      // Assumes that `num` is less than `P^2`
      // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
      var r = num;
      var rlen;

      do {
        this.split(r, this.tmp);
        r = this.imulK(r);
        r = r.iadd(this.tmp);
        rlen = r.bitLength();
      } while (rlen > this.n);

      var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
      if (cmp === 0) {
        r.words[0] = 0;
        r.length = 1;
      } else if (cmp > 0) {
        r.isub(this.p);
      } else {
        if (r.strip !== undefined) {
          // r is BN v4 instance
          r.strip();
        } else {
          // r is BN v5 instance
          r._strip();
        }
      }

      return r;
    };

    MPrime.prototype.split = function split (input, out) {
      input.iushrn(this.n, 0, out);
    };

    MPrime.prototype.imulK = function imulK (num) {
      return num.imul(this.k);
    };

    function K256 () {
      MPrime.call(
        this,
        'k256',
        'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);

    K256.prototype.split = function split (input, output) {
      // 256 = 9 * 26 + 22
      var mask = 0x3fffff;

      var outLen = Math.min(input.length, 9);
      for (var i = 0; i < outLen; i++) {
        output.words[i] = input.words[i];
      }
      output.length = outLen;

      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }

      // Shift by 9 limbs
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;

      for (i = 10; i < input.length; i++) {
        var next = input.words[i] | 0;
        input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
        prev = next;
      }
      prev >>>= 22;
      input.words[i - 10] = prev;
      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };

    K256.prototype.imulK = function imulK (num) {
      // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;

      // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
      var lo = 0;
      for (var i = 0; i < num.length; i++) {
        var w = num.words[i] | 0;
        lo += w * 0x3d1;
        num.words[i] = lo & 0x3ffffff;
        lo = w * 0x40 + ((lo / 0x4000000) | 0);
      }

      // Fast length reduction
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };

    function P224 () {
      MPrime.call(
        this,
        'p224',
        'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);

    function P192 () {
      MPrime.call(
        this,
        'p192',
        'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);

    function P25519 () {
      // 2 ^ 255 - 19
      MPrime.call(
        this,
        '25519',
        '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);

    P25519.prototype.imulK = function imulK (num) {
      // K = 0x13
      var carry = 0;
      for (var i = 0; i < num.length; i++) {
        var hi = (num.words[i] | 0) * 0x13 + carry;
        var lo = hi & 0x3ffffff;
        hi >>>= 26;

        num.words[i] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };

    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime (name) {
      // Cached version of prime
      if (primes[name]) return primes[name];

      var prime;
      if (name === 'k256') {
        prime = new K256();
      } else if (name === 'p224') {
        prime = new P224();
      } else if (name === 'p192') {
        prime = new P192();
      } else if (name === 'p25519') {
        prime = new P25519();
      } else {
        throw new Error('Unknown prime ' + name);
      }
      primes[name] = prime;

      return prime;
    };

    //
    // Base reduction engine
    //
    function Red (m) {
      if (typeof m === 'string') {
        var prime = BN._prime(m);
        this.m = prime.p;
        this.prime = prime;
      } else {
        assert(m.gtn(1), 'modulus must be greater than 1');
        this.m = m;
        this.prime = null;
      }
    }

    Red.prototype._verify1 = function _verify1 (a) {
      assert(a.negative === 0, 'red works only with positives');
      assert(a.red, 'red works only with red numbers');
    };

    Red.prototype._verify2 = function _verify2 (a, b) {
      assert((a.negative | b.negative) === 0, 'red works only with positives');
      assert(a.red && a.red === b.red,
        'red works only with red numbers');
    };

    Red.prototype.imod = function imod (a) {
      if (this.prime) return this.prime.ireduce(a)._forceRed(this);
      return a.umod(this.m)._forceRed(this);
    };

    Red.prototype.neg = function neg (a) {
      if (a.isZero()) {
        return a.clone();
      }

      return this.m.sub(a)._forceRed(this);
    };

    Red.prototype.add = function add (a, b) {
      this._verify2(a, b);

      var res = a.add(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res._forceRed(this);
    };

    Red.prototype.iadd = function iadd (a, b) {
      this._verify2(a, b);

      var res = a.iadd(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res;
    };

    Red.prototype.sub = function sub (a, b) {
      this._verify2(a, b);

      var res = a.sub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res._forceRed(this);
    };

    Red.prototype.isub = function isub (a, b) {
      this._verify2(a, b);

      var res = a.isub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res;
    };

    Red.prototype.shl = function shl (a, num) {
      this._verify1(a);
      return this.imod(a.ushln(num));
    };

    Red.prototype.imul = function imul (a, b) {
      this._verify2(a, b);
      return this.imod(a.imul(b));
    };

    Red.prototype.mul = function mul (a, b) {
      this._verify2(a, b);
      return this.imod(a.mul(b));
    };

    Red.prototype.isqr = function isqr (a) {
      return this.imul(a, a.clone());
    };

    Red.prototype.sqr = function sqr (a) {
      return this.mul(a, a);
    };

    Red.prototype.sqrt = function sqrt (a) {
      if (a.isZero()) return a.clone();

      var mod3 = this.m.andln(3);
      assert(mod3 % 2 === 1);

      // Fast case
      if (mod3 === 3) {
        var pow = this.m.add(new BN(1)).iushrn(2);
        return this.pow(a, pow);
      }

      // Tonelli-Shanks algorithm (Totally unoptimized and slow)
      //
      // Find Q and S, that Q * 2 ^ S = (P - 1)
      var q = this.m.subn(1);
      var s = 0;
      while (!q.isZero() && q.andln(1) === 0) {
        s++;
        q.iushrn(1);
      }
      assert(!q.isZero());

      var one = new BN(1).toRed(this);
      var nOne = one.redNeg();

      // Find quadratic non-residue
      // NOTE: Max is such because of generalized Riemann hypothesis.
      var lpow = this.m.subn(1).iushrn(1);
      var z = this.m.bitLength();
      z = new BN(2 * z * z).toRed(this);

      while (this.pow(z, lpow).cmp(nOne) !== 0) {
        z.redIAdd(nOne);
      }

      var c = this.pow(z, q);
      var r = this.pow(a, q.addn(1).iushrn(1));
      var t = this.pow(a, q);
      var m = s;
      while (t.cmp(one) !== 0) {
        var tmp = t;
        for (var i = 0; tmp.cmp(one) !== 0; i++) {
          tmp = tmp.redSqr();
        }
        assert(i < m);
        var b = this.pow(c, new BN(1).iushln(m - i - 1));

        r = r.redMul(b);
        c = b.redSqr();
        t = t.redMul(c);
        m = i;
      }

      return r;
    };

    Red.prototype.invm = function invm (a) {
      var inv = a._invmp(this.m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };

    Red.prototype.pow = function pow (a, num) {
      if (num.isZero()) return new BN(1).toRed(this);
      if (num.cmpn(1) === 0) return a.clone();

      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this);
      wnd[1] = a;
      for (var i = 2; i < wnd.length; i++) {
        wnd[i] = this.mul(wnd[i - 1], a);
      }

      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }

      for (i = num.length - 1; i >= 0; i--) {
        var word = num.words[i];
        for (var j = start - 1; j >= 0; j--) {
          var bit = (word >> j) & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }

          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }

          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }

      return res;
    };

    Red.prototype.convertTo = function convertTo (num) {
      var r = num.umod(this.m);

      return r === num ? r.clone() : r;
    };

    Red.prototype.convertFrom = function convertFrom (num) {
      var res = num.clone();
      res.red = null;
      return res;
    };

    //
    // Montgomery method engine
    //

    BN.mont = function mont (num) {
      return new Mont(num);
    };

    function Mont (m) {
      Red.call(this, m);

      this.shift = this.m.bitLength();
      if (this.shift % 26 !== 0) {
        this.shift += 26 - (this.shift % 26);
      }

      this.r = new BN(1).iushln(this.shift);
      this.r2 = this.imod(this.r.sqr());
      this.rinv = this.r._invmp(this.m);

      this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
      this.minv = this.minv.umod(this.r);
      this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);

    Mont.prototype.convertTo = function convertTo (num) {
      return this.imod(num.ushln(this.shift));
    };

    Mont.prototype.convertFrom = function convertFrom (num) {
      var r = this.imod(num.mul(this.rinv));
      r.red = null;
      return r;
    };

    Mont.prototype.imul = function imul (a, b) {
      if (a.isZero() || b.isZero()) {
        a.words[0] = 0;
        a.length = 1;
        return a;
      }

      var t = a.imul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;

      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.mul = function mul (a, b) {
      if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

      var t = a.mul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;
      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.invm = function invm (a) {
      // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
      var res = this.imod(a._invmp(this.m).mul(this.r2));
      return res._forceRed(this);
    };
  })(module, commonjsGlobal);
  }(bn$1));

  var _BN = bn$1.exports;

  const version$i = "logger/5.5.0";

  let _permanentCensorErrors = false;
  let _censorErrors = false;
  const LogLevels = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
  let _logLevel = LogLevels["default"];
  let _globalLogger = null;
  function _checkNormalize() {
      try {
          const missing = [];
          // Make sure all forms of normalization are supported
          ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
              try {
                  if ("test".normalize(form) !== "test") {
                      throw new Error("bad normalize");
                  }
                  ;
              }
              catch (error) {
                  missing.push(form);
              }
          });
          if (missing.length) {
              throw new Error("missing " + missing.join(", "));
          }
          if (String.fromCharCode(0xe9).normalize("NFD") !== String.fromCharCode(0x65, 0x0301)) {
              throw new Error("broken implementation");
          }
      }
      catch (error) {
          return error.message;
      }
      return null;
  }
  const _normalizeError = _checkNormalize();
  var LogLevel;
  (function (LogLevel) {
      LogLevel["DEBUG"] = "DEBUG";
      LogLevel["INFO"] = "INFO";
      LogLevel["WARNING"] = "WARNING";
      LogLevel["ERROR"] = "ERROR";
      LogLevel["OFF"] = "OFF";
  })(LogLevel || (LogLevel = {}));
  var ErrorCode;
  (function (ErrorCode) {
      ///////////////////
      // Generic Errors
      // Unknown Error
      ErrorCode["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
      // Not Implemented
      ErrorCode["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
      // Unsupported Operation
      //   - operation
      ErrorCode["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
      // Network Error (i.e. Ethereum Network, such as an invalid chain ID)
      //   - event ("noNetwork" is not re-thrown in provider.ready; otherwise thrown)
      ErrorCode["NETWORK_ERROR"] = "NETWORK_ERROR";
      // Some sort of bad response from the server
      ErrorCode["SERVER_ERROR"] = "SERVER_ERROR";
      // Timeout
      ErrorCode["TIMEOUT"] = "TIMEOUT";
      ///////////////////
      // Operational  Errors
      // Buffer Overrun
      ErrorCode["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
      // Numeric Fault
      //   - operation: the operation being executed
      //   - fault: the reason this faulted
      ErrorCode["NUMERIC_FAULT"] = "NUMERIC_FAULT";
      ///////////////////
      // Argument Errors
      // Missing new operator to an object
      //  - name: The name of the class
      ErrorCode["MISSING_NEW"] = "MISSING_NEW";
      // Invalid argument (e.g. value is incompatible with type) to a function:
      //   - argument: The argument name that was invalid
      //   - value: The value of the argument
      ErrorCode["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
      // Missing argument to a function:
      //   - count: The number of arguments received
      //   - expectedCount: The number of arguments expected
      ErrorCode["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
      // Too many arguments
      //   - count: The number of arguments received
      //   - expectedCount: The number of arguments expected
      ErrorCode["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
      ///////////////////
      // Blockchain Errors
      // Call exception
      //  - transaction: the transaction
      //  - address?: the contract address
      //  - args?: The arguments passed into the function
      //  - method?: The Solidity method signature
      //  - errorSignature?: The EIP848 error signature
      //  - errorArgs?: The EIP848 error parameters
      //  - reason: The reason (only for EIP848 "Error(string)")
      ErrorCode["CALL_EXCEPTION"] = "CALL_EXCEPTION";
      // Insufficient funds (< value + gasLimit * gasPrice)
      //   - transaction: the transaction attempted
      ErrorCode["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
      // Nonce has already been used
      //   - transaction: the transaction attempted
      ErrorCode["NONCE_EXPIRED"] = "NONCE_EXPIRED";
      // The replacement fee for the transaction is too low
      //   - transaction: the transaction attempted
      ErrorCode["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
      // The gas limit could not be estimated
      //   - transaction: the transaction passed to estimateGas
      ErrorCode["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
      // The transaction was replaced by one with a higher gas price
      //   - reason: "cancelled", "replaced" or "repriced"
      //   - cancelled: true if reason == "cancelled" or reason == "replaced")
      //   - hash: original transaction hash
      //   - replacement: the full TransactionsResponse for the replacement
      //   - receipt: the receipt of the replacement
      ErrorCode["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
  })(ErrorCode || (ErrorCode = {}));
  const HEX = "0123456789abcdef";
  class Logger {
      constructor(version) {
          Object.defineProperty(this, "version", {
              enumerable: true,
              value: version,
              writable: false
          });
      }
      _log(logLevel, args) {
          const level = logLevel.toLowerCase();
          if (LogLevels[level] == null) {
              this.throwArgumentError("invalid log level name", "logLevel", logLevel);
          }
          if (_logLevel > LogLevels[level]) {
              return;
          }
          console.log.apply(console, args);
      }
      debug(...args) {
          this._log(Logger.levels.DEBUG, args);
      }
      info(...args) {
          this._log(Logger.levels.INFO, args);
      }
      warn(...args) {
          this._log(Logger.levels.WARNING, args);
      }
      makeError(message, code, params) {
          // Errors are being censored
          if (_censorErrors) {
              return this.makeError("censored error", code, {});
          }
          if (!code) {
              code = Logger.errors.UNKNOWN_ERROR;
          }
          if (!params) {
              params = {};
          }
          const messageDetails = [];
          Object.keys(params).forEach((key) => {
              const value = params[key];
              try {
                  if (value instanceof Uint8Array) {
                      let hex = "";
                      for (let i = 0; i < value.length; i++) {
                          hex += HEX[value[i] >> 4];
                          hex += HEX[value[i] & 0x0f];
                      }
                      messageDetails.push(key + "=Uint8Array(0x" + hex + ")");
                  }
                  else {
                      messageDetails.push(key + "=" + JSON.stringify(value));
                  }
              }
              catch (error) {
                  messageDetails.push(key + "=" + JSON.stringify(params[key].toString()));
              }
          });
          messageDetails.push(`code=${code}`);
          messageDetails.push(`version=${this.version}`);
          const reason = message;
          if (messageDetails.length) {
              message += " (" + messageDetails.join(", ") + ")";
          }
          // @TODO: Any??
          const error = new Error(message);
          error.reason = reason;
          error.code = code;
          Object.keys(params).forEach(function (key) {
              error[key] = params[key];
          });
          return error;
      }
      throwError(message, code, params) {
          throw this.makeError(message, code, params);
      }
      throwArgumentError(message, name, value) {
          return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {
              argument: name,
              value: value
          });
      }
      assert(condition, message, code, params) {
          if (!!condition) {
              return;
          }
          this.throwError(message, code, params);
      }
      assertArgument(condition, message, name, value) {
          if (!!condition) {
              return;
          }
          this.throwArgumentError(message, name, value);
      }
      checkNormalize(message) {
          if (_normalizeError) {
              this.throwError("platform missing String.prototype.normalize", Logger.errors.UNSUPPORTED_OPERATION, {
                  operation: "String.prototype.normalize", form: _normalizeError
              });
          }
      }
      checkSafeUint53(value, message) {
          if (typeof (value) !== "number") {
              return;
          }
          if (message == null) {
              message = "value not safe";
          }
          if (value < 0 || value >= 0x1fffffffffffff) {
              this.throwError(message, Logger.errors.NUMERIC_FAULT, {
                  operation: "checkSafeInteger",
                  fault: "out-of-safe-range",
                  value: value
              });
          }
          if (value % 1) {
              this.throwError(message, Logger.errors.NUMERIC_FAULT, {
                  operation: "checkSafeInteger",
                  fault: "non-integer",
                  value: value
              });
          }
      }
      checkArgumentCount(count, expectedCount, message) {
          if (message) {
              message = ": " + message;
          }
          else {
              message = "";
          }
          if (count < expectedCount) {
              this.throwError("missing argument" + message, Logger.errors.MISSING_ARGUMENT, {
                  count: count,
                  expectedCount: expectedCount
              });
          }
          if (count > expectedCount) {
              this.throwError("too many arguments" + message, Logger.errors.UNEXPECTED_ARGUMENT, {
                  count: count,
                  expectedCount: expectedCount
              });
          }
      }
      checkNew(target, kind) {
          if (target === Object || target == null) {
              this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
          }
      }
      checkAbstract(target, kind) {
          if (target === kind) {
              this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
          }
          else if (target === Object || target == null) {
              this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
          }
      }
      static globalLogger() {
          if (!_globalLogger) {
              _globalLogger = new Logger(version$i);
          }
          return _globalLogger;
      }
      static setCensorship(censorship, permanent) {
          if (!censorship && permanent) {
              this.globalLogger().throwError("cannot permanently disable censorship", Logger.errors.UNSUPPORTED_OPERATION, {
                  operation: "setCensorship"
              });
          }
          if (_permanentCensorErrors) {
              if (!censorship) {
                  return;
              }
              this.globalLogger().throwError("error censorship permanent", Logger.errors.UNSUPPORTED_OPERATION, {
                  operation: "setCensorship"
              });
          }
          _censorErrors = !!censorship;
          _permanentCensorErrors = !!permanent;
      }
      static setLogLevel(logLevel) {
          const level = LogLevels[logLevel.toLowerCase()];
          if (level == null) {
              Logger.globalLogger().warn("invalid log level - " + logLevel);
              return;
          }
          _logLevel = level;
      }
      static from(version) {
          return new Logger(version);
      }
  }
  Logger.errors = ErrorCode;
  Logger.levels = LogLevel;

  const version$h = "bytes/5.5.0";

  const logger$n = new Logger(version$h);
  ///////////////////////////////
  function isHexable(value) {
      return !!(value.toHexString);
  }
  function addSlice(array) {
      if (array.slice) {
          return array;
      }
      array.slice = function () {
          const args = Array.prototype.slice.call(arguments);
          return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
      };
      return array;
  }
  function isInteger(value) {
      return (typeof (value) === "number" && value == value && (value % 1) === 0);
  }
  function isBytes(value) {
      if (value == null) {
          return false;
      }
      if (value.constructor === Uint8Array) {
          return true;
      }
      if (typeof (value) === "string") {
          return false;
      }
      if (!isInteger(value.length) || value.length < 0) {
          return false;
      }
      for (let i = 0; i < value.length; i++) {
          const v = value[i];
          if (!isInteger(v) || v < 0 || v >= 256) {
              return false;
          }
      }
      return true;
  }
  function arrayify(value, options) {
      if (!options) {
          options = {};
      }
      if (typeof (value) === "number") {
          logger$n.checkSafeUint53(value, "invalid arrayify value");
          const result = [];
          while (value) {
              result.unshift(value & 0xff);
              value = parseInt(String(value / 256));
          }
          if (result.length === 0) {
              result.push(0);
          }
          return addSlice(new Uint8Array(result));
      }
      if (options.allowMissingPrefix && typeof (value) === "string" && value.substring(0, 2) !== "0x") {
          value = "0x" + value;
      }
      if (isHexable(value)) {
          value = value.toHexString();
      }
      if (isHexString(value)) {
          let hex = value.substring(2);
          if (hex.length % 2) {
              if (options.hexPad === "left") {
                  hex = "0x0" + hex.substring(2);
              }
              else if (options.hexPad === "right") {
                  hex += "0";
              }
              else {
                  logger$n.throwArgumentError("hex data is odd-length", "value", value);
              }
          }
          const result = [];
          for (let i = 0; i < hex.length; i += 2) {
              result.push(parseInt(hex.substring(i, i + 2), 16));
          }
          return addSlice(new Uint8Array(result));
      }
      if (isBytes(value)) {
          return addSlice(new Uint8Array(value));
      }
      return logger$n.throwArgumentError("invalid arrayify value", "value", value);
  }
  function concat(items) {
      const objects = items.map(item => arrayify(item));
      const length = objects.reduce((accum, item) => (accum + item.length), 0);
      const result = new Uint8Array(length);
      objects.reduce((offset, object) => {
          result.set(object, offset);
          return offset + object.length;
      }, 0);
      return addSlice(result);
  }
  function isHexString(value, length) {
      if (typeof (value) !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
          return false;
      }
      if (length && value.length !== 2 + 2 * length) {
          return false;
      }
      return true;
  }
  const HexCharacters = "0123456789abcdef";
  function hexlify(value, options) {
      if (!options) {
          options = {};
      }
      if (typeof (value) === "number") {
          logger$n.checkSafeUint53(value, "invalid hexlify value");
          let hex = "";
          while (value) {
              hex = HexCharacters[value & 0xf] + hex;
              value = Math.floor(value / 16);
          }
          if (hex.length) {
              if (hex.length % 2) {
                  hex = "0" + hex;
              }
              return "0x" + hex;
          }
          return "0x00";
      }
      if (typeof (value) === "bigint") {
          value = value.toString(16);
          if (value.length % 2) {
              return ("0x0" + value);
          }
          return "0x" + value;
      }
      if (options.allowMissingPrefix && typeof (value) === "string" && value.substring(0, 2) !== "0x") {
          value = "0x" + value;
      }
      if (isHexable(value)) {
          return value.toHexString();
      }
      if (isHexString(value)) {
          if (value.length % 2) {
              if (options.hexPad === "left") {
                  value = "0x0" + value.substring(2);
              }
              else if (options.hexPad === "right") {
                  value += "0";
              }
              else {
                  logger$n.throwArgumentError("hex data is odd-length", "value", value);
              }
          }
          return value.toLowerCase();
      }
      if (isBytes(value)) {
          let result = "0x";
          for (let i = 0; i < value.length; i++) {
              let v = value[i];
              result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];
          }
          return result;
      }
      return logger$n.throwArgumentError("invalid hexlify value", "value", value);
  }
  function hexConcat(items) {
      let result = "0x";
      items.forEach((item) => {
          result += hexlify(item).substring(2);
      });
      return result;
  }
  function hexZeroPad(value, length) {
      if (typeof (value) !== "string") {
          value = hexlify(value);
      }
      else if (!isHexString(value)) {
          logger$n.throwArgumentError("invalid hex string", "value", value);
      }
      if (value.length > 2 * length + 2) {
          logger$n.throwArgumentError("value out of range", "value", arguments[1]);
      }
      while (value.length < 2 * length + 2) {
          value = "0x0" + value.substring(2);
      }
      return value;
  }

  const version$g = "bignumber/5.5.0";

  var BN$1 = _BN.BN;
  const logger$m = new Logger(version$g);
  const _constructorGuard$2 = {};
  const MAX_SAFE = 0x1fffffffffffff;
  // Only warn about passing 10 into radix once
  let _warnedToStringRadix = false;
  class BigNumber {
      constructor(constructorGuard, hex) {
          logger$m.checkNew(new.target, BigNumber);
          if (constructorGuard !== _constructorGuard$2) {
              logger$m.throwError("cannot call constructor directly; use BigNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
                  operation: "new (BigNumber)"
              });
          }
          this._hex = hex;
          this._isBigNumber = true;
          Object.freeze(this);
      }
      fromTwos(value) {
          return toBigNumber(toBN(this).fromTwos(value));
      }
      toTwos(value) {
          return toBigNumber(toBN(this).toTwos(value));
      }
      abs() {
          if (this._hex[0] === "-") {
              return BigNumber.from(this._hex.substring(1));
          }
          return this;
      }
      add(other) {
          return toBigNumber(toBN(this).add(toBN(other)));
      }
      sub(other) {
          return toBigNumber(toBN(this).sub(toBN(other)));
      }
      div(other) {
          const o = BigNumber.from(other);
          if (o.isZero()) {
              throwFault("division by zero", "div");
          }
          return toBigNumber(toBN(this).div(toBN(other)));
      }
      mul(other) {
          return toBigNumber(toBN(this).mul(toBN(other)));
      }
      mod(other) {
          const value = toBN(other);
          if (value.isNeg()) {
              throwFault("cannot modulo negative values", "mod");
          }
          return toBigNumber(toBN(this).umod(value));
      }
      pow(other) {
          const value = toBN(other);
          if (value.isNeg()) {
              throwFault("cannot raise to negative values", "pow");
          }
          return toBigNumber(toBN(this).pow(value));
      }
      and(other) {
          const value = toBN(other);
          if (this.isNegative() || value.isNeg()) {
              throwFault("cannot 'and' negative values", "and");
          }
          return toBigNumber(toBN(this).and(value));
      }
      or(other) {
          const value = toBN(other);
          if (this.isNegative() || value.isNeg()) {
              throwFault("cannot 'or' negative values", "or");
          }
          return toBigNumber(toBN(this).or(value));
      }
      xor(other) {
          const value = toBN(other);
          if (this.isNegative() || value.isNeg()) {
              throwFault("cannot 'xor' negative values", "xor");
          }
          return toBigNumber(toBN(this).xor(value));
      }
      mask(value) {
          if (this.isNegative() || value < 0) {
              throwFault("cannot mask negative values", "mask");
          }
          return toBigNumber(toBN(this).maskn(value));
      }
      shl(value) {
          if (this.isNegative() || value < 0) {
              throwFault("cannot shift negative values", "shl");
          }
          return toBigNumber(toBN(this).shln(value));
      }
      shr(value) {
          if (this.isNegative() || value < 0) {
              throwFault("cannot shift negative values", "shr");
          }
          return toBigNumber(toBN(this).shrn(value));
      }
      eq(other) {
          return toBN(this).eq(toBN(other));
      }
      lt(other) {
          return toBN(this).lt(toBN(other));
      }
      lte(other) {
          return toBN(this).lte(toBN(other));
      }
      gt(other) {
          return toBN(this).gt(toBN(other));
      }
      gte(other) {
          return toBN(this).gte(toBN(other));
      }
      isNegative() {
          return (this._hex[0] === "-");
      }
      isZero() {
          return toBN(this).isZero();
      }
      toNumber() {
          try {
              return toBN(this).toNumber();
          }
          catch (error) {
              throwFault("overflow", "toNumber", this.toString());
          }
          return null;
      }
      toBigInt() {
          try {
              return BigInt(this.toString());
          }
          catch (e) { }
          return logger$m.throwError("this platform does not support BigInt", Logger.errors.UNSUPPORTED_OPERATION, {
              value: this.toString()
          });
      }
      toString() {
          // Lots of people expect this, which we do not support, so check (See: #889)
          if (arguments.length > 0) {
              if (arguments[0] === 10) {
                  if (!_warnedToStringRadix) {
                      _warnedToStringRadix = true;
                      logger$m.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
                  }
              }
              else if (arguments[0] === 16) {
                  logger$m.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", Logger.errors.UNEXPECTED_ARGUMENT, {});
              }
              else {
                  logger$m.throwError("BigNumber.toString does not accept parameters", Logger.errors.UNEXPECTED_ARGUMENT, {});
              }
          }
          return toBN(this).toString(10);
      }
      toHexString() {
          return this._hex;
      }
      toJSON(key) {
          return { type: "BigNumber", hex: this.toHexString() };
      }
      static from(value) {
          if (value instanceof BigNumber) {
              return value;
          }
          if (typeof (value) === "string") {
              if (value.match(/^-?0x[0-9a-f]+$/i)) {
                  return new BigNumber(_constructorGuard$2, toHex$1(value));
              }
              if (value.match(/^-?[0-9]+$/)) {
                  return new BigNumber(_constructorGuard$2, toHex$1(new BN$1(value)));
              }
              return logger$m.throwArgumentError("invalid BigNumber string", "value", value);
          }
          if (typeof (value) === "number") {
              if (value % 1) {
                  throwFault("underflow", "BigNumber.from", value);
              }
              if (value >= MAX_SAFE || value <= -MAX_SAFE) {
                  throwFault("overflow", "BigNumber.from", value);
              }
              return BigNumber.from(String(value));
          }
          const anyValue = value;
          if (typeof (anyValue) === "bigint") {
              return BigNumber.from(anyValue.toString());
          }
          if (isBytes(anyValue)) {
              return BigNumber.from(hexlify(anyValue));
          }
          if (anyValue) {
              // Hexable interface (takes priority)
              if (anyValue.toHexString) {
                  const hex = anyValue.toHexString();
                  if (typeof (hex) === "string") {
                      return BigNumber.from(hex);
                  }
              }
              else {
                  // For now, handle legacy JSON-ified values (goes away in v6)
                  let hex = anyValue._hex;
                  // New-form JSON
                  if (hex == null && anyValue.type === "BigNumber") {
                      hex = anyValue.hex;
                  }
                  if (typeof (hex) === "string") {
                      if (isHexString(hex) || (hex[0] === "-" && isHexString(hex.substring(1)))) {
                          return BigNumber.from(hex);
                      }
                  }
              }
          }
          return logger$m.throwArgumentError("invalid BigNumber value", "value", value);
      }
      static isBigNumber(value) {
          return !!(value && value._isBigNumber);
      }
  }
  // Normalize the hex string
  function toHex$1(value) {
      // For BN, call on the hex string
      if (typeof (value) !== "string") {
          return toHex$1(value.toString(16));
      }
      // If negative, prepend the negative sign to the normalized positive value
      if (value[0] === "-") {
          // Strip off the negative sign
          value = value.substring(1);
          // Cannot have multiple negative signs (e.g. "--0x04")
          if (value[0] === "-") {
              logger$m.throwArgumentError("invalid hex", "value", value);
          }
          // Call toHex on the positive component
          value = toHex$1(value);
          // Do not allow "-0x00"
          if (value === "0x00") {
              return value;
          }
          // Negate the value
          return "-" + value;
      }
      // Add a "0x" prefix if missing
      if (value.substring(0, 2) !== "0x") {
          value = "0x" + value;
      }
      // Normalize zero
      if (value === "0x") {
          return "0x00";
      }
      // Make the string even length
      if (value.length % 2) {
          value = "0x0" + value.substring(2);
      }
      // Trim to smallest even-length string
      while (value.length > 4 && value.substring(0, 4) === "0x00") {
          value = "0x" + value.substring(4);
      }
      return value;
  }
  function toBigNumber(value) {
      return BigNumber.from(toHex$1(value));
  }
  function toBN(value) {
      const hex = BigNumber.from(value).toHexString();
      if (hex[0] === "-") {
          return (new BN$1("-" + hex.substring(3), 16));
      }
      return new BN$1(hex.substring(2), 16);
  }
  function throwFault(fault, operation, value) {
      const params = { fault: fault, operation: operation };
      if (value != null) {
          params.value = value;
      }
      return logger$m.throwError(fault, Logger.errors.NUMERIC_FAULT, params);
  }
  // value should have no prefix
  function _base36To16(value) {
      return (new BN$1(value, 36)).toString(16);
  }

  const version$f = "properties/5.5.0";
  new Logger(version$f);
  function defineReadOnly(object, name, value) {
      Object.defineProperty(object, name, {
          enumerable: true,
          value: value,
          writable: false,
      });
  }

  const version$e = "abi/5.5.0";

  const logger$k = new Logger(version$e);
  const _constructorGuard$1 = {};
  let ModifiersBytes = { calldata: true, memory: true, storage: true };
  let ModifiersNest = { calldata: true, memory: true };
  function checkModifier(type, name) {
      if (type === "bytes" || type === "string") {
          if (ModifiersBytes[name]) {
              return true;
          }
      }
      else if (type === "address") {
          if (name === "payable") {
              return true;
          }
      }
      else if (type.indexOf("[") >= 0 || type === "tuple") {
          if (ModifiersNest[name]) {
              return true;
          }
      }
      if (ModifiersBytes[name] || name === "payable") {
          logger$k.throwArgumentError("invalid modifier", "name", name);
      }
      return false;
  }
  // @TODO: Make sure that children of an indexed tuple are marked with a null indexed
  function parseParamType(param, allowIndexed) {
      let originalParam = param;
      function throwError(i) {
          logger$k.throwArgumentError(`unexpected character at position ${i}`, "param", param);
      }
      param = param.replace(/\s/g, " ");
      function newNode(parent) {
          let node = { type: "", name: "", parent: parent, state: { allowType: true } };
          if (allowIndexed) {
              node.indexed = false;
          }
          return node;
      }
      let parent = { type: "", name: "", state: { allowType: true } };
      let node = parent;
      for (let i = 0; i < param.length; i++) {
          let c = param[i];
          switch (c) {
              case "(":
                  if (node.state.allowType && node.type === "") {
                      node.type = "tuple";
                  }
                  else if (!node.state.allowParams) {
                      throwError(i);
                  }
                  node.state.allowType = false;
                  node.type = verifyType(node.type);
                  node.components = [newNode(node)];
                  node = node.components[0];
                  break;
              case ")":
                  delete node.state;
                  if (node.name === "indexed") {
                      if (!allowIndexed) {
                          throwError(i);
                      }
                      node.indexed = true;
                      node.name = "";
                  }
                  if (checkModifier(node.type, node.name)) {
                      node.name = "";
                  }
                  node.type = verifyType(node.type);
                  let child = node;
                  node = node.parent;
                  if (!node) {
                      throwError(i);
                  }
                  delete child.parent;
                  node.state.allowParams = false;
                  node.state.allowName = true;
                  node.state.allowArray = true;
                  break;
              case ",":
                  delete node.state;
                  if (node.name === "indexed") {
                      if (!allowIndexed) {
                          throwError(i);
                      }
                      node.indexed = true;
                      node.name = "";
                  }
                  if (checkModifier(node.type, node.name)) {
                      node.name = "";
                  }
                  node.type = verifyType(node.type);
                  let sibling = newNode(node.parent);
                  //{ type: "", name: "", parent: node.parent, state: { allowType: true } };
                  node.parent.components.push(sibling);
                  delete node.parent;
                  node = sibling;
                  break;
              // Hit a space...
              case " ":
                  // If reading type, the type is done and may read a param or name
                  if (node.state.allowType) {
                      if (node.type !== "") {
                          node.type = verifyType(node.type);
                          delete node.state.allowType;
                          node.state.allowName = true;
                          node.state.allowParams = true;
                      }
                  }
                  // If reading name, the name is done
                  if (node.state.allowName) {
                      if (node.name !== "") {
                          if (node.name === "indexed") {
                              if (!allowIndexed) {
                                  throwError(i);
                              }
                              if (node.indexed) {
                                  throwError(i);
                              }
                              node.indexed = true;
                              node.name = "";
                          }
                          else if (checkModifier(node.type, node.name)) {
                              node.name = "";
                          }
                          else {
                              node.state.allowName = false;
                          }
                      }
                  }
                  break;
              case "[":
                  if (!node.state.allowArray) {
                      throwError(i);
                  }
                  node.type += c;
                  node.state.allowArray = false;
                  node.state.allowName = false;
                  node.state.readArray = true;
                  break;
              case "]":
                  if (!node.state.readArray) {
                      throwError(i);
                  }
                  node.type += c;
                  node.state.readArray = false;
                  node.state.allowArray = true;
                  node.state.allowName = true;
                  break;
              default:
                  if (node.state.allowType) {
                      node.type += c;
                      node.state.allowParams = true;
                      node.state.allowArray = true;
                  }
                  else if (node.state.allowName) {
                      node.name += c;
                      delete node.state.allowArray;
                  }
                  else if (node.state.readArray) {
                      node.type += c;
                  }
                  else {
                      throwError(i);
                  }
          }
      }
      if (node.parent) {
          logger$k.throwArgumentError("unexpected eof", "param", param);
      }
      delete parent.state;
      if (node.name === "indexed") {
          if (!allowIndexed) {
              throwError(originalParam.length - 7);
          }
          if (node.indexed) {
              throwError(originalParam.length - 7);
          }
          node.indexed = true;
          node.name = "";
      }
      else if (checkModifier(node.type, node.name)) {
          node.name = "";
      }
      parent.type = verifyType(parent.type);
      return parent;
  }
  function populate(object, params) {
      for (let key in params) {
          defineReadOnly(object, key, params[key]);
      }
  }
  const FormatTypes = Object.freeze({
      // Bare formatting, as is needed for computing a sighash of an event or function
      sighash: "sighash",
      // Human-Readable with Minimal spacing and without names (compact human-readable)
      minimal: "minimal",
      // Human-Readable with nice spacing, including all names
      full: "full",
      // JSON-format a la Solidity
      json: "json"
  });
  const paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
  class ParamType {
      constructor(constructorGuard, params) {
          if (constructorGuard !== _constructorGuard$1) {
              logger$k.throwError("use fromString", Logger.errors.UNSUPPORTED_OPERATION, {
                  operation: "new ParamType()"
              });
          }
          populate(this, params);
          let match = this.type.match(paramTypeArray);
          if (match) {
              populate(this, {
                  arrayLength: parseInt(match[2] || "-1"),
                  arrayChildren: ParamType.fromObject({
                      type: match[1],
                      components: this.components
                  }),
                  baseType: "array"
              });
          }
          else {
              populate(this, {
                  arrayLength: null,
                  arrayChildren: null,
                  baseType: ((this.components != null) ? "tuple" : this.type)
              });
          }
          this._isParamType = true;
          Object.freeze(this);
      }
      // Format the parameter fragment
      //   - sighash: "(uint256,address)"
      //   - minimal: "tuple(uint256,address) indexed"
      //   - full:    "tuple(uint256 foo, address bar) indexed baz"
      format(format) {
          if (!format) {
              format = FormatTypes.sighash;
          }
          if (!FormatTypes[format]) {
              logger$k.throwArgumentError("invalid format type", "format", format);
          }
          if (format === FormatTypes.json) {
              let result = {
                  type: ((this.baseType === "tuple") ? "tuple" : this.type),
                  name: (this.name || undefined)
              };
              if (typeof (this.indexed) === "boolean") {
                  result.indexed = this.indexed;
              }
              if (this.components) {
                  result.components = this.components.map((comp) => JSON.parse(comp.format(format)));
              }
              return JSON.stringify(result);
          }
          let result = "";
          // Array
          if (this.baseType === "array") {
              result += this.arrayChildren.format(format);
              result += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]";
          }
          else {
              if (this.baseType === "tuple") {
                  if (format !== FormatTypes.sighash) {
                      result += this.type;
                  }
                  result += "(" + this.components.map((comp) => comp.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ")";
              }
              else {
                  result += this.type;
              }
          }
          if (format !== FormatTypes.sighash) {
              if (this.indexed === true) {
                  result += " indexed";
              }
              if (format === FormatTypes.full && this.name) {
                  result += " " + this.name;
              }
          }
          return result;
      }
      static from(value, allowIndexed) {
          if (typeof (value) === "string") {
              return ParamType.fromString(value, allowIndexed);
          }
          return ParamType.fromObject(value);
      }
      static fromObject(value) {
          if (ParamType.isParamType(value)) {
              return value;
          }
          return new ParamType(_constructorGuard$1, {
              name: (value.name || null),
              type: verifyType(value.type),
              indexed: ((value.indexed == null) ? null : !!value.indexed),
              components: (value.components ? value.components.map(ParamType.fromObject) : null)
          });
      }
      static fromString(value, allowIndexed) {
          function ParamTypify(node) {
              return ParamType.fromObject({
                  name: node.name,
                  type: node.type,
                  indexed: node.indexed,
                  components: node.components
              });
          }
          return ParamTypify(parseParamType(value, !!allowIndexed));
      }
      static isParamType(value) {
          return !!(value != null && value._isParamType);
      }
  }
  function verifyType(type) {
      // These need to be transformed to their full description
      if (type.match(/^uint($|[^1-9])/)) {
          type = "uint256" + type.substring(4);
      }
      else if (type.match(/^int($|[^1-9])/)) {
          type = "int256" + type.substring(3);
      }
      // @TODO: more verification
      return type;
  }

  const logger$j = new Logger(version$e);
  class Coder {
      constructor(name, type, localName, dynamic) {
          // @TODO: defineReadOnly these
          this.name = name;
          this.type = type;
          this.localName = localName;
          this.dynamic = dynamic;
      }
      _throwError(message, value) {
          logger$j.throwArgumentError(message, this.localName, value);
      }
  }
  class Writer {
      constructor(wordSize) {
          defineReadOnly(this, "wordSize", wordSize || 32);
          this._data = [];
          this._dataLength = 0;
          this._padding = new Uint8Array(wordSize);
      }
      get data() {
          return hexConcat(this._data);
      }
      get length() { return this._dataLength; }
      _writeData(data) {
          this._data.push(data);
          this._dataLength += data.length;
          return data.length;
      }
      appendWriter(writer) {
          return this._writeData(concat(writer._data));
      }
      // Arrayish items; padded on the right to wordSize
      writeBytes(value) {
          let bytes = arrayify(value);
          const paddingOffset = bytes.length % this.wordSize;
          if (paddingOffset) {
              bytes = concat([bytes, this._padding.slice(paddingOffset)]);
          }
          return this._writeData(bytes);
      }
      _getValue(value) {
          let bytes = arrayify(BigNumber.from(value));
          if (bytes.length > this.wordSize) {
              logger$j.throwError("value out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
                  length: this.wordSize,
                  offset: bytes.length
              });
          }
          if (bytes.length % this.wordSize) {
              bytes = concat([this._padding.slice(bytes.length % this.wordSize), bytes]);
          }
          return bytes;
      }
      // BigNumberish items; padded on the left to wordSize
      writeValue(value) {
          return this._writeData(this._getValue(value));
      }
      writeUpdatableValue() {
          const offset = this._data.length;
          this._data.push(this._padding);
          this._dataLength += this.wordSize;
          return (value) => {
              this._data[offset] = this._getValue(value);
          };
      }
  }
  class Reader {
      constructor(data, wordSize, coerceFunc, allowLoose) {
          defineReadOnly(this, "_data", arrayify(data));
          defineReadOnly(this, "wordSize", wordSize || 32);
          defineReadOnly(this, "_coerceFunc", coerceFunc);
          defineReadOnly(this, "allowLoose", allowLoose);
          this._offset = 0;
      }
      get data() { return hexlify(this._data); }
      get consumed() { return this._offset; }
      // The default Coerce function
      static coerce(name, value) {
          let match = name.match("^u?int([0-9]+)$");
          if (match && parseInt(match[1]) <= 48) {
              value = value.toNumber();
          }
          return value;
      }
      coerce(name, value) {
          if (this._coerceFunc) {
              return this._coerceFunc(name, value);
          }
          return Reader.coerce(name, value);
      }
      _peekBytes(offset, length, loose) {
          let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;
          if (this._offset + alignedLength > this._data.length) {
              if (this.allowLoose && loose && this._offset + length <= this._data.length) {
                  alignedLength = length;
              }
              else {
                  logger$j.throwError("data out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
                      length: this._data.length,
                      offset: this._offset + alignedLength
                  });
              }
          }
          return this._data.slice(this._offset, this._offset + alignedLength);
      }
      subReader(offset) {
          return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);
      }
      readBytes(length, loose) {
          let bytes = this._peekBytes(0, length, !!loose);
          this._offset += bytes.length;
          // @TODO: Make sure the length..end bytes are all 0?
          return bytes.slice(0, length);
      }
      readValue() {
          return BigNumber.from(this.readBytes(this.wordSize));
      }
  }

  var sha3$1 = {exports: {}};

  /**
   * [js-sha3]{@link https://github.com/emn178/js-sha3}
   *
   * @version 0.8.0
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2015-2018
   * @license MIT
   */

  (function (module) {
  /*jslint bitwise: true */
  (function () {

    var INPUT_ERROR = 'input is invalid type';
    var FINALIZE_ERROR = 'finalize already called';
    var WINDOW = typeof window === 'object';
    var root = WINDOW ? window : {};
    if (root.JS_SHA3_NO_WINDOW) {
      WINDOW = false;
    }
    var WEB_WORKER = !WINDOW && typeof self === 'object';
    var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
    if (NODE_JS) {
      root = commonjsGlobal;
    } else if (WEB_WORKER) {
      root = self;
    }
    var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && 'object' === 'object' && module.exports;
    var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
    var HEX_CHARS = '0123456789abcdef'.split('');
    var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
    var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
    var KECCAK_PADDING = [1, 256, 65536, 16777216];
    var PADDING = [6, 1536, 393216, 100663296];
    var SHIFT = [0, 8, 16, 24];
    var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
      0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
      2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
      2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
      2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
    var BITS = [224, 256, 384, 512];
    var SHAKE_BITS = [128, 256];
    var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];
    var CSHAKE_BYTEPAD = {
      '128': 168,
      '256': 136
    };

    if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
      Array.isArray = function (obj) {
        return Object.prototype.toString.call(obj) === '[object Array]';
      };
    }

    if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
      ArrayBuffer.isView = function (obj) {
        return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
      };
    }

    var createOutputMethod = function (bits, padding, outputType) {
      return function (message) {
        return new Keccak(bits, padding, bits).update(message)[outputType]();
      };
    };

    var createShakeOutputMethod = function (bits, padding, outputType) {
      return function (message, outputBits) {
        return new Keccak(bits, padding, outputBits).update(message)[outputType]();
      };
    };

    var createCshakeOutputMethod = function (bits, padding, outputType) {
      return function (message, outputBits, n, s) {
        return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();
      };
    };

    var createKmacOutputMethod = function (bits, padding, outputType) {
      return function (key, message, outputBits, s) {
        return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();
      };
    };

    var createOutputMethods = function (method, createMethod, bits, padding) {
      for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
        var type = OUTPUT_TYPES[i];
        method[type] = createMethod(bits, padding, type);
      }
      return method;
    };

    var createMethod = function (bits, padding) {
      var method = createOutputMethod(bits, padding, 'hex');
      method.create = function () {
        return new Keccak(bits, padding, bits);
      };
      method.update = function (message) {
        return method.create().update(message);
      };
      return createOutputMethods(method, createOutputMethod, bits, padding);
    };

    var createShakeMethod = function (bits, padding) {
      var method = createShakeOutputMethod(bits, padding, 'hex');
      method.create = function (outputBits) {
        return new Keccak(bits, padding, outputBits);
      };
      method.update = function (message, outputBits) {
        return method.create(outputBits).update(message);
      };
      return createOutputMethods(method, createShakeOutputMethod, bits, padding);
    };

    var createCshakeMethod = function (bits, padding) {
      var w = CSHAKE_BYTEPAD[bits];
      var method = createCshakeOutputMethod(bits, padding, 'hex');
      method.create = function (outputBits, n, s) {
        if (!n && !s) {
          return methods['shake' + bits].create(outputBits);
        } else {
          return new Keccak(bits, padding, outputBits).bytepad([n, s], w);
        }
      };
      method.update = function (message, outputBits, n, s) {
        return method.create(outputBits, n, s).update(message);
      };
      return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
    };

    var createKmacMethod = function (bits, padding) {
      var w = CSHAKE_BYTEPAD[bits];
      var method = createKmacOutputMethod(bits, padding, 'hex');
      method.create = function (key, outputBits, s) {
        return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);
      };
      method.update = function (key, message, outputBits, s) {
        return method.create(key, outputBits, s).update(message);
      };
      return createOutputMethods(method, createKmacOutputMethod, bits, padding);
    };

    var algorithms = [
      { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },
      { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },
      { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
      { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
      { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
    ];

    var methods = {}, methodNames = [];

    for (var i = 0; i < algorithms.length; ++i) {
      var algorithm = algorithms[i];
      var bits = algorithm.bits;
      for (var j = 0; j < bits.length; ++j) {
        var methodName = algorithm.name + '_' + bits[j];
        methodNames.push(methodName);
        methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
        if (algorithm.name !== 'sha3') {
          var newMethodName = algorithm.name + bits[j];
          methodNames.push(newMethodName);
          methods[newMethodName] = methods[methodName];
        }
      }
    }

    function Keccak(bits, padding, outputBits) {
      this.blocks = [];
      this.s = [];
      this.padding = padding;
      this.outputBits = outputBits;
      this.reset = true;
      this.finalized = false;
      this.block = 0;
      this.start = 0;
      this.blockCount = (1600 - (bits << 1)) >> 5;
      this.byteCount = this.blockCount << 2;
      this.outputBlocks = outputBits >> 5;
      this.extraBytes = (outputBits & 31) >> 3;

      for (var i = 0; i < 50; ++i) {
        this.s[i] = 0;
      }
    }

    Keccak.prototype.update = function (message) {
      if (this.finalized) {
        throw new Error(FINALIZE_ERROR);
      }
      var notString, type = typeof message;
      if (type !== 'string') {
        if (type === 'object') {
          if (message === null) {
            throw new Error(INPUT_ERROR);
          } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
            message = new Uint8Array(message);
          } else if (!Array.isArray(message)) {
            if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
              throw new Error(INPUT_ERROR);
            }
          }
        } else {
          throw new Error(INPUT_ERROR);
        }
        notString = true;
      }
      var blocks = this.blocks, byteCount = this.byteCount, length = message.length,
        blockCount = this.blockCount, index = 0, s = this.s, i, code;

      while (index < length) {
        if (this.reset) {
          this.reset = false;
          blocks[0] = this.block;
          for (i = 1; i < blockCount + 1; ++i) {
            blocks[i] = 0;
          }
        }
        if (notString) {
          for (i = this.start; index < length && i < byteCount; ++index) {
            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
          }
        } else {
          for (i = this.start; index < length && i < byteCount; ++index) {
            code = message.charCodeAt(index);
            if (code < 0x80) {
              blocks[i >> 2] |= code << SHIFT[i++ & 3];
            } else if (code < 0x800) {
              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
            } else if (code < 0xd800 || code >= 0xe000) {
              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
            } else {
              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
            }
          }
        }
        this.lastByteIndex = i;
        if (i >= byteCount) {
          this.start = i - byteCount;
          this.block = blocks[blockCount];
          for (i = 0; i < blockCount; ++i) {
            s[i] ^= blocks[i];
          }
          f(s);
          this.reset = true;
        } else {
          this.start = i;
        }
      }
      return this;
    };

    Keccak.prototype.encode = function (x, right) {
      var o = x & 255, n = 1;
      var bytes = [o];
      x = x >> 8;
      o = x & 255;
      while (o > 0) {
        bytes.unshift(o);
        x = x >> 8;
        o = x & 255;
        ++n;
      }
      if (right) {
        bytes.push(n);
      } else {
        bytes.unshift(n);
      }
      this.update(bytes);
      return bytes.length;
    };

    Keccak.prototype.encodeString = function (str) {
      var notString, type = typeof str;
      if (type !== 'string') {
        if (type === 'object') {
          if (str === null) {
            throw new Error(INPUT_ERROR);
          } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
            str = new Uint8Array(str);
          } else if (!Array.isArray(str)) {
            if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
              throw new Error(INPUT_ERROR);
            }
          }
        } else {
          throw new Error(INPUT_ERROR);
        }
        notString = true;
      }
      var bytes = 0, length = str.length;
      if (notString) {
        bytes = length;
      } else {
        for (var i = 0; i < str.length; ++i) {
          var code = str.charCodeAt(i);
          if (code < 0x80) {
            bytes += 1;
          } else if (code < 0x800) {
            bytes += 2;
          } else if (code < 0xd800 || code >= 0xe000) {
            bytes += 3;
          } else {
            code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));
            bytes += 4;
          }
        }
      }
      bytes += this.encode(bytes * 8);
      this.update(str);
      return bytes;
    };

    Keccak.prototype.bytepad = function (strs, w) {
      var bytes = this.encode(w);
      for (var i = 0; i < strs.length; ++i) {
        bytes += this.encodeString(strs[i]);
      }
      var paddingBytes = w - bytes % w;
      var zeros = [];
      zeros.length = paddingBytes;
      this.update(zeros);
      return this;
    };

    Keccak.prototype.finalize = function () {
      if (this.finalized) {
        return;
      }
      this.finalized = true;
      var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
      blocks[i >> 2] |= this.padding[i & 3];
      if (this.lastByteIndex === this.byteCount) {
        blocks[0] = blocks[blockCount];
        for (i = 1; i < blockCount + 1; ++i) {
          blocks[i] = 0;
        }
      }
      blocks[blockCount - 1] |= 0x80000000;
      for (i = 0; i < blockCount; ++i) {
        s[i] ^= blocks[i];
      }
      f(s);
    };

    Keccak.prototype.toString = Keccak.prototype.hex = function () {
      this.finalize();

      var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
        extraBytes = this.extraBytes, i = 0, j = 0;
      var hex = '', block;
      while (j < outputBlocks) {
        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
          block = s[i];
          hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
            HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
            HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
            HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
        }
        if (j % blockCount === 0) {
          f(s);
          i = 0;
        }
      }
      if (extraBytes) {
        block = s[i];
        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
        if (extraBytes > 1) {
          hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
        }
        if (extraBytes > 2) {
          hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
        }
      }
      return hex;
    };

    Keccak.prototype.arrayBuffer = function () {
      this.finalize();

      var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
        extraBytes = this.extraBytes, i = 0, j = 0;
      var bytes = this.outputBits >> 3;
      var buffer;
      if (extraBytes) {
        buffer = new ArrayBuffer((outputBlocks + 1) << 2);
      } else {
        buffer = new ArrayBuffer(bytes);
      }
      var array = new Uint32Array(buffer);
      while (j < outputBlocks) {
        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
          array[j] = s[i];
        }
        if (j % blockCount === 0) {
          f(s);
        }
      }
      if (extraBytes) {
        array[i] = s[i];
        buffer = buffer.slice(0, bytes);
      }
      return buffer;
    };

    Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

    Keccak.prototype.digest = Keccak.prototype.array = function () {
      this.finalize();

      var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
        extraBytes = this.extraBytes, i = 0, j = 0;
      var array = [], offset, block;
      while (j < outputBlocks) {
        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
          offset = j << 2;
          block = s[i];
          array[offset] = block & 0xFF;
          array[offset + 1] = (block >> 8) & 0xFF;
          array[offset + 2] = (block >> 16) & 0xFF;
          array[offset + 3] = (block >> 24) & 0xFF;
        }
        if (j % blockCount === 0) {
          f(s);
        }
      }
      if (extraBytes) {
        offset = j << 2;
        block = s[i];
        array[offset] = block & 0xFF;
        if (extraBytes > 1) {
          array[offset + 1] = (block >> 8) & 0xFF;
        }
        if (extraBytes > 2) {
          array[offset + 2] = (block >> 16) & 0xFF;
        }
      }
      return array;
    };

    function Kmac(bits, padding, outputBits) {
      Keccak.call(this, bits, padding, outputBits);
    }

    Kmac.prototype = new Keccak();

    Kmac.prototype.finalize = function () {
      this.encode(this.outputBits, true);
      return Keccak.prototype.finalize.call(this);
    };

    var f = function (s) {
      var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
        b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
        b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
        b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
      for (n = 0; n < 48; n += 2) {
        c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
        c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
        c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
        c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
        c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
        c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
        c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
        c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
        c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
        c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

        h = c8 ^ ((c2 << 1) | (c3 >>> 31));
        l = c9 ^ ((c3 << 1) | (c2 >>> 31));
        s[0] ^= h;
        s[1] ^= l;
        s[10] ^= h;
        s[11] ^= l;
        s[20] ^= h;
        s[21] ^= l;
        s[30] ^= h;
        s[31] ^= l;
        s[40] ^= h;
        s[41] ^= l;
        h = c0 ^ ((c4 << 1) | (c5 >>> 31));
        l = c1 ^ ((c5 << 1) | (c4 >>> 31));
        s[2] ^= h;
        s[3] ^= l;
        s[12] ^= h;
        s[13] ^= l;
        s[22] ^= h;
        s[23] ^= l;
        s[32] ^= h;
        s[33] ^= l;
        s[42] ^= h;
        s[43] ^= l;
        h = c2 ^ ((c6 << 1) | (c7 >>> 31));
        l = c3 ^ ((c7 << 1) | (c6 >>> 31));
        s[4] ^= h;
        s[5] ^= l;
        s[14] ^= h;
        s[15] ^= l;
        s[24] ^= h;
        s[25] ^= l;
        s[34] ^= h;
        s[35] ^= l;
        s[44] ^= h;
        s[45] ^= l;
        h = c4 ^ ((c8 << 1) | (c9 >>> 31));
        l = c5 ^ ((c9 << 1) | (c8 >>> 31));
        s[6] ^= h;
        s[7] ^= l;
        s[16] ^= h;
        s[17] ^= l;
        s[26] ^= h;
        s[27] ^= l;
        s[36] ^= h;
        s[37] ^= l;
        s[46] ^= h;
        s[47] ^= l;
        h = c6 ^ ((c0 << 1) | (c1 >>> 31));
        l = c7 ^ ((c1 << 1) | (c0 >>> 31));
        s[8] ^= h;
        s[9] ^= l;
        s[18] ^= h;
        s[19] ^= l;
        s[28] ^= h;
        s[29] ^= l;
        s[38] ^= h;
        s[39] ^= l;
        s[48] ^= h;
        s[49] ^= l;

        b0 = s[0];
        b1 = s[1];
        b32 = (s[11] << 4) | (s[10] >>> 28);
        b33 = (s[10] << 4) | (s[11] >>> 28);
        b14 = (s[20] << 3) | (s[21] >>> 29);
        b15 = (s[21] << 3) | (s[20] >>> 29);
        b46 = (s[31] << 9) | (s[30] >>> 23);
        b47 = (s[30] << 9) | (s[31] >>> 23);
        b28 = (s[40] << 18) | (s[41] >>> 14);
        b29 = (s[41] << 18) | (s[40] >>> 14);
        b20 = (s[2] << 1) | (s[3] >>> 31);
        b21 = (s[3] << 1) | (s[2] >>> 31);
        b2 = (s[13] << 12) | (s[12] >>> 20);
        b3 = (s[12] << 12) | (s[13] >>> 20);
        b34 = (s[22] << 10) | (s[23] >>> 22);
        b35 = (s[23] << 10) | (s[22] >>> 22);
        b16 = (s[33] << 13) | (s[32] >>> 19);
        b17 = (s[32] << 13) | (s[33] >>> 19);
        b48 = (s[42] << 2) | (s[43] >>> 30);
        b49 = (s[43] << 2) | (s[42] >>> 30);
        b40 = (s[5] << 30) | (s[4] >>> 2);
        b41 = (s[4] << 30) | (s[5] >>> 2);
        b22 = (s[14] << 6) | (s[15] >>> 26);
        b23 = (s[15] << 6) | (s[14] >>> 26);
        b4 = (s[25] << 11) | (s[24] >>> 21);
        b5 = (s[24] << 11) | (s[25] >>> 21);
        b36 = (s[34] << 15) | (s[35] >>> 17);
        b37 = (s[35] << 15) | (s[34] >>> 17);
        b18 = (s[45] << 29) | (s[44] >>> 3);
        b19 = (s[44] << 29) | (s[45] >>> 3);
        b10 = (s[6] << 28) | (s[7] >>> 4);
        b11 = (s[7] << 28) | (s[6] >>> 4);
        b42 = (s[17] << 23) | (s[16] >>> 9);
        b43 = (s[16] << 23) | (s[17] >>> 9);
        b24 = (s[26] << 25) | (s[27] >>> 7);
        b25 = (s[27] << 25) | (s[26] >>> 7);
        b6 = (s[36] << 21) | (s[37] >>> 11);
        b7 = (s[37] << 21) | (s[36] >>> 11);
        b38 = (s[47] << 24) | (s[46] >>> 8);
        b39 = (s[46] << 24) | (s[47] >>> 8);
        b30 = (s[8] << 27) | (s[9] >>> 5);
        b31 = (s[9] << 27) | (s[8] >>> 5);
        b12 = (s[18] << 20) | (s[19] >>> 12);
        b13 = (s[19] << 20) | (s[18] >>> 12);
        b44 = (s[29] << 7) | (s[28] >>> 25);
        b45 = (s[28] << 7) | (s[29] >>> 25);
        b26 = (s[38] << 8) | (s[39] >>> 24);
        b27 = (s[39] << 8) | (s[38] >>> 24);
        b8 = (s[48] << 14) | (s[49] >>> 18);
        b9 = (s[49] << 14) | (s[48] >>> 18);

        s[0] = b0 ^ (~b2 & b4);
        s[1] = b1 ^ (~b3 & b5);
        s[10] = b10 ^ (~b12 & b14);
        s[11] = b11 ^ (~b13 & b15);
        s[20] = b20 ^ (~b22 & b24);
        s[21] = b21 ^ (~b23 & b25);
        s[30] = b30 ^ (~b32 & b34);
        s[31] = b31 ^ (~b33 & b35);
        s[40] = b40 ^ (~b42 & b44);
        s[41] = b41 ^ (~b43 & b45);
        s[2] = b2 ^ (~b4 & b6);
        s[3] = b3 ^ (~b5 & b7);
        s[12] = b12 ^ (~b14 & b16);
        s[13] = b13 ^ (~b15 & b17);
        s[22] = b22 ^ (~b24 & b26);
        s[23] = b23 ^ (~b25 & b27);
        s[32] = b32 ^ (~b34 & b36);
        s[33] = b33 ^ (~b35 & b37);
        s[42] = b42 ^ (~b44 & b46);
        s[43] = b43 ^ (~b45 & b47);
        s[4] = b4 ^ (~b6 & b8);
        s[5] = b5 ^ (~b7 & b9);
        s[14] = b14 ^ (~b16 & b18);
        s[15] = b15 ^ (~b17 & b19);
        s[24] = b24 ^ (~b26 & b28);
        s[25] = b25 ^ (~b27 & b29);
        s[34] = b34 ^ (~b36 & b38);
        s[35] = b35 ^ (~b37 & b39);
        s[44] = b44 ^ (~b46 & b48);
        s[45] = b45 ^ (~b47 & b49);
        s[6] = b6 ^ (~b8 & b0);
        s[7] = b7 ^ (~b9 & b1);
        s[16] = b16 ^ (~b18 & b10);
        s[17] = b17 ^ (~b19 & b11);
        s[26] = b26 ^ (~b28 & b20);
        s[27] = b27 ^ (~b29 & b21);
        s[36] = b36 ^ (~b38 & b30);
        s[37] = b37 ^ (~b39 & b31);
        s[46] = b46 ^ (~b48 & b40);
        s[47] = b47 ^ (~b49 & b41);
        s[8] = b8 ^ (~b0 & b2);
        s[9] = b9 ^ (~b1 & b3);
        s[18] = b18 ^ (~b10 & b12);
        s[19] = b19 ^ (~b11 & b13);
        s[28] = b28 ^ (~b20 & b22);
        s[29] = b29 ^ (~b21 & b23);
        s[38] = b38 ^ (~b30 & b32);
        s[39] = b39 ^ (~b31 & b33);
        s[48] = b48 ^ (~b40 & b42);
        s[49] = b49 ^ (~b41 & b43);

        s[0] ^= RC[n];
        s[1] ^= RC[n + 1];
      }
    };

    if (COMMON_JS) {
      module.exports = methods;
    } else {
      for (i = 0; i < methodNames.length; ++i) {
        root[methodNames[i]] = methods[methodNames[i]];
      }
    }
  })();
  }(sha3$1));

  var sha3 = sha3$1.exports;

  function keccak256(data) {
      return '0x' + sha3.keccak_256(arrayify(data));
  }

  const version$d = "rlp/5.5.0";

  new Logger(version$d);

  const version$c = "address/5.5.0";

  const logger$h = new Logger(version$c);
  function getChecksumAddress(address) {
      if (!isHexString(address, 20)) {
          logger$h.throwArgumentError("invalid address", "address", address);
      }
      address = address.toLowerCase();
      const chars = address.substring(2).split("");
      const expanded = new Uint8Array(40);
      for (let i = 0; i < 40; i++) {
          expanded[i] = chars[i].charCodeAt(0);
      }
      const hashed = arrayify(keccak256(expanded));
      for (let i = 0; i < 40; i += 2) {
          if ((hashed[i >> 1] >> 4) >= 8) {
              chars[i] = chars[i].toUpperCase();
          }
          if ((hashed[i >> 1] & 0x0f) >= 8) {
              chars[i + 1] = chars[i + 1].toUpperCase();
          }
      }
      return "0x" + chars.join("");
  }
  // Shims for environments that are missing some required constants and functions
  const MAX_SAFE_INTEGER = 0x1fffffffffffff;
  function log10(x) {
      if (Math.log10) {
          return Math.log10(x);
      }
      return Math.log(x) / Math.LN10;
  }
  // See: https://en.wikipedia.org/wiki/International_Bank_Account_Number
  // Create lookup table
  const ibanLookup = {};
  for (let i = 0; i < 10; i++) {
      ibanLookup[String(i)] = String(i);
  }
  for (let i = 0; i < 26; i++) {
      ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
  }
  // How many decimal digits can we process? (for 64-bit float, this is 15)
  const safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
  function ibanChecksum(address) {
      address = address.toUpperCase();
      address = address.substring(4) + address.substring(0, 2) + "00";
      let expanded = address.split("").map((c) => { return ibanLookup[c]; }).join("");
      // Javascript can handle integers safely up to 15 (decimal) digits
      while (expanded.length >= safeDigits) {
          let block = expanded.substring(0, safeDigits);
          expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
      }
      let checksum = String(98 - (parseInt(expanded, 10) % 97));
      while (checksum.length < 2) {
          checksum = "0" + checksum;
      }
      return checksum;
  }
  function getAddress(address) {
      let result = null;
      if (typeof (address) !== "string") {
          logger$h.throwArgumentError("invalid address", "address", address);
      }
      if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
          // Missing the 0x prefix
          if (address.substring(0, 2) !== "0x") {
              address = "0x" + address;
          }
          result = getChecksumAddress(address);
          // It is a checksummed address with a bad checksum
          if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
              logger$h.throwArgumentError("bad address checksum", "address", address);
          }
          // Maybe ICAP? (we only support direct mode)
      }
      else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
          // It is an ICAP address with a bad checksum
          if (address.substring(2, 4) !== ibanChecksum(address)) {
              logger$h.throwArgumentError("bad icap checksum", "address", address);
          }
          result = _base36To16(address.substring(4));
          while (result.length < 40) {
              result = "0" + result;
          }
          result = getChecksumAddress("0x" + result);
      }
      else {
          logger$h.throwArgumentError("invalid address", "address", address);
      }
      return result;
  }

  class AddressCoder extends Coder {
      constructor(localName) {
          super("address", "address", localName, false);
      }
      defaultValue() {
          return "0x0000000000000000000000000000000000000000";
      }
      encode(writer, value) {
          try {
              value = getAddress(value);
          }
          catch (error) {
              this._throwError(error.message, value);
          }
          return writer.writeValue(value);
      }
      decode(reader) {
          return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));
      }
  }

  // Clones the functionality of an existing Coder, but without a localName
  class AnonymousCoder extends Coder {
      constructor(coder) {
          super(coder.name, coder.type, undefined, coder.dynamic);
          this.coder = coder;
      }
      defaultValue() {
          return this.coder.defaultValue();
      }
      encode(writer, value) {
          return this.coder.encode(writer, value);
      }
      decode(reader) {
          return this.coder.decode(reader);
      }
  }

  const logger$g = new Logger(version$e);
  function pack(writer, coders, values) {
      let arrayValues = null;
      if (Array.isArray(values)) {
          arrayValues = values;
      }
      else if (values && typeof (values) === "object") {
          let unique = {};
          arrayValues = coders.map((coder) => {
              const name = coder.localName;
              if (!name) {
                  logger$g.throwError("cannot encode object for signature with missing names", Logger.errors.INVALID_ARGUMENT, {
                      argument: "values",
                      coder: coder,
                      value: values
                  });
              }
              if (unique[name]) {
                  logger$g.throwError("cannot encode object for signature with duplicate names", Logger.errors.INVALID_ARGUMENT, {
                      argument: "values",
                      coder: coder,
                      value: values
                  });
              }
              unique[name] = true;
              return values[name];
          });
      }
      else {
          logger$g.throwArgumentError("invalid tuple value", "tuple", values);
      }
      if (coders.length !== arrayValues.length) {
          logger$g.throwArgumentError("types/value length mismatch", "tuple", values);
      }
      let staticWriter = new Writer(writer.wordSize);
      let dynamicWriter = new Writer(writer.wordSize);
      let updateFuncs = [];
      coders.forEach((coder, index) => {
          let value = arrayValues[index];
          if (coder.dynamic) {
              // Get current dynamic offset (for the future pointer)
              let dynamicOffset = dynamicWriter.length;
              // Encode the dynamic value into the dynamicWriter
              coder.encode(dynamicWriter, value);
              // Prepare to populate the correct offset once we are done
              let updateFunc = staticWriter.writeUpdatableValue();
              updateFuncs.push((baseOffset) => {
                  updateFunc(baseOffset + dynamicOffset);
              });
          }
          else {
              coder.encode(staticWriter, value);
          }
      });
      // Backfill all the dynamic offsets, now that we know the static length
      updateFuncs.forEach((func) => { func(staticWriter.length); });
      let length = writer.appendWriter(staticWriter);
      length += writer.appendWriter(dynamicWriter);
      return length;
  }
  function unpack(reader, coders) {
      let values = [];
      // A reader anchored to this base
      let baseReader = reader.subReader(0);
      coders.forEach((coder) => {
          let value = null;
          if (coder.dynamic) {
              let offset = reader.readValue();
              let offsetReader = baseReader.subReader(offset.toNumber());
              try {
                  value = coder.decode(offsetReader);
              }
              catch (error) {
                  // Cannot recover from this
                  if (error.code === Logger.errors.BUFFER_OVERRUN) {
                      throw error;
                  }
                  value = error;
                  value.baseType = coder.name;
                  value.name = coder.localName;
                  value.type = coder.type;
              }
          }
          else {
              try {
                  value = coder.decode(reader);
              }
              catch (error) {
                  // Cannot recover from this
                  if (error.code === Logger.errors.BUFFER_OVERRUN) {
                      throw error;
                  }
                  value = error;
                  value.baseType = coder.name;
                  value.name = coder.localName;
                  value.type = coder.type;
              }
          }
          if (value != undefined) {
              values.push(value);
          }
      });
      // We only output named properties for uniquely named coders
      const uniqueNames = coders.reduce((accum, coder) => {
          const name = coder.localName;
          if (name) {
              if (!accum[name]) {
                  accum[name] = 0;
              }
              accum[name]++;
          }
          return accum;
      }, {});
      // Add any named parameters (i.e. tuples)
      coders.forEach((coder, index) => {
          let name = coder.localName;
          if (!name || uniqueNames[name] !== 1) {
              return;
          }
          if (name === "length") {
              name = "_length";
          }
          if (values[name] != null) {
              return;
          }
          const value = values[index];
          if (value instanceof Error) {
              Object.defineProperty(values, name, {
                  enumerable: true,
                  get: () => { throw value; }
              });
          }
          else {
              values[name] = value;
          }
      });
      for (let i = 0; i < values.length; i++) {
          const value = values[i];
          if (value instanceof Error) {
              Object.defineProperty(values, i, {
                  enumerable: true,
                  get: () => { throw value; }
              });
          }
      }
      return Object.freeze(values);
  }
  class ArrayCoder extends Coder {
      constructor(coder, length, localName) {
          const type = (coder.type + "[" + (length >= 0 ? length : "") + "]");
          const dynamic = (length === -1 || coder.dynamic);
          super("array", type, localName, dynamic);
          this.coder = coder;
          this.length = length;
      }
      defaultValue() {
          // Verifies the child coder is valid (even if the array is dynamic or 0-length)
          const defaultChild = this.coder.defaultValue();
          const result = [];
          for (let i = 0; i < this.length; i++) {
              result.push(defaultChild);
          }
          return result;
      }
      encode(writer, value) {
          if (!Array.isArray(value)) {
              this._throwError("expected array value", value);
          }
          let count = this.length;
          if (count === -1) {
              count = value.length;
              writer.writeValue(value.length);
          }
          logger$g.checkArgumentCount(value.length, count, "coder array" + (this.localName ? (" " + this.localName) : ""));
          let coders = [];
          for (let i = 0; i < value.length; i++) {
              coders.push(this.coder);
          }
          return pack(writer, coders, value);
      }
      decode(reader) {
          let count = this.length;
          if (count === -1) {
              count = reader.readValue().toNumber();
              // Check that there is *roughly* enough data to ensure
              // stray random data is not being read as a length. Each
              // slot requires at least 32 bytes for their value (or 32
              // bytes as a link to the data). This could use a much
              // tighter bound, but we are erroring on the side of safety.
              if (count * 32 > reader._data.length) {
                  logger$g.throwError("insufficient data length", Logger.errors.BUFFER_OVERRUN, {
                      length: reader._data.length,
                      count: count
                  });
              }
          }
          let coders = [];
          for (let i = 0; i < count; i++) {
              coders.push(new AnonymousCoder(this.coder));
          }
          return reader.coerce(this.name, unpack(reader, coders));
      }
  }

  class BooleanCoder extends Coder {
      constructor(localName) {
          super("bool", "bool", localName, false);
      }
      defaultValue() {
          return false;
      }
      encode(writer, value) {
          return writer.writeValue(value ? 1 : 0);
      }
      decode(reader) {
          return reader.coerce(this.type, !reader.readValue().isZero());
      }
  }

  class DynamicBytesCoder extends Coder {
      constructor(type, localName) {
          super(type, type, localName, true);
      }
      defaultValue() {
          return "0x";
      }
      encode(writer, value) {
          value = arrayify(value);
          let length = writer.writeValue(value.length);
          length += writer.writeBytes(value);
          return length;
      }
      decode(reader) {
          return reader.readBytes(reader.readValue().toNumber(), true);
      }
  }
  class BytesCoder extends DynamicBytesCoder {
      constructor(localName) {
          super("bytes", localName);
      }
      decode(reader) {
          return reader.coerce(this.name, hexlify(super.decode(reader)));
      }
  }

  // @TODO: Merge this with bytes
  class FixedBytesCoder extends Coder {
      constructor(size, localName) {
          let name = "bytes" + String(size);
          super(name, name, localName, false);
          this.size = size;
      }
      defaultValue() {
          return ("0x0000000000000000000000000000000000000000000000000000000000000000").substring(0, 2 + this.size * 2);
      }
      encode(writer, value) {
          let data = arrayify(value);
          if (data.length !== this.size) {
              this._throwError("incorrect data length", value);
          }
          return writer.writeBytes(data);
      }
      decode(reader) {
          return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));
      }
  }

  class NullCoder extends Coder {
      constructor(localName) {
          super("null", "", localName, false);
      }
      defaultValue() {
          return null;
      }
      encode(writer, value) {
          if (value != null) {
              this._throwError("not null", value);
          }
          return writer.writeBytes([]);
      }
      decode(reader) {
          reader.readBytes(0);
          return reader.coerce(this.name, null);
      }
  }

  const NegativeOne$1 = ( /*#__PURE__*/BigNumber.from(-1));
  const Zero$1 = ( /*#__PURE__*/BigNumber.from(0));
  const One$1 = ( /*#__PURE__*/BigNumber.from(1));
  const MaxUint256$1 = ( /*#__PURE__*/BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"));

  class NumberCoder extends Coder {
      constructor(size, signed, localName) {
          const name = ((signed ? "int" : "uint") + (size * 8));
          super(name, name, localName, false);
          this.size = size;
          this.signed = signed;
      }
      defaultValue() {
          return 0;
      }
      encode(writer, value) {
          let v = BigNumber.from(value);
          // Check bounds are safe for encoding
          let maxUintValue = MaxUint256$1.mask(writer.wordSize * 8);
          if (this.signed) {
              let bounds = maxUintValue.mask(this.size * 8 - 1);
              if (v.gt(bounds) || v.lt(bounds.add(One$1).mul(NegativeOne$1))) {
                  this._throwError("value out-of-bounds", value);
              }
          }
          else if (v.lt(Zero$1) || v.gt(maxUintValue.mask(this.size * 8))) {
              this._throwError("value out-of-bounds", value);
          }
          v = v.toTwos(this.size * 8).mask(this.size * 8);
          if (this.signed) {
              v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
          }
          return writer.writeValue(v);
      }
      decode(reader) {
          let value = reader.readValue().mask(this.size * 8);
          if (this.signed) {
              value = value.fromTwos(this.size * 8);
          }
          return reader.coerce(this.name, value);
      }
  }

  const version$b = "strings/5.5.0";

  const logger$f = new Logger(version$b);
  ///////////////////////////////
  var UnicodeNormalizationForm;
  (function (UnicodeNormalizationForm) {
      UnicodeNormalizationForm["current"] = "";
      UnicodeNormalizationForm["NFC"] = "NFC";
      UnicodeNormalizationForm["NFD"] = "NFD";
      UnicodeNormalizationForm["NFKC"] = "NFKC";
      UnicodeNormalizationForm["NFKD"] = "NFKD";
  })(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));
  var Utf8ErrorReason;
  (function (Utf8ErrorReason) {
      // A continuation byte was present where there was nothing to continue
      // - offset = the index the codepoint began in
      Utf8ErrorReason["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
      // An invalid (non-continuation) byte to start a UTF-8 codepoint was found
      // - offset = the index the codepoint began in
      Utf8ErrorReason["BAD_PREFIX"] = "bad codepoint prefix";
      // The string is too short to process the expected codepoint
      // - offset = the index the codepoint began in
      Utf8ErrorReason["OVERRUN"] = "string overrun";
      // A missing continuation byte was expected but not found
      // - offset = the index the continuation byte was expected at
      Utf8ErrorReason["MISSING_CONTINUE"] = "missing continuation byte";
      // The computed code point is outside the range for UTF-8
      // - offset       = start of this codepoint
      // - badCodepoint = the computed codepoint; outside the UTF-8 range
      Utf8ErrorReason["OUT_OF_RANGE"] = "out of UTF-8 range";
      // UTF-8 strings may not contain UTF-16 surrogate pairs
      // - offset       = start of this codepoint
      // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range
      Utf8ErrorReason["UTF16_SURROGATE"] = "UTF-16 surrogate";
      // The string is an overlong representation
      // - offset       = start of this codepoint
      // - badCodepoint = the computed codepoint; already bounds checked
      Utf8ErrorReason["OVERLONG"] = "overlong representation";
  })(Utf8ErrorReason || (Utf8ErrorReason = {}));
  function errorFunc(reason, offset, bytes, output, badCodepoint) {
      return logger$f.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes);
  }
  function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
      // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes
      if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
          let i = 0;
          for (let o = offset + 1; o < bytes.length; o++) {
              if (bytes[o] >> 6 !== 0x02) {
                  break;
              }
              i++;
          }
          return i;
      }
      // This byte runs us past the end of the string, so just jump to the end
      // (but the first byte was read already read and therefore skipped)
      if (reason === Utf8ErrorReason.OVERRUN) {
          return bytes.length - offset - 1;
      }
      // Nothing to skip
      return 0;
  }
  function replaceFunc(reason, offset, bytes, output, badCodepoint) {
      // Overlong representations are otherwise "valid" code points; just non-deistingtished
      if (reason === Utf8ErrorReason.OVERLONG) {
          output.push(badCodepoint);
          return 0;
      }
      // Put the replacement character into the output
      output.push(0xfffd);
      // Otherwise, process as if ignoring errors
      return ignoreFunc(reason, offset, bytes);
  }
  // Common error handing strategies
  const Utf8ErrorFuncs = Object.freeze({
      error: errorFunc,
      ignore: ignoreFunc,
      replace: replaceFunc
  });
  // http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499
  function getUtf8CodePoints(bytes, onError) {
      if (onError == null) {
          onError = Utf8ErrorFuncs.error;
      }
      bytes = arrayify(bytes);
      const result = [];
      let i = 0;
      // Invalid bytes are ignored
      while (i < bytes.length) {
          const c = bytes[i++];
          // 0xxx xxxx
          if (c >> 7 === 0) {
              result.push(c);
              continue;
          }
          // Multibyte; how many bytes left for this character?
          let extraLength = null;
          let overlongMask = null;
          // 110x xxxx 10xx xxxx
          if ((c & 0xe0) === 0xc0) {
              extraLength = 1;
              overlongMask = 0x7f;
              // 1110 xxxx 10xx xxxx 10xx xxxx
          }
          else if ((c & 0xf0) === 0xe0) {
              extraLength = 2;
              overlongMask = 0x7ff;
              // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx
          }
          else if ((c & 0xf8) === 0xf0) {
              extraLength = 3;
              overlongMask = 0xffff;
          }
          else {
              if ((c & 0xc0) === 0x80) {
                  i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);
              }
              else {
                  i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);
              }
              continue;
          }
          // Do we have enough bytes in our data?
          if (i - 1 + extraLength >= bytes.length) {
              i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);
              continue;
          }
          // Remove the length prefix from the char
          let res = c & ((1 << (8 - extraLength - 1)) - 1);
          for (let j = 0; j < extraLength; j++) {
              let nextChar = bytes[i];
              // Invalid continuation byte
              if ((nextChar & 0xc0) != 0x80) {
                  i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);
                  res = null;
                  break;
              }
              res = (res << 6) | (nextChar & 0x3f);
              i++;
          }
          // See above loop for invalid continuation byte
          if (res === null) {
              continue;
          }
          // Maximum code point
          if (res > 0x10ffff) {
              i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);
              continue;
          }
          // Reserved for UTF-16 surrogate halves
          if (res >= 0xd800 && res <= 0xdfff) {
              i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);
              continue;
          }
          // Check for overlong sequences (more bytes than needed)
          if (res <= overlongMask) {
              i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);
              continue;
          }
          result.push(res);
      }
      return result;
  }
  // http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array
  function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {
      if (form != UnicodeNormalizationForm.current) {
          logger$f.checkNormalize();
          str = str.normalize(form);
      }
      let result = [];
      for (let i = 0; i < str.length; i++) {
          const c = str.charCodeAt(i);
          if (c < 0x80) {
              result.push(c);
          }
          else if (c < 0x800) {
              result.push((c >> 6) | 0xc0);
              result.push((c & 0x3f) | 0x80);
          }
          else if ((c & 0xfc00) == 0xd800) {
              i++;
              const c2 = str.charCodeAt(i);
              if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {
                  throw new Error("invalid utf-8 string");
              }
              // Surrogate Pair
              const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
              result.push((pair >> 18) | 0xf0);
              result.push(((pair >> 12) & 0x3f) | 0x80);
              result.push(((pair >> 6) & 0x3f) | 0x80);
              result.push((pair & 0x3f) | 0x80);
          }
          else {
              result.push((c >> 12) | 0xe0);
              result.push(((c >> 6) & 0x3f) | 0x80);
              result.push((c & 0x3f) | 0x80);
          }
      }
      return arrayify(result);
  }
  function _toUtf8String(codePoints) {
      return codePoints.map((codePoint) => {
          if (codePoint <= 0xffff) {
              return String.fromCharCode(codePoint);
          }
          codePoint -= 0x10000;
          return String.fromCharCode((((codePoint >> 10) & 0x3ff) + 0xd800), ((codePoint & 0x3ff) + 0xdc00));
      }).join("");
  }
  function toUtf8String(bytes, onError) {
      return _toUtf8String(getUtf8CodePoints(bytes, onError));
  }

  function bytes2(data) {
      if ((data.length % 4) !== 0) {
          throw new Error("bad data");
      }
      let result = [];
      for (let i = 0; i < data.length; i += 4) {
          result.push(parseInt(data.substring(i, i + 4), 16));
      }
      return result;
  }
  function createTable(data, func) {
      if (!func) {
          func = function (value) { return [parseInt(value, 16)]; };
      }
      let lo = 0;
      let result = {};
      data.split(",").forEach((pair) => {
          let comps = pair.split(":");
          lo += parseInt(comps[0], 16);
          result[lo] = func(comps[1]);
      });
      return result;
  }
  function createRangeTable(data) {
      let hi = 0;
      return data.split(",").map((v) => {
          let comps = v.split("-");
          if (comps.length === 1) {
              comps[1] = "0";
          }
          else if (comps[1] === "") {
              comps[1] = "1";
          }
          let lo = hi + parseInt(comps[0], 16);
          hi = parseInt(comps[1], 16);
          return { l: lo, h: hi };
      });
  }
  createRangeTable("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d");
  // @TODO: Make this relative...
  "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map((v) => parseInt(v, 16));
  createTable("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3");
  createTable("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7");
  createTable("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", bytes2);
  createRangeTable("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");

  class StringCoder extends DynamicBytesCoder {
      constructor(localName) {
          super("string", localName);
      }
      defaultValue() {
          return "";
      }
      encode(writer, value) {
          return super.encode(writer, toUtf8Bytes(value));
      }
      decode(reader) {
          return toUtf8String(super.decode(reader));
      }
  }

  class TupleCoder extends Coder {
      constructor(coders, localName) {
          let dynamic = false;
          const types = [];
          coders.forEach((coder) => {
              if (coder.dynamic) {
                  dynamic = true;
              }
              types.push(coder.type);
          });
          const type = ("tuple(" + types.join(",") + ")");
          super("tuple", type, localName, dynamic);
          this.coders = coders;
      }
      defaultValue() {
          const values = [];
          this.coders.forEach((coder) => {
              values.push(coder.defaultValue());
          });
          // We only output named properties for uniquely named coders
          const uniqueNames = this.coders.reduce((accum, coder) => {
              const name = coder.localName;
              if (name) {
                  if (!accum[name]) {
                      accum[name] = 0;
                  }
                  accum[name]++;
              }
              return accum;
          }, {});
          // Add named values
          this.coders.forEach((coder, index) => {
              let name = coder.localName;
              if (!name || uniqueNames[name] !== 1) {
                  return;
              }
              if (name === "length") {
                  name = "_length";
              }
              if (values[name] != null) {
                  return;
              }
              values[name] = values[index];
          });
          return Object.freeze(values);
      }
      encode(writer, value) {
          return pack(writer, this.coders, value);
      }
      decode(reader) {
          return reader.coerce(this.name, unpack(reader, this.coders));
      }
  }

  const logger$e = new Logger(version$e);
  const paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
  const paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
  class AbiCoder {
      constructor(coerceFunc) {
          logger$e.checkNew(new.target, AbiCoder);
          defineReadOnly(this, "coerceFunc", coerceFunc || null);
      }
      _getCoder(param) {
          switch (param.baseType) {
              case "address":
                  return new AddressCoder(param.name);
              case "bool":
                  return new BooleanCoder(param.name);
              case "string":
                  return new StringCoder(param.name);
              case "bytes":
                  return new BytesCoder(param.name);
              case "array":
                  return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);
              case "tuple":
                  return new TupleCoder((param.components || []).map((component) => {
                      return this._getCoder(component);
                  }), param.name);
              case "":
                  return new NullCoder(param.name);
          }
          // u?int[0-9]*
          let match = param.type.match(paramTypeNumber);
          if (match) {
              let size = parseInt(match[2] || "256");
              if (size === 0 || size > 256 || (size % 8) !== 0) {
                  logger$e.throwArgumentError("invalid " + match[1] + " bit length", "param", param);
              }
              return new NumberCoder(size / 8, (match[1] === "int"), param.name);
          }
          // bytes[0-9]+
          match = param.type.match(paramTypeBytes);
          if (match) {
              let size = parseInt(match[1]);
              if (size === 0 || size > 32) {
                  logger$e.throwArgumentError("invalid bytes length", "param", param);
              }
              return new FixedBytesCoder(size, param.name);
          }
          return logger$e.throwArgumentError("invalid type", "type", param.type);
      }
      _getWordSize() { return 32; }
      _getReader(data, allowLoose) {
          return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);
      }
      _getWriter() {
          return new Writer(this._getWordSize());
      }
      getDefaultValue(types) {
          const coders = types.map((type) => this._getCoder(ParamType.from(type)));
          const coder = new TupleCoder(coders, "_");
          return coder.defaultValue();
      }
      encode(types, values) {
          if (types.length !== values.length) {
              logger$e.throwError("types/values length mismatch", Logger.errors.INVALID_ARGUMENT, {
                  count: { types: types.length, values: values.length },
                  value: { types: types, values: values }
              });
          }
          const coders = types.map((type) => this._getCoder(ParamType.from(type)));
          const coder = (new TupleCoder(coders, "_"));
          const writer = this._getWriter();
          coder.encode(writer, values);
          return writer.data;
      }
      decode(types, data, loose) {
          const coders = types.map((type) => this._getCoder(ParamType.from(type)));
          const coder = new TupleCoder(coders, "_");
          return coder.decode(this._getReader(arrayify(data), loose));
      }
  }
  new AbiCoder();

  const version$a = "hash/5.5.0";

  new Logger(version$a);
  const Zeros = new Uint8Array(32);
  Zeros.fill(0);
  new Logger(version$a);
  const padding = new Uint8Array(32);
  padding.fill(0);
  BigNumber.from(-1);
  const Zero = BigNumber.from(0);
  const One = BigNumber.from(1);
  BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  hexZeroPad(One.toHexString(), 32);
  hexZeroPad(Zero.toHexString(), 32);

  new Logger(version$e);

  const Localhost = {
      chainId: 1337,
      chainName: 'Localhost',
      isTestChain: true,
      isLocalChain: true,
      multicallAddress: '',
      getExplorerAddressLink: () => '',
      getExplorerTransactionLink: () => '',
  };
  const Hardhat = {
      chainId: 31337,
      chainName: 'Hardhat',
      isTestChain: true,
      isLocalChain: true,
      multicallAddress: '',
      getExplorerAddressLink: () => '',
      getExplorerTransactionLink: () => '',
  };

  const ArbitrumRinkeby = {
      chainId: 421611,
      chainName: 'ArbitrumRinkeby',
      isTestChain: true,
      isLocalChain: false,
      multicallAddress: '0xd27BEFd29F8Da4E187fDAEf663aEDF7742f9F47F',
      getExplorerAddressLink: (address) => `https://testnet.arbiscan.io/address/${address}`,
      getExplorerTransactionLink: (transactionHash) => `https://testnet.arbiscan.io/tx/${transactionHash}`,
  };
  const Arbitrum = {
      chainId: 42161,
      chainName: 'Arbitrum',
      isTestChain: false,
      isLocalChain: false,
      multicallAddress: '0x8a0bd1773139C6609e861B9ab68082587a3cD581',
      getExplorerAddressLink: (address) => `https://arbiscan.io/address/${address}`,
      getExplorerTransactionLink: (transactionHash) => `https://arbiscan.io/tx/${transactionHash}`,
  };

  const Avalanche = {
      chainId: 43114,
      chainName: 'Avalanche',
      isTestChain: false,
      isLocalChain: false,
      multicallAddress: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',
      getExplorerAddressLink: (address) => `https://snowtrace.io/address/${address}`,
      getExplorerTransactionLink: (transactionHash) => `https://snowtrace.io/tx/${transactionHash}`,
  };

  const BSC = {
      chainId: 56,
      chainName: 'BSC',
      isTestChain: false,
      isLocalChain: false,
      multicallAddress: '0x41263cba59eb80dc200f3e2544eda4ed6a90e76c',
      getExplorerAddressLink: (address) => `https://bscscan.com/address/${address}`,
      getExplorerTransactionLink: (transactionHash) => `https://bscscan.com/tx/${transactionHash}`,
  };
  const BSCTestnet = {
      chainId: 97,
      chainName: 'BSCTestnet',
      isTestChain: true,
      isLocalChain: false,
      multicallAddress: '0xae11C5B5f29A6a25e955F0CB8ddCc416f522AF5C',
      getExplorerAddressLink: (address) => `https://testnet.bscscan.com/address/${address}`,
      getExplorerTransactionLink: (transactionHash) => `https://testnet.bscscan.com/tx/${transactionHash}`,
  };

  const Cronos = {
      chainId: 25,
      chainName: 'Cronos',
      isTestChain: false,
      isLocalChain: false,
      multicallAddress: '0x0fA4d452693F2f45D28c4EC4d20b236C4010dA74',
      getExplorerAddressLink: (address) => `https://cronoscan.com/address/${address}`,
      getExplorerTransactionLink: (transactionHash) => `https://cronoscan.com/tx/${transactionHash}`,
  };
  const CronosTestnet = {
      chainId: 338,
      chainName: 'CronosTestnet',
      isTestChain: true,
      isLocalChain: false,
      multicallAddress: '0x6a8c1ba309136D78245f1F0a14790239b71a9577',
      getExplorerAddressLink: (address) => `https://cronos.crypto.org/explorer/testnet3/address/${address}`,
      getExplorerTransactionLink: (transactionHash) => `https://cronos.crypto.org/explorer/testnet3/tx/${transactionHash}`,
  };

  const Fantom = {
      chainId: 250,
      chainName: 'Fantom',
      isTestChain: false,
      isLocalChain: false,
      multicallAddress: '0xdc85396592f0F466224390771C861EE3957a3ff4',
      getExplorerAddressLink: (address) => `https://ftmscan.com/address/${address}`,
      getExplorerTransactionLink: (transactionHash) => `https://ftmscan.com/tx/${transactionHash}`,
  };

  const Harmony = {
      chainId: 1666600000,
      chainName: 'Harmony',
      isTestChain: false,
      isLocalChain: false,
      multicallAddress: '0xFE4980f62D708c2A84D3929859Ea226340759320',
      getExplorerAddressLink: (address) => `https://explorer.harmony.one/address/${address}`,
      getExplorerTransactionLink: (transactionHash) => `https://explorer.harmony.one/tx/${transactionHash}`,
  };

  const Mainnet = {
      chainId: 1,
      chainName: 'Mainnet',
      isTestChain: false,
      isLocalChain: false,
      multicallAddress: '0xeefba1e63905ef1d7acba5a8513c70307c1ce441',
      multicall2Address: '0x5ba1e12693dc8f9c48aad8770482f4739beed696',
      getExplorerAddressLink: (address) => `https://etherscan.io/address/${address}`,
      getExplorerTransactionLink: (transactionHash) => `https://etherscan.io/tx/${transactionHash}`,
  };
  const Ropsten = {
      chainId: 3,
      chainName: 'Ropsten',
      isTestChain: true,
      isLocalChain: false,
      multicallAddress: '0x53c43764255c17bd724f74c4ef150724ac50a3ed',
      multicall2Address: '0x5ba1e12693dc8f9c48aad8770482f4739beed696',
      getExplorerAddressLink: (address) => `https://ropsten.etherscan.io/address/${address}`,
      getExplorerTransactionLink: (transactionHash) => `https://ropsten.etherscan.io/tx/${transactionHash}`,
  };
  const Rinkeby = {
      chainId: 4,
      chainName: 'Rinkeby',
      isTestChain: true,
      isLocalChain: false,
      multicallAddress: '0x42ad527de7d4e9d9d011ac45b31d8551f8fe9821',
      multicall2Address: '0x5ba1e12693dc8f9c48aad8770482f4739beed696',
      getExplorerAddressLink: (address) => `https://rinkeby.etherscan.io/address/${address}`,
      getExplorerTransactionLink: (transactionHash) => `https://rinkeby.etherscan.io/tx/${transactionHash}`,
  };
  const Goerli = {
      chainId: 5,
      chainName: 'Goerli',
      isTestChain: true,
      isLocalChain: false,
      multicallAddress: '0x77dca2c955b15e9de4dbbcf1246b4b85b651e50e',
      multicall2Address: '0x5ba1e12693dc8f9c48aad8770482f4739beed696',
      getExplorerAddressLink: (address) => `https://goerli.etherscan.io/address/${address}`,
      getExplorerTransactionLink: (transactionHash) => `https://goerli.etherscan.io/tx/${transactionHash}`,
  };
  const Kovan = {
      chainId: 42,
      chainName: 'Kovan',
      isTestChain: true,
      isLocalChain: false,
      multicallAddress: '0x2cc8688c5f75e365aaeeb4ea8d6a480405a48d2a',
      multicall2Address: '0x5ba1e12693dc8f9c48aad8770482f4739beed696',
      getExplorerAddressLink: (address) => `https://kovan.etherscan.io/address/${address}`,
      getExplorerTransactionLink: (transactionHash) => `https://kovan.etherscan.io/tx/${transactionHash}`,
  };

  const Stardust = {
      chainId: 588,
      chainName: 'Stardust',
      isTestChain: true,
      isLocalChain: false,
      multicallAddress: '0xaF9D4DC0698d8FD9f41387ecb08D9976079B8086',
      getExplorerAddressLink: (address) => `https://stardust-explorer.metis.io/${address}`,
      getExplorerTransactionLink: (transactionHash) => `https://stardust-explorer.metis.io/${transactionHash}`,
  };

  const Moonbeam = {
      chainId: 1284,
      chainName: 'Moonbeam',
      isTestChain: false,
      isLocalChain: false,
      multicallAddress: '0x47152C4dCE75C77Bc9E52F5AAa2a20117971C365',
      getExplorerAddressLink: (address) => `https://blockscout.moonbeam.network/address/${address}/transactions`,
      getExplorerTransactionLink: (transactionHash) => `https://blockscout.moonbeam.network/tx/${transactionHash}/internal-transactions`,
  };

  const Moonriver = {
      chainId: 1285,
      chainName: 'Moonriver',
      isTestChain: false,
      isLocalChain: false,
      multicallAddress: '0xa9177F8d98DAaB74C24715Ba0A81b73654710523',
      getExplorerAddressLink: (address) => `https://blockscout.moonriver.moonbeam.network/address/${address}/transactions`,
      getExplorerTransactionLink: (transactionHash) => `https://blockscout.moonriver.moonbeam.network/tx/${transactionHash}/internal-transactions`,
  };
  const MoonbaseAlpha = {
      chainId: 1287,
      chainName: 'Moonbase Alpha',
      isTestChain: true,
      isLocalChain: false,
      multicallAddress: '0x4E2cfca20580747AdBA58cd677A998f8B261Fc21',
      getExplorerAddressLink: (address) => `https://moonbase.moonscan.io/address/${address}`,
      getExplorerTransactionLink: (transactionHash) => `https://moonbase.moonscan.io/tx/${transactionHash}`,
  };

  const OasisEmerald = {
      chainId: 42262,
      chainName: 'OasisEmerald',
      isTestChain: false,
      isLocalChain: false,
      multicallAddress: '0xA1513CE1a147BB84E04cD61d877d598C018a460F',
      getExplorerAddressLink: (address) => `https://explorer.emerald.oasis.dev/address/${address}/transactions`,
      getExplorerTransactionLink: (transactionHash) => `https://explorer.emerald.oasis.dev/tx/${transactionHash}/internal-transactions`,
  };

  const Palm = {
      chainId: 11297108109,
      chainName: 'Palm',
      isTestChain: false,
      isLocalChain: false,
      multicallAddress: '0x99a73dfE34578348fb81BD078201C0BA84E9c840',
      getExplorerAddressLink: (address) => `https://explorer.palm.io/address/${address}`,
      getExplorerTransactionLink: (transactionHash) => `https://explorer.palm.io/tx/${transactionHash}`,
  };
  const PalmTestnet = {
      chainId: 11297108099,
      chainName: 'Palm Testnet',
      isTestChain: true,
      isLocalChain: false,
      multicallAddress: '0x99a73dfE34578348fb81BD078201C0BA84E9c840',
      getExplorerAddressLink: (address) => `https://explorer.palm-uat.xyz/address/${address}`,
      getExplorerTransactionLink: (transactionHash) => `https://explorer.palm-uat.xyz/tx/${transactionHash}`,
  };

  const Polygon = {
      chainId: 137,
      chainName: 'Polygon',
      isTestChain: false,
      isLocalChain: false,
      multicallAddress: '0x11ce4B23bD875D7F5C6a31084f55fDe1e9A87507',
      getExplorerAddressLink: (address) => `https://polygonscan.com/address/${address}`,
      getExplorerTransactionLink: (transactionHash) => `https://polygonscan.com/tx/${transactionHash}`,
  };
  const Mumbai = {
      chainId: 80001,
      chainName: 'Mumbai',
      isTestChain: true,
      isLocalChain: false,
      multicallAddress: '0x08411ADd0b5AA8ee47563b146743C13b3556c9Cc',
      getExplorerAddressLink: (address) => `https://mumbai.polygonscan.com/address/${address}`,
      getExplorerTransactionLink: (transactionHash) => `https://mumbai.polygonscan.com/tx/${transactionHash}`,
  };

  const Songbird = {
      chainId: 19,
      chainName: 'Songbird',
      isTestChain: false,
      isLocalChain: false,
      multicallAddress: '0x60351436cf80A31EA6C3B261C784d3C127dBD6f1',
      getExplorerAddressLink: (address) => `https://songbird-explorer.flare.network/address/${address}`,
      getExplorerTransactionLink: (transactionHash) => `https://songbird-explorer.flare.network/tx/${transactionHash}`,
  };

  const Theta = {
      chainId: 361,
      chainName: 'Theta',
      isTestChain: false,
      isLocalChain: false,
      multicallAddress: '0xe2ec58a54f3ab2714eddbae87533793011f1e14e',
      getExplorerAddressLink: (address) => `https://explorer.thetatoken.org/address/${address}`,
      getExplorerTransactionLink: (transactionHash) => `https://explorer.thetatoken.org/tx/${transactionHash}`,
  };
  const ThetaTestnet = {
      chainId: 365,
      chainName: 'ThetaTestnet',
      isTestChain: true,
      isLocalChain: false,
      multicallAddress: '0xf822bf2e728e264c58d7618022addd9cbc780350',
      getExplorerAddressLink: (address) => `https://testnet-explorer.thetatoken.org/address/${address}`,
      getExplorerTransactionLink: (transactionHash) => `https://testnet-explorer.thetatoken.org/tx/${transactionHash}`,
  };

  const xDai = {
      chainId: 100,
      chainName: 'xDai',
      isTestChain: false,
      isLocalChain: false,
      multicallAddress: '0xb5b692a88bdfc81ca69dcb1d924f59f0413a602a',
      getExplorerAddressLink: (address) => `https://blockscout.com/poa/xdai/address/${address}/transactions`,
      getExplorerTransactionLink: (transactionHash) => `https://blockscout.com/poa/xdai/tx/${transactionHash}/internal-transactions`,
  };
  // xdai alias
  const Gnosis = Object.assign(Object.assign({}, xDai), { chainName: 'Gnosis' });

  const OptimismKovan = {
      chainId: 69,
      chainName: 'OptimismKovan',
      isTestChain: true,
      isLocalChain: false,
      multicallAddress: '0xE71bf4622578c7d1526A88CD3060f03030E99a04',
      getExplorerAddressLink: (address) => `https://kovan-optimistic.etherscan.io/address/${address}`,
      getExplorerTransactionLink: (transactionHash) => `https://kovan-optimistic.etherscan.io/tx/${transactionHash}`,
  };
  const Optimism = {
      chainId: 10,
      chainName: 'Optimism',
      isTestChain: false,
      isLocalChain: false,
      multicallAddress: '0x35A6Cdb2C9AD4a45112df4a04147EB07dFA01aB7',
      getExplorerAddressLink: (address) => `https://optimistic.etherscan.io/address/${address}`,
      getExplorerTransactionLink: (transactionHash) => `https://optimistic.etherscan.io/tx/${transactionHash}`,
  };

  // organize imports in alphabet order to sparse the conflict when adding a new chain
  // rough alphabet order (put network from the same chain together)
  const DEFAULT_SUPPORTED_CHAINS = [
      Localhost,
      Hardhat,
      Avalanche,
      Arbitrum,
      ArbitrumRinkeby,
      Mainnet,
      Ropsten,
      Rinkeby,
      Goerli,
      Kovan,
      BSC,
      BSCTestnet,
      Cronos,
      CronosTestnet,
      Fantom,
      Gnosis,
      Harmony,
      Stardust,
      Moonriver,
      MoonbaseAlpha,
      Moonbeam,
      Palm,
      PalmTestnet,
      Polygon,
      Mumbai,
      OasisEmerald,
      Songbird,
      Theta,
      ThetaTestnet,
      OptimismKovan,
      Optimism,
  ];
  var ChainId;
  (function (ChainId) {
      ChainId[ChainId["Mainnet"] = 1] = "Mainnet";
      ChainId[ChainId["Ropsten"] = 3] = "Ropsten";
      ChainId[ChainId["Rinkeby"] = 4] = "Rinkeby";
      ChainId[ChainId["Goerli"] = 5] = "Goerli";
      ChainId[ChainId["Cronos"] = 25] = "Cronos";
      ChainId[ChainId["CronosTestnet"] = 338] = "CronosTestnet";
      ChainId[ChainId["Kovan"] = 42] = "Kovan";
      ChainId[ChainId["BSC"] = 56] = "BSC";
      ChainId[ChainId["BSCTestnet"] = 97] = "BSCTestnet";
      ChainId[ChainId["xDai"] = 100] = "xDai";
      ChainId[ChainId["Gnosis"] = 100] = "Gnosis";
      ChainId[ChainId["Polygon"] = 137] = "Polygon";
      ChainId[ChainId["Theta"] = 361] = "Theta";
      ChainId[ChainId["ThetaTestnet"] = 365] = "ThetaTestnet";
      ChainId[ChainId["Moonriver"] = 1285] = "Moonriver";
      ChainId[ChainId["Moonbeam"] = 1284] = "Moonbeam";
      ChainId[ChainId["Mumbai"] = 80001] = "Mumbai";
      ChainId[ChainId["Harmony"] = 1666600000] = "Harmony";
      ChainId[ChainId["Palm"] = 11297108109] = "Palm";
      ChainId[ChainId["PalmTestnet"] = 11297108099] = "PalmTestnet";
      ChainId[ChainId["Localhost"] = 1337] = "Localhost";
      ChainId[ChainId["Hardhat"] = 31337] = "Hardhat";
      ChainId[ChainId["Fantom"] = 250] = "Fantom";
      ChainId[ChainId["Avalanche"] = 43114] = "Avalanche";
      ChainId[ChainId["Songbird"] = 19] = "Songbird";
      ChainId[ChainId["MoonbaseAlpha"] = 1287] = "MoonbaseAlpha";
      ChainId[ChainId["OasisEmerald"] = 42262] = "OasisEmerald";
      ChainId[ChainId["Stardust"] = 588] = "Stardust";
      ChainId[ChainId["OptimismKovan"] = 69] = "OptimismKovan";
      ChainId[ChainId["Optimism"] = 10] = "Optimism";
      ChainId[ChainId["Arbitrum"] = 42161] = "Arbitrum";
      ChainId[ChainId["ArbitrumRinkeby"] = 421611] = "ArbitrumRinkeby";
  })(ChainId || (ChainId = {}));

  const DEFAULT_CONFIG = {
      pollingInterval: 15000,
      supportedChains: undefined,
      networks: DEFAULT_SUPPORTED_CHAINS,
      notifications: {
          checkInterval: 500,
          expirationPeriod: 5000,
      },
      localStorage: {
          transactionPath: 'transactions',
      },
      autoConnect: true,
      multicallVersion: 1,
  };

  react.exports.createContext({
      config: DEFAULT_CONFIG,
      updateConfig: () => undefined,
  });

  var lodash_merge = {exports: {}};

  /**
   * Lodash (Custom Build) <https://lodash.com/>
   * Build: `lodash modularize exports="npm" -o ./`
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   */

  (function (module, exports) {
  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER = 9007199254740991;

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /** Used for built-in method references. */
  var arrayProto = Array.prototype,
      funcProto = Function.prototype,
      objectProto = Object.prototype;

  /** Used to detect overreaching core-js shims. */
  var coreJsData = root['__core-js_shared__'];

  /** Used to resolve the decompiled source of functions. */
  var funcToString = funcProto.toString;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /** Used to detect methods masquerading as native. */
  var maskSrcKey = (function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? ('Symbol(src)_1.' + uid) : '';
  }());

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString = objectProto.toString;

  /** Used to infer the `Object` constructor. */
  var objectCtorString = funcToString.call(Object);

  /** Used to detect if a method is native. */
  var reIsNative = RegExp('^' +
    funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
    .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
  );

  /** Built-in value references. */
  var Buffer = moduleExports ? root.Buffer : undefined,
      Symbol = root.Symbol,
      Uint8Array = root.Uint8Array,
      allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
      getPrototype = overArg(Object.getPrototypeOf, Object),
      objectCreate = Object.create,
      propertyIsEnumerable = objectProto.propertyIsEnumerable,
      splice = arrayProto.splice,
      symToStringTag = Symbol ? Symbol.toStringTag : undefined;

  var defineProperty = (function() {
    try {
      var func = getNative(Object, 'defineProperty');
      func({}, '', {});
      return func;
    } catch (e) {}
  }());

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
      nativeMax = Math.max,
      nativeNow = Date.now;

  /* Built-in method references that are verified to be native. */
  var Map = getNative(root, 'Map'),
      nativeCreate = getNative(Object, 'create');

  /**
   * The base implementation of `_.create` without support for assigning
   * properties to the created object.
   *
   * @private
   * @param {Object} proto The object to inherit from.
   * @returns {Object} Returns the new object.
   */
  var baseCreate = (function() {
    function object() {}
    return function(proto) {
      if (!isObject(proto)) {
        return {};
      }
      if (objectCreate) {
        return objectCreate(proto);
      }
      object.prototype = proto;
      var result = new object;
      object.prototype = undefined;
      return result;
    };
  }());

  /**
   * Creates a hash object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Hash(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  /**
   * Removes all key-value entries from the hash.
   *
   * @private
   * @name clear
   * @memberOf Hash
   */
  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
    this.size = 0;
  }

  /**
   * Removes `key` and its value from the hash.
   *
   * @private
   * @name delete
   * @memberOf Hash
   * @param {Object} hash The hash to modify.
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }

  /**
   * Gets the hash value for `key`.
   *
   * @private
   * @name get
   * @memberOf Hash
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }
    return hasOwnProperty.call(data, key) ? data[key] : undefined;
  }

  /**
   * Checks if a hash value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Hash
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
  }

  /**
   * Sets the hash `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Hash
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the hash instance.
   */
  function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
    return this;
  }

  // Add methods to `Hash`.
  Hash.prototype.clear = hashClear;
  Hash.prototype['delete'] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;

  /**
   * Creates an list cache object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function ListCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  /**
   * Removes all key-value entries from the list cache.
   *
   * @private
   * @name clear
   * @memberOf ListCache
   */
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }

  /**
   * Removes `key` and its value from the list cache.
   *
   * @private
   * @name delete
   * @memberOf ListCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function listCacheDelete(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    --this.size;
    return true;
  }

  /**
   * Gets the list cache value for `key`.
   *
   * @private
   * @name get
   * @memberOf ListCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function listCacheGet(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    return index < 0 ? undefined : data[index][1];
  }

  /**
   * Checks if a list cache value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf ListCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }

  /**
   * Sets the list cache `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf ListCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the list cache instance.
   */
  function listCacheSet(key, value) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }

  // Add methods to `ListCache`.
  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype['delete'] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;

  /**
   * Creates a map cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function MapCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  /**
   * Removes all key-value entries from the map.
   *
   * @private
   * @name clear
   * @memberOf MapCache
   */
  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      'hash': new Hash,
      'map': new (Map || ListCache),
      'string': new Hash
    };
  }

  /**
   * Removes `key` and its value from the map.
   *
   * @private
   * @name delete
   * @memberOf MapCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function mapCacheDelete(key) {
    var result = getMapData(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
  }

  /**
   * Gets the map value for `key`.
   *
   * @private
   * @name get
   * @memberOf MapCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }

  /**
   * Checks if a map value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf MapCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }

  /**
   * Sets the map `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf MapCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the map cache instance.
   */
  function mapCacheSet(key, value) {
    var data = getMapData(this, key),
        size = data.size;

    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }

  // Add methods to `MapCache`.
  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype['delete'] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;

  /**
   * Creates a stack cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Stack(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
  }

  /**
   * Removes all key-value entries from the stack.
   *
   * @private
   * @name clear
   * @memberOf Stack
   */
  function stackClear() {
    this.__data__ = new ListCache;
    this.size = 0;
  }

  /**
   * Removes `key` and its value from the stack.
   *
   * @private
   * @name delete
   * @memberOf Stack
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function stackDelete(key) {
    var data = this.__data__,
        result = data['delete'](key);

    this.size = data.size;
    return result;
  }

  /**
   * Gets the stack value for `key`.
   *
   * @private
   * @name get
   * @memberOf Stack
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function stackGet(key) {
    return this.__data__.get(key);
  }

  /**
   * Checks if a stack value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Stack
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function stackHas(key) {
    return this.__data__.has(key);
  }

  /**
   * Sets the stack `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Stack
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the stack cache instance.
   */
  function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof ListCache) {
      var pairs = data.__data__;
      if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }
      data = this.__data__ = new MapCache(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
  }

  // Add methods to `Stack`.
  Stack.prototype.clear = stackClear;
  Stack.prototype['delete'] = stackDelete;
  Stack.prototype.get = stackGet;
  Stack.prototype.has = stackHas;
  Stack.prototype.set = stackSet;

  /**
   * Creates an array of the enumerable property names of the array-like `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @param {boolean} inherited Specify returning inherited property names.
   * @returns {Array} Returns the array of property names.
   */
  function arrayLikeKeys(value, inherited) {
    var isArr = isArray(value),
        isArg = !isArr && isArguments(value),
        isBuff = !isArr && !isArg && isBuffer(value),
        isType = !isArr && !isArg && !isBuff && isTypedArray(value),
        skipIndexes = isArr || isArg || isBuff || isType,
        result = skipIndexes ? baseTimes(value.length, String) : [],
        length = result.length;

    for (var key in value) {
      if ((inherited || hasOwnProperty.call(value, key)) &&
          !(skipIndexes && (
             // Safari 9 has enumerable `arguments.length` in strict mode.
             key == 'length' ||
             // Node.js 0.10 has enumerable non-index properties on buffers.
             (isBuff && (key == 'offset' || key == 'parent')) ||
             // PhantomJS 2 has enumerable non-index properties on typed arrays.
             (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
             // Skip index properties.
             isIndex(key, length)
          ))) {
        result.push(key);
      }
    }
    return result;
  }

  /**
   * This function is like `assignValue` except that it doesn't assign
   * `undefined` values.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function assignMergeValue(object, key, value) {
    if ((value !== undefined && !eq(object[key], value)) ||
        (value === undefined && !(key in object))) {
      baseAssignValue(object, key, value);
    }
  }

  /**
   * Assigns `value` to `key` of `object` if the existing value is not equivalent
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
        (value === undefined && !(key in object))) {
      baseAssignValue(object, key, value);
    }
  }

  /**
   * Gets the index at which the `key` is found in `array` of key-value pairs.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} key The key to search for.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function assocIndexOf(array, key) {
    var length = array.length;
    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `assignValue` and `assignMergeValue` without
   * value checks.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function baseAssignValue(object, key, value) {
    if (key == '__proto__' && defineProperty) {
      defineProperty(object, key, {
        'configurable': true,
        'enumerable': true,
        'value': value,
        'writable': true
      });
    } else {
      object[key] = value;
    }
  }

  /**
   * The base implementation of `baseForOwn` which iterates over `object`
   * properties returned by `keysFunc` and invokes `iteratee` for each property.
   * Iteratee functions may exit iteration early by explicitly returning `false`.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @returns {Object} Returns `object`.
   */
  var baseFor = createBaseFor();

  /**
   * The base implementation of `getTag` without fallbacks for buggy environments.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  function baseGetTag(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }
    return (symToStringTag && symToStringTag in Object(value))
      ? getRawTag(value)
      : objectToString(value);
  }

  /**
   * The base implementation of `_.isArguments`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   */
  function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag;
  }

  /**
   * The base implementation of `_.isNative` without bad shim checks.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a native function,
   *  else `false`.
   */
  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }
    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }

  /**
   * The base implementation of `_.isTypedArray` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   */
  function baseIsTypedArray(value) {
    return isObjectLike(value) &&
      isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
  }

  /**
   * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeysIn(object) {
    if (!isObject(object)) {
      return nativeKeysIn(object);
    }
    var isProto = isPrototype(object),
        result = [];

    for (var key in object) {
      if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
        result.push(key);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.merge` without support for multiple sources.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @param {number} srcIndex The index of `source`.
   * @param {Function} [customizer] The function to customize merged values.
   * @param {Object} [stack] Tracks traversed source values and their merged
   *  counterparts.
   */
  function baseMerge(object, source, srcIndex, customizer, stack) {
    if (object === source) {
      return;
    }
    baseFor(source, function(srcValue, key) {
      stack || (stack = new Stack);
      if (isObject(srcValue)) {
        baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
      }
      else {
        var newValue = customizer
          ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
          : undefined;

        if (newValue === undefined) {
          newValue = srcValue;
        }
        assignMergeValue(object, key, newValue);
      }
    }, keysIn);
  }

  /**
   * A specialized version of `baseMerge` for arrays and objects which performs
   * deep merges and tracks traversed objects enabling objects with circular
   * references to be merged.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @param {string} key The key of the value to merge.
   * @param {number} srcIndex The index of `source`.
   * @param {Function} mergeFunc The function to merge values.
   * @param {Function} [customizer] The function to customize assigned values.
   * @param {Object} [stack] Tracks traversed source values and their merged
   *  counterparts.
   */
  function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
    var objValue = safeGet(object, key),
        srcValue = safeGet(source, key),
        stacked = stack.get(srcValue);

    if (stacked) {
      assignMergeValue(object, key, stacked);
      return;
    }
    var newValue = customizer
      ? customizer(objValue, srcValue, (key + ''), object, source, stack)
      : undefined;

    var isCommon = newValue === undefined;

    if (isCommon) {
      var isArr = isArray(srcValue),
          isBuff = !isArr && isBuffer(srcValue),
          isTyped = !isArr && !isBuff && isTypedArray(srcValue);

      newValue = srcValue;
      if (isArr || isBuff || isTyped) {
        if (isArray(objValue)) {
          newValue = objValue;
        }
        else if (isArrayLikeObject(objValue)) {
          newValue = copyArray(objValue);
        }
        else if (isBuff) {
          isCommon = false;
          newValue = cloneBuffer(srcValue, true);
        }
        else if (isTyped) {
          isCommon = false;
          newValue = cloneTypedArray(srcValue, true);
        }
        else {
          newValue = [];
        }
      }
      else if (isPlainObject(srcValue) || isArguments(srcValue)) {
        newValue = objValue;
        if (isArguments(objValue)) {
          newValue = toPlainObject(objValue);
        }
        else if (!isObject(objValue) || isFunction(objValue)) {
          newValue = initCloneObject(srcValue);
        }
      }
      else {
        isCommon = false;
      }
    }
    if (isCommon) {
      // Recursively merge objects and arrays (susceptible to call stack limits).
      stack.set(srcValue, newValue);
      mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
      stack['delete'](srcValue);
    }
    assignMergeValue(object, key, newValue);
  }

  /**
   * The base implementation of `_.rest` which doesn't validate or coerce arguments.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @returns {Function} Returns the new function.
   */
  function baseRest(func, start) {
    return setToString(overRest(func, start, identity), func + '');
  }

  /**
   * The base implementation of `setToString` without support for hot loop shorting.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */
  var baseSetToString = !defineProperty ? identity : function(func, string) {
    return defineProperty(func, 'toString', {
      'configurable': true,
      'enumerable': false,
      'value': constant(string),
      'writable': true
    });
  };

  /**
   * Creates a clone of  `buffer`.
   *
   * @private
   * @param {Buffer} buffer The buffer to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Buffer} Returns the cloned buffer.
   */
  function cloneBuffer(buffer, isDeep) {
    if (isDeep) {
      return buffer.slice();
    }
    var length = buffer.length,
        result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

    buffer.copy(result);
    return result;
  }

  /**
   * Creates a clone of `arrayBuffer`.
   *
   * @private
   * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
   * @returns {ArrayBuffer} Returns the cloned array buffer.
   */
  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array(result).set(new Uint8Array(arrayBuffer));
    return result;
  }

  /**
   * Creates a clone of `typedArray`.
   *
   * @private
   * @param {Object} typedArray The typed array to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned typed array.
   */
  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }

  /**
   * Copies the values of `source` to `array`.
   *
   * @private
   * @param {Array} source The array to copy values from.
   * @param {Array} [array=[]] The array to copy values to.
   * @returns {Array} Returns `array`.
   */
  function copyArray(source, array) {
    var index = -1,
        length = source.length;

    array || (array = Array(length));
    while (++index < length) {
      array[index] = source[index];
    }
    return array;
  }

  /**
   * Copies properties of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy properties from.
   * @param {Array} props The property identifiers to copy.
   * @param {Object} [object={}] The object to copy properties to.
   * @param {Function} [customizer] The function to customize copied values.
   * @returns {Object} Returns `object`.
   */
  function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});

    var index = -1,
        length = props.length;

    while (++index < length) {
      var key = props[index];

      var newValue = customizer
        ? customizer(object[key], source[key], key, object, source)
        : undefined;

      if (newValue === undefined) {
        newValue = source[key];
      }
      if (isNew) {
        baseAssignValue(object, key, newValue);
      } else {
        assignValue(object, key, newValue);
      }
    }
    return object;
  }

  /**
   * Creates a function like `_.assign`.
   *
   * @private
   * @param {Function} assigner The function to assign values.
   * @returns {Function} Returns the new assigner function.
   */
  function createAssigner(assigner) {
    return baseRest(function(object, sources) {
      var index = -1,
          length = sources.length,
          customizer = length > 1 ? sources[length - 1] : undefined,
          guard = length > 2 ? sources[2] : undefined;

      customizer = (assigner.length > 3 && typeof customizer == 'function')
        ? (length--, customizer)
        : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        customizer = length < 3 ? undefined : customizer;
        length = 1;
      }
      object = Object(object);
      while (++index < length) {
        var source = sources[index];
        if (source) {
          assigner(object, source, index, customizer);
        }
      }
      return object;
    });
  }

  /**
   * Creates a base function for methods like `_.forIn` and `_.forOwn`.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */
  function createBaseFor(fromRight) {
    return function(object, iteratee, keysFunc) {
      var index = -1,
          iterable = Object(object),
          props = keysFunc(object),
          length = props.length;

      while (length--) {
        var key = props[fromRight ? length : ++index];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object;
    };
  }

  /**
   * Gets the data for `map`.
   *
   * @private
   * @param {Object} map The map to query.
   * @param {string} key The reference key.
   * @returns {*} Returns the map data.
   */
  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key)
      ? data[typeof key == 'string' ? 'string' : 'hash']
      : data.map;
  }

  /**
   * Gets the native function at `key` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the method to get.
   * @returns {*} Returns the function if it's native, else `undefined`.
   */
  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
  }

  /**
   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the raw `toStringTag`.
   */
  function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag),
        tag = value[symToStringTag];

    try {
      value[symToStringTag] = undefined;
      var unmasked = true;
    } catch (e) {}

    var result = nativeObjectToString.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag] = tag;
      } else {
        delete value[symToStringTag];
      }
    }
    return result;
  }

  /**
   * Initializes an object clone.
   *
   * @private
   * @param {Object} object The object to clone.
   * @returns {Object} Returns the initialized clone.
   */
  function initCloneObject(object) {
    return (typeof object.constructor == 'function' && !isPrototype(object))
      ? baseCreate(getPrototype(object))
      : {};
  }

  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER : length;

    return !!length &&
      (type == 'number' ||
        (type != 'symbol' && reIsUint.test(value))) &&
          (value > -1 && value % 1 == 0 && value < length);
  }

  /**
   * Checks if the given arguments are from an iteratee call.
   *
   * @private
   * @param {*} value The potential iteratee value argument.
   * @param {*} index The potential iteratee index or key argument.
   * @param {*} object The potential iteratee object argument.
   * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
   *  else `false`.
   */
  function isIterateeCall(value, index, object) {
    if (!isObject(object)) {
      return false;
    }
    var type = typeof index;
    if (type == 'number'
          ? (isArrayLike(object) && isIndex(index, object.length))
          : (type == 'string' && index in object)
        ) {
      return eq(object[index], value);
    }
    return false;
  }

  /**
   * Checks if `value` is suitable for use as unique object key.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
   */
  function isKeyable(value) {
    var type = typeof value;
    return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
      ? (value !== '__proto__')
      : (value === null);
  }

  /**
   * Checks if `func` has its source masked.
   *
   * @private
   * @param {Function} func The function to check.
   * @returns {boolean} Returns `true` if `func` is masked, else `false`.
   */
  function isMasked(func) {
    return !!maskSrcKey && (maskSrcKey in func);
  }

  /**
   * Checks if `value` is likely a prototype object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
   */
  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

    return value === proto;
  }

  /**
   * This function is like
   * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * except that it includes inherited enumerable properties.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function nativeKeysIn(object) {
    var result = [];
    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }
    return result;
  }

  /**
   * Converts `value` to a string using `Object.prototype.toString`.
   *
   * @private
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   */
  function objectToString(value) {
    return nativeObjectToString.call(value);
  }

  /**
   * A specialized version of `baseRest` which transforms the rest array.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @param {Function} transform The rest array transform.
   * @returns {Function} Returns the new function.
   */
  function overRest(func, start, transform) {
    start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
    return function() {
      var args = arguments,
          index = -1,
          length = nativeMax(args.length - start, 0),
          array = Array(length);

      while (++index < length) {
        array[index] = args[start + index];
      }
      index = -1;
      var otherArgs = Array(start + 1);
      while (++index < start) {
        otherArgs[index] = args[index];
      }
      otherArgs[start] = transform(array);
      return apply(func, this, otherArgs);
    };
  }

  /**
   * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function safeGet(object, key) {
    if (key === 'constructor' && typeof object[key] === 'function') {
      return;
    }

    if (key == '__proto__') {
      return;
    }

    return object[key];
  }

  /**
   * Sets the `toString` method of `func` to return `string`.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */
  var setToString = shortOut(baseSetToString);

  /**
   * Creates a function that'll short out and invoke `identity` instead
   * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
   * milliseconds.
   *
   * @private
   * @param {Function} func The function to restrict.
   * @returns {Function} Returns the new shortable function.
   */
  function shortOut(func) {
    var count = 0,
        lastCalled = 0;

    return function() {
      var stamp = nativeNow(),
          remaining = HOT_SPAN - (stamp - lastCalled);

      lastCalled = stamp;
      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }
      return func.apply(undefined, arguments);
    };
  }

  /**
   * Converts `func` to its source code.
   *
   * @private
   * @param {Function} func The function to convert.
   * @returns {string} Returns the source code.
   */
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {}
      try {
        return (func + '');
      } catch (e) {}
    }
    return '';
  }

  /**
   * Performs a
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * comparison between two values to determine if they are equivalent.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.eq(object, object);
   * // => true
   *
   * _.eq(object, other);
   * // => false
   *
   * _.eq('a', 'a');
   * // => true
   *
   * _.eq('a', Object('a'));
   * // => false
   *
   * _.eq(NaN, NaN);
   * // => true
   */
  function eq(value, other) {
    return value === other || (value !== value && other !== other);
  }

  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   *  else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */
  var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
    return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
      !propertyIsEnumerable.call(value, 'callee');
  };

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  var isArray = Array.isArray;

  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */
  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }

  /**
   * This method is like `_.isArrayLike` except that it also checks if `value`
   * is an object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array-like object,
   *  else `false`.
   * @example
   *
   * _.isArrayLikeObject([1, 2, 3]);
   * // => true
   *
   * _.isArrayLikeObject(document.body.children);
   * // => true
   *
   * _.isArrayLikeObject('abc');
   * // => false
   *
   * _.isArrayLikeObject(_.noop);
   * // => false
   */
  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }

  /**
   * Checks if `value` is a buffer.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
   * @example
   *
   * _.isBuffer(new Buffer(2));
   * // => true
   *
   * _.isBuffer(new Uint8Array(2));
   * // => false
   */
  var isBuffer = nativeIsBuffer || stubFalse;

  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */
  function isFunction(value) {
    if (!isObject(value)) {
      return false;
    }
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }

  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This method is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */
  function isLength(value) {
    return typeof value == 'number' &&
      value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
  }

  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike(value) {
    return value != null && typeof value == 'object';
  }

  /**
   * Checks if `value` is a plain object, that is, an object created by the
   * `Object` constructor or one with a `[[Prototype]]` of `null`.
   *
   * @static
   * @memberOf _
   * @since 0.8.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   * }
   *
   * _.isPlainObject(new Foo);
   * // => false
   *
   * _.isPlainObject([1, 2, 3]);
   * // => false
   *
   * _.isPlainObject({ 'x': 0, 'y': 0 });
   * // => true
   *
   * _.isPlainObject(Object.create(null));
   * // => true
   */
  function isPlainObject(value) {
    if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
      return false;
    }
    var proto = getPrototype(value);
    if (proto === null) {
      return true;
    }
    var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
    return typeof Ctor == 'function' && Ctor instanceof Ctor &&
      funcToString.call(Ctor) == objectCtorString;
  }

  /**
   * Checks if `value` is classified as a typed array.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   * @example
   *
   * _.isTypedArray(new Uint8Array);
   * // => true
   *
   * _.isTypedArray([]);
   * // => false
   */
  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

  /**
   * Converts `value` to a plain object flattening inherited enumerable string
   * keyed properties of `value` to own properties of the plain object.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {Object} Returns the converted plain object.
   * @example
   *
   * function Foo() {
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.assign({ 'a': 1 }, new Foo);
   * // => { 'a': 1, 'b': 2 }
   *
   * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
   * // => { 'a': 1, 'b': 2, 'c': 3 }
   */
  function toPlainObject(value) {
    return copyObject(value, keysIn(value));
  }

  /**
   * Creates an array of the own and inherited enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keysIn(new Foo);
   * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
   */
  function keysIn(object) {
    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
  }

  /**
   * This method is like `_.assign` except that it recursively merges own and
   * inherited enumerable string keyed properties of source objects into the
   * destination object. Source properties that resolve to `undefined` are
   * skipped if a destination value exists. Array and plain object properties
   * are merged recursively. Other objects and value types are overridden by
   * assignment. Source objects are applied from left to right. Subsequent
   * sources overwrite property assignments of previous sources.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 0.5.0
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @example
   *
   * var object = {
   *   'a': [{ 'b': 2 }, { 'd': 4 }]
   * };
   *
   * var other = {
   *   'a': [{ 'c': 3 }, { 'e': 5 }]
   * };
   *
   * _.merge(object, other);
   * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
   */
  var merge = createAssigner(function(object, source, srcIndex) {
    baseMerge(object, source, srcIndex);
  });

  /**
   * Creates a function that returns `value`.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {*} value The value to return from the new function.
   * @returns {Function} Returns the new constant function.
   * @example
   *
   * var objects = _.times(2, _.constant({ 'a': 1 }));
   *
   * console.log(objects);
   * // => [{ 'a': 1 }, { 'a': 1 }]
   *
   * console.log(objects[0] === objects[1]);
   * // => true
   */
  function constant(value) {
    return function() {
      return value;
    };
  }

  /**
   * This method returns the first argument it receives.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {*} value Any value.
   * @returns {*} Returns `value`.
   * @example
   *
   * var object = { 'a': 1 };
   *
   * console.log(_.identity(object) === object);
   * // => true
   */
  function identity(value) {
    return value;
  }

  /**
   * This method returns `false`.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {boolean} Returns `false`.
   * @example
   *
   * _.times(2, _.stubFalse);
   * // => [false, false]
   */
  function stubFalse() {
    return false;
  }

  module.exports = merge;
  }(lodash_merge, lodash_merge.exports));

  lodash_merge.exports;

  react.exports.createContext(undefined);

  const version$9 = "abstract-provider/5.5.1";
  new Logger(version$9);

  const version$8 = "abstract-signer/5.5.0";
  new Logger(version$8);
  [
      Logger.errors.INSUFFICIENT_FUNDS,
      Logger.errors.NONCE_EXPIRED,
      Logger.errors.REPLACEMENT_UNDERPRICED,
  ];

  var bn = {exports: {}};

  (function (module) {
  (function (module, exports) {

    // Utils
    function assert (val, msg) {
      if (!val) throw new Error(msg || 'Assertion failed');
    }

    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits (ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }

    // BN

    function BN (number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }

      this.negative = 0;
      this.words = null;
      this.length = 0;

      // Reduction context
      this.red = null;

      if (number !== null) {
        if (base === 'le' || base === 'be') {
          endian = base;
          base = 10;
        }

        this._init(number || 0, base || 10, endian || 'be');
      }
    }
    if (typeof module === 'object') {
      module.exports = BN;
    } else {
      exports.BN = BN;
    }

    BN.BN = BN;
    BN.wordSize = 26;

    var Buffer;
    try {
      if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
        Buffer = window.Buffer;
      } else {
        Buffer = require('buffer').Buffer;
      }
    } catch (e) {
    }

    BN.isBN = function isBN (num) {
      if (num instanceof BN) {
        return true;
      }

      return num !== null && typeof num === 'object' &&
        num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };

    BN.max = function max (left, right) {
      if (left.cmp(right) > 0) return left;
      return right;
    };

    BN.min = function min (left, right) {
      if (left.cmp(right) < 0) return left;
      return right;
    };

    BN.prototype._init = function init (number, base, endian) {
      if (typeof number === 'number') {
        return this._initNumber(number, base, endian);
      }

      if (typeof number === 'object') {
        return this._initArray(number, base, endian);
      }

      if (base === 'hex') {
        base = 16;
      }
      assert(base === (base | 0) && base >= 2 && base <= 36);

      number = number.toString().replace(/\s+/g, '');
      var start = 0;
      if (number[0] === '-') {
        start++;
        this.negative = 1;
      }

      if (start < number.length) {
        if (base === 16) {
          this._parseHex(number, start, endian);
        } else {
          this._parseBase(number, base, start);
          if (endian === 'le') {
            this._initArray(this.toArray(), base, endian);
          }
        }
      }
    };

    BN.prototype._initNumber = function _initNumber (number, base, endian) {
      if (number < 0) {
        this.negative = 1;
        number = -number;
      }
      if (number < 0x4000000) {
        this.words = [ number & 0x3ffffff ];
        this.length = 1;
      } else if (number < 0x10000000000000) {
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff
        ];
        this.length = 2;
      } else {
        assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff,
          1
        ];
        this.length = 3;
      }

      if (endian !== 'le') return;

      // Reverse the bytes
      this._initArray(this.toArray(), base, endian);
    };

    BN.prototype._initArray = function _initArray (number, base, endian) {
      // Perhaps a Uint8Array
      assert(typeof number.length === 'number');
      if (number.length <= 0) {
        this.words = [ 0 ];
        this.length = 1;
        return this;
      }

      this.length = Math.ceil(number.length / 3);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      var j, w;
      var off = 0;
      if (endian === 'be') {
        for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
          w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      } else if (endian === 'le') {
        for (i = 0, j = 0; i < number.length; i += 3) {
          w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      }
      return this.strip();
    };

    function parseHex4Bits (string, index) {
      var c = string.charCodeAt(index);
      // 'A' - 'F'
      if (c >= 65 && c <= 70) {
        return c - 55;
      // 'a' - 'f'
      } else if (c >= 97 && c <= 102) {
        return c - 87;
      // '0' - '9'
      } else {
        return (c - 48) & 0xf;
      }
    }

    function parseHexByte (string, lowerBound, index) {
      var r = parseHex4Bits(string, index);
      if (index - 1 >= lowerBound) {
        r |= parseHex4Bits(string, index - 1) << 4;
      }
      return r;
    }

    BN.prototype._parseHex = function _parseHex (number, start, endian) {
      // Create possibly bigger array to ensure that it fits the number
      this.length = Math.ceil((number.length - start) / 6);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      // 24-bits chunks
      var off = 0;
      var j = 0;

      var w;
      if (endian === 'be') {
        for (i = number.length - 1; i >= start; i -= 2) {
          w = parseHexByte(number, start, i) << off;
          this.words[j] |= w & 0x3ffffff;
          if (off >= 18) {
            off -= 18;
            j += 1;
            this.words[j] |= w >>> 26;
          } else {
            off += 8;
          }
        }
      } else {
        var parseLength = number.length - start;
        for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
          w = parseHexByte(number, start, i) << off;
          this.words[j] |= w & 0x3ffffff;
          if (off >= 18) {
            off -= 18;
            j += 1;
            this.words[j] |= w >>> 26;
          } else {
            off += 8;
          }
        }
      }

      this.strip();
    };

    function parseBase (str, start, end, mul) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;

        r *= mul;

        // 'a'
        if (c >= 49) {
          r += c - 49 + 0xa;

        // 'A'
        } else if (c >= 17) {
          r += c - 17 + 0xa;

        // '0' - '9'
        } else {
          r += c;
        }
      }
      return r;
    }

    BN.prototype._parseBase = function _parseBase (number, base, start) {
      // Initialize as zero
      this.words = [ 0 ];
      this.length = 1;

      // Find length of limb in base
      for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = (limbPow / base) | 0;

      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;

      var word = 0;
      for (var i = start; i < end; i += limbLen) {
        word = parseBase(number, i, i + limbLen, base);

        this.imuln(limbPow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }

      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i, number.length, base);

        for (i = 0; i < mod; i++) {
          pow *= base;
        }

        this.imuln(pow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }

      this.strip();
    };

    BN.prototype.copy = function copy (dest) {
      dest.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        dest.words[i] = this.words[i];
      }
      dest.length = this.length;
      dest.negative = this.negative;
      dest.red = this.red;
    };

    BN.prototype.clone = function clone () {
      var r = new BN(null);
      this.copy(r);
      return r;
    };

    BN.prototype._expand = function _expand (size) {
      while (this.length < size) {
        this.words[this.length++] = 0;
      }
      return this;
    };

    // Remove leading `0` from `this`
    BN.prototype.strip = function strip () {
      while (this.length > 1 && this.words[this.length - 1] === 0) {
        this.length--;
      }
      return this._normSign();
    };

    BN.prototype._normSign = function _normSign () {
      // -0 = 0
      if (this.length === 1 && this.words[0] === 0) {
        this.negative = 0;
      }
      return this;
    };

    BN.prototype.inspect = function inspect () {
      return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };

    /*

    var zeros = [];
    var groupSizes = [];
    var groupBases = [];

    var s = '';
    var i = -1;
    while (++i < BN.wordSize) {
      zeros[i] = s;
      s += '0';
    }
    groupSizes[0] = 0;
    groupSizes[1] = 0;
    groupBases[0] = 0;
    groupBases[1] = 0;
    var base = 2 - 1;
    while (++base < 36 + 1) {
      var groupSize = 0;
      var groupBase = 1;
      while (groupBase < (1 << BN.wordSize) / base) {
        groupBase *= base;
        groupSize += 1;
      }
      groupSizes[base] = groupSize;
      groupBases[base] = groupBase;
    }

    */

    var zeros = [
      '',
      '0',
      '00',
      '000',
      '0000',
      '00000',
      '000000',
      '0000000',
      '00000000',
      '000000000',
      '0000000000',
      '00000000000',
      '000000000000',
      '0000000000000',
      '00000000000000',
      '000000000000000',
      '0000000000000000',
      '00000000000000000',
      '000000000000000000',
      '0000000000000000000',
      '00000000000000000000',
      '000000000000000000000',
      '0000000000000000000000',
      '00000000000000000000000',
      '000000000000000000000000',
      '0000000000000000000000000'
    ];

    var groupSizes = [
      0, 0,
      25, 16, 12, 11, 10, 9, 8,
      8, 7, 7, 7, 7, 6, 6,
      6, 6, 6, 6, 6, 5, 5,
      5, 5, 5, 5, 5, 5, 5,
      5, 5, 5, 5, 5, 5, 5
    ];

    var groupBases = [
      0, 0,
      33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
      43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
      16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
      6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
      24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
    ];

    BN.prototype.toString = function toString (base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;

      var out;
      if (base === 16 || base === 'hex') {
        out = '';
        var off = 0;
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = this.words[i];
          var word = (((w << off) | carry) & 0xffffff).toString(16);
          carry = (w >>> (24 - off)) & 0xffffff;
          if (carry !== 0 || i !== this.length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
          off += 2;
          if (off >= 26) {
            off -= 26;
            i--;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }

      if (base === (base | 0) && base >= 2 && base <= 36) {
        // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
        var groupSize = groupSizes[base];
        // var groupBase = Math.pow(base, groupSize);
        var groupBase = groupBases[base];
        out = '';
        var c = this.clone();
        c.negative = 0;
        while (!c.isZero()) {
          var r = c.modn(groupBase).toString(base);
          c = c.idivn(groupBase);

          if (!c.isZero()) {
            out = zeros[groupSize - r.length] + r + out;
          } else {
            out = r + out;
          }
        }
        if (this.isZero()) {
          out = '0' + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }

      assert(false, 'Base should be between 2 and 36');
    };

    BN.prototype.toNumber = function toNumber () {
      var ret = this.words[0];
      if (this.length === 2) {
        ret += this.words[1] * 0x4000000;
      } else if (this.length === 3 && this.words[2] === 0x01) {
        // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + (this.words[1] * 0x4000000);
      } else if (this.length > 2) {
        assert(false, 'Number can only safely store up to 53 bits');
      }
      return (this.negative !== 0) ? -ret : ret;
    };

    BN.prototype.toJSON = function toJSON () {
      return this.toString(16);
    };

    BN.prototype.toBuffer = function toBuffer (endian, length) {
      assert(typeof Buffer !== 'undefined');
      return this.toArrayLike(Buffer, endian, length);
    };

    BN.prototype.toArray = function toArray (endian, length) {
      return this.toArrayLike(Array, endian, length);
    };

    BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert(byteLength <= reqLength, 'byte array longer than desired length');
      assert(reqLength > 0, 'Requested array length <= 0');

      this.strip();
      var littleEndian = endian === 'le';
      var res = new ArrayType(reqLength);

      var b, i;
      var q = this.clone();
      if (!littleEndian) {
        // Assume big-endian
        for (i = 0; i < reqLength - byteLength; i++) {
          res[i] = 0;
        }

        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);

          res[reqLength - i - 1] = b;
        }
      } else {
        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);

          res[i] = b;
        }

        for (; i < reqLength; i++) {
          res[i] = 0;
        }
      }

      return res;
    };

    if (Math.clz32) {
      BN.prototype._countBits = function _countBits (w) {
        return 32 - Math.clz32(w);
      };
    } else {
      BN.prototype._countBits = function _countBits (w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
          r += 13;
          t >>>= 13;
        }
        if (t >= 0x40) {
          r += 7;
          t >>>= 7;
        }
        if (t >= 0x8) {
          r += 4;
          t >>>= 4;
        }
        if (t >= 0x02) {
          r += 2;
          t >>>= 2;
        }
        return r + t;
      };
    }

    BN.prototype._zeroBits = function _zeroBits (w) {
      // Short-cut
      if (w === 0) return 26;

      var t = w;
      var r = 0;
      if ((t & 0x1fff) === 0) {
        r += 13;
        t >>>= 13;
      }
      if ((t & 0x7f) === 0) {
        r += 7;
        t >>>= 7;
      }
      if ((t & 0xf) === 0) {
        r += 4;
        t >>>= 4;
      }
      if ((t & 0x3) === 0) {
        r += 2;
        t >>>= 2;
      }
      if ((t & 0x1) === 0) {
        r++;
      }
      return r;
    };

    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength () {
      var w = this.words[this.length - 1];
      var hi = this._countBits(w);
      return (this.length - 1) * 26 + hi;
    };

    function toBitArray (num) {
      var w = new Array(num.bitLength());

      for (var bit = 0; bit < w.length; bit++) {
        var off = (bit / 26) | 0;
        var wbit = bit % 26;

        w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
      }

      return w;
    }

    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits () {
      if (this.isZero()) return 0;

      var r = 0;
      for (var i = 0; i < this.length; i++) {
        var b = this._zeroBits(this.words[i]);
        r += b;
        if (b !== 26) break;
      }
      return r;
    };

    BN.prototype.byteLength = function byteLength () {
      return Math.ceil(this.bitLength() / 8);
    };

    BN.prototype.toTwos = function toTwos (width) {
      if (this.negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };

    BN.prototype.fromTwos = function fromTwos (width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };

    BN.prototype.isNeg = function isNeg () {
      return this.negative !== 0;
    };

    // Return negative clone of `this`
    BN.prototype.neg = function neg () {
      return this.clone().ineg();
    };

    BN.prototype.ineg = function ineg () {
      if (!this.isZero()) {
        this.negative ^= 1;
      }

      return this;
    };

    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor (num) {
      while (this.length < num.length) {
        this.words[this.length++] = 0;
      }

      for (var i = 0; i < num.length; i++) {
        this.words[i] = this.words[i] | num.words[i];
      }

      return this.strip();
    };

    BN.prototype.ior = function ior (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuor(num);
    };

    // Or `num` with `this`
    BN.prototype.or = function or (num) {
      if (this.length > num.length) return this.clone().ior(num);
      return num.clone().ior(this);
    };

    BN.prototype.uor = function uor (num) {
      if (this.length > num.length) return this.clone().iuor(num);
      return num.clone().iuor(this);
    };

    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand (num) {
      // b = min-length(num, this)
      var b;
      if (this.length > num.length) {
        b = num;
      } else {
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = this.words[i] & num.words[i];
      }

      this.length = b.length;

      return this.strip();
    };

    BN.prototype.iand = function iand (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuand(num);
    };

    // And `num` with `this`
    BN.prototype.and = function and (num) {
      if (this.length > num.length) return this.clone().iand(num);
      return num.clone().iand(this);
    };

    BN.prototype.uand = function uand (num) {
      if (this.length > num.length) return this.clone().iuand(num);
      return num.clone().iuand(this);
    };

    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor (num) {
      // a.length > b.length
      var a;
      var b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = a.words[i] ^ b.words[i];
      }

      if (this !== a) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = a.length;

      return this.strip();
    };

    BN.prototype.ixor = function ixor (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuxor(num);
    };

    // Xor `num` with `this`
    BN.prototype.xor = function xor (num) {
      if (this.length > num.length) return this.clone().ixor(num);
      return num.clone().ixor(this);
    };

    BN.prototype.uxor = function uxor (num) {
      if (this.length > num.length) return this.clone().iuxor(num);
      return num.clone().iuxor(this);
    };

    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn (width) {
      assert(typeof width === 'number' && width >= 0);

      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;

      // Extend the buffer with leading zeroes
      this._expand(bytesNeeded);

      if (bitsLeft > 0) {
        bytesNeeded--;
      }

      // Handle complete words
      for (var i = 0; i < bytesNeeded; i++) {
        this.words[i] = ~this.words[i] & 0x3ffffff;
      }

      // Handle the residue
      if (bitsLeft > 0) {
        this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
      }

      // And remove leading zeroes
      return this.strip();
    };

    BN.prototype.notn = function notn (width) {
      return this.clone().inotn(width);
    };

    // Set `bit` of `this`
    BN.prototype.setn = function setn (bit, val) {
      assert(typeof bit === 'number' && bit >= 0);

      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      this._expand(off + 1);

      if (val) {
        this.words[off] = this.words[off] | (1 << wbit);
      } else {
        this.words[off] = this.words[off] & ~(1 << wbit);
      }

      return this.strip();
    };

    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd (num) {
      var r;

      // negative + positive
      if (this.negative !== 0 && num.negative === 0) {
        this.negative = 0;
        r = this.isub(num);
        this.negative ^= 1;
        return this._normSign();

      // positive + negative
      } else if (this.negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r = this.isub(num);
        num.negative = 1;
        return r._normSign();
      }

      // a.length > b.length
      var a, b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }

      this.length = a.length;
      if (carry !== 0) {
        this.words[this.length] = carry;
        this.length++;
      // Copy the rest of the words
      } else if (a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      return this;
    };

    // Add `num` to `this`
    BN.prototype.add = function add (num) {
      var res;
      if (num.negative !== 0 && this.negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && this.negative !== 0) {
        this.negative = 0;
        res = num.sub(this);
        this.negative = 1;
        return res;
      }

      if (this.length > num.length) return this.clone().iadd(num);

      return num.clone().iadd(this);
    };

    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub (num) {
      // this - (-num) = this + num
      if (num.negative !== 0) {
        num.negative = 0;
        var r = this.iadd(num);
        num.negative = 1;
        return r._normSign();

      // -this - num = -(this + num)
      } else if (this.negative !== 0) {
        this.negative = 0;
        this.iadd(num);
        this.negative = 1;
        return this._normSign();
      }

      // At this point both numbers are positive
      var cmp = this.cmp(num);

      // Optimization - zeroify
      if (cmp === 0) {
        this.negative = 0;
        this.length = 1;
        this.words[0] = 0;
        return this;
      }

      // a > b
      var a, b;
      if (cmp > 0) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }

      // Copy rest of the words
      if (carry === 0 && i < a.length && a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = Math.max(this.length, i);

      if (a !== this) {
        this.negative = 1;
      }

      return this.strip();
    };

    // Subtract `num` from `this`
    BN.prototype.sub = function sub (num) {
      return this.clone().isub(num);
    };

    function smallMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      var len = (self.length + num.length) | 0;
      out.length = len;
      len = (len - 1) | 0;

      // Peel one iteration (compiler can't do it, because of code complexity)
      var a = self.words[0] | 0;
      var b = num.words[0] | 0;
      var r = a * b;

      var lo = r & 0x3ffffff;
      var carry = (r / 0x4000000) | 0;
      out.words[0] = lo;

      for (var k = 1; k < len; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = carry >>> 26;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = (k - j) | 0;
          a = self.words[i] | 0;
          b = num.words[j] | 0;
          r = a * b + rword;
          ncarry += (r / 0x4000000) | 0;
          rword = r & 0x3ffffff;
        }
        out.words[k] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k] = carry | 0;
      } else {
        out.length--;
      }

      return out.strip();
    }

    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo (self, num, out) {
      var a = self.words;
      var b = num.words;
      var o = out.words;
      var c = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a[0] | 0;
      var al0 = a0 & 0x1fff;
      var ah0 = a0 >>> 13;
      var a1 = a[1] | 0;
      var al1 = a1 & 0x1fff;
      var ah1 = a1 >>> 13;
      var a2 = a[2] | 0;
      var al2 = a2 & 0x1fff;
      var ah2 = a2 >>> 13;
      var a3 = a[3] | 0;
      var al3 = a3 & 0x1fff;
      var ah3 = a3 >>> 13;
      var a4 = a[4] | 0;
      var al4 = a4 & 0x1fff;
      var ah4 = a4 >>> 13;
      var a5 = a[5] | 0;
      var al5 = a5 & 0x1fff;
      var ah5 = a5 >>> 13;
      var a6 = a[6] | 0;
      var al6 = a6 & 0x1fff;
      var ah6 = a6 >>> 13;
      var a7 = a[7] | 0;
      var al7 = a7 & 0x1fff;
      var ah7 = a7 >>> 13;
      var a8 = a[8] | 0;
      var al8 = a8 & 0x1fff;
      var ah8 = a8 >>> 13;
      var a9 = a[9] | 0;
      var al9 = a9 & 0x1fff;
      var ah9 = a9 >>> 13;
      var b0 = b[0] | 0;
      var bl0 = b0 & 0x1fff;
      var bh0 = b0 >>> 13;
      var b1 = b[1] | 0;
      var bl1 = b1 & 0x1fff;
      var bh1 = b1 >>> 13;
      var b2 = b[2] | 0;
      var bl2 = b2 & 0x1fff;
      var bh2 = b2 >>> 13;
      var b3 = b[3] | 0;
      var bl3 = b3 & 0x1fff;
      var bh3 = b3 >>> 13;
      var b4 = b[4] | 0;
      var bl4 = b4 & 0x1fff;
      var bh4 = b4 >>> 13;
      var b5 = b[5] | 0;
      var bl5 = b5 & 0x1fff;
      var bh5 = b5 >>> 13;
      var b6 = b[6] | 0;
      var bl6 = b6 & 0x1fff;
      var bh6 = b6 >>> 13;
      var b7 = b[7] | 0;
      var bl7 = b7 & 0x1fff;
      var bh7 = b7 >>> 13;
      var b8 = b[8] | 0;
      var bl8 = b8 & 0x1fff;
      var bh8 = b8 >>> 13;
      var b9 = b[9] | 0;
      var bl9 = b9 & 0x1fff;
      var bh9 = b9 >>> 13;

      out.negative = self.negative ^ num.negative;
      out.length = 19;
      /* k = 0 */
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = (mid + Math.imul(ah0, bl0)) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
      w0 &= 0x3ffffff;
      /* k = 1 */
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = (mid + Math.imul(ah1, bl0)) | 0;
      hi = Math.imul(ah1, bh0);
      lo = (lo + Math.imul(al0, bl1)) | 0;
      mid = (mid + Math.imul(al0, bh1)) | 0;
      mid = (mid + Math.imul(ah0, bl1)) | 0;
      hi = (hi + Math.imul(ah0, bh1)) | 0;
      var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
      w1 &= 0x3ffffff;
      /* k = 2 */
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = (mid + Math.imul(ah2, bl0)) | 0;
      hi = Math.imul(ah2, bh0);
      lo = (lo + Math.imul(al1, bl1)) | 0;
      mid = (mid + Math.imul(al1, bh1)) | 0;
      mid = (mid + Math.imul(ah1, bl1)) | 0;
      hi = (hi + Math.imul(ah1, bh1)) | 0;
      lo = (lo + Math.imul(al0, bl2)) | 0;
      mid = (mid + Math.imul(al0, bh2)) | 0;
      mid = (mid + Math.imul(ah0, bl2)) | 0;
      hi = (hi + Math.imul(ah0, bh2)) | 0;
      var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
      w2 &= 0x3ffffff;
      /* k = 3 */
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = (mid + Math.imul(ah3, bl0)) | 0;
      hi = Math.imul(ah3, bh0);
      lo = (lo + Math.imul(al2, bl1)) | 0;
      mid = (mid + Math.imul(al2, bh1)) | 0;
      mid = (mid + Math.imul(ah2, bl1)) | 0;
      hi = (hi + Math.imul(ah2, bh1)) | 0;
      lo = (lo + Math.imul(al1, bl2)) | 0;
      mid = (mid + Math.imul(al1, bh2)) | 0;
      mid = (mid + Math.imul(ah1, bl2)) | 0;
      hi = (hi + Math.imul(ah1, bh2)) | 0;
      lo = (lo + Math.imul(al0, bl3)) | 0;
      mid = (mid + Math.imul(al0, bh3)) | 0;
      mid = (mid + Math.imul(ah0, bl3)) | 0;
      hi = (hi + Math.imul(ah0, bh3)) | 0;
      var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
      w3 &= 0x3ffffff;
      /* k = 4 */
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = (mid + Math.imul(ah4, bl0)) | 0;
      hi = Math.imul(ah4, bh0);
      lo = (lo + Math.imul(al3, bl1)) | 0;
      mid = (mid + Math.imul(al3, bh1)) | 0;
      mid = (mid + Math.imul(ah3, bl1)) | 0;
      hi = (hi + Math.imul(ah3, bh1)) | 0;
      lo = (lo + Math.imul(al2, bl2)) | 0;
      mid = (mid + Math.imul(al2, bh2)) | 0;
      mid = (mid + Math.imul(ah2, bl2)) | 0;
      hi = (hi + Math.imul(ah2, bh2)) | 0;
      lo = (lo + Math.imul(al1, bl3)) | 0;
      mid = (mid + Math.imul(al1, bh3)) | 0;
      mid = (mid + Math.imul(ah1, bl3)) | 0;
      hi = (hi + Math.imul(ah1, bh3)) | 0;
      lo = (lo + Math.imul(al0, bl4)) | 0;
      mid = (mid + Math.imul(al0, bh4)) | 0;
      mid = (mid + Math.imul(ah0, bl4)) | 0;
      hi = (hi + Math.imul(ah0, bh4)) | 0;
      var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
      w4 &= 0x3ffffff;
      /* k = 5 */
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = (mid + Math.imul(ah5, bl0)) | 0;
      hi = Math.imul(ah5, bh0);
      lo = (lo + Math.imul(al4, bl1)) | 0;
      mid = (mid + Math.imul(al4, bh1)) | 0;
      mid = (mid + Math.imul(ah4, bl1)) | 0;
      hi = (hi + Math.imul(ah4, bh1)) | 0;
      lo = (lo + Math.imul(al3, bl2)) | 0;
      mid = (mid + Math.imul(al3, bh2)) | 0;
      mid = (mid + Math.imul(ah3, bl2)) | 0;
      hi = (hi + Math.imul(ah3, bh2)) | 0;
      lo = (lo + Math.imul(al2, bl3)) | 0;
      mid = (mid + Math.imul(al2, bh3)) | 0;
      mid = (mid + Math.imul(ah2, bl3)) | 0;
      hi = (hi + Math.imul(ah2, bh3)) | 0;
      lo = (lo + Math.imul(al1, bl4)) | 0;
      mid = (mid + Math.imul(al1, bh4)) | 0;
      mid = (mid + Math.imul(ah1, bl4)) | 0;
      hi = (hi + Math.imul(ah1, bh4)) | 0;
      lo = (lo + Math.imul(al0, bl5)) | 0;
      mid = (mid + Math.imul(al0, bh5)) | 0;
      mid = (mid + Math.imul(ah0, bl5)) | 0;
      hi = (hi + Math.imul(ah0, bh5)) | 0;
      var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
      w5 &= 0x3ffffff;
      /* k = 6 */
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = (mid + Math.imul(ah6, bl0)) | 0;
      hi = Math.imul(ah6, bh0);
      lo = (lo + Math.imul(al5, bl1)) | 0;
      mid = (mid + Math.imul(al5, bh1)) | 0;
      mid = (mid + Math.imul(ah5, bl1)) | 0;
      hi = (hi + Math.imul(ah5, bh1)) | 0;
      lo = (lo + Math.imul(al4, bl2)) | 0;
      mid = (mid + Math.imul(al4, bh2)) | 0;
      mid = (mid + Math.imul(ah4, bl2)) | 0;
      hi = (hi + Math.imul(ah4, bh2)) | 0;
      lo = (lo + Math.imul(al3, bl3)) | 0;
      mid = (mid + Math.imul(al3, bh3)) | 0;
      mid = (mid + Math.imul(ah3, bl3)) | 0;
      hi = (hi + Math.imul(ah3, bh3)) | 0;
      lo = (lo + Math.imul(al2, bl4)) | 0;
      mid = (mid + Math.imul(al2, bh4)) | 0;
      mid = (mid + Math.imul(ah2, bl4)) | 0;
      hi = (hi + Math.imul(ah2, bh4)) | 0;
      lo = (lo + Math.imul(al1, bl5)) | 0;
      mid = (mid + Math.imul(al1, bh5)) | 0;
      mid = (mid + Math.imul(ah1, bl5)) | 0;
      hi = (hi + Math.imul(ah1, bh5)) | 0;
      lo = (lo + Math.imul(al0, bl6)) | 0;
      mid = (mid + Math.imul(al0, bh6)) | 0;
      mid = (mid + Math.imul(ah0, bl6)) | 0;
      hi = (hi + Math.imul(ah0, bh6)) | 0;
      var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
      w6 &= 0x3ffffff;
      /* k = 7 */
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = (mid + Math.imul(ah7, bl0)) | 0;
      hi = Math.imul(ah7, bh0);
      lo = (lo + Math.imul(al6, bl1)) | 0;
      mid = (mid + Math.imul(al6, bh1)) | 0;
      mid = (mid + Math.imul(ah6, bl1)) | 0;
      hi = (hi + Math.imul(ah6, bh1)) | 0;
      lo = (lo + Math.imul(al5, bl2)) | 0;
      mid = (mid + Math.imul(al5, bh2)) | 0;
      mid = (mid + Math.imul(ah5, bl2)) | 0;
      hi = (hi + Math.imul(ah5, bh2)) | 0;
      lo = (lo + Math.imul(al4, bl3)) | 0;
      mid = (mid + Math.imul(al4, bh3)) | 0;
      mid = (mid + Math.imul(ah4, bl3)) | 0;
      hi = (hi + Math.imul(ah4, bh3)) | 0;
      lo = (lo + Math.imul(al3, bl4)) | 0;
      mid = (mid + Math.imul(al3, bh4)) | 0;
      mid = (mid + Math.imul(ah3, bl4)) | 0;
      hi = (hi + Math.imul(ah3, bh4)) | 0;
      lo = (lo + Math.imul(al2, bl5)) | 0;
      mid = (mid + Math.imul(al2, bh5)) | 0;
      mid = (mid + Math.imul(ah2, bl5)) | 0;
      hi = (hi + Math.imul(ah2, bh5)) | 0;
      lo = (lo + Math.imul(al1, bl6)) | 0;
      mid = (mid + Math.imul(al1, bh6)) | 0;
      mid = (mid + Math.imul(ah1, bl6)) | 0;
      hi = (hi + Math.imul(ah1, bh6)) | 0;
      lo = (lo + Math.imul(al0, bl7)) | 0;
      mid = (mid + Math.imul(al0, bh7)) | 0;
      mid = (mid + Math.imul(ah0, bl7)) | 0;
      hi = (hi + Math.imul(ah0, bh7)) | 0;
      var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
      w7 &= 0x3ffffff;
      /* k = 8 */
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = (mid + Math.imul(ah8, bl0)) | 0;
      hi = Math.imul(ah8, bh0);
      lo = (lo + Math.imul(al7, bl1)) | 0;
      mid = (mid + Math.imul(al7, bh1)) | 0;
      mid = (mid + Math.imul(ah7, bl1)) | 0;
      hi = (hi + Math.imul(ah7, bh1)) | 0;
      lo = (lo + Math.imul(al6, bl2)) | 0;
      mid = (mid + Math.imul(al6, bh2)) | 0;
      mid = (mid + Math.imul(ah6, bl2)) | 0;
      hi = (hi + Math.imul(ah6, bh2)) | 0;
      lo = (lo + Math.imul(al5, bl3)) | 0;
      mid = (mid + Math.imul(al5, bh3)) | 0;
      mid = (mid + Math.imul(ah5, bl3)) | 0;
      hi = (hi + Math.imul(ah5, bh3)) | 0;
      lo = (lo + Math.imul(al4, bl4)) | 0;
      mid = (mid + Math.imul(al4, bh4)) | 0;
      mid = (mid + Math.imul(ah4, bl4)) | 0;
      hi = (hi + Math.imul(ah4, bh4)) | 0;
      lo = (lo + Math.imul(al3, bl5)) | 0;
      mid = (mid + Math.imul(al3, bh5)) | 0;
      mid = (mid + Math.imul(ah3, bl5)) | 0;
      hi = (hi + Math.imul(ah3, bh5)) | 0;
      lo = (lo + Math.imul(al2, bl6)) | 0;
      mid = (mid + Math.imul(al2, bh6)) | 0;
      mid = (mid + Math.imul(ah2, bl6)) | 0;
      hi = (hi + Math.imul(ah2, bh6)) | 0;
      lo = (lo + Math.imul(al1, bl7)) | 0;
      mid = (mid + Math.imul(al1, bh7)) | 0;
      mid = (mid + Math.imul(ah1, bl7)) | 0;
      hi = (hi + Math.imul(ah1, bh7)) | 0;
      lo = (lo + Math.imul(al0, bl8)) | 0;
      mid = (mid + Math.imul(al0, bh8)) | 0;
      mid = (mid + Math.imul(ah0, bl8)) | 0;
      hi = (hi + Math.imul(ah0, bh8)) | 0;
      var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
      w8 &= 0x3ffffff;
      /* k = 9 */
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = (mid + Math.imul(ah9, bl0)) | 0;
      hi = Math.imul(ah9, bh0);
      lo = (lo + Math.imul(al8, bl1)) | 0;
      mid = (mid + Math.imul(al8, bh1)) | 0;
      mid = (mid + Math.imul(ah8, bl1)) | 0;
      hi = (hi + Math.imul(ah8, bh1)) | 0;
      lo = (lo + Math.imul(al7, bl2)) | 0;
      mid = (mid + Math.imul(al7, bh2)) | 0;
      mid = (mid + Math.imul(ah7, bl2)) | 0;
      hi = (hi + Math.imul(ah7, bh2)) | 0;
      lo = (lo + Math.imul(al6, bl3)) | 0;
      mid = (mid + Math.imul(al6, bh3)) | 0;
      mid = (mid + Math.imul(ah6, bl3)) | 0;
      hi = (hi + Math.imul(ah6, bh3)) | 0;
      lo = (lo + Math.imul(al5, bl4)) | 0;
      mid = (mid + Math.imul(al5, bh4)) | 0;
      mid = (mid + Math.imul(ah5, bl4)) | 0;
      hi = (hi + Math.imul(ah5, bh4)) | 0;
      lo = (lo + Math.imul(al4, bl5)) | 0;
      mid = (mid + Math.imul(al4, bh5)) | 0;
      mid = (mid + Math.imul(ah4, bl5)) | 0;
      hi = (hi + Math.imul(ah4, bh5)) | 0;
      lo = (lo + Math.imul(al3, bl6)) | 0;
      mid = (mid + Math.imul(al3, bh6)) | 0;
      mid = (mid + Math.imul(ah3, bl6)) | 0;
      hi = (hi + Math.imul(ah3, bh6)) | 0;
      lo = (lo + Math.imul(al2, bl7)) | 0;
      mid = (mid + Math.imul(al2, bh7)) | 0;
      mid = (mid + Math.imul(ah2, bl7)) | 0;
      hi = (hi + Math.imul(ah2, bh7)) | 0;
      lo = (lo + Math.imul(al1, bl8)) | 0;
      mid = (mid + Math.imul(al1, bh8)) | 0;
      mid = (mid + Math.imul(ah1, bl8)) | 0;
      hi = (hi + Math.imul(ah1, bh8)) | 0;
      lo = (lo + Math.imul(al0, bl9)) | 0;
      mid = (mid + Math.imul(al0, bh9)) | 0;
      mid = (mid + Math.imul(ah0, bl9)) | 0;
      hi = (hi + Math.imul(ah0, bh9)) | 0;
      var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
      w9 &= 0x3ffffff;
      /* k = 10 */
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = (mid + Math.imul(ah9, bl1)) | 0;
      hi = Math.imul(ah9, bh1);
      lo = (lo + Math.imul(al8, bl2)) | 0;
      mid = (mid + Math.imul(al8, bh2)) | 0;
      mid = (mid + Math.imul(ah8, bl2)) | 0;
      hi = (hi + Math.imul(ah8, bh2)) | 0;
      lo = (lo + Math.imul(al7, bl3)) | 0;
      mid = (mid + Math.imul(al7, bh3)) | 0;
      mid = (mid + Math.imul(ah7, bl3)) | 0;
      hi = (hi + Math.imul(ah7, bh3)) | 0;
      lo = (lo + Math.imul(al6, bl4)) | 0;
      mid = (mid + Math.imul(al6, bh4)) | 0;
      mid = (mid + Math.imul(ah6, bl4)) | 0;
      hi = (hi + Math.imul(ah6, bh4)) | 0;
      lo = (lo + Math.imul(al5, bl5)) | 0;
      mid = (mid + Math.imul(al5, bh5)) | 0;
      mid = (mid + Math.imul(ah5, bl5)) | 0;
      hi = (hi + Math.imul(ah5, bh5)) | 0;
      lo = (lo + Math.imul(al4, bl6)) | 0;
      mid = (mid + Math.imul(al4, bh6)) | 0;
      mid = (mid + Math.imul(ah4, bl6)) | 0;
      hi = (hi + Math.imul(ah4, bh6)) | 0;
      lo = (lo + Math.imul(al3, bl7)) | 0;
      mid = (mid + Math.imul(al3, bh7)) | 0;
      mid = (mid + Math.imul(ah3, bl7)) | 0;
      hi = (hi + Math.imul(ah3, bh7)) | 0;
      lo = (lo + Math.imul(al2, bl8)) | 0;
      mid = (mid + Math.imul(al2, bh8)) | 0;
      mid = (mid + Math.imul(ah2, bl8)) | 0;
      hi = (hi + Math.imul(ah2, bh8)) | 0;
      lo = (lo + Math.imul(al1, bl9)) | 0;
      mid = (mid + Math.imul(al1, bh9)) | 0;
      mid = (mid + Math.imul(ah1, bl9)) | 0;
      hi = (hi + Math.imul(ah1, bh9)) | 0;
      var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
      w10 &= 0x3ffffff;
      /* k = 11 */
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = (mid + Math.imul(ah9, bl2)) | 0;
      hi = Math.imul(ah9, bh2);
      lo = (lo + Math.imul(al8, bl3)) | 0;
      mid = (mid + Math.imul(al8, bh3)) | 0;
      mid = (mid + Math.imul(ah8, bl3)) | 0;
      hi = (hi + Math.imul(ah8, bh3)) | 0;
      lo = (lo + Math.imul(al7, bl4)) | 0;
      mid = (mid + Math.imul(al7, bh4)) | 0;
      mid = (mid + Math.imul(ah7, bl4)) | 0;
      hi = (hi + Math.imul(ah7, bh4)) | 0;
      lo = (lo + Math.imul(al6, bl5)) | 0;
      mid = (mid + Math.imul(al6, bh5)) | 0;
      mid = (mid + Math.imul(ah6, bl5)) | 0;
      hi = (hi + Math.imul(ah6, bh5)) | 0;
      lo = (lo + Math.imul(al5, bl6)) | 0;
      mid = (mid + Math.imul(al5, bh6)) | 0;
      mid = (mid + Math.imul(ah5, bl6)) | 0;
      hi = (hi + Math.imul(ah5, bh6)) | 0;
      lo = (lo + Math.imul(al4, bl7)) | 0;
      mid = (mid + Math.imul(al4, bh7)) | 0;
      mid = (mid + Math.imul(ah4, bl7)) | 0;
      hi = (hi + Math.imul(ah4, bh7)) | 0;
      lo = (lo + Math.imul(al3, bl8)) | 0;
      mid = (mid + Math.imul(al3, bh8)) | 0;
      mid = (mid + Math.imul(ah3, bl8)) | 0;
      hi = (hi + Math.imul(ah3, bh8)) | 0;
      lo = (lo + Math.imul(al2, bl9)) | 0;
      mid = (mid + Math.imul(al2, bh9)) | 0;
      mid = (mid + Math.imul(ah2, bl9)) | 0;
      hi = (hi + Math.imul(ah2, bh9)) | 0;
      var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
      w11 &= 0x3ffffff;
      /* k = 12 */
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = (mid + Math.imul(ah9, bl3)) | 0;
      hi = Math.imul(ah9, bh3);
      lo = (lo + Math.imul(al8, bl4)) | 0;
      mid = (mid + Math.imul(al8, bh4)) | 0;
      mid = (mid + Math.imul(ah8, bl4)) | 0;
      hi = (hi + Math.imul(ah8, bh4)) | 0;
      lo = (lo + Math.imul(al7, bl5)) | 0;
      mid = (mid + Math.imul(al7, bh5)) | 0;
      mid = (mid + Math.imul(ah7, bl5)) | 0;
      hi = (hi + Math.imul(ah7, bh5)) | 0;
      lo = (lo + Math.imul(al6, bl6)) | 0;
      mid = (mid + Math.imul(al6, bh6)) | 0;
      mid = (mid + Math.imul(ah6, bl6)) | 0;
      hi = (hi + Math.imul(ah6, bh6)) | 0;
      lo = (lo + Math.imul(al5, bl7)) | 0;
      mid = (mid + Math.imul(al5, bh7)) | 0;
      mid = (mid + Math.imul(ah5, bl7)) | 0;
      hi = (hi + Math.imul(ah5, bh7)) | 0;
      lo = (lo + Math.imul(al4, bl8)) | 0;
      mid = (mid + Math.imul(al4, bh8)) | 0;
      mid = (mid + Math.imul(ah4, bl8)) | 0;
      hi = (hi + Math.imul(ah4, bh8)) | 0;
      lo = (lo + Math.imul(al3, bl9)) | 0;
      mid = (mid + Math.imul(al3, bh9)) | 0;
      mid = (mid + Math.imul(ah3, bl9)) | 0;
      hi = (hi + Math.imul(ah3, bh9)) | 0;
      var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
      w12 &= 0x3ffffff;
      /* k = 13 */
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = (mid + Math.imul(ah9, bl4)) | 0;
      hi = Math.imul(ah9, bh4);
      lo = (lo + Math.imul(al8, bl5)) | 0;
      mid = (mid + Math.imul(al8, bh5)) | 0;
      mid = (mid + Math.imul(ah8, bl5)) | 0;
      hi = (hi + Math.imul(ah8, bh5)) | 0;
      lo = (lo + Math.imul(al7, bl6)) | 0;
      mid = (mid + Math.imul(al7, bh6)) | 0;
      mid = (mid + Math.imul(ah7, bl6)) | 0;
      hi = (hi + Math.imul(ah7, bh6)) | 0;
      lo = (lo + Math.imul(al6, bl7)) | 0;
      mid = (mid + Math.imul(al6, bh7)) | 0;
      mid = (mid + Math.imul(ah6, bl7)) | 0;
      hi = (hi + Math.imul(ah6, bh7)) | 0;
      lo = (lo + Math.imul(al5, bl8)) | 0;
      mid = (mid + Math.imul(al5, bh8)) | 0;
      mid = (mid + Math.imul(ah5, bl8)) | 0;
      hi = (hi + Math.imul(ah5, bh8)) | 0;
      lo = (lo + Math.imul(al4, bl9)) | 0;
      mid = (mid + Math.imul(al4, bh9)) | 0;
      mid = (mid + Math.imul(ah4, bl9)) | 0;
      hi = (hi + Math.imul(ah4, bh9)) | 0;
      var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
      w13 &= 0x3ffffff;
      /* k = 14 */
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = (mid + Math.imul(ah9, bl5)) | 0;
      hi = Math.imul(ah9, bh5);
      lo = (lo + Math.imul(al8, bl6)) | 0;
      mid = (mid + Math.imul(al8, bh6)) | 0;
      mid = (mid + Math.imul(ah8, bl6)) | 0;
      hi = (hi + Math.imul(ah8, bh6)) | 0;
      lo = (lo + Math.imul(al7, bl7)) | 0;
      mid = (mid + Math.imul(al7, bh7)) | 0;
      mid = (mid + Math.imul(ah7, bl7)) | 0;
      hi = (hi + Math.imul(ah7, bh7)) | 0;
      lo = (lo + Math.imul(al6, bl8)) | 0;
      mid = (mid + Math.imul(al6, bh8)) | 0;
      mid = (mid + Math.imul(ah6, bl8)) | 0;
      hi = (hi + Math.imul(ah6, bh8)) | 0;
      lo = (lo + Math.imul(al5, bl9)) | 0;
      mid = (mid + Math.imul(al5, bh9)) | 0;
      mid = (mid + Math.imul(ah5, bl9)) | 0;
      hi = (hi + Math.imul(ah5, bh9)) | 0;
      var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
      w14 &= 0x3ffffff;
      /* k = 15 */
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = (mid + Math.imul(ah9, bl6)) | 0;
      hi = Math.imul(ah9, bh6);
      lo = (lo + Math.imul(al8, bl7)) | 0;
      mid = (mid + Math.imul(al8, bh7)) | 0;
      mid = (mid + Math.imul(ah8, bl7)) | 0;
      hi = (hi + Math.imul(ah8, bh7)) | 0;
      lo = (lo + Math.imul(al7, bl8)) | 0;
      mid = (mid + Math.imul(al7, bh8)) | 0;
      mid = (mid + Math.imul(ah7, bl8)) | 0;
      hi = (hi + Math.imul(ah7, bh8)) | 0;
      lo = (lo + Math.imul(al6, bl9)) | 0;
      mid = (mid + Math.imul(al6, bh9)) | 0;
      mid = (mid + Math.imul(ah6, bl9)) | 0;
      hi = (hi + Math.imul(ah6, bh9)) | 0;
      var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
      w15 &= 0x3ffffff;
      /* k = 16 */
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = (mid + Math.imul(ah9, bl7)) | 0;
      hi = Math.imul(ah9, bh7);
      lo = (lo + Math.imul(al8, bl8)) | 0;
      mid = (mid + Math.imul(al8, bh8)) | 0;
      mid = (mid + Math.imul(ah8, bl8)) | 0;
      hi = (hi + Math.imul(ah8, bh8)) | 0;
      lo = (lo + Math.imul(al7, bl9)) | 0;
      mid = (mid + Math.imul(al7, bh9)) | 0;
      mid = (mid + Math.imul(ah7, bl9)) | 0;
      hi = (hi + Math.imul(ah7, bh9)) | 0;
      var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
      w16 &= 0x3ffffff;
      /* k = 17 */
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = (mid + Math.imul(ah9, bl8)) | 0;
      hi = Math.imul(ah9, bh8);
      lo = (lo + Math.imul(al8, bl9)) | 0;
      mid = (mid + Math.imul(al8, bh9)) | 0;
      mid = (mid + Math.imul(ah8, bl9)) | 0;
      hi = (hi + Math.imul(ah8, bh9)) | 0;
      var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
      w17 &= 0x3ffffff;
      /* k = 18 */
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = (mid + Math.imul(ah9, bl9)) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
      w18 &= 0x3ffffff;
      o[0] = w0;
      o[1] = w1;
      o[2] = w2;
      o[3] = w3;
      o[4] = w4;
      o[5] = w5;
      o[6] = w6;
      o[7] = w7;
      o[8] = w8;
      o[9] = w9;
      o[10] = w10;
      o[11] = w11;
      o[12] = w12;
      o[13] = w13;
      o[14] = w14;
      o[15] = w15;
      o[16] = w16;
      o[17] = w17;
      o[18] = w18;
      if (c !== 0) {
        o[19] = c;
        out.length++;
      }
      return out;
    };

    // Polyfill comb
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }

    function bigMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      out.length = self.length + num.length;

      var carry = 0;
      var hncarry = 0;
      for (var k = 0; k < out.length - 1; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = k - j;
          var a = self.words[i] | 0;
          var b = num.words[j] | 0;
          var r = a * b;

          var lo = r & 0x3ffffff;
          ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
          lo = (lo + rword) | 0;
          rword = lo & 0x3ffffff;
          ncarry = (ncarry + (lo >>> 26)) | 0;

          hncarry += ncarry >>> 26;
          ncarry &= 0x3ffffff;
        }
        out.words[k] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k] = carry;
      } else {
        out.length--;
      }

      return out.strip();
    }

    function jumboMulTo (self, num, out) {
      var fftm = new FFTM();
      return fftm.mulp(self, num, out);
    }

    BN.prototype.mulTo = function mulTo (num, out) {
      var res;
      var len = this.length + num.length;
      if (this.length === 10 && num.length === 10) {
        res = comb10MulTo(this, num, out);
      } else if (len < 63) {
        res = smallMulTo(this, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this, num, out);
      } else {
        res = jumboMulTo(this, num, out);
      }

      return res;
    };

    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion

    function FFTM (x, y) {
      this.x = x;
      this.y = y;
    }

    FFTM.prototype.makeRBT = function makeRBT (N) {
      var t = new Array(N);
      var l = BN.prototype._countBits(N) - 1;
      for (var i = 0; i < N; i++) {
        t[i] = this.revBin(i, l, N);
      }

      return t;
    };

    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin (x, l, N) {
      if (x === 0 || x === N - 1) return x;

      var rb = 0;
      for (var i = 0; i < l; i++) {
        rb |= (x & 1) << (l - i - 1);
        x >>= 1;
      }

      return rb;
    };

    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
      for (var i = 0; i < N; i++) {
        rtws[i] = rws[rbt[i]];
        itws[i] = iws[rbt[i]];
      }
    };

    FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
      this.permute(rbt, rws, iws, rtws, itws, N);

      for (var s = 1; s < N; s <<= 1) {
        var l = s << 1;

        var rtwdf = Math.cos(2 * Math.PI / l);
        var itwdf = Math.sin(2 * Math.PI / l);

        for (var p = 0; p < N; p += l) {
          var rtwdf_ = rtwdf;
          var itwdf_ = itwdf;

          for (var j = 0; j < s; j++) {
            var re = rtws[p + j];
            var ie = itws[p + j];

            var ro = rtws[p + j + s];
            var io = itws[p + j + s];

            var rx = rtwdf_ * ro - itwdf_ * io;

            io = rtwdf_ * io + itwdf_ * ro;
            ro = rx;

            rtws[p + j] = re + ro;
            itws[p + j] = ie + io;

            rtws[p + j + s] = re - ro;
            itws[p + j + s] = ie - io;

            /* jshint maxdepth : false */
            if (j !== l) {
              rx = rtwdf * rtwdf_ - itwdf * itwdf_;

              itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
              rtwdf_ = rx;
            }
          }
        }
      }
    };

    FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
      var N = Math.max(m, n) | 1;
      var odd = N & 1;
      var i = 0;
      for (N = N / 2 | 0; N; N = N >>> 1) {
        i++;
      }

      return 1 << i + 1 + odd;
    };

    FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
      if (N <= 1) return;

      for (var i = 0; i < N / 2; i++) {
        var t = rws[i];

        rws[i] = rws[N - i - 1];
        rws[N - i - 1] = t;

        t = iws[i];

        iws[i] = -iws[N - i - 1];
        iws[N - i - 1] = -t;
      }
    };

    FFTM.prototype.normalize13b = function normalize13b (ws, N) {
      var carry = 0;
      for (var i = 0; i < N / 2; i++) {
        var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
          Math.round(ws[2 * i] / N) +
          carry;

        ws[i] = w & 0x3ffffff;

        if (w < 0x4000000) {
          carry = 0;
        } else {
          carry = w / 0x4000000 | 0;
        }
      }

      return ws;
    };

    FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
      var carry = 0;
      for (var i = 0; i < len; i++) {
        carry = carry + (ws[i] | 0);

        rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
        rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
      }

      // Pad with zeroes
      for (i = 2 * len; i < N; ++i) {
        rws[i] = 0;
      }

      assert(carry === 0);
      assert((carry & ~0x1fff) === 0);
    };

    FFTM.prototype.stub = function stub (N) {
      var ph = new Array(N);
      for (var i = 0; i < N; i++) {
        ph[i] = 0;
      }

      return ph;
    };

    FFTM.prototype.mulp = function mulp (x, y, out) {
      var N = 2 * this.guessLen13b(x.length, y.length);

      var rbt = this.makeRBT(N);

      var _ = this.stub(N);

      var rws = new Array(N);
      var rwst = new Array(N);
      var iwst = new Array(N);

      var nrws = new Array(N);
      var nrwst = new Array(N);
      var niwst = new Array(N);

      var rmws = out.words;
      rmws.length = N;

      this.convert13b(x.words, x.length, rws, N);
      this.convert13b(y.words, y.length, nrws, N);

      this.transform(rws, _, rwst, iwst, N, rbt);
      this.transform(nrws, _, nrwst, niwst, N, rbt);

      for (var i = 0; i < N; i++) {
        var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
        iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
        rwst[i] = rx;
      }

      this.conjugate(rwst, iwst, N);
      this.transform(rwst, iwst, rmws, _, N, rbt);
      this.conjugate(rmws, _, N);
      this.normalize13b(rmws, N);

      out.negative = x.negative ^ y.negative;
      out.length = x.length + y.length;
      return out.strip();
    };

    // Multiply `this` by `num`
    BN.prototype.mul = function mul (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return this.mulTo(num, out);
    };

    // Multiply employing FFT
    BN.prototype.mulf = function mulf (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return jumboMulTo(this, num, out);
    };

    // In-place Multiplication
    BN.prototype.imul = function imul (num) {
      return this.clone().mulTo(num, this);
    };

    BN.prototype.imuln = function imuln (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);

      // Carry
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = (this.words[i] | 0) * num;
        var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
        carry >>= 26;
        carry += (w / 0x4000000) | 0;
        // NOTE: lo is 27bit maximum
        carry += lo >>> 26;
        this.words[i] = lo & 0x3ffffff;
      }

      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }

      return this;
    };

    BN.prototype.muln = function muln (num) {
      return this.clone().imuln(num);
    };

    // `this` * `this`
    BN.prototype.sqr = function sqr () {
      return this.mul(this);
    };

    // `this` * `this` in-place
    BN.prototype.isqr = function isqr () {
      return this.imul(this.clone());
    };

    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow (num) {
      var w = toBitArray(num);
      if (w.length === 0) return new BN(1);

      // Skip leading zeroes
      var res = this;
      for (var i = 0; i < w.length; i++, res = res.sqr()) {
        if (w[i] !== 0) break;
      }

      if (++i < w.length) {
        for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
          if (w[i] === 0) continue;

          res = res.mul(q);
        }
      }

      return res;
    };

    // Shift-left in-place
    BN.prototype.iushln = function iushln (bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;
      var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
      var i;

      if (r !== 0) {
        var carry = 0;

        for (i = 0; i < this.length; i++) {
          var newCarry = this.words[i] & carryMask;
          var c = ((this.words[i] | 0) - newCarry) << r;
          this.words[i] = c | carry;
          carry = newCarry >>> (26 - r);
        }

        if (carry) {
          this.words[i] = carry;
          this.length++;
        }
      }

      if (s !== 0) {
        for (i = this.length - 1; i >= 0; i--) {
          this.words[i + s] = this.words[i];
        }

        for (i = 0; i < s; i++) {
          this.words[i] = 0;
        }

        this.length += s;
      }

      return this.strip();
    };

    BN.prototype.ishln = function ishln (bits) {
      // TODO(indutny): implement me
      assert(this.negative === 0);
      return this.iushln(bits);
    };

    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn (bits, hint, extended) {
      assert(typeof bits === 'number' && bits >= 0);
      var h;
      if (hint) {
        h = (hint - (hint % 26)) / 26;
      } else {
        h = 0;
      }

      var r = bits % 26;
      var s = Math.min((bits - r) / 26, this.length);
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      var maskedWords = extended;

      h -= s;
      h = Math.max(0, h);

      // Extended mode, copy masked part
      if (maskedWords) {
        for (var i = 0; i < s; i++) {
          maskedWords.words[i] = this.words[i];
        }
        maskedWords.length = s;
      }

      if (s === 0) ; else if (this.length > s) {
        this.length -= s;
        for (i = 0; i < this.length; i++) {
          this.words[i] = this.words[i + s];
        }
      } else {
        this.words[0] = 0;
        this.length = 1;
      }

      var carry = 0;
      for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
        var word = this.words[i] | 0;
        this.words[i] = (carry << (26 - r)) | (word >>> r);
        carry = word & mask;
      }

      // Push carried bits as a mask
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }

      if (this.length === 0) {
        this.words[0] = 0;
        this.length = 1;
      }

      return this.strip();
    };

    BN.prototype.ishrn = function ishrn (bits, hint, extended) {
      // TODO(indutny): implement me
      assert(this.negative === 0);
      return this.iushrn(bits, hint, extended);
    };

    // Shift-left
    BN.prototype.shln = function shln (bits) {
      return this.clone().ishln(bits);
    };

    BN.prototype.ushln = function ushln (bits) {
      return this.clone().iushln(bits);
    };

    // Shift-right
    BN.prototype.shrn = function shrn (bits) {
      return this.clone().ishrn(bits);
    };

    BN.prototype.ushrn = function ushrn (bits) {
      return this.clone().iushrn(bits);
    };

    // Test if n bit is set
    BN.prototype.testn = function testn (bit) {
      assert(typeof bit === 'number' && bit >= 0);
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) return false;

      // Check bit and return
      var w = this.words[s];

      return !!(w & q);
    };

    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn (bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;

      assert(this.negative === 0, 'imaskn works only with positive numbers');

      if (this.length <= s) {
        return this;
      }

      if (r !== 0) {
        s++;
      }
      this.length = Math.min(s, this.length);

      if (r !== 0) {
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        this.words[this.length - 1] &= mask;
      }

      return this.strip();
    };

    // Return only lowers bits of number
    BN.prototype.maskn = function maskn (bits) {
      return this.clone().imaskn(bits);
    };

    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.isubn(-num);

      // Possible sign change
      if (this.negative !== 0) {
        if (this.length === 1 && (this.words[0] | 0) < num) {
          this.words[0] = num - (this.words[0] | 0);
          this.negative = 0;
          return this;
        }

        this.negative = 0;
        this.isubn(num);
        this.negative = 1;
        return this;
      }

      // Add without checks
      return this._iaddn(num);
    };

    BN.prototype._iaddn = function _iaddn (num) {
      this.words[0] += num;

      // Carry
      for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
        this.words[i] -= 0x4000000;
        if (i === this.length - 1) {
          this.words[i + 1] = 1;
        } else {
          this.words[i + 1]++;
        }
      }
      this.length = Math.max(this.length, i + 1);

      return this;
    };

    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.iaddn(-num);

      if (this.negative !== 0) {
        this.negative = 0;
        this.iaddn(num);
        this.negative = 1;
        return this;
      }

      this.words[0] -= num;

      if (this.length === 1 && this.words[0] < 0) {
        this.words[0] = -this.words[0];
        this.negative = 1;
      } else {
        // Carry
        for (var i = 0; i < this.length && this.words[i] < 0; i++) {
          this.words[i] += 0x4000000;
          this.words[i + 1] -= 1;
        }
      }

      return this.strip();
    };

    BN.prototype.addn = function addn (num) {
      return this.clone().iaddn(num);
    };

    BN.prototype.subn = function subn (num) {
      return this.clone().isubn(num);
    };

    BN.prototype.iabs = function iabs () {
      this.negative = 0;

      return this;
    };

    BN.prototype.abs = function abs () {
      return this.clone().iabs();
    };

    BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
      var len = num.length + shift;
      var i;

      this._expand(len);

      var w;
      var carry = 0;
      for (i = 0; i < num.length; i++) {
        w = (this.words[i + shift] | 0) + carry;
        var right = (num.words[i] | 0) * mul;
        w -= right & 0x3ffffff;
        carry = (w >> 26) - ((right / 0x4000000) | 0);
        this.words[i + shift] = w & 0x3ffffff;
      }
      for (; i < this.length - shift; i++) {
        w = (this.words[i + shift] | 0) + carry;
        carry = w >> 26;
        this.words[i + shift] = w & 0x3ffffff;
      }

      if (carry === 0) return this.strip();

      // Subtraction overflow
      assert(carry === -1);
      carry = 0;
      for (i = 0; i < this.length; i++) {
        w = -(this.words[i] | 0) + carry;
        carry = w >> 26;
        this.words[i] = w & 0x3ffffff;
      }
      this.negative = 1;

      return this.strip();
    };

    BN.prototype._wordDiv = function _wordDiv (num, mode) {
      var shift = this.length - num.length;

      var a = this.clone();
      var b = num;

      // Normalize
      var bhi = b.words[b.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b = b.ushln(shift);
        a.iushln(shift);
        bhi = b.words[b.length - 1] | 0;
      }

      // Initialize quotient
      var m = a.length - b.length;
      var q;

      if (mode !== 'mod') {
        q = new BN(null);
        q.length = m + 1;
        q.words = new Array(q.length);
        for (var i = 0; i < q.length; i++) {
          q.words[i] = 0;
        }
      }

      var diff = a.clone()._ishlnsubmul(b, 1, m);
      if (diff.negative === 0) {
        a = diff;
        if (q) {
          q.words[m] = 1;
        }
      }

      for (var j = m - 1; j >= 0; j--) {
        var qj = (a.words[b.length + j] | 0) * 0x4000000 +
          (a.words[b.length + j - 1] | 0);

        // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
        // (0x7ffffff)
        qj = Math.min((qj / bhi) | 0, 0x3ffffff);

        a._ishlnsubmul(b, qj, j);
        while (a.negative !== 0) {
          qj--;
          a.negative = 0;
          a._ishlnsubmul(b, 1, j);
          if (!a.isZero()) {
            a.negative ^= 1;
          }
        }
        if (q) {
          q.words[j] = qj;
        }
      }
      if (q) {
        q.strip();
      }
      a.strip();

      // Denormalize
      if (mode !== 'div' && shift !== 0) {
        a.iushrn(shift);
      }

      return {
        div: q || null,
        mod: a
      };
    };

    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod (num, mode, positive) {
      assert(!num.isZero());

      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }

      var div, mod, res;
      if (this.negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }

        return {
          div: div,
          mod: mod
        };
      }

      if (this.negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        return {
          div: div,
          mod: res.mod
        };
      }

      if ((this.negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);

        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }

        return {
          div: res.div,
          mod: mod
        };
      }

      // Both numbers are positive at this point

      // Strip both numbers to approximate shift value
      if (num.length > this.length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this
        };
      }

      // Very short reduction
      if (num.length === 1) {
        if (mode === 'div') {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }

        if (mode === 'mod') {
          return {
            div: null,
            mod: new BN(this.modn(num.words[0]))
          };
        }

        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return this._wordDiv(num, mode);
    };

    // Find `this` / `num`
    BN.prototype.div = function div (num) {
      return this.divmod(num, 'div', false).div;
    };

    // Find `this` % `num`
    BN.prototype.mod = function mod (num) {
      return this.divmod(num, 'mod', false).mod;
    };

    BN.prototype.umod = function umod (num) {
      return this.divmod(num, 'mod', true).mod;
    };

    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound (num) {
      var dm = this.divmod(num);

      // Fast case - exact division
      if (dm.mod.isZero()) return dm.div;

      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

      var half = num.ushrn(1);
      var r2 = num.andln(1);
      var cmp = mod.cmp(half);

      // Round down
      if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

      // Round up
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };

    BN.prototype.modn = function modn (num) {
      assert(num <= 0x3ffffff);
      var p = (1 << 26) % num;

      var acc = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        acc = (p * acc + (this.words[i] | 0)) % num;
      }

      return acc;
    };

    // In-place division by number
    BN.prototype.idivn = function idivn (num) {
      assert(num <= 0x3ffffff);

      var carry = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var w = (this.words[i] | 0) + carry * 0x4000000;
        this.words[i] = (w / num) | 0;
        carry = w % num;
      }

      return this.strip();
    };

    BN.prototype.divn = function divn (num) {
      return this.clone().idivn(num);
    };

    BN.prototype.egcd = function egcd (p) {
      assert(p.negative === 0);
      assert(!p.isZero());

      var x = this;
      var y = p.clone();

      if (x.negative !== 0) {
        x = x.umod(p);
      } else {
        x = x.clone();
      }

      // A * x + B * y = x
      var A = new BN(1);
      var B = new BN(0);

      // C * x + D * y = y
      var C = new BN(0);
      var D = new BN(1);

      var g = 0;

      while (x.isEven() && y.isEven()) {
        x.iushrn(1);
        y.iushrn(1);
        ++g;
      }

      var yp = y.clone();
      var xp = x.clone();

      while (!x.isZero()) {
        for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          x.iushrn(i);
          while (i-- > 0) {
            if (A.isOdd() || B.isOdd()) {
              A.iadd(yp);
              B.isub(xp);
            }

            A.iushrn(1);
            B.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          y.iushrn(j);
          while (j-- > 0) {
            if (C.isOdd() || D.isOdd()) {
              C.iadd(yp);
              D.isub(xp);
            }

            C.iushrn(1);
            D.iushrn(1);
          }
        }

        if (x.cmp(y) >= 0) {
          x.isub(y);
          A.isub(C);
          B.isub(D);
        } else {
          y.isub(x);
          C.isub(A);
          D.isub(B);
        }
      }

      return {
        a: C,
        b: D,
        gcd: y.iushln(g)
      };
    };

    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp (p) {
      assert(p.negative === 0);
      assert(!p.isZero());

      var a = this;
      var b = p.clone();

      if (a.negative !== 0) {
        a = a.umod(p);
      } else {
        a = a.clone();
      }

      var x1 = new BN(1);
      var x2 = new BN(0);

      var delta = b.clone();

      while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
        for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          a.iushrn(i);
          while (i-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }

            x1.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          b.iushrn(j);
          while (j-- > 0) {
            if (x2.isOdd()) {
              x2.iadd(delta);
            }

            x2.iushrn(1);
          }
        }

        if (a.cmp(b) >= 0) {
          a.isub(b);
          x1.isub(x2);
        } else {
          b.isub(a);
          x2.isub(x1);
        }
      }

      var res;
      if (a.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x2;
      }

      if (res.cmpn(0) < 0) {
        res.iadd(p);
      }

      return res;
    };

    BN.prototype.gcd = function gcd (num) {
      if (this.isZero()) return num.abs();
      if (num.isZero()) return this.abs();

      var a = this.clone();
      var b = num.clone();
      a.negative = 0;
      b.negative = 0;

      // Remove common factor of two
      for (var shift = 0; a.isEven() && b.isEven(); shift++) {
        a.iushrn(1);
        b.iushrn(1);
      }

      do {
        while (a.isEven()) {
          a.iushrn(1);
        }
        while (b.isEven()) {
          b.iushrn(1);
        }

        var r = a.cmp(b);
        if (r < 0) {
          // Swap `a` and `b` to make `a` always bigger than `b`
          var t = a;
          a = b;
          b = t;
        } else if (r === 0 || b.cmpn(1) === 0) {
          break;
        }

        a.isub(b);
      } while (true);

      return b.iushln(shift);
    };

    // Invert number in the field F(num)
    BN.prototype.invm = function invm (num) {
      return this.egcd(num).a.umod(num);
    };

    BN.prototype.isEven = function isEven () {
      return (this.words[0] & 1) === 0;
    };

    BN.prototype.isOdd = function isOdd () {
      return (this.words[0] & 1) === 1;
    };

    // And first word and num
    BN.prototype.andln = function andln (num) {
      return this.words[0] & num;
    };

    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn (bit) {
      assert(typeof bit === 'number');
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) {
        this._expand(s + 1);
        this.words[s] |= q;
        return this;
      }

      // Add bit and propagate, if needed
      var carry = q;
      for (var i = s; carry !== 0 && i < this.length; i++) {
        var w = this.words[i] | 0;
        w += carry;
        carry = w >>> 26;
        w &= 0x3ffffff;
        this.words[i] = w;
      }
      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }
      return this;
    };

    BN.prototype.isZero = function isZero () {
      return this.length === 1 && this.words[0] === 0;
    };

    BN.prototype.cmpn = function cmpn (num) {
      var negative = num < 0;

      if (this.negative !== 0 && !negative) return -1;
      if (this.negative === 0 && negative) return 1;

      this.strip();

      var res;
      if (this.length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }

        assert(num <= 0x3ffffff, 'Number is too big');

        var w = this.words[0] | 0;
        res = w === num ? 0 : w < num ? -1 : 1;
      }
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp (num) {
      if (this.negative !== 0 && num.negative === 0) return -1;
      if (this.negative === 0 && num.negative !== 0) return 1;

      var res = this.ucmp(num);
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Unsigned comparison
    BN.prototype.ucmp = function ucmp (num) {
      // At this point both numbers have the same sign
      if (this.length > num.length) return 1;
      if (this.length < num.length) return -1;

      var res = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var a = this.words[i] | 0;
        var b = num.words[i] | 0;

        if (a === b) continue;
        if (a < b) {
          res = -1;
        } else if (a > b) {
          res = 1;
        }
        break;
      }
      return res;
    };

    BN.prototype.gtn = function gtn (num) {
      return this.cmpn(num) === 1;
    };

    BN.prototype.gt = function gt (num) {
      return this.cmp(num) === 1;
    };

    BN.prototype.gten = function gten (num) {
      return this.cmpn(num) >= 0;
    };

    BN.prototype.gte = function gte (num) {
      return this.cmp(num) >= 0;
    };

    BN.prototype.ltn = function ltn (num) {
      return this.cmpn(num) === -1;
    };

    BN.prototype.lt = function lt (num) {
      return this.cmp(num) === -1;
    };

    BN.prototype.lten = function lten (num) {
      return this.cmpn(num) <= 0;
    };

    BN.prototype.lte = function lte (num) {
      return this.cmp(num) <= 0;
    };

    BN.prototype.eqn = function eqn (num) {
      return this.cmpn(num) === 0;
    };

    BN.prototype.eq = function eq (num) {
      return this.cmp(num) === 0;
    };

    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red (num) {
      return new Red(num);
    };

    BN.prototype.toRed = function toRed (ctx) {
      assert(!this.red, 'Already a number in reduction context');
      assert(this.negative === 0, 'red works only with positives');
      return ctx.convertTo(this)._forceRed(ctx);
    };

    BN.prototype.fromRed = function fromRed () {
      assert(this.red, 'fromRed works only with numbers in reduction context');
      return this.red.convertFrom(this);
    };

    BN.prototype._forceRed = function _forceRed (ctx) {
      this.red = ctx;
      return this;
    };

    BN.prototype.forceRed = function forceRed (ctx) {
      assert(!this.red, 'Already a number in reduction context');
      return this._forceRed(ctx);
    };

    BN.prototype.redAdd = function redAdd (num) {
      assert(this.red, 'redAdd works only with red numbers');
      return this.red.add(this, num);
    };

    BN.prototype.redIAdd = function redIAdd (num) {
      assert(this.red, 'redIAdd works only with red numbers');
      return this.red.iadd(this, num);
    };

    BN.prototype.redSub = function redSub (num) {
      assert(this.red, 'redSub works only with red numbers');
      return this.red.sub(this, num);
    };

    BN.prototype.redISub = function redISub (num) {
      assert(this.red, 'redISub works only with red numbers');
      return this.red.isub(this, num);
    };

    BN.prototype.redShl = function redShl (num) {
      assert(this.red, 'redShl works only with red numbers');
      return this.red.shl(this, num);
    };

    BN.prototype.redMul = function redMul (num) {
      assert(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.mul(this, num);
    };

    BN.prototype.redIMul = function redIMul (num) {
      assert(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.imul(this, num);
    };

    BN.prototype.redSqr = function redSqr () {
      assert(this.red, 'redSqr works only with red numbers');
      this.red._verify1(this);
      return this.red.sqr(this);
    };

    BN.prototype.redISqr = function redISqr () {
      assert(this.red, 'redISqr works only with red numbers');
      this.red._verify1(this);
      return this.red.isqr(this);
    };

    // Square root over p
    BN.prototype.redSqrt = function redSqrt () {
      assert(this.red, 'redSqrt works only with red numbers');
      this.red._verify1(this);
      return this.red.sqrt(this);
    };

    BN.prototype.redInvm = function redInvm () {
      assert(this.red, 'redInvm works only with red numbers');
      this.red._verify1(this);
      return this.red.invm(this);
    };

    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg () {
      assert(this.red, 'redNeg works only with red numbers');
      this.red._verify1(this);
      return this.red.neg(this);
    };

    BN.prototype.redPow = function redPow (num) {
      assert(this.red && !num.red, 'redPow(normalNum)');
      this.red._verify1(this);
      return this.red.pow(this, num);
    };

    // Prime numbers with efficient reduction
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };

    // Pseudo-Mersenne prime
    function MPrime (name, p) {
      // P = 2 ^ N - K
      this.name = name;
      this.p = new BN(p, 16);
      this.n = this.p.bitLength();
      this.k = new BN(1).iushln(this.n).isub(this.p);

      this.tmp = this._tmp();
    }

    MPrime.prototype._tmp = function _tmp () {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil(this.n / 13));
      return tmp;
    };

    MPrime.prototype.ireduce = function ireduce (num) {
      // Assumes that `num` is less than `P^2`
      // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
      var r = num;
      var rlen;

      do {
        this.split(r, this.tmp);
        r = this.imulK(r);
        r = r.iadd(this.tmp);
        rlen = r.bitLength();
      } while (rlen > this.n);

      var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
      if (cmp === 0) {
        r.words[0] = 0;
        r.length = 1;
      } else if (cmp > 0) {
        r.isub(this.p);
      } else {
        if (r.strip !== undefined) {
          // r is BN v4 instance
          r.strip();
        } else {
          // r is BN v5 instance
          r._strip();
        }
      }

      return r;
    };

    MPrime.prototype.split = function split (input, out) {
      input.iushrn(this.n, 0, out);
    };

    MPrime.prototype.imulK = function imulK (num) {
      return num.imul(this.k);
    };

    function K256 () {
      MPrime.call(
        this,
        'k256',
        'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);

    K256.prototype.split = function split (input, output) {
      // 256 = 9 * 26 + 22
      var mask = 0x3fffff;

      var outLen = Math.min(input.length, 9);
      for (var i = 0; i < outLen; i++) {
        output.words[i] = input.words[i];
      }
      output.length = outLen;

      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }

      // Shift by 9 limbs
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;

      for (i = 10; i < input.length; i++) {
        var next = input.words[i] | 0;
        input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
        prev = next;
      }
      prev >>>= 22;
      input.words[i - 10] = prev;
      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };

    K256.prototype.imulK = function imulK (num) {
      // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;

      // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
      var lo = 0;
      for (var i = 0; i < num.length; i++) {
        var w = num.words[i] | 0;
        lo += w * 0x3d1;
        num.words[i] = lo & 0x3ffffff;
        lo = w * 0x40 + ((lo / 0x4000000) | 0);
      }

      // Fast length reduction
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };

    function P224 () {
      MPrime.call(
        this,
        'p224',
        'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);

    function P192 () {
      MPrime.call(
        this,
        'p192',
        'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);

    function P25519 () {
      // 2 ^ 255 - 19
      MPrime.call(
        this,
        '25519',
        '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);

    P25519.prototype.imulK = function imulK (num) {
      // K = 0x13
      var carry = 0;
      for (var i = 0; i < num.length; i++) {
        var hi = (num.words[i] | 0) * 0x13 + carry;
        var lo = hi & 0x3ffffff;
        hi >>>= 26;

        num.words[i] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };

    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime (name) {
      // Cached version of prime
      if (primes[name]) return primes[name];

      var prime;
      if (name === 'k256') {
        prime = new K256();
      } else if (name === 'p224') {
        prime = new P224();
      } else if (name === 'p192') {
        prime = new P192();
      } else if (name === 'p25519') {
        prime = new P25519();
      } else {
        throw new Error('Unknown prime ' + name);
      }
      primes[name] = prime;

      return prime;
    };

    //
    // Base reduction engine
    //
    function Red (m) {
      if (typeof m === 'string') {
        var prime = BN._prime(m);
        this.m = prime.p;
        this.prime = prime;
      } else {
        assert(m.gtn(1), 'modulus must be greater than 1');
        this.m = m;
        this.prime = null;
      }
    }

    Red.prototype._verify1 = function _verify1 (a) {
      assert(a.negative === 0, 'red works only with positives');
      assert(a.red, 'red works only with red numbers');
    };

    Red.prototype._verify2 = function _verify2 (a, b) {
      assert((a.negative | b.negative) === 0, 'red works only with positives');
      assert(a.red && a.red === b.red,
        'red works only with red numbers');
    };

    Red.prototype.imod = function imod (a) {
      if (this.prime) return this.prime.ireduce(a)._forceRed(this);
      return a.umod(this.m)._forceRed(this);
    };

    Red.prototype.neg = function neg (a) {
      if (a.isZero()) {
        return a.clone();
      }

      return this.m.sub(a)._forceRed(this);
    };

    Red.prototype.add = function add (a, b) {
      this._verify2(a, b);

      var res = a.add(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res._forceRed(this);
    };

    Red.prototype.iadd = function iadd (a, b) {
      this._verify2(a, b);

      var res = a.iadd(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res;
    };

    Red.prototype.sub = function sub (a, b) {
      this._verify2(a, b);

      var res = a.sub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res._forceRed(this);
    };

    Red.prototype.isub = function isub (a, b) {
      this._verify2(a, b);

      var res = a.isub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res;
    };

    Red.prototype.shl = function shl (a, num) {
      this._verify1(a);
      return this.imod(a.ushln(num));
    };

    Red.prototype.imul = function imul (a, b) {
      this._verify2(a, b);
      return this.imod(a.imul(b));
    };

    Red.prototype.mul = function mul (a, b) {
      this._verify2(a, b);
      return this.imod(a.mul(b));
    };

    Red.prototype.isqr = function isqr (a) {
      return this.imul(a, a.clone());
    };

    Red.prototype.sqr = function sqr (a) {
      return this.mul(a, a);
    };

    Red.prototype.sqrt = function sqrt (a) {
      if (a.isZero()) return a.clone();

      var mod3 = this.m.andln(3);
      assert(mod3 % 2 === 1);

      // Fast case
      if (mod3 === 3) {
        var pow = this.m.add(new BN(1)).iushrn(2);
        return this.pow(a, pow);
      }

      // Tonelli-Shanks algorithm (Totally unoptimized and slow)
      //
      // Find Q and S, that Q * 2 ^ S = (P - 1)
      var q = this.m.subn(1);
      var s = 0;
      while (!q.isZero() && q.andln(1) === 0) {
        s++;
        q.iushrn(1);
      }
      assert(!q.isZero());

      var one = new BN(1).toRed(this);
      var nOne = one.redNeg();

      // Find quadratic non-residue
      // NOTE: Max is such because of generalized Riemann hypothesis.
      var lpow = this.m.subn(1).iushrn(1);
      var z = this.m.bitLength();
      z = new BN(2 * z * z).toRed(this);

      while (this.pow(z, lpow).cmp(nOne) !== 0) {
        z.redIAdd(nOne);
      }

      var c = this.pow(z, q);
      var r = this.pow(a, q.addn(1).iushrn(1));
      var t = this.pow(a, q);
      var m = s;
      while (t.cmp(one) !== 0) {
        var tmp = t;
        for (var i = 0; tmp.cmp(one) !== 0; i++) {
          tmp = tmp.redSqr();
        }
        assert(i < m);
        var b = this.pow(c, new BN(1).iushln(m - i - 1));

        r = r.redMul(b);
        c = b.redSqr();
        t = t.redMul(c);
        m = i;
      }

      return r;
    };

    Red.prototype.invm = function invm (a) {
      var inv = a._invmp(this.m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };

    Red.prototype.pow = function pow (a, num) {
      if (num.isZero()) return new BN(1).toRed(this);
      if (num.cmpn(1) === 0) return a.clone();

      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this);
      wnd[1] = a;
      for (var i = 2; i < wnd.length; i++) {
        wnd[i] = this.mul(wnd[i - 1], a);
      }

      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }

      for (i = num.length - 1; i >= 0; i--) {
        var word = num.words[i];
        for (var j = start - 1; j >= 0; j--) {
          var bit = (word >> j) & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }

          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }

          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }

      return res;
    };

    Red.prototype.convertTo = function convertTo (num) {
      var r = num.umod(this.m);

      return r === num ? r.clone() : r;
    };

    Red.prototype.convertFrom = function convertFrom (num) {
      var res = num.clone();
      res.red = null;
      return res;
    };

    //
    // Montgomery method engine
    //

    BN.mont = function mont (num) {
      return new Mont(num);
    };

    function Mont (m) {
      Red.call(this, m);

      this.shift = this.m.bitLength();
      if (this.shift % 26 !== 0) {
        this.shift += 26 - (this.shift % 26);
      }

      this.r = new BN(1).iushln(this.shift);
      this.r2 = this.imod(this.r.sqr());
      this.rinv = this.r._invmp(this.m);

      this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
      this.minv = this.minv.umod(this.r);
      this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);

    Mont.prototype.convertTo = function convertTo (num) {
      return this.imod(num.ushln(this.shift));
    };

    Mont.prototype.convertFrom = function convertFrom (num) {
      var r = this.imod(num.mul(this.rinv));
      r.red = null;
      return r;
    };

    Mont.prototype.imul = function imul (a, b) {
      if (a.isZero() || b.isZero()) {
        a.words[0] = 0;
        a.length = 1;
        return a;
      }

      var t = a.imul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;

      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.mul = function mul (a, b) {
      if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

      var t = a.mul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;
      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.invm = function invm (a) {
      // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
      var res = this.imod(a._invmp(this.m).mul(this.r2));
      return res._forceRed(this);
    };
  })(module, commonjsGlobal);
  }(bn));

  var BN = bn.exports;

  var hash$1 = {};

  var utils$9 = {};

  var minimalisticAssert$1 = assert$b;

  function assert$b(val, msg) {
    if (!val)
      throw new Error(msg || 'Assertion failed');
  }

  assert$b.equal = function assertEqual(l, r, msg) {
    if (l != r)
      throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
  };

  var inherits_browser$1 = {exports: {}};

  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    inherits_browser$1.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      }
    };
  } else {
    // old school shim for old browsers
    inherits_browser$1.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
    };
  }

  var assert$a = minimalisticAssert$1;
  var inherits = inherits_browser$1.exports;

  utils$9.inherits = inherits;

  function isSurrogatePair(msg, i) {
    if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
      return false;
    }
    if (i < 0 || i + 1 >= msg.length) {
      return false;
    }
    return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
  }

  function toArray(msg, enc) {
    if (Array.isArray(msg))
      return msg.slice();
    if (!msg)
      return [];
    var res = [];
    if (typeof msg === 'string') {
      if (!enc) {
        // Inspired by stringToUtf8ByteArray() in closure-library by Google
        // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
        // Apache License 2.0
        // https://github.com/google/closure-library/blob/master/LICENSE
        var p = 0;
        for (var i = 0; i < msg.length; i++) {
          var c = msg.charCodeAt(i);
          if (c < 128) {
            res[p++] = c;
          } else if (c < 2048) {
            res[p++] = (c >> 6) | 192;
            res[p++] = (c & 63) | 128;
          } else if (isSurrogatePair(msg, i)) {
            c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
            res[p++] = (c >> 18) | 240;
            res[p++] = ((c >> 12) & 63) | 128;
            res[p++] = ((c >> 6) & 63) | 128;
            res[p++] = (c & 63) | 128;
          } else {
            res[p++] = (c >> 12) | 224;
            res[p++] = ((c >> 6) & 63) | 128;
            res[p++] = (c & 63) | 128;
          }
        }
      } else if (enc === 'hex') {
        msg = msg.replace(/[^a-z0-9]+/ig, '');
        if (msg.length % 2 !== 0)
          msg = '0' + msg;
        for (i = 0; i < msg.length; i += 2)
          res.push(parseInt(msg[i] + msg[i + 1], 16));
      }
    } else {
      for (i = 0; i < msg.length; i++)
        res[i] = msg[i] | 0;
    }
    return res;
  }
  utils$9.toArray = toArray;

  function toHex(msg) {
    var res = '';
    for (var i = 0; i < msg.length; i++)
      res += zero2(msg[i].toString(16));
    return res;
  }
  utils$9.toHex = toHex;

  function htonl(w) {
    var res = (w >>> 24) |
              ((w >>> 8) & 0xff00) |
              ((w << 8) & 0xff0000) |
              ((w & 0xff) << 24);
    return res >>> 0;
  }
  utils$9.htonl = htonl;

  function toHex32(msg, endian) {
    var res = '';
    for (var i = 0; i < msg.length; i++) {
      var w = msg[i];
      if (endian === 'little')
        w = htonl(w);
      res += zero8(w.toString(16));
    }
    return res;
  }
  utils$9.toHex32 = toHex32;

  function zero2(word) {
    if (word.length === 1)
      return '0' + word;
    else
      return word;
  }
  utils$9.zero2 = zero2;

  function zero8(word) {
    if (word.length === 7)
      return '0' + word;
    else if (word.length === 6)
      return '00' + word;
    else if (word.length === 5)
      return '000' + word;
    else if (word.length === 4)
      return '0000' + word;
    else if (word.length === 3)
      return '00000' + word;
    else if (word.length === 2)
      return '000000' + word;
    else if (word.length === 1)
      return '0000000' + word;
    else
      return word;
  }
  utils$9.zero8 = zero8;

  function join32(msg, start, end, endian) {
    var len = end - start;
    assert$a(len % 4 === 0);
    var res = new Array(len / 4);
    for (var i = 0, k = start; i < res.length; i++, k += 4) {
      var w;
      if (endian === 'big')
        w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
      else
        w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
      res[i] = w >>> 0;
    }
    return res;
  }
  utils$9.join32 = join32;

  function split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
      var m = msg[i];
      if (endian === 'big') {
        res[k] = m >>> 24;
        res[k + 1] = (m >>> 16) & 0xff;
        res[k + 2] = (m >>> 8) & 0xff;
        res[k + 3] = m & 0xff;
      } else {
        res[k + 3] = m >>> 24;
        res[k + 2] = (m >>> 16) & 0xff;
        res[k + 1] = (m >>> 8) & 0xff;
        res[k] = m & 0xff;
      }
    }
    return res;
  }
  utils$9.split32 = split32;

  function rotr32$1(w, b) {
    return (w >>> b) | (w << (32 - b));
  }
  utils$9.rotr32 = rotr32$1;

  function rotl32$2(w, b) {
    return (w << b) | (w >>> (32 - b));
  }
  utils$9.rotl32 = rotl32$2;

  function sum32$3(a, b) {
    return (a + b) >>> 0;
  }
  utils$9.sum32 = sum32$3;

  function sum32_3$1(a, b, c) {
    return (a + b + c) >>> 0;
  }
  utils$9.sum32_3 = sum32_3$1;

  function sum32_4$2(a, b, c, d) {
    return (a + b + c + d) >>> 0;
  }
  utils$9.sum32_4 = sum32_4$2;

  function sum32_5$2(a, b, c, d, e) {
    return (a + b + c + d + e) >>> 0;
  }
  utils$9.sum32_5 = sum32_5$2;

  function sum64$1(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];

    var lo = (al + bl) >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
  }
  utils$9.sum64 = sum64$1;

  function sum64_hi$1(ah, al, bh, bl) {
    var lo = (al + bl) >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
  }
  utils$9.sum64_hi = sum64_hi$1;

  function sum64_lo$1(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
  }
  utils$9.sum64_lo = sum64_lo$1;

  function sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = (lo + bl) >>> 0;
    carry += lo < al ? 1 : 0;
    lo = (lo + cl) >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = (lo + dl) >>> 0;
    carry += lo < dl ? 1 : 0;

    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
  }
  utils$9.sum64_4_hi = sum64_4_hi$1;

  function sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
  }
  utils$9.sum64_4_lo = sum64_4_lo$1;

  function sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = (lo + bl) >>> 0;
    carry += lo < al ? 1 : 0;
    lo = (lo + cl) >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = (lo + dl) >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = (lo + el) >>> 0;
    carry += lo < el ? 1 : 0;

    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
  }
  utils$9.sum64_5_hi = sum64_5_hi$1;

  function sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;

    return lo >>> 0;
  }
  utils$9.sum64_5_lo = sum64_5_lo$1;

  function rotr64_hi$1(ah, al, num) {
    var r = (al << (32 - num)) | (ah >>> num);
    return r >>> 0;
  }
  utils$9.rotr64_hi = rotr64_hi$1;

  function rotr64_lo$1(ah, al, num) {
    var r = (ah << (32 - num)) | (al >>> num);
    return r >>> 0;
  }
  utils$9.rotr64_lo = rotr64_lo$1;

  function shr64_hi$1(ah, al, num) {
    return ah >>> num;
  }
  utils$9.shr64_hi = shr64_hi$1;

  function shr64_lo$1(ah, al, num) {
    var r = (ah << (32 - num)) | (al >>> num);
    return r >>> 0;
  }
  utils$9.shr64_lo = shr64_lo$1;

  var common$5 = {};

  var utils$8 = utils$9;
  var assert$9 = minimalisticAssert$1;

  function BlockHash$4() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = 'big';

    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
  }
  common$5.BlockHash = BlockHash$4;

  BlockHash$4.prototype.update = function update(msg, enc) {
    // Convert message to array, pad it, and join into 32bit blocks
    msg = utils$8.toArray(msg, enc);
    if (!this.pending)
      this.pending = msg;
    else
      this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;

    // Enough data, try updating
    if (this.pending.length >= this._delta8) {
      msg = this.pending;

      // Process pending data in blocks
      var r = msg.length % this._delta8;
      this.pending = msg.slice(msg.length - r, msg.length);
      if (this.pending.length === 0)
        this.pending = null;

      msg = utils$8.join32(msg, 0, msg.length - r, this.endian);
      for (var i = 0; i < msg.length; i += this._delta32)
        this._update(msg, i, i + this._delta32);
    }

    return this;
  };

  BlockHash$4.prototype.digest = function digest(enc) {
    this.update(this._pad());
    assert$9(this.pending === null);

    return this._digest(enc);
  };

  BlockHash$4.prototype._pad = function pad() {
    var len = this.pendingTotal;
    var bytes = this._delta8;
    var k = bytes - ((len + this.padLength) % bytes);
    var res = new Array(k + this.padLength);
    res[0] = 0x80;
    for (var i = 1; i < k; i++)
      res[i] = 0;

    // Append length
    len <<= 3;
    if (this.endian === 'big') {
      for (var t = 8; t < this.padLength; t++)
        res[i++] = 0;

      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = (len >>> 24) & 0xff;
      res[i++] = (len >>> 16) & 0xff;
      res[i++] = (len >>> 8) & 0xff;
      res[i++] = len & 0xff;
    } else {
      res[i++] = len & 0xff;
      res[i++] = (len >>> 8) & 0xff;
      res[i++] = (len >>> 16) & 0xff;
      res[i++] = (len >>> 24) & 0xff;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;

      for (t = 8; t < this.padLength; t++)
        res[i++] = 0;
    }

    return res;
  };

  var sha = {};

  var common$4 = {};

  var utils$7 = utils$9;
  var rotr32 = utils$7.rotr32;

  function ft_1$1(s, x, y, z) {
    if (s === 0)
      return ch32$1(x, y, z);
    if (s === 1 || s === 3)
      return p32(x, y, z);
    if (s === 2)
      return maj32$1(x, y, z);
  }
  common$4.ft_1 = ft_1$1;

  function ch32$1(x, y, z) {
    return (x & y) ^ ((~x) & z);
  }
  common$4.ch32 = ch32$1;

  function maj32$1(x, y, z) {
    return (x & y) ^ (x & z) ^ (y & z);
  }
  common$4.maj32 = maj32$1;

  function p32(x, y, z) {
    return x ^ y ^ z;
  }
  common$4.p32 = p32;

  function s0_256$1(x) {
    return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
  }
  common$4.s0_256 = s0_256$1;

  function s1_256$1(x) {
    return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
  }
  common$4.s1_256 = s1_256$1;

  function g0_256$1(x) {
    return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
  }
  common$4.g0_256 = g0_256$1;

  function g1_256$1(x) {
    return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
  }
  common$4.g1_256 = g1_256$1;

  var utils$6 = utils$9;
  var common$3 = common$5;
  var shaCommon$1 = common$4;

  var rotl32$1 = utils$6.rotl32;
  var sum32$2 = utils$6.sum32;
  var sum32_5$1 = utils$6.sum32_5;
  var ft_1 = shaCommon$1.ft_1;
  var BlockHash$3 = common$3.BlockHash;

  var sha1_K = [
    0x5A827999, 0x6ED9EBA1,
    0x8F1BBCDC, 0xCA62C1D6
  ];

  function SHA1() {
    if (!(this instanceof SHA1))
      return new SHA1();

    BlockHash$3.call(this);
    this.h = [
      0x67452301, 0xefcdab89, 0x98badcfe,
      0x10325476, 0xc3d2e1f0 ];
    this.W = new Array(80);
  }

  utils$6.inherits(SHA1, BlockHash$3);
  var _1 = SHA1;

  SHA1.blockSize = 512;
  SHA1.outSize = 160;
  SHA1.hmacStrength = 80;
  SHA1.padLength = 64;

  SHA1.prototype._update = function _update(msg, start) {
    var W = this.W;

    for (var i = 0; i < 16; i++)
      W[i] = msg[start + i];

    for(; i < W.length; i++)
      W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];

    for (i = 0; i < W.length; i++) {
      var s = ~~(i / 20);
      var t = sum32_5$1(rotl32$1(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
      e = d;
      d = c;
      c = rotl32$1(b, 30);
      b = a;
      a = t;
    }

    this.h[0] = sum32$2(this.h[0], a);
    this.h[1] = sum32$2(this.h[1], b);
    this.h[2] = sum32$2(this.h[2], c);
    this.h[3] = sum32$2(this.h[3], d);
    this.h[4] = sum32$2(this.h[4], e);
  };

  SHA1.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils$6.toHex32(this.h, 'big');
    else
      return utils$6.split32(this.h, 'big');
  };

  var utils$5 = utils$9;
  var common$2 = common$5;
  var shaCommon = common$4;
  var assert$8 = minimalisticAssert$1;

  var sum32$1 = utils$5.sum32;
  var sum32_4$1 = utils$5.sum32_4;
  var sum32_5 = utils$5.sum32_5;
  var ch32 = shaCommon.ch32;
  var maj32 = shaCommon.maj32;
  var s0_256 = shaCommon.s0_256;
  var s1_256 = shaCommon.s1_256;
  var g0_256 = shaCommon.g0_256;
  var g1_256 = shaCommon.g1_256;

  var BlockHash$2 = common$2.BlockHash;

  var sha256_K = [
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
    0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
    0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
    0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
    0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
    0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
    0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
  ];

  function SHA256$1() {
    if (!(this instanceof SHA256$1))
      return new SHA256$1();

    BlockHash$2.call(this);
    this.h = [
      0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
      0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
    ];
    this.k = sha256_K;
    this.W = new Array(64);
  }
  utils$5.inherits(SHA256$1, BlockHash$2);
  var _256 = SHA256$1;

  SHA256$1.blockSize = 512;
  SHA256$1.outSize = 256;
  SHA256$1.hmacStrength = 192;
  SHA256$1.padLength = 64;

  SHA256$1.prototype._update = function _update(msg, start) {
    var W = this.W;

    for (var i = 0; i < 16; i++)
      W[i] = msg[start + i];
    for (; i < W.length; i++)
      W[i] = sum32_4$1(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    var f = this.h[5];
    var g = this.h[6];
    var h = this.h[7];

    assert$8(this.k.length === W.length);
    for (i = 0; i < W.length; i++) {
      var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
      var T2 = sum32$1(s0_256(a), maj32(a, b, c));
      h = g;
      g = f;
      f = e;
      e = sum32$1(d, T1);
      d = c;
      c = b;
      b = a;
      a = sum32$1(T1, T2);
    }

    this.h[0] = sum32$1(this.h[0], a);
    this.h[1] = sum32$1(this.h[1], b);
    this.h[2] = sum32$1(this.h[2], c);
    this.h[3] = sum32$1(this.h[3], d);
    this.h[4] = sum32$1(this.h[4], e);
    this.h[5] = sum32$1(this.h[5], f);
    this.h[6] = sum32$1(this.h[6], g);
    this.h[7] = sum32$1(this.h[7], h);
  };

  SHA256$1.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils$5.toHex32(this.h, 'big');
    else
      return utils$5.split32(this.h, 'big');
  };

  var utils$4 = utils$9;
  var SHA256 = _256;

  function SHA224() {
    if (!(this instanceof SHA224))
      return new SHA224();

    SHA256.call(this);
    this.h = [
      0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
      0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
  }
  utils$4.inherits(SHA224, SHA256);
  var _224 = SHA224;

  SHA224.blockSize = 512;
  SHA224.outSize = 224;
  SHA224.hmacStrength = 192;
  SHA224.padLength = 64;

  SHA224.prototype._digest = function digest(enc) {
    // Just truncate output
    if (enc === 'hex')
      return utils$4.toHex32(this.h.slice(0, 7), 'big');
    else
      return utils$4.split32(this.h.slice(0, 7), 'big');
  };

  var utils$3 = utils$9;
  var common$1 = common$5;
  var assert$7 = minimalisticAssert$1;

  var rotr64_hi = utils$3.rotr64_hi;
  var rotr64_lo = utils$3.rotr64_lo;
  var shr64_hi = utils$3.shr64_hi;
  var shr64_lo = utils$3.shr64_lo;
  var sum64 = utils$3.sum64;
  var sum64_hi = utils$3.sum64_hi;
  var sum64_lo = utils$3.sum64_lo;
  var sum64_4_hi = utils$3.sum64_4_hi;
  var sum64_4_lo = utils$3.sum64_4_lo;
  var sum64_5_hi = utils$3.sum64_5_hi;
  var sum64_5_lo = utils$3.sum64_5_lo;

  var BlockHash$1 = common$1.BlockHash;

  var sha512_K = [
    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
  ];

  function SHA512$1() {
    if (!(this instanceof SHA512$1))
      return new SHA512$1();

    BlockHash$1.call(this);
    this.h = [
      0x6a09e667, 0xf3bcc908,
      0xbb67ae85, 0x84caa73b,
      0x3c6ef372, 0xfe94f82b,
      0xa54ff53a, 0x5f1d36f1,
      0x510e527f, 0xade682d1,
      0x9b05688c, 0x2b3e6c1f,
      0x1f83d9ab, 0xfb41bd6b,
      0x5be0cd19, 0x137e2179 ];
    this.k = sha512_K;
    this.W = new Array(160);
  }
  utils$3.inherits(SHA512$1, BlockHash$1);
  var _512 = SHA512$1;

  SHA512$1.blockSize = 1024;
  SHA512$1.outSize = 512;
  SHA512$1.hmacStrength = 192;
  SHA512$1.padLength = 128;

  SHA512$1.prototype._prepareBlock = function _prepareBlock(msg, start) {
    var W = this.W;

    // 32 x 32bit words
    for (var i = 0; i < 32; i++)
      W[i] = msg[start + i];
    for (; i < W.length; i += 2) {
      var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
      var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
      var c1_hi = W[i - 14];  // i - 7
      var c1_lo = W[i - 13];
      var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
      var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
      var c3_hi = W[i - 32];  // i - 16
      var c3_lo = W[i - 31];

      W[i] = sum64_4_hi(
        c0_hi, c0_lo,
        c1_hi, c1_lo,
        c2_hi, c2_lo,
        c3_hi, c3_lo);
      W[i + 1] = sum64_4_lo(
        c0_hi, c0_lo,
        c1_hi, c1_lo,
        c2_hi, c2_lo,
        c3_hi, c3_lo);
    }
  };

  SHA512$1.prototype._update = function _update(msg, start) {
    this._prepareBlock(msg, start);

    var W = this.W;

    var ah = this.h[0];
    var al = this.h[1];
    var bh = this.h[2];
    var bl = this.h[3];
    var ch = this.h[4];
    var cl = this.h[5];
    var dh = this.h[6];
    var dl = this.h[7];
    var eh = this.h[8];
    var el = this.h[9];
    var fh = this.h[10];
    var fl = this.h[11];
    var gh = this.h[12];
    var gl = this.h[13];
    var hh = this.h[14];
    var hl = this.h[15];

    assert$7(this.k.length === W.length);
    for (var i = 0; i < W.length; i += 2) {
      var c0_hi = hh;
      var c0_lo = hl;
      var c1_hi = s1_512_hi(eh, el);
      var c1_lo = s1_512_lo(eh, el);
      var c2_hi = ch64_hi(eh, el, fh, fl, gh);
      var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
      var c3_hi = this.k[i];
      var c3_lo = this.k[i + 1];
      var c4_hi = W[i];
      var c4_lo = W[i + 1];

      var T1_hi = sum64_5_hi(
        c0_hi, c0_lo,
        c1_hi, c1_lo,
        c2_hi, c2_lo,
        c3_hi, c3_lo,
        c4_hi, c4_lo);
      var T1_lo = sum64_5_lo(
        c0_hi, c0_lo,
        c1_hi, c1_lo,
        c2_hi, c2_lo,
        c3_hi, c3_lo,
        c4_hi, c4_lo);

      c0_hi = s0_512_hi(ah, al);
      c0_lo = s0_512_lo(ah, al);
      c1_hi = maj64_hi(ah, al, bh, bl, ch);
      c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

      var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
      var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

      hh = gh;
      hl = gl;

      gh = fh;
      gl = fl;

      fh = eh;
      fl = el;

      eh = sum64_hi(dh, dl, T1_hi, T1_lo);
      el = sum64_lo(dl, dl, T1_hi, T1_lo);

      dh = ch;
      dl = cl;

      ch = bh;
      cl = bl;

      bh = ah;
      bl = al;

      ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
      al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
    }

    sum64(this.h, 0, ah, al);
    sum64(this.h, 2, bh, bl);
    sum64(this.h, 4, ch, cl);
    sum64(this.h, 6, dh, dl);
    sum64(this.h, 8, eh, el);
    sum64(this.h, 10, fh, fl);
    sum64(this.h, 12, gh, gl);
    sum64(this.h, 14, hh, hl);
  };

  SHA512$1.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils$3.toHex32(this.h, 'big');
    else
      return utils$3.split32(this.h, 'big');
  };

  function ch64_hi(xh, xl, yh, yl, zh) {
    var r = (xh & yh) ^ ((~xh) & zh);
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function ch64_lo(xh, xl, yh, yl, zh, zl) {
    var r = (xl & yl) ^ ((~xl) & zl);
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function maj64_hi(xh, xl, yh, yl, zh) {
    var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function maj64_lo(xh, xl, yh, yl, zh, zl) {
    var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function s0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 28);
    var c1_hi = rotr64_hi(xl, xh, 2);  // 34
    var c2_hi = rotr64_hi(xl, xh, 7);  // 39

    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function s0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 28);
    var c1_lo = rotr64_lo(xl, xh, 2);  // 34
    var c2_lo = rotr64_lo(xl, xh, 7);  // 39

    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function s1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 14);
    var c1_hi = rotr64_hi(xh, xl, 18);
    var c2_hi = rotr64_hi(xl, xh, 9);  // 41

    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function s1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 14);
    var c1_lo = rotr64_lo(xh, xl, 18);
    var c2_lo = rotr64_lo(xl, xh, 9);  // 41

    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function g0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 1);
    var c1_hi = rotr64_hi(xh, xl, 8);
    var c2_hi = shr64_hi(xh, xl, 7);

    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function g0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 1);
    var c1_lo = rotr64_lo(xh, xl, 8);
    var c2_lo = shr64_lo(xh, xl, 7);

    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function g1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 19);
    var c1_hi = rotr64_hi(xl, xh, 29);  // 61
    var c2_hi = shr64_hi(xh, xl, 6);

    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function g1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 19);
    var c1_lo = rotr64_lo(xl, xh, 29);  // 61
    var c2_lo = shr64_lo(xh, xl, 6);

    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  var utils$2 = utils$9;

  var SHA512 = _512;

  function SHA384() {
    if (!(this instanceof SHA384))
      return new SHA384();

    SHA512.call(this);
    this.h = [
      0xcbbb9d5d, 0xc1059ed8,
      0x629a292a, 0x367cd507,
      0x9159015a, 0x3070dd17,
      0x152fecd8, 0xf70e5939,
      0x67332667, 0xffc00b31,
      0x8eb44a87, 0x68581511,
      0xdb0c2e0d, 0x64f98fa7,
      0x47b5481d, 0xbefa4fa4 ];
  }
  utils$2.inherits(SHA384, SHA512);
  var _384 = SHA384;

  SHA384.blockSize = 1024;
  SHA384.outSize = 384;
  SHA384.hmacStrength = 192;
  SHA384.padLength = 128;

  SHA384.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils$2.toHex32(this.h.slice(0, 12), 'big');
    else
      return utils$2.split32(this.h.slice(0, 12), 'big');
  };

  sha.sha1 = _1;
  sha.sha224 = _224;
  sha.sha256 = _256;
  sha.sha384 = _384;
  sha.sha512 = _512;

  var ripemd = {};

  var utils$1 = utils$9;
  var common = common$5;

  var rotl32 = utils$1.rotl32;
  var sum32 = utils$1.sum32;
  var sum32_3 = utils$1.sum32_3;
  var sum32_4 = utils$1.sum32_4;
  var BlockHash = common.BlockHash;

  function RIPEMD160() {
    if (!(this instanceof RIPEMD160))
      return new RIPEMD160();

    BlockHash.call(this);

    this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
    this.endian = 'little';
  }
  utils$1.inherits(RIPEMD160, BlockHash);
  ripemd.ripemd160 = RIPEMD160;

  RIPEMD160.blockSize = 512;
  RIPEMD160.outSize = 160;
  RIPEMD160.hmacStrength = 192;
  RIPEMD160.padLength = 64;

  RIPEMD160.prototype._update = function update(msg, start) {
    var A = this.h[0];
    var B = this.h[1];
    var C = this.h[2];
    var D = this.h[3];
    var E = this.h[4];
    var Ah = A;
    var Bh = B;
    var Ch = C;
    var Dh = D;
    var Eh = E;
    for (var j = 0; j < 80; j++) {
      var T = sum32(
        rotl32(
          sum32_4(A, f$2(j, B, C, D), msg[r$2[j] + start], K(j)),
          s[j]),
        E);
      A = E;
      E = D;
      D = rotl32(C, 10);
      C = B;
      B = T;
      T = sum32(
        rotl32(
          sum32_4(Ah, f$2(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
          sh[j]),
        Eh);
      Ah = Eh;
      Eh = Dh;
      Dh = rotl32(Ch, 10);
      Ch = Bh;
      Bh = T;
    }
    T = sum32_3(this.h[1], C, Dh);
    this.h[1] = sum32_3(this.h[2], D, Eh);
    this.h[2] = sum32_3(this.h[3], E, Ah);
    this.h[3] = sum32_3(this.h[4], A, Bh);
    this.h[4] = sum32_3(this.h[0], B, Ch);
    this.h[0] = T;
  };

  RIPEMD160.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils$1.toHex32(this.h, 'little');
    else
      return utils$1.split32(this.h, 'little');
  };

  function f$2(j, x, y, z) {
    if (j <= 15)
      return x ^ y ^ z;
    else if (j <= 31)
      return (x & y) | ((~x) & z);
    else if (j <= 47)
      return (x | (~y)) ^ z;
    else if (j <= 63)
      return (x & z) | (y & (~z));
    else
      return x ^ (y | (~z));
  }

  function K(j) {
    if (j <= 15)
      return 0x00000000;
    else if (j <= 31)
      return 0x5a827999;
    else if (j <= 47)
      return 0x6ed9eba1;
    else if (j <= 63)
      return 0x8f1bbcdc;
    else
      return 0xa953fd4e;
  }

  function Kh(j) {
    if (j <= 15)
      return 0x50a28be6;
    else if (j <= 31)
      return 0x5c4dd124;
    else if (j <= 47)
      return 0x6d703ef3;
    else if (j <= 63)
      return 0x7a6d76e9;
    else
      return 0x00000000;
  }

  var r$2 = [
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
    7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
    3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
    1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
    4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
  ];

  var rh = [
    5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
    6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
    15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
    8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
    12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
  ];

  var s = [
    11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
    7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
    11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
    11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
    9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
  ];

  var sh = [
    8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
    9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
    9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
    15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
    8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
  ];

  var utils = utils$9;
  var assert$6 = minimalisticAssert$1;

  function Hmac(hash, key, enc) {
    if (!(this instanceof Hmac))
      return new Hmac(hash, key, enc);
    this.Hash = hash;
    this.blockSize = hash.blockSize / 8;
    this.outSize = hash.outSize / 8;
    this.inner = null;
    this.outer = null;

    this._init(utils.toArray(key, enc));
  }
  var hmac = Hmac;

  Hmac.prototype._init = function init(key) {
    // Shorten key, if needed
    if (key.length > this.blockSize)
      key = new this.Hash().update(key).digest();
    assert$6(key.length <= this.blockSize);

    // Add padding to key
    for (var i = key.length; i < this.blockSize; i++)
      key.push(0);

    for (i = 0; i < key.length; i++)
      key[i] ^= 0x36;
    this.inner = new this.Hash().update(key);

    // 0x36 ^ 0x5c = 0x6a
    for (i = 0; i < key.length; i++)
      key[i] ^= 0x6a;
    this.outer = new this.Hash().update(key);
  };

  Hmac.prototype.update = function update(msg, enc) {
    this.inner.update(msg, enc);
    return this;
  };

  Hmac.prototype.digest = function digest(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
  };

  (function (exports) {
  var hash = exports;

  hash.utils = utils$9;
  hash.common = common$5;
  hash.sha = sha;
  hash.ripemd = ripemd;
  hash.hmac = hmac;

  // Proxy hash functions to the main object
  hash.sha1 = hash.sha.sha1;
  hash.sha256 = hash.sha.sha256;
  hash.sha224 = hash.sha.sha224;
  hash.sha384 = hash.sha.sha384;
  hash.sha512 = hash.sha.sha512;
  hash.ripemd160 = hash.ripemd.ripemd160;
  }(hash$1));

  var hash = hash$1;

  function createCommonjsModule(fn, basedir, module) {
  	return module = {
  		path: basedir,
  		exports: {},
  		require: function (path, base) {
  			return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
  		}
  	}, fn(module, module.exports), module.exports;
  }

  function commonjsRequire () {
  	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
  }

  var minimalisticAssert = assert;

  function assert(val, msg) {
    if (!val)
      throw new Error(msg || 'Assertion failed');
  }

  assert.equal = function assertEqual(l, r, msg) {
    if (l != r)
      throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
  };

  var utils_1 = createCommonjsModule(function (module, exports) {

  var utils = exports;

  function toArray(msg, enc) {
    if (Array.isArray(msg))
      return msg.slice();
    if (!msg)
      return [];
    var res = [];
    if (typeof msg !== 'string') {
      for (var i = 0; i < msg.length; i++)
        res[i] = msg[i] | 0;
      return res;
    }
    if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (var i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    } else {
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi)
          res.push(hi, lo);
        else
          res.push(lo);
      }
    }
    return res;
  }
  utils.toArray = toArray;

  function zero2(word) {
    if (word.length === 1)
      return '0' + word;
    else
      return word;
  }
  utils.zero2 = zero2;

  function toHex(msg) {
    var res = '';
    for (var i = 0; i < msg.length; i++)
      res += zero2(msg[i].toString(16));
    return res;
  }
  utils.toHex = toHex;

  utils.encode = function encode(arr, enc) {
    if (enc === 'hex')
      return toHex(arr);
    else
      return arr;
  };
  });

  var utils_1$1 = createCommonjsModule(function (module, exports) {

  var utils = exports;




  utils.assert = minimalisticAssert;
  utils.toArray = utils_1.toArray;
  utils.zero2 = utils_1.zero2;
  utils.toHex = utils_1.toHex;
  utils.encode = utils_1.encode;

  // Represent num in a w-NAF form
  function getNAF(num, w, bits) {
    var naf = new Array(Math.max(num.bitLength(), bits) + 1);
    naf.fill(0);

    var ws = 1 << (w + 1);
    var k = num.clone();

    for (var i = 0; i < naf.length; i++) {
      var z;
      var mod = k.andln(ws - 1);
      if (k.isOdd()) {
        if (mod > (ws >> 1) - 1)
          z = (ws >> 1) - mod;
        else
          z = mod;
        k.isubn(z);
      } else {
        z = 0;
      }

      naf[i] = z;
      k.iushrn(1);
    }

    return naf;
  }
  utils.getNAF = getNAF;

  // Represent k1, k2 in a Joint Sparse Form
  function getJSF(k1, k2) {
    var jsf = [
      [],
      [],
    ];

    k1 = k1.clone();
    k2 = k2.clone();
    var d1 = 0;
    var d2 = 0;
    var m8;
    while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
      // First phase
      var m14 = (k1.andln(3) + d1) & 3;
      var m24 = (k2.andln(3) + d2) & 3;
      if (m14 === 3)
        m14 = -1;
      if (m24 === 3)
        m24 = -1;
      var u1;
      if ((m14 & 1) === 0) {
        u1 = 0;
      } else {
        m8 = (k1.andln(7) + d1) & 7;
        if ((m8 === 3 || m8 === 5) && m24 === 2)
          u1 = -m14;
        else
          u1 = m14;
      }
      jsf[0].push(u1);

      var u2;
      if ((m24 & 1) === 0) {
        u2 = 0;
      } else {
        m8 = (k2.andln(7) + d2) & 7;
        if ((m8 === 3 || m8 === 5) && m14 === 2)
          u2 = -m24;
        else
          u2 = m24;
      }
      jsf[1].push(u2);

      // Second phase
      if (2 * d1 === u1 + 1)
        d1 = 1 - d1;
      if (2 * d2 === u2 + 1)
        d2 = 1 - d2;
      k1.iushrn(1);
      k2.iushrn(1);
    }

    return jsf;
  }
  utils.getJSF = getJSF;

  function cachedProperty(obj, name, computer) {
    var key = '_' + name;
    obj.prototype[name] = function cachedProperty() {
      return this[key] !== undefined ? this[key] :
        this[key] = computer.call(this);
    };
  }
  utils.cachedProperty = cachedProperty;

  function parseBytes(bytes) {
    return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
      bytes;
  }
  utils.parseBytes = parseBytes;

  function intFromLE(bytes) {
    return new BN(bytes, 'hex', 'le');
  }
  utils.intFromLE = intFromLE;
  });



  var getNAF = utils_1$1.getNAF;
  var getJSF = utils_1$1.getJSF;
  var assert$1 = utils_1$1.assert;

  function BaseCurve(type, conf) {
    this.type = type;
    this.p = new BN(conf.p, 16);

    // Use Montgomery, when there is no fast reduction for the prime
    this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

    // Useful for many curves
    this.zero = new BN(0).toRed(this.red);
    this.one = new BN(1).toRed(this.red);
    this.two = new BN(2).toRed(this.red);

    // Curve configuration, optional
    this.n = conf.n && new BN(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

    // Temporary arrays
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);

    this._bitLength = this.n ? this.n.bitLength() : 0;

    // Generalized Greg Maxwell's trick
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) {
      this.redN = null;
    } else {
      this._maxwellTrick = true;
      this.redN = this.n.toRed(this.red);
    }
  }
  var base$1 = BaseCurve;

  BaseCurve.prototype.point = function point() {
    throw new Error('Not implemented');
  };

  BaseCurve.prototype.validate = function validate() {
    throw new Error('Not implemented');
  };

  BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
    assert$1(p.precomputed);
    var doubles = p._getDoubles();

    var naf = getNAF(k, 1, this._bitLength);
    var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
    I /= 3;

    // Translate into more windowed form
    var repr = [];
    var j;
    var nafW;
    for (j = 0; j < naf.length; j += doubles.step) {
      nafW = 0;
      for (var l = j + doubles.step - 1; l >= j; l--)
        nafW = (nafW << 1) + naf[l];
      repr.push(nafW);
    }

    var a = this.jpoint(null, null, null);
    var b = this.jpoint(null, null, null);
    for (var i = I; i > 0; i--) {
      for (j = 0; j < repr.length; j++) {
        nafW = repr[j];
        if (nafW === i)
          b = b.mixedAdd(doubles.points[j]);
        else if (nafW === -i)
          b = b.mixedAdd(doubles.points[j].neg());
      }
      a = a.add(b);
    }
    return a.toP();
  };

  BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
    var w = 4;

    // Precompute window
    var nafPoints = p._getNAFPoints(w);
    w = nafPoints.wnd;
    var wnd = nafPoints.points;

    // Get NAF form
    var naf = getNAF(k, w, this._bitLength);

    // Add `this`*(N+1) for every w-NAF index
    var acc = this.jpoint(null, null, null);
    for (var i = naf.length - 1; i >= 0; i--) {
      // Count zeroes
      for (var l = 0; i >= 0 && naf[i] === 0; i--)
        l++;
      if (i >= 0)
        l++;
      acc = acc.dblp(l);

      if (i < 0)
        break;
      var z = naf[i];
      assert$1(z !== 0);
      if (p.type === 'affine') {
        // J +- P
        if (z > 0)
          acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
        else
          acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
      } else {
        // J +- J
        if (z > 0)
          acc = acc.add(wnd[(z - 1) >> 1]);
        else
          acc = acc.add(wnd[(-z - 1) >> 1].neg());
      }
    }
    return p.type === 'affine' ? acc.toP() : acc;
  };

  BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
    points,
    coeffs,
    len,
    jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;

    // Fill all arrays
    var max = 0;
    var i;
    var j;
    var p;
    for (i = 0; i < len; i++) {
      p = points[i];
      var nafPoints = p._getNAFPoints(defW);
      wndWidth[i] = nafPoints.wnd;
      wnd[i] = nafPoints.points;
    }

    // Comb small window NAFs
    for (i = len - 1; i >= 1; i -= 2) {
      var a = i - 1;
      var b = i;
      if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
        naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
        naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
        max = Math.max(naf[a].length, max);
        max = Math.max(naf[b].length, max);
        continue;
      }

      var comb = [
        points[a], /* 1 */
        null, /* 3 */
        null, /* 5 */
        points[b], /* 7 */
      ];

      // Try to avoid Projective points, if possible
      if (points[a].y.cmp(points[b].y) === 0) {
        comb[1] = points[a].add(points[b]);
        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
      } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
        comb[1] = points[a].toJ().mixedAdd(points[b]);
        comb[2] = points[a].add(points[b].neg());
      } else {
        comb[1] = points[a].toJ().mixedAdd(points[b]);
        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
      }

      var index = [
        -3, /* -1 -1 */
        -1, /* -1 0 */
        -5, /* -1 1 */
        -7, /* 0 -1 */
        0, /* 0 0 */
        7, /* 0 1 */
        5, /* 1 -1 */
        1, /* 1 0 */
        3,  /* 1 1 */
      ];

      var jsf = getJSF(coeffs[a], coeffs[b]);
      max = Math.max(jsf[0].length, max);
      naf[a] = new Array(max);
      naf[b] = new Array(max);
      for (j = 0; j < max; j++) {
        var ja = jsf[0][j] | 0;
        var jb = jsf[1][j] | 0;

        naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
        naf[b][j] = 0;
        wnd[a] = comb;
      }
    }

    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for (i = max; i >= 0; i--) {
      var k = 0;

      while (i >= 0) {
        var zero = true;
        for (j = 0; j < len; j++) {
          tmp[j] = naf[j][i] | 0;
          if (tmp[j] !== 0)
            zero = false;
        }
        if (!zero)
          break;
        k++;
        i--;
      }
      if (i >= 0)
        k++;
      acc = acc.dblp(k);
      if (i < 0)
        break;

      for (j = 0; j < len; j++) {
        var z = tmp[j];
        if (z === 0)
          continue;
        else if (z > 0)
          p = wnd[j][(z - 1) >> 1];
        else if (z < 0)
          p = wnd[j][(-z - 1) >> 1].neg();

        if (p.type === 'affine')
          acc = acc.mixedAdd(p);
        else
          acc = acc.add(p);
      }
    }
    // Zeroify references
    for (i = 0; i < len; i++)
      wnd[i] = null;

    if (jacobianResult)
      return acc;
    else
      return acc.toP();
  };

  function BasePoint(curve, type) {
    this.curve = curve;
    this.type = type;
    this.precomputed = null;
  }
  BaseCurve.BasePoint = BasePoint;

  BasePoint.prototype.eq = function eq(/*other*/) {
    throw new Error('Not implemented');
  };

  BasePoint.prototype.validate = function validate() {
    return this.curve.validate(this);
  };

  BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    bytes = utils_1$1.toArray(bytes, enc);

    var len = this.p.byteLength();

    // uncompressed, hybrid-odd, hybrid-even
    if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
        bytes.length - 1 === 2 * len) {
      if (bytes[0] === 0x06)
        assert$1(bytes[bytes.length - 1] % 2 === 0);
      else if (bytes[0] === 0x07)
        assert$1(bytes[bytes.length - 1] % 2 === 1);

      var res =  this.point(bytes.slice(1, 1 + len),
        bytes.slice(1 + len, 1 + 2 * len));

      return res;
    } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
                bytes.length - 1 === len) {
      return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
    }
    throw new Error('Unknown point format');
  };

  BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
  };

  BasePoint.prototype._encode = function _encode(compact) {
    var len = this.curve.p.byteLength();
    var x = this.getX().toArray('be', len);

    if (compact)
      return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

    return [ 0x04 ].concat(x, this.getY().toArray('be', len));
  };

  BasePoint.prototype.encode = function encode(enc, compact) {
    return utils_1$1.encode(this._encode(compact), enc);
  };

  BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed)
      return this;

    var precomputed = {
      doubles: null,
      naf: null,
      beta: null,
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;

    return this;
  };

  BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
    if (!this.precomputed)
      return false;

    var doubles = this.precomputed.doubles;
    if (!doubles)
      return false;

    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
  };

  BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles)
      return this.precomputed.doubles;

    var doubles = [ this ];
    var acc = this;
    for (var i = 0; i < power; i += step) {
      for (var j = 0; j < step; j++)
        acc = acc.dbl();
      doubles.push(acc);
    }
    return {
      step: step,
      points: doubles,
    };
  };

  BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf)
      return this.precomputed.naf;

    var res = [ this ];
    var max = (1 << wnd) - 1;
    var dbl = max === 1 ? null : this.dbl();
    for (var i = 1; i < max; i++)
      res[i] = res[i - 1].add(dbl);
    return {
      wnd: wnd,
      points: res,
    };
  };

  BasePoint.prototype._getBeta = function _getBeta() {
    return null;
  };

  BasePoint.prototype.dblp = function dblp(k) {
    var r = this;
    for (var i = 0; i < k; i++)
      r = r.dbl();
    return r;
  };

  var inherits_browser = createCommonjsModule(function (module) {
  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    module.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      }
    };
  } else {
    // old school shim for old browsers
    module.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
    };
  }
  });






  var assert$2 = utils_1$1.assert;

  function ShortCurve(conf) {
    base$1.call(this, 'short', conf);

    this.a = new BN(conf.a, 16).toRed(this.red);
    this.b = new BN(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();

    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

    // If the curve is endomorphic, precalculate beta and lambda
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
  }
  inherits_browser(ShortCurve, base$1);
  var short_1 = ShortCurve;

  ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    // No efficient endomorphism
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
      return;

    // Compute beta and lambda, that lambda * P = (beta * Px; Py)
    var beta;
    var lambda;
    if (conf.beta) {
      beta = new BN(conf.beta, 16).toRed(this.red);
    } else {
      var betas = this._getEndoRoots(this.p);
      // Choose the smallest beta
      beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
      beta = beta.toRed(this.red);
    }
    if (conf.lambda) {
      lambda = new BN(conf.lambda, 16);
    } else {
      // Choose the lambda that is matching selected beta
      var lambdas = this._getEndoRoots(this.n);
      if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
        lambda = lambdas[0];
      } else {
        lambda = lambdas[1];
        assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
      }
    }

    // Get basis vectors, used for balanced length-two representation
    var basis;
    if (conf.basis) {
      basis = conf.basis.map(function(vec) {
        return {
          a: new BN(vec.a, 16),
          b: new BN(vec.b, 16),
        };
      });
    } else {
      basis = this._getEndoBasis(lambda);
    }

    return {
      beta: beta,
      lambda: lambda,
      basis: basis,
    };
  };

  ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    // Find roots of for x^2 + x + 1 in F
    // Root = (-1 +- Sqrt(-3)) / 2
    //
    var red = num === this.p ? this.red : BN.mont(num);
    var tinv = new BN(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();

    var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

    var l1 = ntinv.redAdd(s).fromRed();
    var l2 = ntinv.redSub(s).fromRed();
    return [ l1, l2 ];
  };

  ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    // aprxSqrt >= sqrt(this.n)
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

    // 3.74
    // Run EGCD, until r(L + 1) < aprxSqrt
    var u = lambda;
    var v = this.n.clone();
    var x1 = new BN(1);
    var y1 = new BN(0);
    var x2 = new BN(0);
    var y2 = new BN(1);

    // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
    var a0;
    var b0;
    // First vector
    var a1;
    var b1;
    // Second vector
    var a2;
    var b2;

    var prevR;
    var i = 0;
    var r;
    var x;
    while (u.cmpn(0) !== 0) {
      var q = v.div(u);
      r = v.sub(q.mul(u));
      x = x2.sub(q.mul(x1));
      var y = y2.sub(q.mul(y1));

      if (!a1 && r.cmp(aprxSqrt) < 0) {
        a0 = prevR.neg();
        b0 = x1;
        a1 = r.neg();
        b1 = x;
      } else if (a1 && ++i === 2) {
        break;
      }
      prevR = r;

      v = u;
      u = r;
      x2 = x1;
      x1 = x;
      y2 = y1;
      y1 = y;
    }
    a2 = r.neg();
    b2 = x;

    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a2.sqr().add(b2.sqr());
    if (len2.cmp(len1) >= 0) {
      a2 = a0;
      b2 = b0;
    }

    // Normalize signs
    if (a1.negative) {
      a1 = a1.neg();
      b1 = b1.neg();
    }
    if (a2.negative) {
      a2 = a2.neg();
      b2 = b2.neg();
    }

    return [
      { a: a1, b: b1 },
      { a: a2, b: b2 },
    ];
  };

  ShortCurve.prototype._endoSplit = function _endoSplit(k) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v2 = basis[1];

    var c1 = v2.b.mul(k).divRound(this.n);
    var c2 = v1.b.neg().mul(k).divRound(this.n);

    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b);

    // Calculate answer
    var k1 = k.sub(p1).sub(p2);
    var k2 = q1.add(q2).neg();
    return { k1: k1, k2: k2 };
  };

  ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new BN(x, 16);
    if (!x.red)
      x = x.toRed(this.red);

    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
      throw new Error('invalid point');

    // XXX Is there any way to tell if the number is odd without converting it
    // to non-red form?
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd)
      y = y.redNeg();

    return this.point(x, y);
  };

  ShortCurve.prototype.validate = function validate(point) {
    if (point.inf)
      return true;

    var x = point.x;
    var y = point.y;

    var ax = this.a.redMul(x);
    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
    return y.redSqr().redISub(rhs).cmpn(0) === 0;
  };

  ShortCurve.prototype._endoWnafMulAdd =
      function _endoWnafMulAdd(points, coeffs, jacobianResult) {
        var npoints = this._endoWnafT1;
        var ncoeffs = this._endoWnafT2;
        for (var i = 0; i < points.length; i++) {
          var split = this._endoSplit(coeffs[i]);
          var p = points[i];
          var beta = p._getBeta();

          if (split.k1.negative) {
            split.k1.ineg();
            p = p.neg(true);
          }
          if (split.k2.negative) {
            split.k2.ineg();
            beta = beta.neg(true);
          }

          npoints[i * 2] = p;
          npoints[i * 2 + 1] = beta;
          ncoeffs[i * 2] = split.k1;
          ncoeffs[i * 2 + 1] = split.k2;
        }
        var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

        // Clean-up references to points and coefficients
        for (var j = 0; j < i * 2; j++) {
          npoints[j] = null;
          ncoeffs[j] = null;
        }
        return res;
      };

  function Point(curve, x, y, isRed) {
    base$1.BasePoint.call(this, curve, 'affine');
    if (x === null && y === null) {
      this.x = null;
      this.y = null;
      this.inf = true;
    } else {
      this.x = new BN(x, 16);
      this.y = new BN(y, 16);
      // Force redgomery representation when loading from JSON
      if (isRed) {
        this.x.forceRed(this.curve.red);
        this.y.forceRed(this.curve.red);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      this.inf = false;
    }
  }
  inherits_browser(Point, base$1.BasePoint);

  ShortCurve.prototype.point = function point(x, y, isRed) {
    return new Point(this, x, y, isRed);
  };

  ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return Point.fromJSON(this, obj, red);
  };

  Point.prototype._getBeta = function _getBeta() {
    if (!this.curve.endo)
      return;

    var pre = this.precomputed;
    if (pre && pre.beta)
      return pre.beta;

    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
      var curve = this.curve;
      var endoMul = function(p) {
        return curve.point(p.x.redMul(curve.endo.beta), p.y);
      };
      pre.beta = beta;
      beta.precomputed = {
        beta: null,
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(endoMul),
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(endoMul),
        },
      };
    }
    return beta;
  };

  Point.prototype.toJSON = function toJSON() {
    if (!this.precomputed)
      return [ this.x, this.y ];

    return [ this.x, this.y, this.precomputed && {
      doubles: this.precomputed.doubles && {
        step: this.precomputed.doubles.step,
        points: this.precomputed.doubles.points.slice(1),
      },
      naf: this.precomputed.naf && {
        wnd: this.precomputed.naf.wnd,
        points: this.precomputed.naf.points.slice(1),
      },
    } ];
  };

  Point.fromJSON = function fromJSON(curve, obj, red) {
    if (typeof obj === 'string')
      obj = JSON.parse(obj);
    var res = curve.point(obj[0], obj[1], red);
    if (!obj[2])
      return res;

    function obj2point(obj) {
      return curve.point(obj[0], obj[1], red);
    }

    var pre = obj[2];
    res.precomputed = {
      beta: null,
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: [ res ].concat(pre.doubles.points.map(obj2point)),
      },
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: [ res ].concat(pre.naf.points.map(obj2point)),
      },
    };
    return res;
  };

  Point.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
        ' y: ' + this.y.fromRed().toString(16, 2) + '>';
  };

  Point.prototype.isInfinity = function isInfinity() {
    return this.inf;
  };

  Point.prototype.add = function add(p) {
    // O + P = P
    if (this.inf)
      return p;

    // P + O = P
    if (p.inf)
      return this;

    // P + P = 2P
    if (this.eq(p))
      return this.dbl();

    // P + (-P) = O
    if (this.neg().eq(p))
      return this.curve.point(null, null);

    // P + Q = O
    if (this.x.cmp(p.x) === 0)
      return this.curve.point(null, null);

    var c = this.y.redSub(p.y);
    if (c.cmpn(0) !== 0)
      c = c.redMul(this.x.redSub(p.x).redInvm());
    var nx = c.redSqr().redISub(this.x).redISub(p.x);
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };

  Point.prototype.dbl = function dbl() {
    if (this.inf)
      return this;

    // 2P = O
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0)
      return this.curve.point(null, null);

    var a = this.curve.a;

    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };

  Point.prototype.getX = function getX() {
    return this.x.fromRed();
  };

  Point.prototype.getY = function getY() {
    return this.y.fromRed();
  };

  Point.prototype.mul = function mul(k) {
    k = new BN(k, 16);
    if (this.isInfinity())
      return this;
    else if (this._hasDoubles(k))
      return this.curve._fixedNafMul(this, k);
    else if (this.curve.endo)
      return this.curve._endoWnafMulAdd([ this ], [ k ]);
    else
      return this.curve._wnafMul(this, k);
  };

  Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    var points = [ this, p2 ];
    var coeffs = [ k1, k2 ];
    if (this.curve.endo)
      return this.curve._endoWnafMulAdd(points, coeffs);
    else
      return this.curve._wnafMulAdd(1, points, coeffs, 2);
  };

  Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    var points = [ this, p2 ];
    var coeffs = [ k1, k2 ];
    if (this.curve.endo)
      return this.curve._endoWnafMulAdd(points, coeffs, true);
    else
      return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
  };

  Point.prototype.eq = function eq(p) {
    return this === p ||
           this.inf === p.inf &&
               (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
  };

  Point.prototype.neg = function neg(_precompute) {
    if (this.inf)
      return this;

    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
      var pre = this.precomputed;
      var negate = function(p) {
        return p.neg();
      };
      res.precomputed = {
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(negate),
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(negate),
        },
      };
    }
    return res;
  };

  Point.prototype.toJ = function toJ() {
    if (this.inf)
      return this.curve.jpoint(null, null, null);

    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
  };

  function JPoint(curve, x, y, z) {
    base$1.BasePoint.call(this, curve, 'jacobian');
    if (x === null && y === null && z === null) {
      this.x = this.curve.one;
      this.y = this.curve.one;
      this.z = new BN(0);
    } else {
      this.x = new BN(x, 16);
      this.y = new BN(y, 16);
      this.z = new BN(z, 16);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);

    this.zOne = this.z === this.curve.one;
  }
  inherits_browser(JPoint, base$1.BasePoint);

  ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
    return new JPoint(this, x, y, z);
  };

  JPoint.prototype.toP = function toP() {
    if (this.isInfinity())
      return this.curve.point(null, null);

    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);

    return this.curve.point(ax, ay);
  };

  JPoint.prototype.neg = function neg() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
  };

  JPoint.prototype.add = function add(p) {
    // O + P = P
    if (this.isInfinity())
      return p;

    // P + O = P
    if (p.isInfinity())
      return this;

    // 12M + 4S + 7A
    var pz2 = p.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p.z));
    var s2 = p.y.redMul(z2.redMul(this.z));

    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
      if (r.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }

    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);

    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p.z).redMul(h);

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype.mixedAdd = function mixedAdd(p) {
    // O + P = P
    if (this.isInfinity())
      return p.toJ();

    // P + O = P
    if (p.isInfinity())
      return this;

    // 8M + 3S + 7A
    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p.x.redMul(z2);
    var s1 = this.y;
    var s2 = p.y.redMul(z2).redMul(this.z);

    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
      if (r.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }

    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);

    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h);

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype.dblp = function dblp(pow) {
    if (pow === 0)
      return this;
    if (this.isInfinity())
      return this;
    if (!pow)
      return this.dbl();

    var i;
    if (this.curve.zeroA || this.curve.threeA) {
      var r = this;
      for (i = 0; i < pow; i++)
        r = r.dbl();
      return r;
    }

    // 1M + 2S + 1A + N * (4S + 5M + 8A)
    // N = 1 => 6M + 6S + 9A
    var a = this.curve.a;
    var tinv = this.curve.tinv;

    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();

    // Reuse results
    var jyd = jy.redAdd(jy);
    for (i = 0; i < pow; i++) {
      var jx2 = jx.redSqr();
      var jyd2 = jyd.redSqr();
      var jyd4 = jyd2.redSqr();
      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

      var t1 = jx.redMul(jyd2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);
      var dny = c.redMul(t2);
      dny = dny.redIAdd(dny).redISub(jyd4);
      var nz = jyd.redMul(jz);
      if (i + 1 < pow)
        jz4 = jz4.redMul(jyd4);

      jx = nx;
      jz = nz;
      jyd = dny;
    }

    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
  };

  JPoint.prototype.dbl = function dbl() {
    if (this.isInfinity())
      return this;

    if (this.curve.zeroA)
      return this._zeroDbl();
    else if (this.curve.threeA)
      return this._threeDbl();
    else
      return this._dbl();
  };

  JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
      //     #doubling-mdbl-2007-bl
      // 1M + 5S + 14A

      // XX = X1^2
      var xx = this.x.redSqr();
      // YY = Y1^2
      var yy = this.y.redSqr();
      // YYYY = YY^2
      var yyyy = yy.redSqr();
      // S = 2 * ((X1 + YY)^2 - XX - YYYY)
      var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s = s.redIAdd(s);
      // M = 3 * XX + a; a = 0
      var m = xx.redAdd(xx).redIAdd(xx);
      // T = M ^ 2 - 2*S
      var t = m.redSqr().redISub(s).redISub(s);

      // 8 * YYYY
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);

      // X3 = T
      nx = t;
      // Y3 = M * (S - T) - 8 * YYYY
      ny = m.redMul(s.redISub(t)).redISub(yyyy8);
      // Z3 = 2*Y1
      nz = this.y.redAdd(this.y);
    } else {
      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
      //     #doubling-dbl-2009-l
      // 2M + 5S + 13A

      // A = X1^2
      var a = this.x.redSqr();
      // B = Y1^2
      var b = this.y.redSqr();
      // C = B^2
      var c = b.redSqr();
      // D = 2 * ((X1 + B)^2 - A - C)
      var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
      d = d.redIAdd(d);
      // E = 3 * A
      var e = a.redAdd(a).redIAdd(a);
      // F = E^2
      var f = e.redSqr();

      // 8 * C
      var c8 = c.redIAdd(c);
      c8 = c8.redIAdd(c8);
      c8 = c8.redIAdd(c8);

      // X3 = F - 2 * D
      nx = f.redISub(d).redISub(d);
      // Y3 = E * (D - X3) - 8 * C
      ny = e.redMul(d.redISub(nx)).redISub(c8);
      // Z3 = 2 * Y1 * Z1
      nz = this.y.redMul(this.z);
      nz = nz.redIAdd(nz);
    }

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
      //     #doubling-mdbl-2007-bl
      // 1M + 5S + 15A

      // XX = X1^2
      var xx = this.x.redSqr();
      // YY = Y1^2
      var yy = this.y.redSqr();
      // YYYY = YY^2
      var yyyy = yy.redSqr();
      // S = 2 * ((X1 + YY)^2 - XX - YYYY)
      var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s = s.redIAdd(s);
      // M = 3 * XX + a
      var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
      // T = M^2 - 2 * S
      var t = m.redSqr().redISub(s).redISub(s);
      // X3 = T
      nx = t;
      // Y3 = M * (S - T) - 8 * YYYY
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      ny = m.redMul(s.redISub(t)).redISub(yyyy8);
      // Z3 = 2 * Y1
      nz = this.y.redAdd(this.y);
    } else {
      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
      // 3M + 5S

      // delta = Z1^2
      var delta = this.z.redSqr();
      // gamma = Y1^2
      var gamma = this.y.redSqr();
      // beta = X1 * gamma
      var beta = this.x.redMul(gamma);
      // alpha = 3 * (X1 - delta) * (X1 + delta)
      var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
      alpha = alpha.redAdd(alpha).redIAdd(alpha);
      // X3 = alpha^2 - 8 * beta
      var beta4 = beta.redIAdd(beta);
      beta4 = beta4.redIAdd(beta4);
      var beta8 = beta4.redAdd(beta4);
      nx = alpha.redSqr().redISub(beta8);
      // Z3 = (Y1 + Z1)^2 - gamma - delta
      nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
      // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
      var ggamma8 = gamma.redSqr();
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype._dbl = function _dbl() {
    var a = this.curve.a;

    // 4M + 6S + 10A
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();

    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();

    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);

    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA)
      return this.dbl().add(this);

    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
    // 5M + 10S + ...

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // ZZ = Z1^2
    var zz = this.z.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // M = 3 * XX + a * ZZ2; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // MM = M^2
    var mm = m.redSqr();
    // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e = e.redIAdd(e);
    e = e.redAdd(e).redIAdd(e);
    e = e.redISub(mm);
    // EE = E^2
    var ee = e.redSqr();
    // T = 16*YYYY
    var t = yyyy.redIAdd(yyyy);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    // U = (M + E)^2 - MM - EE - T
    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
    // X3 = 4 * (X1 * EE - 4 * YY * U)
    var yyu4 = yy.redMul(u);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    // Z3 = (Z1 + E)^2 - ZZ - EE
    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype.mul = function mul(k, kbase) {
    k = new BN(k, kbase);

    return this.curve._wnafMul(this, k);
  };

  JPoint.prototype.eq = function eq(p) {
    if (p.type === 'affine')
      return this.eq(p.toJ());

    if (this === p)
      return true;

    // x1 * z2^2 == x2 * z1^2
    var z2 = this.z.redSqr();
    var pz2 = p.z.redSqr();
    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
      return false;

    // y1 * z2^3 == y2 * z1^3
    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p.z);
    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
  };

  JPoint.prototype.eqXToP = function eqXToP(x) {
    var zs = this.z.redSqr();
    var rx = x.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0)
      return true;

    var xc = x.clone();
    var t = this.curve.redN.redMul(zs);
    for (;;) {
      xc.iadd(this.curve.n);
      if (xc.cmp(this.curve.p) >= 0)
        return false;

      rx.redIAdd(t);
      if (this.x.cmp(rx) === 0)
        return true;
    }
  };

  JPoint.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return '<EC JPoint Infinity>';
    return '<EC JPoint x: ' + this.x.toString(16, 2) +
        ' y: ' + this.y.toString(16, 2) +
        ' z: ' + this.z.toString(16, 2) + '>';
  };

  JPoint.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
  };

  var curve_1 = createCommonjsModule(function (module, exports) {

  var curve = exports;

  curve.base = base$1;
  curve.short = short_1;
  curve.mont = /*RicMoo:ethers:require(./mont)*/(null);
  curve.edwards = /*RicMoo:ethers:require(./edwards)*/(null);
  });

  var curves_1 = createCommonjsModule(function (module, exports) {

  var curves = exports;





  var assert = utils_1$1.assert;

  function PresetCurve(options) {
    if (options.type === 'short')
      this.curve = new curve_1.short(options);
    else if (options.type === 'edwards')
      this.curve = new curve_1.edwards(options);
    else
      this.curve = new curve_1.mont(options);
    this.g = this.curve.g;
    this.n = this.curve.n;
    this.hash = options.hash;

    assert(this.g.validate(), 'Invalid curve');
    assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
  }
  curves.PresetCurve = PresetCurve;

  function defineCurve(name, options) {
    Object.defineProperty(curves, name, {
      configurable: true,
      enumerable: true,
      get: function() {
        var curve = new PresetCurve(options);
        Object.defineProperty(curves, name, {
          configurable: true,
          enumerable: true,
          value: curve,
        });
        return curve;
      },
    });
  }

  defineCurve('p192', {
    type: 'short',
    prime: 'p192',
    p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
    b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
    n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
    hash: hash.sha256,
    gRed: false,
    g: [
      '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
      '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
    ],
  });

  defineCurve('p224', {
    type: 'short',
    prime: 'p224',
    p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
    b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
    n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
    hash: hash.sha256,
    gRed: false,
    g: [
      'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
      'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
    ],
  });

  defineCurve('p256', {
    type: 'short',
    prime: null,
    p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
    a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
    b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
    n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
    hash: hash.sha256,
    gRed: false,
    g: [
      '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
      '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
    ],
  });

  defineCurve('p384', {
    type: 'short',
    prime: null,
    p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'fffffffe ffffffff 00000000 00000000 ffffffff',
    a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'fffffffe ffffffff 00000000 00000000 fffffffc',
    b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
       '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
    n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
       'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
    hash: hash.sha384,
    gRed: false,
    g: [
      'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
      '5502f25d bf55296c 3a545e38 72760ab7',
      '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
      '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
    ],
  });

  defineCurve('p521', {
    type: 'short',
    prime: null,
    p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff ffffffff ffffffff ffffffff',
    a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff ffffffff ffffffff fffffffc',
    b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
       '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
       '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
    n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
       'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
    hash: hash.sha512,
    gRed: false,
    g: [
      '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
      '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
      'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
      '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
      '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
      '3fad0761 353c7086 a272c240 88be9476 9fd16650',
    ],
  });

  defineCurve('curve25519', {
    type: 'mont',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '76d06',
    b: '1',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: hash.sha256,
    gRed: false,
    g: [
      '9',
    ],
  });

  defineCurve('ed25519', {
    type: 'edwards',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '-1',
    c: '1',
    // -121665 * (121666^(-1)) (mod P)
    d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: hash.sha256,
    gRed: false,
    g: [
      '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

      // 4/5
      '6666666666666666666666666666666666666666666666666666666666666658',
    ],
  });

  var pre;
  try {
    pre = /*RicMoo:ethers:require(./precomputed/secp256k1)*/(null).crash();
  } catch (e) {
    pre = undefined;
  }

  defineCurve('secp256k1', {
    type: 'short',
    prime: 'k256',
    p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
    a: '0',
    b: '7',
    n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
    h: '1',
    hash: hash.sha256,

    // Precomputed endomorphism
    beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
    lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
    basis: [
      {
        a: '3086d221a7d46bcde86c90e49284eb15',
        b: '-e4437ed6010e88286f547fa90abfe4c3',
      },
      {
        a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
        b: '3086d221a7d46bcde86c90e49284eb15',
      },
    ],

    gRed: false,
    g: [
      '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
      '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
      pre,
    ],
  });
  });





  function HmacDRBG(options) {
    if (!(this instanceof HmacDRBG))
      return new HmacDRBG(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;

    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;

    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;

    var entropy = utils_1.toArray(options.entropy, options.entropyEnc || 'hex');
    var nonce = utils_1.toArray(options.nonce, options.nonceEnc || 'hex');
    var pers = utils_1.toArray(options.pers, options.persEnc || 'hex');
    minimalisticAssert(entropy.length >= (this.minEntropy / 8),
           'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
    this._init(entropy, nonce, pers);
  }
  var hmacDrbg = HmacDRBG;

  HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);

    this.K = new Array(this.outLen / 8);
    this.V = new Array(this.outLen / 8);
    for (var i = 0; i < this.V.length; i++) {
      this.K[i] = 0x00;
      this.V[i] = 0x01;
    }

    this._update(seed);
    this._reseed = 1;
    this.reseedInterval = 0x1000000000000;  // 2^48
  };

  HmacDRBG.prototype._hmac = function hmac() {
    return new hash.hmac(this.hash, this.K);
  };

  HmacDRBG.prototype._update = function update(seed) {
    var kmac = this._hmac()
                   .update(this.V)
                   .update([ 0x00 ]);
    if (seed)
      kmac = kmac.update(seed);
    this.K = kmac.digest();
    this.V = this._hmac().update(this.V).digest();
    if (!seed)
      return;

    this.K = this._hmac()
                 .update(this.V)
                 .update([ 0x01 ])
                 .update(seed)
                 .digest();
    this.V = this._hmac().update(this.V).digest();
  };

  HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
    // Optional entropy enc
    if (typeof entropyEnc !== 'string') {
      addEnc = add;
      add = entropyEnc;
      entropyEnc = null;
    }

    entropy = utils_1.toArray(entropy, entropyEnc);
    add = utils_1.toArray(add, addEnc);

    minimalisticAssert(entropy.length >= (this.minEntropy / 8),
           'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

    this._update(entropy.concat(add || []));
    this._reseed = 1;
  };

  HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
    if (this._reseed > this.reseedInterval)
      throw new Error('Reseed is required');

    // Optional encoding
    if (typeof enc !== 'string') {
      addEnc = add;
      add = enc;
      enc = null;
    }

    // Optional additional data
    if (add) {
      add = utils_1.toArray(add, addEnc || 'hex');
      this._update(add);
    }

    var temp = [];
    while (temp.length < len) {
      this.V = this._hmac().update(this.V).digest();
      temp = temp.concat(this.V);
    }

    var res = temp.slice(0, len);
    this._update(add);
    this._reseed++;
    return utils_1.encode(res, enc);
  };



  var assert$3 = utils_1$1.assert;

  function KeyPair(ec, options) {
    this.ec = ec;
    this.priv = null;
    this.pub = null;

    // KeyPair(ec, { priv: ..., pub: ... })
    if (options.priv)
      this._importPrivate(options.priv, options.privEnc);
    if (options.pub)
      this._importPublic(options.pub, options.pubEnc);
  }
  var key = KeyPair;

  KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
    if (pub instanceof KeyPair)
      return pub;

    return new KeyPair(ec, {
      pub: pub,
      pubEnc: enc,
    });
  };

  KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
    if (priv instanceof KeyPair)
      return priv;

    return new KeyPair(ec, {
      priv: priv,
      privEnc: enc,
    });
  };

  KeyPair.prototype.validate = function validate() {
    var pub = this.getPublic();

    if (pub.isInfinity())
      return { result: false, reason: 'Invalid public key' };
    if (!pub.validate())
      return { result: false, reason: 'Public key is not a point' };
    if (!pub.mul(this.ec.curve.n).isInfinity())
      return { result: false, reason: 'Public key * N != O' };

    return { result: true, reason: null };
  };

  KeyPair.prototype.getPublic = function getPublic(compact, enc) {
    // compact is optional argument
    if (typeof compact === 'string') {
      enc = compact;
      compact = null;
    }

    if (!this.pub)
      this.pub = this.ec.g.mul(this.priv);

    if (!enc)
      return this.pub;

    return this.pub.encode(enc, compact);
  };

  KeyPair.prototype.getPrivate = function getPrivate(enc) {
    if (enc === 'hex')
      return this.priv.toString(16, 2);
    else
      return this.priv;
  };

  KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
    this.priv = new BN(key, enc || 16);

    // Ensure that the priv won't be bigger than n, otherwise we may fail
    // in fixed multiplication method
    this.priv = this.priv.umod(this.ec.curve.n);
  };

  KeyPair.prototype._importPublic = function _importPublic(key, enc) {
    if (key.x || key.y) {
      // Montgomery points only have an `x` coordinate.
      // Weierstrass/Edwards points on the other hand have both `x` and
      // `y` coordinates.
      if (this.ec.curve.type === 'mont') {
        assert$3(key.x, 'Need x coordinate');
      } else if (this.ec.curve.type === 'short' ||
                 this.ec.curve.type === 'edwards') {
        assert$3(key.x && key.y, 'Need both x and y coordinate');
      }
      this.pub = this.ec.curve.point(key.x, key.y);
      return;
    }
    this.pub = this.ec.curve.decodePoint(key, enc);
  };

  // ECDH
  KeyPair.prototype.derive = function derive(pub) {
    if(!pub.validate()) {
      assert$3(pub.validate(), 'public point not validated');
    }
    return pub.mul(this.priv).getX();
  };

  // ECDSA
  KeyPair.prototype.sign = function sign(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
  };

  KeyPair.prototype.verify = function verify(msg, signature) {
    return this.ec.verify(msg, signature, this);
  };

  KeyPair.prototype.inspect = function inspect() {
    return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
           ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
  };




  var assert$4 = utils_1$1.assert;

  function Signature(options, enc) {
    if (options instanceof Signature)
      return options;

    if (this._importDER(options, enc))
      return;

    assert$4(options.r && options.s, 'Signature without r or s');
    this.r = new BN(options.r, 16);
    this.s = new BN(options.s, 16);
    if (options.recoveryParam === undefined)
      this.recoveryParam = null;
    else
      this.recoveryParam = options.recoveryParam;
  }
  var signature = Signature;

  function Position() {
    this.place = 0;
  }

  function getLength(buf, p) {
    var initial = buf[p.place++];
    if (!(initial & 0x80)) {
      return initial;
    }
    var octetLen = initial & 0xf;

    // Indefinite length or overflow
    if (octetLen === 0 || octetLen > 4) {
      return false;
    }

    var val = 0;
    for (var i = 0, off = p.place; i < octetLen; i++, off++) {
      val <<= 8;
      val |= buf[off];
      val >>>= 0;
    }

    // Leading zeroes
    if (val <= 0x7f) {
      return false;
    }

    p.place = off;
    return val;
  }

  function rmPadding(buf) {
    var i = 0;
    var len = buf.length - 1;
    while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
      i++;
    }
    if (i === 0) {
      return buf;
    }
    return buf.slice(i);
  }

  Signature.prototype._importDER = function _importDER(data, enc) {
    data = utils_1$1.toArray(data, enc);
    var p = new Position();
    if (data[p.place++] !== 0x30) {
      return false;
    }
    var len = getLength(data, p);
    if (len === false) {
      return false;
    }
    if ((len + p.place) !== data.length) {
      return false;
    }
    if (data[p.place++] !== 0x02) {
      return false;
    }
    var rlen = getLength(data, p);
    if (rlen === false) {
      return false;
    }
    var r = data.slice(p.place, rlen + p.place);
    p.place += rlen;
    if (data[p.place++] !== 0x02) {
      return false;
    }
    var slen = getLength(data, p);
    if (slen === false) {
      return false;
    }
    if (data.length !== slen + p.place) {
      return false;
    }
    var s = data.slice(p.place, slen + p.place);
    if (r[0] === 0) {
      if (r[1] & 0x80) {
        r = r.slice(1);
      } else {
        // Leading zeroes
        return false;
      }
    }
    if (s[0] === 0) {
      if (s[1] & 0x80) {
        s = s.slice(1);
      } else {
        // Leading zeroes
        return false;
      }
    }

    this.r = new BN(r);
    this.s = new BN(s);
    this.recoveryParam = null;

    return true;
  };

  function constructLength(arr, len) {
    if (len < 0x80) {
      arr.push(len);
      return;
    }
    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
    arr.push(octets | 0x80);
    while (--octets) {
      arr.push((len >>> (octets << 3)) & 0xff);
    }
    arr.push(len);
  }

  Signature.prototype.toDER = function toDER(enc) {
    var r = this.r.toArray();
    var s = this.s.toArray();

    // Pad values
    if (r[0] & 0x80)
      r = [ 0 ].concat(r);
    // Pad values
    if (s[0] & 0x80)
      s = [ 0 ].concat(s);

    r = rmPadding(r);
    s = rmPadding(s);

    while (!s[0] && !(s[1] & 0x80)) {
      s = s.slice(1);
    }
    var arr = [ 0x02 ];
    constructLength(arr, r.length);
    arr = arr.concat(r);
    arr.push(0x02);
    constructLength(arr, s.length);
    var backHalf = arr.concat(s);
    var res = [ 0x30 ];
    constructLength(res, backHalf.length);
    res = res.concat(backHalf);
    return utils_1$1.encode(res, enc);
  };





  var rand = /*RicMoo:ethers:require(brorand)*/(function() { throw new Error('unsupported'); });
  var assert$5 = utils_1$1.assert;




  function EC(options) {
    if (!(this instanceof EC))
      return new EC(options);

    // Shortcut `elliptic.ec(curve-name)`
    if (typeof options === 'string') {
      assert$5(Object.prototype.hasOwnProperty.call(curves_1, options),
        'Unknown curve ' + options);

      options = curves_1[options];
    }

    // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
    if (options instanceof curves_1.PresetCurve)
      options = { curve: options };

    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;

    // Point on curve
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);

    // Hash for function for DRBG
    this.hash = options.hash || options.curve.hash;
  }
  var ec = EC;

  EC.prototype.keyPair = function keyPair(options) {
    return new key(this, options);
  };

  EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return key.fromPrivate(this, priv, enc);
  };

  EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return key.fromPublic(this, pub, enc);
  };

  EC.prototype.genKeyPair = function genKeyPair(options) {
    if (!options)
      options = {};

    // Instantiate Hmac_DRBG
    var drbg = new hmacDrbg({
      hash: this.hash,
      pers: options.pers,
      persEnc: options.persEnc || 'utf8',
      entropy: options.entropy || rand(this.hash.hmacStrength),
      entropyEnc: options.entropy && options.entropyEnc || 'utf8',
      nonce: this.n.toArray(),
    });

    var bytes = this.n.byteLength();
    var ns2 = this.n.sub(new BN(2));
    for (;;) {
      var priv = new BN(drbg.generate(bytes));
      if (priv.cmp(ns2) > 0)
        continue;

      priv.iaddn(1);
      return this.keyFromPrivate(priv);
    }
  };

  EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
    var delta = msg.byteLength() * 8 - this.n.bitLength();
    if (delta > 0)
      msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0)
      return msg.sub(this.n);
    else
      return msg;
  };

  EC.prototype.sign = function sign(msg, key, enc, options) {
    if (typeof enc === 'object') {
      options = enc;
      enc = null;
    }
    if (!options)
      options = {};

    key = this.keyFromPrivate(key, enc);
    msg = this._truncateToN(new BN(msg, 16));

    // Zero-extend key to provide enough entropy
    var bytes = this.n.byteLength();
    var bkey = key.getPrivate().toArray('be', bytes);

    // Zero-extend nonce to have the same byte size as N
    var nonce = msg.toArray('be', bytes);

    // Instantiate Hmac_DRBG
    var drbg = new hmacDrbg({
      hash: this.hash,
      entropy: bkey,
      nonce: nonce,
      pers: options.pers,
      persEnc: options.persEnc || 'utf8',
    });

    // Number of bytes to generate
    var ns1 = this.n.sub(new BN(1));

    for (var iter = 0; ; iter++) {
      var k = options.k ?
        options.k(iter) :
        new BN(drbg.generate(this.n.byteLength()));
      k = this._truncateToN(k, true);
      if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
        continue;

      var kp = this.g.mul(k);
      if (kp.isInfinity())
        continue;

      var kpX = kp.getX();
      var r = kpX.umod(this.n);
      if (r.cmpn(0) === 0)
        continue;

      var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
      s = s.umod(this.n);
      if (s.cmpn(0) === 0)
        continue;

      var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                          (kpX.cmp(r) !== 0 ? 2 : 0);

      // Use complement of `s`, if it is > `n / 2`
      if (options.canonical && s.cmp(this.nh) > 0) {
        s = this.n.sub(s);
        recoveryParam ^= 1;
      }

      return new signature({ r: r, s: s, recoveryParam: recoveryParam });
    }
  };

  EC.prototype.verify = function verify(msg, signature$1, key, enc) {
    msg = this._truncateToN(new BN(msg, 16));
    key = this.keyFromPublic(key, enc);
    signature$1 = new signature(signature$1, 'hex');

    // Perform primitive values validation
    var r = signature$1.r;
    var s = signature$1.s;
    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
      return false;
    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
      return false;

    // Validate signature
    var sinv = s.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u2 = sinv.mul(r).umod(this.n);
    var p;

    if (!this.curve._maxwellTrick) {
      p = this.g.mulAdd(u1, key.getPublic(), u2);
      if (p.isInfinity())
        return false;

      return p.getX().umod(this.n).cmp(r) === 0;
    }

    // NOTE: Greg Maxwell's trick, inspired by:
    // https://git.io/vad3K

    p = this.g.jmulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    // Compare `p.x` of Jacobian point with `r`,
    // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
    // inverse of `p.z^2`
    return p.eqXToP(r);
  };

  EC.prototype.recoverPubKey = function(msg, signature$1, j, enc) {
    assert$5((3 & j) === j, 'The recovery param is more than two bits');
    signature$1 = new signature(signature$1, enc);

    var n = this.n;
    var e = new BN(msg);
    var r = signature$1.r;
    var s = signature$1.s;

    // A set LSB signifies that the y-coordinate is odd
    var isYOdd = j & 1;
    var isSecondKey = j >> 1;
    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
      throw new Error('Unable to find sencond key candinate');

    // 1.1. Let x = r + jn.
    if (isSecondKey)
      r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
    else
      r = this.curve.pointFromX(r, isYOdd);

    var rInv = signature$1.r.invm(n);
    var s1 = n.sub(e).mul(rInv).umod(n);
    var s2 = s.mul(rInv).umod(n);

    // 1.6.1 Compute Q = r^-1 (sR -  eG)
    //               Q = r^-1 (sR + -eG)
    return this.g.mulAdd(s1, r, s2);
  };

  EC.prototype.getKeyRecoveryParam = function(e, signature$1, Q, enc) {
    signature$1 = new signature(signature$1, enc);
    if (signature$1.recoveryParam !== null)
      return signature$1.recoveryParam;

    for (var i = 0; i < 4; i++) {
      var Qprime;
      try {
        Qprime = this.recoverPubKey(e, signature$1, i);
      } catch (e) {
        continue;
      }

      if (Qprime.eq(Q))
        return i;
    }
    throw new Error('Unable to find valid recovery factor');
  };

  var elliptic_1 = createCommonjsModule(function (module, exports) {

  var elliptic = exports;

  elliptic.version = /*RicMoo:ethers*/{ version: "6.5.4" }.version;
  elliptic.utils = utils_1$1;
  elliptic.rand = /*RicMoo:ethers:require(brorand)*/(function() { throw new Error('unsupported'); });
  elliptic.curve = curve_1;
  elliptic.curves = curves_1;

  // Protocols
  elliptic.ec = ec;
  elliptic.eddsa = /*RicMoo:ethers:require(./elliptic/eddsa)*/(null);
  });

  elliptic_1.ec;

  const version$7 = "signing-key/5.5.0";

  new Logger(version$7);

  const version$6 = "transactions/5.5.0";

  new Logger(version$6);
  var TransactionTypes;
  (function (TransactionTypes) {
      TransactionTypes[TransactionTypes["legacy"] = 0] = "legacy";
      TransactionTypes[TransactionTypes["eip2930"] = 1] = "eip2930";
      TransactionTypes[TransactionTypes["eip1559"] = 2] = "eip1559";
  })(TransactionTypes || (TransactionTypes = {}));

  const version$5 = "contracts/5.5.0";
  new Logger(version$5);

  /**
   * var basex = require("base-x");
   *
   * This implementation is heavily based on base-x. The main reason to
   * deviate was to prevent the dependency of Buffer.
   *
   * Contributors:
   *
   * base-x encoding
   * Forked from https://github.com/cryptocoinjs/bs58
   * Originally written by Mike Hearn for BitcoinJ
   * Copyright (c) 2011 Google Inc
   * Ported to JavaScript by Stefan Thomas
   * Merged Buffer refactorings from base58-native by Stephen Pair
   * Copyright (c) 2013 BitPay Inc
   *
   * The MIT License (MIT)
   *
   * Copyright base-x contributors (c) 2016
   *
   * Permission is hereby granted, free of charge, to any person obtaining a
   * copy of this software and associated documentation files (the "Software"),
   * to deal in the Software without restriction, including without limitation
   * the rights to use, copy, modify, merge, publish, distribute, sublicense,
   * and/or sell copies of the Software, and to permit persons to whom the
   * Software is furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.

   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
   * IN THE SOFTWARE.
   *
   */
  class BaseX {
      constructor(alphabet) {
          defineReadOnly(this, "alphabet", alphabet);
          defineReadOnly(this, "base", alphabet.length);
          defineReadOnly(this, "_alphabetMap", {});
          defineReadOnly(this, "_leader", alphabet.charAt(0));
          // pre-compute lookup table
          for (let i = 0; i < alphabet.length; i++) {
              this._alphabetMap[alphabet.charAt(i)] = i;
          }
      }
      encode(value) {
          let source = arrayify(value);
          if (source.length === 0) {
              return "";
          }
          let digits = [0];
          for (let i = 0; i < source.length; ++i) {
              let carry = source[i];
              for (let j = 0; j < digits.length; ++j) {
                  carry += digits[j] << 8;
                  digits[j] = carry % this.base;
                  carry = (carry / this.base) | 0;
              }
              while (carry > 0) {
                  digits.push(carry % this.base);
                  carry = (carry / this.base) | 0;
              }
          }
          let string = "";
          // deal with leading zeros
          for (let k = 0; source[k] === 0 && k < source.length - 1; ++k) {
              string += this._leader;
          }
          // convert digits to a string
          for (let q = digits.length - 1; q >= 0; --q) {
              string += this.alphabet[digits[q]];
          }
          return string;
      }
      decode(value) {
          if (typeof (value) !== "string") {
              throw new TypeError("Expected String");
          }
          let bytes = [];
          if (value.length === 0) {
              return new Uint8Array(bytes);
          }
          bytes.push(0);
          for (let i = 0; i < value.length; i++) {
              let byte = this._alphabetMap[value[i]];
              if (byte === undefined) {
                  throw new Error("Non-base" + this.base + " character");
              }
              let carry = byte;
              for (let j = 0; j < bytes.length; ++j) {
                  carry += bytes[j] * this.base;
                  bytes[j] = carry & 0xff;
                  carry >>= 8;
              }
              while (carry > 0) {
                  bytes.push(carry & 0xff);
                  carry >>= 8;
              }
          }
          // deal with leading zeros
          for (let k = 0; value[k] === this._leader && k < value.length - 1; ++k) {
              bytes.push(0);
          }
          return arrayify(new Uint8Array(bytes.reverse()));
      }
  }
  new BaseX("abcdefghijklmnopqrstuvwxyz234567");
  new BaseX("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
  //console.log(Base58.decode("Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj"))
  //console.log(Base58.encode(Base58.decode("Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj")))

  const version$4 = "sha2/5.5.0";

  new Logger(version$4);

  const version$3 = "networks/5.5.0";

  new Logger(version$3);

  const version$2 = "web/5.5.0";
  new Logger(version$2);

  var ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';

  // pre-compute lookup table
  var ALPHABET_MAP = {};
  for (var z$2 = 0; z$2 < ALPHABET.length; z$2++) {
    var x$2 = ALPHABET.charAt(z$2);

    if (ALPHABET_MAP[x$2] !== undefined) throw new TypeError(x$2 + ' is ambiguous')
    ALPHABET_MAP[x$2] = z$2;
  }

  const version$1 = "providers/5.5.0";

  new Logger(version$1);
  new Logger(version$1);
  new Logger(version$1);

  new Logger(version$1);

  new Logger(version$1);

  const version = "ethers/5.5.1";

  new Logger(version);

  react.exports.createContext({
      multicallAddress: '',
      dispatchCalls: () => {
          // empty
      },
  });

  let hook;
  if (typeof window !== 'undefined') {
      hook = window.__USEDAPP_DEVTOOLS_HOOK__;
  }
  // immediately notify devtools that the page is using it
  notifyDevtools({ type: 'INIT' });
  function notifyDevtools(notification) {
      if (!hook) {
          return;
      }
      if (notification.type === 'INIT') {
          hook.init();
      }
      else {
          if (notification.type === 'MULTICALL_ERROR' || notification.type === 'GENERIC_ERROR') {
              notification.error = getErrorMessage(notification.error);
          }
          hook.send(notification);
      }
  }
  function getErrorMessage(error) {
      if (error instanceof Error) {
          return error.message;
      }
      else {
          return '' + error;
      }
  }

  const DEFAULT_NOTIFICATIONS = {};

  react.exports.createContext({
      notifications: DEFAULT_NOTIFICATIONS,
      addNotification: () => undefined,
      removeNotification: () => undefined,
  });

  react.exports.createContext({
      injectedProvider: undefined,
      connect: async () => undefined,
  });

  react.exports.createContext({
      network: {
          provider: undefined,
          chainId: ChainId.Mainnet,
          accounts: [],
          errors: [],
      },
      update: () => undefined,
      reportError: () => undefined,
      activate: async () => undefined,
      deactivate: () => undefined,
  });

  const DEFAULT_STORED_TRANSACTIONS = {};

  react.exports.createContext({
      transactions: DEFAULT_STORED_TRANSACTIONS,
      addTransaction: () => undefined,
  });

  var LocalMulticallState;
  (function (LocalMulticallState) {
      LocalMulticallState[LocalMulticallState["Unknown"] = 0] = "Unknown";
      LocalMulticallState[LocalMulticallState["NonLocal"] = 1] = "NonLocal";
      LocalMulticallState[LocalMulticallState["Deploying"] = 2] = "Deploying";
      LocalMulticallState[LocalMulticallState["Deployed"] = 3] = "Deployed";
      LocalMulticallState[LocalMulticallState["Error"] = 4] = "Error";
  })(LocalMulticallState || (LocalMulticallState = {}));

  ({
    readOnlyChainId: Mainnet.chainId,
    readOnlyUrls: _defineProperty({}, Mainnet.chainId, 'https://mainnet.infura.io/v3/62687d1a985d4508b2b7a24827551934')
  });

  const protocols = ['http', 'https', 'mailto', 'tel'];

  /**
   * @param {string} uri
   * @returns {string}
   */
  function uriTransformer(uri) {
    const url = (uri || '').trim();
    const first = url.charAt(0);

    if (first === '#' || first === '/') {
      return url
    }

    const colon = url.indexOf(':');
    if (colon === -1) {
      return url
    }

    let index = -1;

    while (++index < protocols.length) {
      const protocol = protocols[index];

      if (
        colon === protocol.length &&
        url.slice(0, protocol.length).toLowerCase() === protocol
      ) {
        return url
      }
    }

    index = url.indexOf('?');
    if (index !== -1 && colon > index) {
      return url
    }

    index = url.indexOf('#');
    if (index !== -1 && colon > index) {
      return url
    }

    // eslint-disable-next-line no-script-url
    return 'javascript:void(0)'
  }

  /*!
   * Determine if an object is a Buffer
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   */

  var isBuffer = function isBuffer (obj) {
    return obj != null && obj.constructor != null &&
      typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
  };

  /**
   * @typedef {import('unist').Point} Point
   * @typedef {import('unist').Node} Node
   * @typedef {import('unist').Position} Position
   * @typedef {object & {type: string, position?: Position|undefined}} NodeLike
   */

  /**
   * Stringify one point, a position (start and end points), or a node’s
   * positional information.
   *
   * @param {Node|NodeLike|Position|Point|null} [value]
   * @returns {string}
   */
  function stringifyPosition$1(value) {
    // Nothing.
    if (!value || typeof value !== 'object') {
      return ''
    }

    // Node.
    if ('position' in value || 'type' in value) {
      return position$1(value.position)
    }

    // Position.
    if ('start' in value || 'end' in value) {
      return position$1(value)
    }

    // Point.
    if ('line' in value || 'column' in value) {
      return point$2(value)
    }

    // ?
    return ''
  }

  /**
   * @param {Point|undefined} point
   * @returns {string}
   */
  function point$2(point) {
    return index$1(point && point.line) + ':' + index$1(point && point.column)
  }

  /**
   * @param {Position|undefined} pos
   * @returns {string}
   */
  function position$1(pos) {
    return point$2(pos && pos.start) + '-' + point$2(pos && pos.end)
  }

  /**
   * @param {number|undefined} value
   * @returns {number}
   */
  function index$1(value) {
    return value && typeof value === 'number' ? value : 1
  }

  /**
   * @typedef {import('unist').Node} Node
   * @typedef {import('unist').Position} Position
   * @typedef {import('unist').Point} Point
   * @typedef {object & {type: string, position?: Position|undefined}} NodeLike
   */

  class VFileMessage extends Error {
    /**
     * Constructor of a message for `reason` at `place` from `origin`.
     * When an error is passed in as `reason`, copies the `stack`.
     *
     * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.
     * @param {Node|NodeLike|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).
     * @param {string} [origin] Place in code the message originates from (`string`, optional).
     */
    constructor(reason, place, origin) {
      /** @type {[string|null, string|null]} */
      const parts = [null, null];
      /** @type {Position} */
      let position = {
        // @ts-expect-error: we always follows the structure of `position`.
        start: {line: null, column: null},
        // @ts-expect-error: "
        end: {line: null, column: null}
      };

      super();

      if (typeof place === 'string') {
        origin = place;
        place = undefined;
      }

      if (typeof origin === 'string') {
        const index = origin.indexOf(':');

        if (index === -1) {
          parts[1] = origin;
        } else {
          parts[0] = origin.slice(0, index);
          parts[1] = origin.slice(index + 1);
        }
      }

      if (place) {
        // Node.
        if ('type' in place || 'position' in place) {
          if (place.position) {
            position = place.position;
          }
        }
        // Position.
        else if ('start' in place || 'end' in place) {
          position = place;
        }
        // Point.
        else if ('line' in place || 'column' in place) {
          position.start = place;
        }
      }

      // Fields from `Error`
      this.name = stringifyPosition$1(place) || '1:1';
      this.message = typeof reason === 'object' ? reason.message : reason;
      this.stack = typeof reason === 'object' ? reason.stack : '';

      /**
       * Reason for message.
       * @type {string}
       */
      this.reason = this.message;
      /**
       * If true, marks associated file as no longer processable.
       * @type {boolean?}
       */
      // eslint-disable-next-line no-unused-expressions
      this.fatal;
      /**
       * Starting line of error.
       * @type {number?}
       */
      this.line = position.start.line;
      /**
       * Starting column of error.
       * @type {number?}
       */
      this.column = position.start.column;
      /**
       * Namespace of warning.
       * @type {string?}
       */
      this.source = parts[0];
      /**
       * Category of message.
       * @type {string?}
       */
      this.ruleId = parts[1];
      /**
       * Full range information, when available.
       * Has start and end properties, both set to an object with line and column, set to number?.
       * @type {Position?}
       */
      this.position = position;

      // The following fields are “well known”.
      // Not standard.
      // Feel free to add other non-standard fields to your messages.

      /* eslint-disable no-unused-expressions */
      /**
       * You can use this to specify the source value that’s being reported, which
       * is deemed incorrect.
       * @type {string?}
       */
      this.actual;
      /**
       * You can use this to suggest values that should be used instead of
       * `actual`, one or more values that are deemed as acceptable.
       * @type {Array<string>?}
       */
      this.expected;
      /**
       * You may add a file property with a path of a file (used throughout the VFile ecosystem).
       * @type {string?}
       */
      this.file;
      /**
       * You may add a url property with a link to documentation for the message.
       * @type {string?}
       */
      this.url;
      /**
       * You may add a note property with a long form description of the message (supported by vfile-reporter).
       * @type {string?}
       */
      this.note;
      /* eslint-enable no-unused-expressions */
    }
  }

  VFileMessage.prototype.file = '';
  VFileMessage.prototype.name = '';
  VFileMessage.prototype.reason = '';
  VFileMessage.prototype.message = '';
  VFileMessage.prototype.stack = '';
  VFileMessage.prototype.fatal = null;
  VFileMessage.prototype.column = null;
  VFileMessage.prototype.line = null;
  VFileMessage.prototype.source = null;
  VFileMessage.prototype.ruleId = null;
  VFileMessage.prototype.position = null;

  // A derivative work based on:
  // <https://github.com/browserify/path-browserify>.
  // Which is licensed:
  //
  // MIT License
  //
  // Copyright (c) 2013 James Halliday
  //
  // Permission is hereby granted, free of charge, to any person obtaining a copy of
  // this software and associated documentation files (the "Software"), to deal in
  // the Software without restriction, including without limitation the rights to
  // use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  // the Software, and to permit persons to whom the Software is furnished to do so,
  // subject to the following conditions:
  //
  // The above copyright notice and this permission notice shall be included in all
  // copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  // FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  // COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  // IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  // CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  // A derivative work based on:
  //
  // Parts of that are extracted from Node’s internal `path` module:
  // <https://github.com/nodejs/node/blob/master/lib/path.js>.
  // Which is licensed:
  //
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  const path = {basename, dirname, extname, join, sep: '/'};

  /* eslint-disable max-depth, complexity */

  /**
   * @param {string} path
   * @param {string} [ext]
   * @returns {string}
   */
  function basename(path, ext) {
    if (ext !== undefined && typeof ext !== 'string') {
      throw new TypeError('"ext" argument must be a string')
    }

    assertPath$1(path);
    let start = 0;
    let end = -1;
    let index = path.length;
    /** @type {boolean|undefined} */
    let seenNonSlash;

    if (ext === undefined || ext.length === 0 || ext.length > path.length) {
      while (index--) {
        if (path.charCodeAt(index) === 47 /* `/` */) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now.
          if (seenNonSlash) {
            start = index + 1;
            break
          }
        } else if (end < 0) {
          // We saw the first non-path separator, mark this as the end of our
          // path component.
          seenNonSlash = true;
          end = index + 1;
        }
      }

      return end < 0 ? '' : path.slice(start, end)
    }

    if (ext === path) {
      return ''
    }

    let firstNonSlashEnd = -1;
    let extIndex = ext.length - 1;

    while (index--) {
      if (path.charCodeAt(index) === 47 /* `/` */) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now.
        if (seenNonSlash) {
          start = index + 1;
          break
        }
      } else {
        if (firstNonSlashEnd < 0) {
          // We saw the first non-path separator, remember this index in case
          // we need it if the extension ends up not matching.
          seenNonSlash = true;
          firstNonSlashEnd = index + 1;
        }

        if (extIndex > -1) {
          // Try to match the explicit extension.
          if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {
            if (extIndex < 0) {
              // We matched the extension, so mark this as the end of our path
              // component
              end = index;
            }
          } else {
            // Extension does not match, so our result is the entire path
            // component
            extIndex = -1;
            end = firstNonSlashEnd;
          }
        }
      }
    }

    if (start === end) {
      end = firstNonSlashEnd;
    } else if (end < 0) {
      end = path.length;
    }

    return path.slice(start, end)
  }

  /**
   * @param {string} path
   * @returns {string}
   */
  function dirname(path) {
    assertPath$1(path);

    if (path.length === 0) {
      return '.'
    }

    let end = -1;
    let index = path.length;
    /** @type {boolean|undefined} */
    let unmatchedSlash;

    // Prefix `--` is important to not run on `0`.
    while (--index) {
      if (path.charCodeAt(index) === 47 /* `/` */) {
        if (unmatchedSlash) {
          end = index;
          break
        }
      } else if (!unmatchedSlash) {
        // We saw the first non-path separator
        unmatchedSlash = true;
      }
    }

    return end < 0
      ? path.charCodeAt(0) === 47 /* `/` */
        ? '/'
        : '.'
      : end === 1 && path.charCodeAt(0) === 47 /* `/` */
      ? '//'
      : path.slice(0, end)
  }

  /**
   * @param {string} path
   * @returns {string}
   */
  function extname(path) {
    assertPath$1(path);

    let index = path.length;

    let end = -1;
    let startPart = 0;
    let startDot = -1;
    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find.
    let preDotState = 0;
    /** @type {boolean|undefined} */
    let unmatchedSlash;

    while (index--) {
      const code = path.charCodeAt(index);

      if (code === 47 /* `/` */) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now.
        if (unmatchedSlash) {
          startPart = index + 1;
          break
        }

        continue
      }

      if (end < 0) {
        // We saw the first non-path separator, mark this as the end of our
        // extension.
        unmatchedSlash = true;
        end = index + 1;
      }

      if (code === 46 /* `.` */) {
        // If this is our first dot, mark it as the start of our extension.
        if (startDot < 0) {
          startDot = index;
        } else if (preDotState !== 1) {
          preDotState = 1;
        }
      } else if (startDot > -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension.
        preDotState = -1;
      }
    }

    if (
      startDot < 0 ||
      end < 0 ||
      // We saw a non-dot character immediately before the dot.
      preDotState === 0 ||
      // The (right-most) trimmed path component is exactly `..`.
      (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)
    ) {
      return ''
    }

    return path.slice(startDot, end)
  }

  /**
   * @param {Array<string>} segments
   * @returns {string}
   */
  function join(...segments) {
    let index = -1;
    /** @type {string|undefined} */
    let joined;

    while (++index < segments.length) {
      assertPath$1(segments[index]);

      if (segments[index]) {
        joined =
          joined === undefined ? segments[index] : joined + '/' + segments[index];
      }
    }

    return joined === undefined ? '.' : normalize$1(joined)
  }

  /**
   * Note: `normalize` is not exposed as `path.normalize`, so some code is
   * manually removed from it.
   *
   * @param {string} path
   * @returns {string}
   */
  function normalize$1(path) {
    assertPath$1(path);

    const absolute = path.charCodeAt(0) === 47; /* `/` */

    // Normalize the path according to POSIX rules.
    let value = normalizeString(path, !absolute);

    if (value.length === 0 && !absolute) {
      value = '.';
    }

    if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {
      value += '/';
    }

    return absolute ? '/' + value : value
  }

  /**
   * Resolve `.` and `..` elements in a path with directory names.
   *
   * @param {string} path
   * @param {boolean} allowAboveRoot
   * @returns {string}
   */
  function normalizeString(path, allowAboveRoot) {
    let result = '';
    let lastSegmentLength = 0;
    let lastSlash = -1;
    let dots = 0;
    let index = -1;
    /** @type {number|undefined} */
    let code;
    /** @type {number} */
    let lastSlashIndex;

    while (++index <= path.length) {
      if (index < path.length) {
        code = path.charCodeAt(index);
      } else if (code === 47 /* `/` */) {
        break
      } else {
        code = 47; /* `/` */
      }

      if (code === 47 /* `/` */) {
        if (lastSlash === index - 1 || dots === 1) ; else if (lastSlash !== index - 1 && dots === 2) {
          if (
            result.length < 2 ||
            lastSegmentLength !== 2 ||
            result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||
            result.charCodeAt(result.length - 2) !== 46 /* `.` */
          ) {
            if (result.length > 2) {
              lastSlashIndex = result.lastIndexOf('/');

              if (lastSlashIndex !== result.length - 1) {
                if (lastSlashIndex < 0) {
                  result = '';
                  lastSegmentLength = 0;
                } else {
                  result = result.slice(0, lastSlashIndex);
                  lastSegmentLength = result.length - 1 - result.lastIndexOf('/');
                }

                lastSlash = index;
                dots = 0;
                continue
              }
            } else if (result.length > 0) {
              result = '';
              lastSegmentLength = 0;
              lastSlash = index;
              dots = 0;
              continue
            }
          }

          if (allowAboveRoot) {
            result = result.length > 0 ? result + '/..' : '..';
            lastSegmentLength = 2;
          }
        } else {
          if (result.length > 0) {
            result += '/' + path.slice(lastSlash + 1, index);
          } else {
            result = path.slice(lastSlash + 1, index);
          }

          lastSegmentLength = index - lastSlash - 1;
        }

        lastSlash = index;
        dots = 0;
      } else if (code === 46 /* `.` */ && dots > -1) {
        dots++;
      } else {
        dots = -1;
      }
    }

    return result
  }

  /**
   * @param {string} path
   */
  function assertPath$1(path) {
    if (typeof path !== 'string') {
      throw new TypeError(
        'Path must be a string. Received ' + JSON.stringify(path)
      )
    }
  }

  /* eslint-enable max-depth, complexity */

  // Somewhat based on:
  // <https://github.com/defunctzombie/node-process/blob/master/browser.js>.
  // But I don’t think one tiny line of code can be copyrighted. 😅
  const proc = {cwd};

  function cwd() {
    return '/'
  }

  /**
   * @typedef URL
   * @property {string} hash
   * @property {string} host
   * @property {string} hostname
   * @property {string} href
   * @property {string} origin
   * @property {string} password
   * @property {string} pathname
   * @property {string} port
   * @property {string} protocol
   * @property {string} search
   * @property {any} searchParams
   * @property {string} username
   * @property {() => string} toString
   * @property {() => string} toJSON
   */

  /**
   * @param {unknown} fileURLOrPath
   * @returns {fileURLOrPath is URL}
   */
  // From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>
  function isUrl(fileURLOrPath) {
    return (
      fileURLOrPath !== null &&
      typeof fileURLOrPath === 'object' &&
      // @ts-expect-error: indexable.
      fileURLOrPath.href &&
      // @ts-expect-error: indexable.
      fileURLOrPath.origin
    )
  }

  /// <reference lib="dom" />

  // See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>

  /**
   * @param {string|URL} path
   */
  function urlToPath(path) {
    if (typeof path === 'string') {
      path = new URL(path);
    } else if (!isUrl(path)) {
      /** @type {NodeJS.ErrnoException} */
      const error = new TypeError(
        'The "path" argument must be of type string or an instance of URL. Received `' +
          path +
          '`'
      );
      error.code = 'ERR_INVALID_ARG_TYPE';
      throw error
    }

    if (path.protocol !== 'file:') {
      /** @type {NodeJS.ErrnoException} */
      const error = new TypeError('The URL must be of scheme file');
      error.code = 'ERR_INVALID_URL_SCHEME';
      throw error
    }

    return getPathFromURLPosix(path)
  }

  /**
   * @param {URL} url
   */
  function getPathFromURLPosix(url) {
    if (url.hostname !== '') {
      /** @type {NodeJS.ErrnoException} */
      const error = new TypeError(
        'File URL host must be "localhost" or empty on darwin'
      );
      error.code = 'ERR_INVALID_FILE_URL_HOST';
      throw error
    }

    const pathname = url.pathname;
    let index = -1;

    while (++index < pathname.length) {
      if (
        pathname.charCodeAt(index) === 37 /* `%` */ &&
        pathname.charCodeAt(index + 1) === 50 /* `2` */
      ) {
        const third = pathname.charCodeAt(index + 2);
        if (third === 70 /* `F` */ || third === 102 /* `f` */) {
          /** @type {NodeJS.ErrnoException} */
          const error = new TypeError(
            'File URL path must not include encoded / characters'
          );
          error.code = 'ERR_INVALID_FILE_URL_PATH';
          throw error
        }
      }
    }

    return decodeURIComponent(pathname)
  }

  /**
   * @typedef {import('unist').Node} Node
   * @typedef {import('unist').Position} Position
   * @typedef {import('unist').Point} Point
   * @typedef {Record<string, unknown> & {type: string, position?: Position|undefined}} NodeLike
   * @typedef {import('./minurl.shared.js').URL} URL
   * @typedef {import('..').VFileData} VFileData
   * @typedef {import('..').VFileValue} VFileValue
   *
   * @typedef {'ascii'|'utf8'|'utf-8'|'utf16le'|'ucs2'|'ucs-2'|'base64'|'base64url'|'latin1'|'binary'|'hex'} BufferEncoding
   *   Encodings supported by the buffer class.
   *   This is a copy of the typing from Node, copied to prevent Node globals from
   *   being needed.
   *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>
   *
   * @typedef {VFileValue|VFileOptions|VFile|URL} VFileCompatible
   *   Things that can be passed to the constructor.
   *
   * @typedef VFileCoreOptions
   * @property {VFileValue} [value]
   * @property {string} [cwd]
   * @property {Array<string>} [history]
   * @property {string|URL} [path]
   * @property {string} [basename]
   * @property {string} [stem]
   * @property {string} [extname]
   * @property {string} [dirname]
   * @property {VFileData} [data]
   *
   * @typedef Map
   *   Raw source map, see:
   *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.
   * @property {number} version
   * @property {Array<string>} sources
   * @property {Array<string>} names
   * @property {string|undefined} [sourceRoot]
   * @property {Array<string>|undefined} [sourcesContent]
   * @property {string} mappings
   * @property {string} file
   *
   * @typedef {{[key: string]: unknown} & VFileCoreOptions} VFileOptions
   *   Configuration: a bunch of keys that will be shallow copied over to the new
   *   file.
   *
   * @typedef {Record<string, unknown>} VFileReporterSettings
   * @typedef {<T = VFileReporterSettings>(files: Array<VFile>, options: T) => string} VFileReporter
   */

  // Order of setting (least specific to most), we need this because otherwise
  // `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a
  // stem can be set.
  const order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname'];

  class VFile {
    /**
     * Create a new virtual file.
     *
     * If `options` is `string` or `Buffer`, treats it as `{value: options}`.
     * If `options` is a `VFile`, shallow copies its data over to the new file.
     * All other given fields are set on the newly created `VFile`.
     *
     * Path related properties are set in the following order (least specific to
     * most specific): `history`, `path`, `basename`, `stem`, `extname`,
     * `dirname`.
     *
     * It’s not possible to set either `dirname` or `extname` without setting
     * either `history`, `path`, `basename`, or `stem` as well.
     *
     * @param {VFileCompatible} [value]
     */
    constructor(value) {
      /** @type {VFileOptions} */
      let options;

      if (!value) {
        options = {};
      } else if (typeof value === 'string' || isBuffer(value)) {
        // @ts-expect-error Looks like a buffer.
        options = {value};
      } else if (isUrl(value)) {
        options = {path: value};
      } else {
        // @ts-expect-error Looks like file or options.
        options = value;
      }

      /**
       * Place to store custom information.
       * It’s OK to store custom data directly on the file, moving it to `data`
       * gives a little more privacy.
       * @type {VFileData}
       */
      this.data = {};

      /**
       * List of messages associated with the file.
       * @type {Array<VFileMessage>}
       */
      this.messages = [];

      /**
       * List of file paths the file moved between.
       * @type {Array<string>}
       */
      this.history = [];

      /**
       * Base of `path`.
       * Defaults to `process.cwd()` (`/` in browsers).
       * @type {string}
       */
      this.cwd = proc.cwd();

      /* eslint-disable no-unused-expressions */
      /**
       * Raw value.
       * @type {VFileValue}
       */
      this.value;

      // The below are non-standard, they are “well-known”.
      // As in, used in several tools.

      /**
       * Whether a file was saved to disk.
       * This is used by vfile reporters.
       * @type {boolean}
       */
      this.stored;

      /**
       * Sometimes files have a non-string representation.
       * This can be stored in the `result` field.
       * One example is when turning markdown into React nodes.
       * This is used by unified to store non-string results.
       * @type {unknown}
       */
      this.result;

      /**
       * Sometimes files have a source map associated with them.
       * This can be stored in the `map` field.
       * This should be a `RawSourceMap` type from the `source-map` module.
       * @type {Map|undefined}
       */
      this.map;
      /* eslint-enable no-unused-expressions */

      // Set path related properties in the correct order.
      let index = -1;

      while (++index < order.length) {
        const prop = order[index];

        // Note: we specifically use `in` instead of `hasOwnProperty` to accept
        // `vfile`s too.
        if (prop in options && options[prop] !== undefined) {
          // @ts-expect-error: TS is confused by the different types for `history`.
          this[prop] = prop === 'history' ? [...options[prop]] : options[prop];
        }
      }

      /** @type {string} */
      let prop;

      // Set non-path related properties.
      for (prop in options) {
        // @ts-expect-error: fine to set other things.
        if (!order.includes(prop)) this[prop] = options[prop];
      }
    }

    /**
     * Access full path (`~/index.min.js`).
     *
     * @returns {string}
     */
    get path() {
      return this.history[this.history.length - 1]
    }

    /**
     * Set full path (`~/index.min.js`).
     * Cannot be nullified.
     *
     * @param {string|URL} path
     */
    set path(path) {
      if (isUrl(path)) {
        path = urlToPath(path);
      }

      assertNonEmpty(path, 'path');

      if (this.path !== path) {
        this.history.push(path);
      }
    }

    /**
     * Access parent path (`~`).
     */
    get dirname() {
      return typeof this.path === 'string' ? path.dirname(this.path) : undefined
    }

    /**
     * Set parent path (`~`).
     * Cannot be set if there's no `path` yet.
     */
    set dirname(dirname) {
      assertPath(this.basename, 'dirname');
      this.path = path.join(dirname || '', this.basename);
    }

    /**
     * Access basename (including extname) (`index.min.js`).
     */
    get basename() {
      return typeof this.path === 'string' ? path.basename(this.path) : undefined
    }

    /**
     * Set basename (`index.min.js`).
     * Cannot contain path separators.
     * Cannot be nullified either (use `file.path = file.dirname` instead).
     */
    set basename(basename) {
      assertNonEmpty(basename, 'basename');
      assertPart(basename, 'basename');
      this.path = path.join(this.dirname || '', basename);
    }

    /**
     * Access extname (including dot) (`.js`).
     */
    get extname() {
      return typeof this.path === 'string' ? path.extname(this.path) : undefined
    }

    /**
     * Set extname (including dot) (`.js`).
     * Cannot be set if there's no `path` yet and cannot contain path separators.
     */
    set extname(extname) {
      assertPart(extname, 'extname');
      assertPath(this.dirname, 'extname');

      if (extname) {
        if (extname.charCodeAt(0) !== 46 /* `.` */) {
          throw new Error('`extname` must start with `.`')
        }

        if (extname.includes('.', 1)) {
          throw new Error('`extname` cannot contain multiple dots')
        }
      }

      this.path = path.join(this.dirname, this.stem + (extname || ''));
    }

    /**
     * Access stem (w/o extname) (`index.min`).
     */
    get stem() {
      return typeof this.path === 'string'
        ? path.basename(this.path, this.extname)
        : undefined
    }

    /**
     * Set stem (w/o extname) (`index.min`).
     * Cannot be nullified, and cannot contain path separators.
     */
    set stem(stem) {
      assertNonEmpty(stem, 'stem');
      assertPart(stem, 'stem');
      this.path = path.join(this.dirname || '', stem + (this.extname || ''));
    }

    /**
     * Serialize the file.
     *
     * @param {BufferEncoding} [encoding='utf8'] If `file.value` is a buffer, `encoding` is used to serialize buffers.
     * @returns {string}
     */
    toString(encoding) {
      return (this.value || '').toString(encoding)
    }

    /**
     * Create a message and associates it w/ the file.
     *
     * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.
     * @param {Node|NodeLike|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).
     * @param {string} [origin] Place in code the message originates from (`string`, optional).
     * @returns {VFileMessage}
     */
    message(reason, place, origin) {
      const message = new VFileMessage(reason, place, origin);

      if (this.path) {
        message.name = this.path + ':' + message.name;
        message.file = this.path;
      }

      message.fatal = false;

      this.messages.push(message);

      return message
    }

    /**
     * Info: create a message, associate it with the file, and mark the fatality
     * as `null`.
     * Calls `message()` internally.
     *
     * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.
     * @param {Node|NodeLike|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).
     * @param {string} [origin] Place in code the message originates from (`string`, optional).
     * @returns {VFileMessage}
     */
    info(reason, place, origin) {
      const message = this.message(reason, place, origin);

      message.fatal = null;

      return message
    }

    /**
     * Fail: create a message, associate it with the file, mark the fatality as
     * `true`.
     * Note: fatal errors mean a file is no longer processable.
     * Calls `message()` internally.
     *
     * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.
     * @param {Node|NodeLike|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).
     * @param {string} [origin] Place in code the message originates from (`string`, optional).
     * @returns {never}
     */
    fail(reason, place, origin) {
      const message = this.message(reason, place, origin);

      message.fatal = true;

      throw message
    }
  }

  /**
   * Assert that `part` is not a path (as in, does not contain `path.sep`).
   *
   * @param {string|undefined} part
   * @param {string} name
   * @returns {void}
   */
  function assertPart(part, name) {
    if (part && part.includes(path.sep)) {
      throw new Error(
        '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'
      )
    }
  }

  /**
   * Assert that `part` is not empty.
   *
   * @param {string|undefined} part
   * @param {string} name
   * @returns {asserts part is string}
   */
  function assertNonEmpty(part, name) {
    if (!part) {
      throw new Error('`' + name + '` cannot be empty')
    }
  }

  /**
   * Assert `path` exists.
   *
   * @param {string|undefined} path
   * @param {string} name
   * @returns {asserts path is string}
   */
  function assertPath(path, name) {
    if (!path) {
      throw new Error('Setting `' + name + '` requires `path` to be set too')
    }
  }

  /**
   * Throw a given error.
   *
   * @param {Error|null|undefined} [error]
   *   Maybe error.
   * @returns {asserts error is null|undefined}
   */
  function bail(error) {
    if (error) {
      throw error
    }
  }

  var hasOwn = Object.prototype.hasOwnProperty;
  var toStr = Object.prototype.toString;
  var defineProperty = Object.defineProperty;
  var gOPD = Object.getOwnPropertyDescriptor;

  var isArray = function isArray(arr) {
  	if (typeof Array.isArray === 'function') {
  		return Array.isArray(arr);
  	}

  	return toStr.call(arr) === '[object Array]';
  };

  var isPlainObject$1 = function isPlainObject(obj) {
  	if (!obj || toStr.call(obj) !== '[object Object]') {
  		return false;
  	}

  	var hasOwnConstructor = hasOwn.call(obj, 'constructor');
  	var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
  	// Not own constructor property must be Object
  	if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
  		return false;
  	}

  	// Own properties are enumerated firstly, so to speed up,
  	// if last one is own, then all properties are own.
  	var key;
  	for (key in obj) { /**/ }

  	return typeof key === 'undefined' || hasOwn.call(obj, key);
  };

  // If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target
  var setProperty = function setProperty(target, options) {
  	if (defineProperty && options.name === '__proto__') {
  		defineProperty(target, options.name, {
  			enumerable: true,
  			configurable: true,
  			value: options.newValue,
  			writable: true
  		});
  	} else {
  		target[options.name] = options.newValue;
  	}
  };

  // Return undefined instead of __proto__ if '__proto__' is not an own property
  var getProperty = function getProperty(obj, name) {
  	if (name === '__proto__') {
  		if (!hasOwn.call(obj, name)) {
  			return void 0;
  		} else if (gOPD) {
  			// In early versions of node, obj['__proto__'] is buggy when obj has
  			// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.
  			return gOPD(obj, name).value;
  		}
  	}

  	return obj[name];
  };

  var extend = function extend() {
  	var options, name, src, copy, copyIsArray, clone;
  	var target = arguments[0];
  	var i = 1;
  	var length = arguments.length;
  	var deep = false;

  	// Handle a deep copy situation
  	if (typeof target === 'boolean') {
  		deep = target;
  		target = arguments[1] || {};
  		// skip the boolean and the target
  		i = 2;
  	}
  	if (target == null || (typeof target !== 'object' && typeof target !== 'function')) {
  		target = {};
  	}

  	for (; i < length; ++i) {
  		options = arguments[i];
  		// Only deal with non-null/undefined values
  		if (options != null) {
  			// Extend the base object
  			for (name in options) {
  				src = getProperty(target, name);
  				copy = getProperty(options, name);

  				// Prevent never-ending loop
  				if (target !== copy) {
  					// Recurse if we're merging plain objects or arrays
  					if (deep && copy && (isPlainObject$1(copy) || (copyIsArray = isArray(copy)))) {
  						if (copyIsArray) {
  							copyIsArray = false;
  							clone = src && isArray(src) ? src : [];
  						} else {
  							clone = src && isPlainObject$1(src) ? src : {};
  						}

  						// Never move original objects, clone them
  						setProperty(target, { name: name, newValue: extend(deep, clone, copy) });

  					// Don't bring in undefined values
  					} else if (typeof copy !== 'undefined') {
  						setProperty(target, { name: name, newValue: copy });
  					}
  				}
  			}
  		}
  	}

  	// Return the modified object
  	return target;
  };

  function isPlainObject(value) {
  	if (Object.prototype.toString.call(value) !== '[object Object]') {
  		return false;
  	}

  	const prototype = Object.getPrototypeOf(value);
  	return prototype === null || prototype === Object.prototype;
  }

  /**
   * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback
   * @typedef {(...input: Array<any>) => any} Middleware
   *
   * @typedef {(...input: Array<any>) => void} Run
   *   Call all middleware.
   * @typedef {(fn: Middleware) => Pipeline} Use
   *   Add `fn` (middleware) to the list.
   * @typedef {{run: Run, use: Use}} Pipeline
   *   Middleware.
   */

  /**
   * Create new middleware.
   *
   * @returns {Pipeline}
   */
  function trough() {
    /** @type {Array<Middleware>} */
    const fns = [];
    /** @type {Pipeline} */
    const pipeline = {run, use};

    return pipeline

    /** @type {Run} */
    function run(...values) {
      let middlewareIndex = -1;
      /** @type {Callback} */
      const callback = values.pop();

      if (typeof callback !== 'function') {
        throw new TypeError('Expected function as last argument, not ' + callback)
      }

      next(null, ...values);

      /**
       * Run the next `fn`, or we’re done.
       *
       * @param {Error|null|undefined} error
       * @param {Array<any>} output
       */
      function next(error, ...output) {
        const fn = fns[++middlewareIndex];
        let index = -1;

        if (error) {
          callback(error);
          return
        }

        // Copy non-nullish input into values.
        while (++index < values.length) {
          if (output[index] === null || output[index] === undefined) {
            output[index] = values[index];
          }
        }

        // Save the newly created `output` for the next call.
        values = output;

        // Next or done.
        if (fn) {
          wrap$1(fn, next)(...output);
        } else {
          callback(null, ...output);
        }
      }
    }

    /** @type {Use} */
    function use(middelware) {
      if (typeof middelware !== 'function') {
        throw new TypeError(
          'Expected `middelware` to be a function, not ' + middelware
        )
      }

      fns.push(middelware);
      return pipeline
    }
  }

  /**
   * Wrap `middleware`.
   * Can be sync or async; return a promise, receive a callback, or return new
   * values and errors.
   *
   * @param {Middleware} middleware
   * @param {Callback} callback
   */
  function wrap$1(middleware, callback) {
    /** @type {boolean} */
    let called;

    return wrapped

    /**
     * Call `middleware`.
     * @this {any}
     * @param {Array<any>} parameters
     * @returns {void}
     */
    function wrapped(...parameters) {
      const fnExpectsCallback = middleware.length > parameters.length;
      /** @type {any} */
      let result;

      if (fnExpectsCallback) {
        parameters.push(done);
      }

      try {
        result = middleware.apply(this, parameters);
      } catch (error) {
        const exception = /** @type {Error} */ (error);

        // Well, this is quite the pickle.
        // `middleware` received a callback and called it synchronously, but that
        // threw an error.
        // The only thing left to do is to throw the thing instead.
        if (fnExpectsCallback && called) {
          throw exception
        }

        return done(exception)
      }

      if (!fnExpectsCallback) {
        if (result instanceof Promise) {
          result.then(then, done);
        } else if (result instanceof Error) {
          done(result);
        } else {
          then(result);
        }
      }
    }

    /**
     * Call `callback`, only once.
     * @type {Callback}
     */
    function done(error, ...output) {
      if (!called) {
        called = true;
        callback(error, ...output);
      }
    }

    /**
     * Call `done` with one value.
     *
     * @param {any} [value]
     */
    function then(value) {
      done(null, value);
    }
  }

  /**
   * @typedef {import('unist').Node} Node
   * @typedef {import('vfile').VFileCompatible} VFileCompatible
   * @typedef {import('vfile').VFileValue} VFileValue
   * @typedef {import('..').Processor} Processor
   * @typedef {import('..').Plugin} Plugin
   * @typedef {import('..').Preset} Preset
   * @typedef {import('..').Pluggable} Pluggable
   * @typedef {import('..').PluggableList} PluggableList
   * @typedef {import('..').Transformer} Transformer
   * @typedef {import('..').Parser} Parser
   * @typedef {import('..').Compiler} Compiler
   * @typedef {import('..').RunCallback} RunCallback
   * @typedef {import('..').ProcessCallback} ProcessCallback
   *
   * @typedef Context
   * @property {Node} tree
   * @property {VFile} file
   */

  // Expose a frozen processor.
  const unified = base().freeze();

  const own$7 = {}.hasOwnProperty;

  // Function to create the first processor.
  /**
   * @returns {Processor}
   */
  function base() {
    const transformers = trough();
    /** @type {Processor['attachers']} */
    const attachers = [];
    /** @type {Record<string, unknown>} */
    let namespace = {};
    /** @type {boolean|undefined} */
    let frozen;
    let freezeIndex = -1;

    // Data management.
    // @ts-expect-error: overloads are handled.
    processor.data = data;
    processor.Parser = undefined;
    processor.Compiler = undefined;

    // Lock.
    processor.freeze = freeze;

    // Plugins.
    processor.attachers = attachers;
    // @ts-expect-error: overloads are handled.
    processor.use = use;

    // API.
    processor.parse = parse;
    processor.stringify = stringify;
    // @ts-expect-error: overloads are handled.
    processor.run = run;
    processor.runSync = runSync;
    // @ts-expect-error: overloads are handled.
    processor.process = process;
    processor.processSync = processSync;

    // Expose.
    return processor

    // Create a new processor based on the processor in the current scope.
    /** @type {Processor} */
    function processor() {
      const destination = base();
      let index = -1;

      while (++index < attachers.length) {
        destination.use(...attachers[index]);
      }

      destination.data(extend(true, {}, namespace));

      return destination
    }

    /**
     * @param {string|Record<string, unknown>} [key]
     * @param {unknown} [value]
     * @returns {unknown}
     */
    function data(key, value) {
      if (typeof key === 'string') {
        // Set `key`.
        if (arguments.length === 2) {
          assertUnfrozen('data', frozen);
          namespace[key] = value;
          return processor
        }

        // Get `key`.
        return (own$7.call(namespace, key) && namespace[key]) || null
      }

      // Set space.
      if (key) {
        assertUnfrozen('data', frozen);
        namespace = key;
        return processor
      }

      // Get space.
      return namespace
    }

    /** @type {Processor['freeze']} */
    function freeze() {
      if (frozen) {
        return processor
      }

      while (++freezeIndex < attachers.length) {
        const [attacher, ...options] = attachers[freezeIndex];

        if (options[0] === false) {
          continue
        }

        if (options[0] === true) {
          options[0] = undefined;
        }

        /** @type {Transformer|void} */
        const transformer = attacher.call(processor, ...options);

        if (typeof transformer === 'function') {
          transformers.use(transformer);
        }
      }

      frozen = true;
      freezeIndex = Number.POSITIVE_INFINITY;

      return processor
    }

    /**
     * @param {Pluggable|null|undefined} [value]
     * @param {...unknown} options
     * @returns {Processor}
     */
    function use(value, ...options) {
      /** @type {Record<string, unknown>|undefined} */
      let settings;

      assertUnfrozen('use', frozen);

      if (value === null || value === undefined) ; else if (typeof value === 'function') {
        addPlugin(value, ...options);
      } else if (typeof value === 'object') {
        if (Array.isArray(value)) {
          addList(value);
        } else {
          addPreset(value);
        }
      } else {
        throw new TypeError('Expected usable value, not `' + value + '`')
      }

      if (settings) {
        namespace.settings = Object.assign(namespace.settings || {}, settings);
      }

      return processor

      /**
       * @param {import('..').Pluggable<unknown[]>} value
       * @returns {void}
       */
      function add(value) {
        if (typeof value === 'function') {
          addPlugin(value);
        } else if (typeof value === 'object') {
          if (Array.isArray(value)) {
            const [plugin, ...options] = value;
            addPlugin(plugin, ...options);
          } else {
            addPreset(value);
          }
        } else {
          throw new TypeError('Expected usable value, not `' + value + '`')
        }
      }

      /**
       * @param {Preset} result
       * @returns {void}
       */
      function addPreset(result) {
        addList(result.plugins);

        if (result.settings) {
          settings = Object.assign(settings || {}, result.settings);
        }
      }

      /**
       * @param {PluggableList|null|undefined} [plugins]
       * @returns {void}
       */
      function addList(plugins) {
        let index = -1;

        if (plugins === null || plugins === undefined) ; else if (Array.isArray(plugins)) {
          while (++index < plugins.length) {
            const thing = plugins[index];
            add(thing);
          }
        } else {
          throw new TypeError('Expected a list of plugins, not `' + plugins + '`')
        }
      }

      /**
       * @param {Plugin} plugin
       * @param {...unknown} [value]
       * @returns {void}
       */
      function addPlugin(plugin, value) {
        let index = -1;
        /** @type {Processor['attachers'][number]|undefined} */
        let entry;

        while (++index < attachers.length) {
          if (attachers[index][0] === plugin) {
            entry = attachers[index];
            break
          }
        }

        if (entry) {
          if (isPlainObject(entry[1]) && isPlainObject(value)) {
            value = extend(true, entry[1], value);
          }

          entry[1] = value;
        } else {
          // @ts-expect-error: fine.
          attachers.push([...arguments]);
        }
      }
    }

    /** @type {Processor['parse']} */
    function parse(doc) {
      processor.freeze();
      const file = vfile(doc);
      const Parser = processor.Parser;
      assertParser('parse', Parser);

      if (newable(Parser, 'parse')) {
        // @ts-expect-error: `newable` checks this.
        return new Parser(String(file), file).parse()
      }

      // @ts-expect-error: `newable` checks this.
      return Parser(String(file), file) // eslint-disable-line new-cap
    }

    /** @type {Processor['stringify']} */
    function stringify(node, doc) {
      processor.freeze();
      const file = vfile(doc);
      const Compiler = processor.Compiler;
      assertCompiler('stringify', Compiler);
      assertNode(node);

      if (newable(Compiler, 'compile')) {
        // @ts-expect-error: `newable` checks this.
        return new Compiler(node, file).compile()
      }

      // @ts-expect-error: `newable` checks this.
      return Compiler(node, file) // eslint-disable-line new-cap
    }

    /**
     * @param {Node} node
     * @param {VFileCompatible|RunCallback} [doc]
     * @param {RunCallback} [callback]
     * @returns {Promise<Node>|void}
     */
    function run(node, doc, callback) {
      assertNode(node);
      processor.freeze();

      if (!callback && typeof doc === 'function') {
        callback = doc;
        doc = undefined;
      }

      if (!callback) {
        return new Promise(executor)
      }

      executor(null, callback);

      /**
       * @param {null|((node: Node) => void)} resolve
       * @param {(error: Error) => void} reject
       * @returns {void}
       */
      function executor(resolve, reject) {
        // @ts-expect-error: `doc` can’t be a callback anymore, we checked.
        transformers.run(node, vfile(doc), done);

        /**
         * @param {Error|null} error
         * @param {Node} tree
         * @param {VFile} file
         * @returns {void}
         */
        function done(error, tree, file) {
          tree = tree || node;
          if (error) {
            reject(error);
          } else if (resolve) {
            resolve(tree);
          } else {
            // @ts-expect-error: `callback` is defined if `resolve` is not.
            callback(null, tree, file);
          }
        }
      }
    }

    /** @type {Processor['runSync']} */
    function runSync(node, file) {
      /** @type {Node|undefined} */
      let result;
      /** @type {boolean|undefined} */
      let complete;

      processor.run(node, file, done);

      assertDone('runSync', 'run', complete);

      // @ts-expect-error: we either bailed on an error or have a tree.
      return result

      /**
       * @param {Error|null} [error]
       * @param {Node} [tree]
       * @returns {void}
       */
      function done(error, tree) {
        bail(error);
        result = tree;
        complete = true;
      }
    }

    /**
     * @param {VFileCompatible} doc
     * @param {ProcessCallback} [callback]
     * @returns {Promise<VFile>|undefined}
     */
    function process(doc, callback) {
      processor.freeze();
      assertParser('process', processor.Parser);
      assertCompiler('process', processor.Compiler);

      if (!callback) {
        return new Promise(executor)
      }

      executor(null, callback);

      /**
       * @param {null|((file: VFile) => void)} resolve
       * @param {(error?: Error|null|undefined) => void} reject
       * @returns {void}
       */
      function executor(resolve, reject) {
        const file = vfile(doc);

        processor.run(processor.parse(file), file, (error, tree, file) => {
          if (error || !tree || !file) {
            done(error);
          } else {
            /** @type {unknown} */
            const result = processor.stringify(tree, file);

            if (result === undefined || result === null) ; else if (looksLikeAVFileValue(result)) {
              file.value = result;
            } else {
              file.result = result;
            }

            done(error, file);
          }
        });

        /**
         * @param {Error|null|undefined} [error]
         * @param {VFile|undefined} [file]
         * @returns {void}
         */
        function done(error, file) {
          if (error || !file) {
            reject(error);
          } else if (resolve) {
            resolve(file);
          } else {
            // @ts-expect-error: `callback` is defined if `resolve` is not.
            callback(null, file);
          }
        }
      }
    }

    /** @type {Processor['processSync']} */
    function processSync(doc) {
      /** @type {boolean|undefined} */
      let complete;

      processor.freeze();
      assertParser('processSync', processor.Parser);
      assertCompiler('processSync', processor.Compiler);

      const file = vfile(doc);

      processor.process(file, done);

      assertDone('processSync', 'process', complete);

      return file

      /**
       * @param {Error|null|undefined} [error]
       * @returns {void}
       */
      function done(error) {
        complete = true;
        bail(error);
      }
    }
  }

  /**
   * Check if `value` is a constructor.
   *
   * @param {unknown} value
   * @param {string} name
   * @returns {boolean}
   */
  function newable(value, name) {
    return (
      typeof value === 'function' &&
      // Prototypes do exist.
      // type-coverage:ignore-next-line
      value.prototype &&
      // A function with keys in its prototype is probably a constructor.
      // Classes’ prototype methods are not enumerable, so we check if some value
      // exists in the prototype.
      // type-coverage:ignore-next-line
      (keys(value.prototype) || name in value.prototype)
    )
  }

  /**
   * Check if `value` is an object with keys.
   *
   * @param {Record<string, unknown>} value
   * @returns {boolean}
   */
  function keys(value) {
    /** @type {string} */
    let key;

    for (key in value) {
      if (own$7.call(value, key)) {
        return true
      }
    }

    return false
  }

  /**
   * Assert a parser is available.
   *
   * @param {string} name
   * @param {unknown} value
   * @returns {asserts value is Parser}
   */
  function assertParser(name, value) {
    if (typeof value !== 'function') {
      throw new TypeError('Cannot `' + name + '` without `Parser`')
    }
  }

  /**
   * Assert a compiler is available.
   *
   * @param {string} name
   * @param {unknown} value
   * @returns {asserts value is Compiler}
   */
  function assertCompiler(name, value) {
    if (typeof value !== 'function') {
      throw new TypeError('Cannot `' + name + '` without `Compiler`')
    }
  }

  /**
   * Assert the processor is not frozen.
   *
   * @param {string} name
   * @param {unknown} frozen
   * @returns {asserts frozen is false}
   */
  function assertUnfrozen(name, frozen) {
    if (frozen) {
      throw new Error(
        'Cannot call `' +
          name +
          '` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'
      )
    }
  }

  /**
   * Assert `node` is a unist node.
   *
   * @param {unknown} node
   * @returns {asserts node is Node}
   */
  function assertNode(node) {
    // `isPlainObj` unfortunately uses `any` instead of `unknown`.
    // type-coverage:ignore-next-line
    if (!isPlainObject(node) || typeof node.type !== 'string') {
      throw new TypeError('Expected node, got `' + node + '`')
      // Fine.
    }
  }

  /**
   * Assert that `complete` is `true`.
   *
   * @param {string} name
   * @param {string} asyncName
   * @param {unknown} complete
   * @returns {asserts complete is true}
   */
  function assertDone(name, asyncName, complete) {
    if (!complete) {
      throw new Error(
        '`' + name + '` finished async. Use `' + asyncName + '` instead'
      )
    }
  }

  /**
   * @param {VFileCompatible} [value]
   * @returns {VFile}
   */
  function vfile(value) {
    return looksLikeAVFile(value) ? value : new VFile(value)
  }

  /**
   * @param {VFileCompatible} [value]
   * @returns {value is VFile}
   */
  function looksLikeAVFile(value) {
    return Boolean(
      value &&
        typeof value === 'object' &&
        'message' in value &&
        'messages' in value
    )
  }

  /**
   * @param {unknown} [value]
   * @returns {value is VFileValue}
   */
  function looksLikeAVFileValue(value) {
    return typeof value === 'string' || isBuffer(value)
  }

  /**
   * @typedef Options
   * @property {boolean} [includeImageAlt=true]
   */

  /**
   * Get the text content of a node.
   * Prefer the node’s plain-text fields, otherwise serialize its children,
   * and if the given value is an array, serialize the nodes in it.
   *
   * @param {unknown} node
   * @param {Options} [options]
   * @returns {string}
   */
  function toString(node, options) {
    var {includeImageAlt = true} = options || {};
    return one$1(node, includeImageAlt)
  }

  /**
   * @param {unknown} node
   * @param {boolean} includeImageAlt
   * @returns {string}
   */
  function one$1(node, includeImageAlt) {
    return (
      (node &&
        typeof node === 'object' &&
        // @ts-ignore looks like a literal.
        (node.value ||
          // @ts-ignore looks like an image.
          (includeImageAlt ? node.alt : '') ||
          // @ts-ignore looks like a parent.
          ('children' in node && all$1(node.children, includeImageAlt)) ||
          (Array.isArray(node) && all$1(node, includeImageAlt)))) ||
      ''
    )
  }

  /**
   * @param {Array.<unknown>} values
   * @param {boolean} includeImageAlt
   * @returns {string}
   */
  function all$1(values, includeImageAlt) {
    /** @type {Array.<string>} */
    var result = [];
    var index = -1;

    while (++index < values.length) {
      result[index] = one$1(values[index], includeImageAlt);
    }

    return result.join('')
  }

  /**
   * Like `Array#splice`, but smarter for giant arrays.
   *
   * `Array#splice` takes all items to be inserted as individual argument which
   * causes a stack overflow in V8 when trying to insert 100k items for instance.
   *
   * Otherwise, this does not return the removed items, and takes `items` as an
   * array instead of rest parameters.
   *
   * @template {unknown} T
   * @param {T[]} list
   * @param {number} start
   * @param {number} remove
   * @param {T[]} items
   * @returns {void}
   */
  function splice(list, start, remove, items) {
    const end = list.length;
    let chunkStart = 0;
    /** @type {unknown[]} */

    let parameters; // Make start between zero and `end` (included).

    if (start < 0) {
      start = -start > end ? 0 : end + start;
    } else {
      start = start > end ? end : start;
    }

    remove = remove > 0 ? remove : 0; // No need to chunk the items if there’s only a couple (10k) items.

    if (items.length < 10000) {
      parameters = Array.from(items);
      parameters.unshift(start, remove) // @ts-expect-error Hush, it’s fine.
      ;[].splice.apply(list, parameters);
    } else {
      // Delete `remove` items starting from `start`
      if (remove) [].splice.apply(list, [start, remove]); // Insert the items in chunks to not cause stack overflows.

      while (chunkStart < items.length) {
        parameters = items.slice(chunkStart, chunkStart + 10000);
        parameters.unshift(start, 0) // @ts-expect-error Hush, it’s fine.
        ;[].splice.apply(list, parameters);
        chunkStart += 10000;
        start += 10000;
      }
    }
  }
  /**
   * Append `items` (an array) at the end of `list` (another array).
   * When `list` was empty, returns `items` instead.
   *
   * This prevents a potentially expensive operation when `list` is empty,
   * and adds items in batches to prevent V8 from hanging.
   *
   * @template {unknown} T
   * @param {T[]} list
   * @param {T[]} items
   * @returns {T[]}
   */

  function push(list, items) {
    if (list.length > 0) {
      splice(list, list.length, 0, items);
      return list
    }

    return items
  }

  /**
   * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension
   * @typedef {import('micromark-util-types').Extension} Extension
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension
   */

  const hasOwnProperty$1 = {}.hasOwnProperty;

  /**
   * Combine several syntax extensions into one.
   *
   * @param {Extension[]} extensions List of syntax extensions.
   * @returns {NormalizedExtension} A single combined extension.
   */
  function combineExtensions(extensions) {
    /** @type {NormalizedExtension} */
    const all = {};
    let index = -1;

    while (++index < extensions.length) {
      syntaxExtension(all, extensions[index]);
    }

    return all
  }

  /**
   * Merge `extension` into `all`.
   *
   * @param {NormalizedExtension} all Extension to merge into.
   * @param {Extension} extension Extension to merge.
   * @returns {void}
   */
  function syntaxExtension(all, extension) {
    /** @type {string} */
    let hook;

    for (hook in extension) {
      const maybe = hasOwnProperty$1.call(all, hook) ? all[hook] : undefined;
      const left = maybe || (all[hook] = {});
      const right = extension[hook];
      /** @type {string} */
      let code;

      for (code in right) {
        if (!hasOwnProperty$1.call(left, code)) left[code] = [];
        const value = right[code];
        constructs(
          // @ts-expect-error Looks like a list.
          left[code],
          Array.isArray(value) ? value : value ? [value] : []
        );
      }
    }
  }

  /**
   * Merge `list` into `existing` (both lists of constructs).
   * Mutates `existing`.
   *
   * @param {unknown[]} existing
   * @param {unknown[]} list
   * @returns {void}
   */
  function constructs(existing, list) {
    let index = -1;
    /** @type {unknown[]} */
    const before = [];

    while (++index < list.length) {
  (list[index].add === 'after' ? existing : before).push(list[index]);
    }

    splice(existing, 0, 0, before);
  }

  // This module is generated by `script/`.
  //
  // CommonMark handles attention (emphasis, strong) markers based on what comes
  // before or after them.
  // One such difference is if those characters are Unicode punctuation.
  // This script is generated from the Unicode data.
  const unicodePunctuationRegex =
    /[!-/:-@[-`{-~\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/;

  /**
   * @typedef {import('micromark-util-types').Code} Code
   */
  /**
   * Check whether the character code represents an ASCII alpha (`a` through `z`,
   * case insensitive).
   *
   * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.
   *
   * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)
   * to U+005A (`Z`).
   *
   * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)
   * to U+007A (`z`).
   */

  const asciiAlpha = regexCheck(/[A-Za-z]/);
  /**
   * Check whether the character code represents an ASCII digit (`0` through `9`).
   *
   * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to
   * U+0039 (`9`).
   */

  const asciiDigit = regexCheck(/\d/);
  /**
   * Check whether the character code represents an ASCII hex digit (`a` through
   * `f`, case insensitive, or `0` through `9`).
   *
   * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex
   * digit, or an ASCII lower hex digit.
   *
   * An **ASCII upper hex digit** is a character in the inclusive range U+0041
   * (`A`) to U+0046 (`F`).
   *
   * An **ASCII lower hex digit** is a character in the inclusive range U+0061
   * (`a`) to U+0066 (`f`).
   */

  const asciiHexDigit = regexCheck(/[\dA-Fa-f]/);
  /**
   * Check whether the character code represents an ASCII alphanumeric (`a`
   * through `z`, case insensitive, or `0` through `9`).
   *
   * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha
   * (see `asciiAlpha`).
   */

  const asciiAlphanumeric = regexCheck(/[\dA-Za-z]/);
  /**
   * Check whether the character code represents ASCII punctuation.
   *
   * An **ASCII punctuation** is a character in the inclusive ranges U+0021
   * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT
   * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT
   * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).
   */

  const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);
  /**
   * Check whether the character code represents an ASCII atext.
   *
   * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in
   * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),
   * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F
   * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E
   * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE
   * (`{`) to U+007E TILDE (`~`).
   *
   * See:
   * **\[RFC5322]**:
   * [Internet Message Format](https://tools.ietf.org/html/rfc5322).
   * P. Resnick.
   * IETF.
   */

  const asciiAtext = regexCheck(/[#-'*+\--9=?A-Z^-~]/);
  /**
   * Check whether a character code is an ASCII control character.
   *
   * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)
   * to U+001F (US), or U+007F (DEL).
   *
   * @param {Code} code
   * @returns {code is number}
   */

  function asciiControl(code) {
    return (
      // Special whitespace codes (which have negative values), C0 and Control
      // character DEL
      code !== null && (code < 32 || code === 127)
    )
  }
  /**
   * Check whether a character code is a markdown line ending (see
   * `markdownLineEnding`) or markdown space (see `markdownSpace`).
   *
   * @param {Code} code
   * @returns {code is number}
   */

  function markdownLineEndingOrSpace(code) {
    return code !== null && (code < 0 || code === 32)
  }
  /**
   * Check whether a character code is a markdown line ending.
   *
   * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN
   * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).
   *
   * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE
   * RETURN (CR) are replaced by these virtual characters depending on whether
   * they occurred together.
   *
   * @param {Code} code
   * @returns {code is number}
   */

  function markdownLineEnding(code) {
    return code !== null && code < -2
  }
  /**
   * Check whether a character code is a markdown space.
   *
   * A **markdown space** is the concrete character U+0020 SPACE (SP) and the
   * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).
   *
   * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is
   * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL
   * SPACE (VS) characters, depending on the column at which the tab occurred.
   *
   * @param {Code} code
   * @returns {code is number}
   */

  function markdownSpace(code) {
    return code === -2 || code === -1 || code === 32
  }
  /**
   * Check whether the character code represents Unicode whitespace.
   *
   * Note that this does handle micromark specific markdown whitespace characters.
   * See `markdownLineEndingOrSpace` to check that.
   *
   * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,
   * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),
   * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\[UNICODE]**).
   *
   * See:
   * **\[UNICODE]**:
   * [The Unicode Standard](https://www.unicode.org/versions/).
   * Unicode Consortium.
   */

  const unicodeWhitespace = regexCheck(/\s/);
  /**
   * Check whether the character code represents Unicode punctuation.
   *
   * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,
   * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`
   * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`
   * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII
   * punctuation (see `asciiPunctuation`).
   *
   * See:
   * **\[UNICODE]**:
   * [The Unicode Standard](https://www.unicode.org/versions/).
   * Unicode Consortium.
   */
  // Size note: removing ASCII from the regex and using `asciiPunctuation` here
  // In fact adds to the bundle size.

  const unicodePunctuation = regexCheck(unicodePunctuationRegex);
  /**
   * Create a code check from a regex.
   *
   * @param {RegExp} regex
   * @returns {(code: Code) => code is number}
   */

  function regexCheck(regex) {
    return check
    /**
     * Check whether a code matches the bound regex.
     *
     * @param {Code} code Character code
     * @returns {code is number} Whether the character code matches the bound regex
     */

    function check(code) {
      return code !== null && regex.test(String.fromCharCode(code))
    }
  }

  /**
   * @typedef {import('micromark-util-types').Effects} Effects
   * @typedef {import('micromark-util-types').State} State
   */
  /**
   * @param {Effects} effects
   * @param {State} ok
   * @param {string} type
   * @param {number} [max=Infinity]
   * @returns {State}
   */

  function factorySpace(effects, ok, type, max) {
    const limit = max ? max - 1 : Number.POSITIVE_INFINITY;
    let size = 0;
    return start
    /** @type {State} */

    function start(code) {
      if (markdownSpace(code)) {
        effects.enter(type);
        return prefix(code)
      }

      return ok(code)
    }
    /** @type {State} */

    function prefix(code) {
      if (markdownSpace(code) && size++ < limit) {
        effects.consume(code);
        return prefix
      }

      effects.exit(type);
      return ok(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
   * @typedef {import('micromark-util-types').Initializer} Initializer
   * @typedef {import('micromark-util-types').Token} Token
   * @typedef {import('micromark-util-types').State} State
   */

  /** @type {InitialConstruct} */
  const content$1 = {
    tokenize: initializeContent
  };
  /** @type {Initializer} */

  function initializeContent(effects) {
    const contentStart = effects.attempt(
      this.parser.constructs.contentInitial,
      afterContentStartConstruct,
      paragraphInitial
    );
    /** @type {Token} */

    let previous;
    return contentStart
    /** @type {State} */

    function afterContentStartConstruct(code) {
      if (code === null) {
        effects.consume(code);
        return
      }

      effects.enter('lineEnding');
      effects.consume(code);
      effects.exit('lineEnding');
      return factorySpace(effects, contentStart, 'linePrefix')
    }
    /** @type {State} */

    function paragraphInitial(code) {
      effects.enter('paragraph');
      return lineStart(code)
    }
    /** @type {State} */

    function lineStart(code) {
      const token = effects.enter('chunkText', {
        contentType: 'text',
        previous
      });

      if (previous) {
        previous.next = token;
      }

      previous = token;
      return data(code)
    }
    /** @type {State} */

    function data(code) {
      if (code === null) {
        effects.exit('chunkText');
        effects.exit('paragraph');
        effects.consume(code);
        return
      }

      if (markdownLineEnding(code)) {
        effects.consume(code);
        effects.exit('chunkText');
        return lineStart
      } // Data.

      effects.consume(code);
      return data
    }
  }

  /**
   * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
   * @typedef {import('micromark-util-types').Initializer} Initializer
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').Token} Token
   * @typedef {import('micromark-util-types').State} State
   * @typedef {import('micromark-util-types').Point} Point
   */
  /** @type {InitialConstruct} */

  const document$2 = {
    tokenize: initializeDocument
  };
  /** @type {Construct} */

  const containerConstruct = {
    tokenize: tokenizeContainer
  };
  /** @type {Initializer} */

  function initializeDocument(effects) {
    const self = this;
    /** @type {StackItem[]} */

    const stack = [];
    let continued = 0;
    /** @type {TokenizeContext|undefined} */

    let childFlow;
    /** @type {Token|undefined} */

    let childToken;
    /** @type {number} */

    let lineStartOffset;
    return start
    /** @type {State} */

    function start(code) {
      // First we iterate through the open blocks, starting with the root
      // document, and descending through last children down to the last open
      // block.
      // Each block imposes a condition that the line must satisfy if the block is
      // to remain open.
      // For example, a block quote requires a `>` character.
      // A paragraph requires a non-blank line.
      // In this phase we may match all or just some of the open blocks.
      // But we cannot close unmatched blocks yet, because we may have a lazy
      // continuation line.
      if (continued < stack.length) {
        const item = stack[continued];
        self.containerState = item[1];
        return effects.attempt(
          item[0].continuation,
          documentContinue,
          checkNewContainers
        )(code)
      } // Done.

      return checkNewContainers(code)
    }
    /** @type {State} */

    function documentContinue(code) {
      continued++; // Note: this field is called `_closeFlow` but it also closes containers.
      // Perhaps a good idea to rename it but it’s already used in the wild by
      // extensions.

      if (self.containerState._closeFlow) {
        self.containerState._closeFlow = undefined;

        if (childFlow) {
          closeFlow();
        } // Note: this algorithm for moving events around is similar to the
        // algorithm when dealing with lazy lines in `writeToChild`.

        const indexBeforeExits = self.events.length;
        let indexBeforeFlow = indexBeforeExits;
        /** @type {Point|undefined} */

        let point; // Find the flow chunk.

        while (indexBeforeFlow--) {
          if (
            self.events[indexBeforeFlow][0] === 'exit' &&
            self.events[indexBeforeFlow][1].type === 'chunkFlow'
          ) {
            point = self.events[indexBeforeFlow][1].end;
            break
          }
        }

        exitContainers(continued); // Fix positions.

        let index = indexBeforeExits;

        while (index < self.events.length) {
          self.events[index][1].end = Object.assign({}, point);
          index++;
        } // Inject the exits earlier (they’re still also at the end).

        splice(
          self.events,
          indexBeforeFlow + 1,
          0,
          self.events.slice(indexBeforeExits)
        ); // Discard the duplicate exits.

        self.events.length = index;
        return checkNewContainers(code)
      }

      return start(code)
    }
    /** @type {State} */

    function checkNewContainers(code) {
      // Next, after consuming the continuation markers for existing blocks, we
      // look for new block starts (e.g. `>` for a block quote).
      // If we encounter a new block start, we close any blocks unmatched in
      // step 1 before creating the new block as a child of the last matched
      // block.
      if (continued === stack.length) {
        // No need to `check` whether there’s a container, of `exitContainers`
        // would be moot.
        // We can instead immediately `attempt` to parse one.
        if (!childFlow) {
          return documentContinued(code)
        } // If we have concrete content, such as block HTML or fenced code,
        // we can’t have containers “pierce” into them, so we can immediately
        // start.

        if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {
          return flowStart(code)
        } // If we do have flow, it could still be a blank line,
        // but we’d be interrupting it w/ a new container if there’s a current
        // construct.

        self.interrupt = Boolean(
          childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack
        );
      } // Check if there is a new container.

      self.containerState = {};
      return effects.check(
        containerConstruct,
        thereIsANewContainer,
        thereIsNoNewContainer
      )(code)
    }
    /** @type {State} */

    function thereIsANewContainer(code) {
      if (childFlow) closeFlow();
      exitContainers(continued);
      return documentContinued(code)
    }
    /** @type {State} */

    function thereIsNoNewContainer(code) {
      self.parser.lazy[self.now().line] = continued !== stack.length;
      lineStartOffset = self.now().offset;
      return flowStart(code)
    }
    /** @type {State} */

    function documentContinued(code) {
      // Try new containers.
      self.containerState = {};
      return effects.attempt(
        containerConstruct,
        containerContinue,
        flowStart
      )(code)
    }
    /** @type {State} */

    function containerContinue(code) {
      continued++;
      stack.push([self.currentConstruct, self.containerState]); // Try another.

      return documentContinued(code)
    }
    /** @type {State} */

    function flowStart(code) {
      if (code === null) {
        if (childFlow) closeFlow();
        exitContainers(0);
        effects.consume(code);
        return
      }

      childFlow = childFlow || self.parser.flow(self.now());
      effects.enter('chunkFlow', {
        contentType: 'flow',
        previous: childToken,
        _tokenizer: childFlow
      });
      return flowContinue(code)
    }
    /** @type {State} */

    function flowContinue(code) {
      if (code === null) {
        writeToChild(effects.exit('chunkFlow'), true);
        exitContainers(0);
        effects.consume(code);
        return
      }

      if (markdownLineEnding(code)) {
        effects.consume(code);
        writeToChild(effects.exit('chunkFlow')); // Get ready for the next line.

        continued = 0;
        self.interrupt = undefined;
        return start
      }

      effects.consume(code);
      return flowContinue
    }
    /**
     * @param {Token} token
     * @param {boolean} [eof]
     * @returns {void}
     */

    function writeToChild(token, eof) {
      const stream = self.sliceStream(token);
      if (eof) stream.push(null);
      token.previous = childToken;
      if (childToken) childToken.next = token;
      childToken = token;
      childFlow.defineSkip(token.start);
      childFlow.write(stream); // Alright, so we just added a lazy line:
      //
      // ```markdown
      // > a
      // b.
      //
      // Or:
      //
      // > ~~~c
      // d
      //
      // Or:
      //
      // > | e |
      // f
      // ```
      //
      // The construct in the second example (fenced code) does not accept lazy
      // lines, so it marked itself as done at the end of its first line, and
      // then the content construct parses `d`.
      // Most constructs in markdown match on the first line: if the first line
      // forms a construct, a non-lazy line can’t “unmake” it.
      //
      // The construct in the third example is potentially a GFM table, and
      // those are *weird*.
      // It *could* be a table, from the first line, if the following line
      // matches a condition.
      // In this case, that second line is lazy, which “unmakes” the first line
      // and turns the whole into one content block.
      //
      // We’ve now parsed the non-lazy and the lazy line, and can figure out
      // whether the lazy line started a new flow block.
      // If it did, we exit the current containers between the two flow blocks.

      if (self.parser.lazy[token.start.line]) {
        let index = childFlow.events.length;

        while (index--) {
          if (
            // The token starts before the line ending…
            childFlow.events[index][1].start.offset < lineStartOffset && // …and either is not ended yet…
            (!childFlow.events[index][1].end || // …or ends after it.
              childFlow.events[index][1].end.offset > lineStartOffset)
          ) {
            // Exit: there’s still something open, which means it’s a lazy line
            // part of something.
            return
          }
        } // Note: this algorithm for moving events around is similar to the
        // algorithm when closing flow in `documentContinue`.

        const indexBeforeExits = self.events.length;
        let indexBeforeFlow = indexBeforeExits;
        /** @type {boolean|undefined} */

        let seen;
        /** @type {Point|undefined} */

        let point; // Find the previous chunk (the one before the lazy line).

        while (indexBeforeFlow--) {
          if (
            self.events[indexBeforeFlow][0] === 'exit' &&
            self.events[indexBeforeFlow][1].type === 'chunkFlow'
          ) {
            if (seen) {
              point = self.events[indexBeforeFlow][1].end;
              break
            }

            seen = true;
          }
        }

        exitContainers(continued); // Fix positions.

        index = indexBeforeExits;

        while (index < self.events.length) {
          self.events[index][1].end = Object.assign({}, point);
          index++;
        } // Inject the exits earlier (they’re still also at the end).

        splice(
          self.events,
          indexBeforeFlow + 1,
          0,
          self.events.slice(indexBeforeExits)
        ); // Discard the duplicate exits.

        self.events.length = index;
      }
    }
    /**
     * @param {number} size
     * @returns {void}
     */

    function exitContainers(size) {
      let index = stack.length; // Exit open containers.

      while (index-- > size) {
        const entry = stack[index];
        self.containerState = entry[1];
        entry[0].exit.call(self, effects);
      }

      stack.length = size;
    }

    function closeFlow() {
      childFlow.write([null]);
      childToken = undefined;
      childFlow = undefined;
      self.containerState._closeFlow = undefined;
    }
  }
  /** @type {Tokenizer} */

  function tokenizeContainer(effects, ok, nok) {
    return factorySpace(
      effects,
      effects.attempt(this.parser.constructs.document, ok, nok),
      'linePrefix',
      this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4
    )
  }

  /**
   * @typedef {import('micromark-util-types').Code} Code
   */

  /**
   * Classify whether a character code represents whitespace, punctuation, or
   * something else.
   *
   * Used for attention (emphasis, strong), whose sequences can open or close
   * based on the class of surrounding characters.
   *
   * Note that eof (`null`) is seen as whitespace.
   *
   * @param {Code} code
   * @returns {number|undefined}
   */
  function classifyCharacter(code) {
    if (
      code === null ||
      markdownLineEndingOrSpace(code) ||
      unicodeWhitespace(code)
    ) {
      return 1
    }

    if (unicodePunctuation(code)) {
      return 2
    }
  }

  /**
   * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
   * @typedef {import('micromark-util-types').Event} Event
   * @typedef {import('micromark-util-types').Resolver} Resolver
   */

  /**
   * Call all `resolveAll`s.
   *
   * @param {{resolveAll?: Resolver}[]} constructs
   * @param {Event[]} events
   * @param {TokenizeContext} context
   * @returns {Event[]}
   */
  function resolveAll(constructs, events, context) {
    /** @type {Resolver[]} */
    const called = [];
    let index = -1;

    while (++index < constructs.length) {
      const resolve = constructs[index].resolveAll;

      if (resolve && !called.includes(resolve)) {
        events = resolve(events, context);
        called.push(resolve);
      }
    }

    return events
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').Resolver} Resolver
   * @typedef {import('micromark-util-types').State} State
   * @typedef {import('micromark-util-types').Token} Token
   * @typedef {import('micromark-util-types').Event} Event
   * @typedef {import('micromark-util-types').Code} Code
   * @typedef {import('micromark-util-types').Point} Point
   */

  /** @type {Construct} */
  const attention = {
    name: 'attention',
    tokenize: tokenizeAttention,
    resolveAll: resolveAllAttention
  };
  /**
   * Take all events and resolve attention to emphasis or strong.
   *
   * @type {Resolver}
   */

  function resolveAllAttention(events, context) {
    let index = -1;
    /** @type {number} */

    let open;
    /** @type {Token} */

    let group;
    /** @type {Token} */

    let text;
    /** @type {Token} */

    let openingSequence;
    /** @type {Token} */

    let closingSequence;
    /** @type {number} */

    let use;
    /** @type {Event[]} */

    let nextEvents;
    /** @type {number} */

    let offset; // Walk through all events.
    //
    // Note: performance of this is fine on an mb of normal markdown, but it’s
    // a bottleneck for malicious stuff.

    while (++index < events.length) {
      // Find a token that can close.
      if (
        events[index][0] === 'enter' &&
        events[index][1].type === 'attentionSequence' &&
        events[index][1]._close
      ) {
        open = index; // Now walk back to find an opener.

        while (open--) {
          // Find a token that can open the closer.
          if (
            events[open][0] === 'exit' &&
            events[open][1].type === 'attentionSequence' &&
            events[open][1]._open && // If the markers are the same:
            context.sliceSerialize(events[open][1]).charCodeAt(0) ===
              context.sliceSerialize(events[index][1]).charCodeAt(0)
          ) {
            // If the opening can close or the closing can open,
            // and the close size *is not* a multiple of three,
            // but the sum of the opening and closing size *is* multiple of three,
            // then don’t match.
            if (
              (events[open][1]._close || events[index][1]._open) &&
              (events[index][1].end.offset - events[index][1].start.offset) % 3 &&
              !(
                (events[open][1].end.offset -
                  events[open][1].start.offset +
                  events[index][1].end.offset -
                  events[index][1].start.offset) %
                3
              )
            ) {
              continue
            } // Number of markers to use from the sequence.

            use =
              events[open][1].end.offset - events[open][1].start.offset > 1 &&
              events[index][1].end.offset - events[index][1].start.offset > 1
                ? 2
                : 1;
            const start = Object.assign({}, events[open][1].end);
            const end = Object.assign({}, events[index][1].start);
            movePoint(start, -use);
            movePoint(end, use);
            openingSequence = {
              type: use > 1 ? 'strongSequence' : 'emphasisSequence',
              start,
              end: Object.assign({}, events[open][1].end)
            };
            closingSequence = {
              type: use > 1 ? 'strongSequence' : 'emphasisSequence',
              start: Object.assign({}, events[index][1].start),
              end
            };
            text = {
              type: use > 1 ? 'strongText' : 'emphasisText',
              start: Object.assign({}, events[open][1].end),
              end: Object.assign({}, events[index][1].start)
            };
            group = {
              type: use > 1 ? 'strong' : 'emphasis',
              start: Object.assign({}, openingSequence.start),
              end: Object.assign({}, closingSequence.end)
            };
            events[open][1].end = Object.assign({}, openingSequence.start);
            events[index][1].start = Object.assign({}, closingSequence.end);
            nextEvents = []; // If there are more markers in the opening, add them before.

            if (events[open][1].end.offset - events[open][1].start.offset) {
              nextEvents = push(nextEvents, [
                ['enter', events[open][1], context],
                ['exit', events[open][1], context]
              ]);
            } // Opening.

            nextEvents = push(nextEvents, [
              ['enter', group, context],
              ['enter', openingSequence, context],
              ['exit', openingSequence, context],
              ['enter', text, context]
            ]); // Between.

            nextEvents = push(
              nextEvents,
              resolveAll(
                context.parser.constructs.insideSpan.null,
                events.slice(open + 1, index),
                context
              )
            ); // Closing.

            nextEvents = push(nextEvents, [
              ['exit', text, context],
              ['enter', closingSequence, context],
              ['exit', closingSequence, context],
              ['exit', group, context]
            ]); // If there are more markers in the closing, add them after.

            if (events[index][1].end.offset - events[index][1].start.offset) {
              offset = 2;
              nextEvents = push(nextEvents, [
                ['enter', events[index][1], context],
                ['exit', events[index][1], context]
              ]);
            } else {
              offset = 0;
            }

            splice(events, open - 1, index - open + 3, nextEvents);
            index = open + nextEvents.length - offset - 2;
            break
          }
        }
      }
    } // Remove remaining sequences.

    index = -1;

    while (++index < events.length) {
      if (events[index][1].type === 'attentionSequence') {
        events[index][1].type = 'data';
      }
    }

    return events
  }
  /** @type {Tokenizer} */

  function tokenizeAttention(effects, ok) {
    const attentionMarkers = this.parser.constructs.attentionMarkers.null;
    const previous = this.previous;
    const before = classifyCharacter(previous);
    /** @type {NonNullable<Code>} */

    let marker;
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('attentionSequence');
      marker = code;
      return sequence(code)
    }
    /** @type {State} */

    function sequence(code) {
      if (code === marker) {
        effects.consume(code);
        return sequence
      }

      const token = effects.exit('attentionSequence');
      const after = classifyCharacter(code);
      const open =
        !after || (after === 2 && before) || attentionMarkers.includes(code);
      const close =
        !before || (before === 2 && after) || attentionMarkers.includes(previous);
      token._open = Boolean(marker === 42 ? open : open && (before || !close));
      token._close = Boolean(marker === 42 ? close : close && (after || !open));
      return ok(code)
    }
  }
  /**
   * Move a point a bit.
   *
   * Note: `move` only works inside lines! It’s not possible to move past other
   * chunks (replacement characters, tabs, or line endings).
   *
   * @param {Point} point
   * @param {number} offset
   * @returns {void}
   */

  function movePoint(point, offset) {
    point.column += offset;
    point.offset += offset;
    point._bufferIndex += offset;
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').State} State
   */

  /** @type {Construct} */
  const autolink = {
    name: 'autolink',
    tokenize: tokenizeAutolink
  };
  /** @type {Tokenizer} */

  function tokenizeAutolink(effects, ok, nok) {
    let size = 1;
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('autolink');
      effects.enter('autolinkMarker');
      effects.consume(code);
      effects.exit('autolinkMarker');
      effects.enter('autolinkProtocol');
      return open
    }
    /** @type {State} */

    function open(code) {
      if (asciiAlpha(code)) {
        effects.consume(code);
        return schemeOrEmailAtext
      }

      return asciiAtext(code) ? emailAtext(code) : nok(code)
    }
    /** @type {State} */

    function schemeOrEmailAtext(code) {
      return code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)
        ? schemeInsideOrEmailAtext(code)
        : emailAtext(code)
    }
    /** @type {State} */

    function schemeInsideOrEmailAtext(code) {
      if (code === 58) {
        effects.consume(code);
        return urlInside
      }

      if (
        (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&
        size++ < 32
      ) {
        effects.consume(code);
        return schemeInsideOrEmailAtext
      }

      return emailAtext(code)
    }
    /** @type {State} */

    function urlInside(code) {
      if (code === 62) {
        effects.exit('autolinkProtocol');
        return end(code)
      }

      if (code === null || code === 32 || code === 60 || asciiControl(code)) {
        return nok(code)
      }

      effects.consume(code);
      return urlInside
    }
    /** @type {State} */

    function emailAtext(code) {
      if (code === 64) {
        effects.consume(code);
        size = 0;
        return emailAtSignOrDot
      }

      if (asciiAtext(code)) {
        effects.consume(code);
        return emailAtext
      }

      return nok(code)
    }
    /** @type {State} */

    function emailAtSignOrDot(code) {
      return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)
    }
    /** @type {State} */

    function emailLabel(code) {
      if (code === 46) {
        effects.consume(code);
        size = 0;
        return emailAtSignOrDot
      }

      if (code === 62) {
        // Exit, then change the type.
        effects.exit('autolinkProtocol').type = 'autolinkEmail';
        return end(code)
      }

      return emailValue(code)
    }
    /** @type {State} */

    function emailValue(code) {
      if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {
        effects.consume(code);
        return code === 45 ? emailValue : emailLabel
      }

      return nok(code)
    }
    /** @type {State} */

    function end(code) {
      effects.enter('autolinkMarker');
      effects.consume(code);
      effects.exit('autolinkMarker');
      effects.exit('autolink');
      return ok
    }
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').State} State
   */

  /** @type {Construct} */
  const blankLine = {
    tokenize: tokenizeBlankLine,
    partial: true
  };
  /** @type {Tokenizer} */

  function tokenizeBlankLine(effects, ok, nok) {
    return factorySpace(effects, afterWhitespace, 'linePrefix')
    /** @type {State} */

    function afterWhitespace(code) {
      return code === null || markdownLineEnding(code) ? ok(code) : nok(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').Exiter} Exiter
   * @typedef {import('micromark-util-types').State} State
   */

  /** @type {Construct} */
  const blockQuote = {
    name: 'blockQuote',
    tokenize: tokenizeBlockQuoteStart,
    continuation: {
      tokenize: tokenizeBlockQuoteContinuation
    },
    exit
  };
  /** @type {Tokenizer} */

  function tokenizeBlockQuoteStart(effects, ok, nok) {
    const self = this;
    return start
    /** @type {State} */

    function start(code) {
      if (code === 62) {
        const state = self.containerState;

        if (!state.open) {
          effects.enter('blockQuote', {
            _container: true
          });
          state.open = true;
        }

        effects.enter('blockQuotePrefix');
        effects.enter('blockQuoteMarker');
        effects.consume(code);
        effects.exit('blockQuoteMarker');
        return after
      }

      return nok(code)
    }
    /** @type {State} */

    function after(code) {
      if (markdownSpace(code)) {
        effects.enter('blockQuotePrefixWhitespace');
        effects.consume(code);
        effects.exit('blockQuotePrefixWhitespace');
        effects.exit('blockQuotePrefix');
        return ok
      }

      effects.exit('blockQuotePrefix');
      return ok(code)
    }
  }
  /** @type {Tokenizer} */

  function tokenizeBlockQuoteContinuation(effects, ok, nok) {
    return factorySpace(
      effects,
      effects.attempt(blockQuote, ok, nok),
      'linePrefix',
      this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4
    )
  }
  /** @type {Exiter} */

  function exit(effects) {
    effects.exit('blockQuote');
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').State} State
   */

  /** @type {Construct} */
  const characterEscape = {
    name: 'characterEscape',
    tokenize: tokenizeCharacterEscape
  };
  /** @type {Tokenizer} */

  function tokenizeCharacterEscape(effects, ok, nok) {
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('characterEscape');
      effects.enter('escapeMarker');
      effects.consume(code);
      effects.exit('escapeMarker');
      return open
    }
    /** @type {State} */

    function open(code) {
      if (asciiPunctuation(code)) {
        effects.enter('characterEscapeValue');
        effects.consume(code);
        effects.exit('characterEscapeValue');
        effects.exit('characterEscape');
        return ok
      }

      return nok(code)
    }
  }

  /// <reference lib="dom" />

  /* eslint-env browser */

  const element = document.createElement('i');

  /**
   * @param {string} value
   * @returns {string|false}
   */
  function decodeNamedCharacterReference(value) {
    const characterReference = '&' + value + ';';
    element.innerHTML = characterReference;
    const char = element.textContent;

    // Some named character references do not require the closing semicolon
    // (`&not`, for instance), which leads to situations where parsing the assumed
    // named reference of `&notit;` will result in the string `¬it;`.
    // When we encounter a trailing semicolon after parsing, and the character
    // reference to decode was not a semicolon (`&semi;`), we can assume that the
    // matching was not complete.
    // @ts-expect-error: TypeScript is wrong that `textContent` on elements can
    // yield `null`.
    if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {
      return false
    }

    // If the decoded string is equal to the input, the character reference was
    // not valid.
    // @ts-expect-error: TypeScript is wrong that `textContent` on elements can
    // yield `null`.
    return char === characterReference ? false : char
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').Token} Token
   * @typedef {import('micromark-util-types').State} State
   * @typedef {import('micromark-util-types').Code} Code
   */

  /** @type {Construct} */
  const characterReference = {
    name: 'characterReference',
    tokenize: tokenizeCharacterReference
  };
  /** @type {Tokenizer} */

  function tokenizeCharacterReference(effects, ok, nok) {
    const self = this;
    let size = 0;
    /** @type {number} */

    let max;
    /** @type {(code: Code) => code is number} */

    let test;
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('characterReference');
      effects.enter('characterReferenceMarker');
      effects.consume(code);
      effects.exit('characterReferenceMarker');
      return open
    }
    /** @type {State} */

    function open(code) {
      if (code === 35) {
        effects.enter('characterReferenceMarkerNumeric');
        effects.consume(code);
        effects.exit('characterReferenceMarkerNumeric');
        return numeric
      }

      effects.enter('characterReferenceValue');
      max = 31;
      test = asciiAlphanumeric;
      return value(code)
    }
    /** @type {State} */

    function numeric(code) {
      if (code === 88 || code === 120) {
        effects.enter('characterReferenceMarkerHexadecimal');
        effects.consume(code);
        effects.exit('characterReferenceMarkerHexadecimal');
        effects.enter('characterReferenceValue');
        max = 6;
        test = asciiHexDigit;
        return value
      }

      effects.enter('characterReferenceValue');
      max = 7;
      test = asciiDigit;
      return value(code)
    }
    /** @type {State} */

    function value(code) {
      /** @type {Token} */
      let token;

      if (code === 59 && size) {
        token = effects.exit('characterReferenceValue');

        if (
          test === asciiAlphanumeric &&
          !decodeNamedCharacterReference(self.sliceSerialize(token))
        ) {
          return nok(code)
        }

        effects.enter('characterReferenceMarker');
        effects.consume(code);
        effects.exit('characterReferenceMarker');
        effects.exit('characterReference');
        return ok
      }

      if (test(code) && size++ < max) {
        effects.consume(code);
        return value
      }

      return nok(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').State} State
   * @typedef {import('micromark-util-types').Code} Code
   */

  /** @type {Construct} */
  const codeFenced = {
    name: 'codeFenced',
    tokenize: tokenizeCodeFenced,
    concrete: true
  };
  /** @type {Tokenizer} */

  function tokenizeCodeFenced(effects, ok, nok) {
    const self = this;
    /** @type {Construct} */

    const closingFenceConstruct = {
      tokenize: tokenizeClosingFence,
      partial: true
    };
    /** @type {Construct} */

    const nonLazyLine = {
      tokenize: tokenizeNonLazyLine,
      partial: true
    };
    const tail = this.events[this.events.length - 1];
    const initialPrefix =
      tail && tail[1].type === 'linePrefix'
        ? tail[2].sliceSerialize(tail[1], true).length
        : 0;
    let sizeOpen = 0;
    /** @type {NonNullable<Code>} */

    let marker;
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('codeFenced');
      effects.enter('codeFencedFence');
      effects.enter('codeFencedFenceSequence');
      marker = code;
      return sequenceOpen(code)
    }
    /** @type {State} */

    function sequenceOpen(code) {
      if (code === marker) {
        effects.consume(code);
        sizeOpen++;
        return sequenceOpen
      }

      effects.exit('codeFencedFenceSequence');
      return sizeOpen < 3
        ? nok(code)
        : factorySpace(effects, infoOpen, 'whitespace')(code)
    }
    /** @type {State} */

    function infoOpen(code) {
      if (code === null || markdownLineEnding(code)) {
        return openAfter(code)
      }

      effects.enter('codeFencedFenceInfo');
      effects.enter('chunkString', {
        contentType: 'string'
      });
      return info(code)
    }
    /** @type {State} */

    function info(code) {
      if (code === null || markdownLineEndingOrSpace(code)) {
        effects.exit('chunkString');
        effects.exit('codeFencedFenceInfo');
        return factorySpace(effects, infoAfter, 'whitespace')(code)
      }

      if (code === 96 && code === marker) return nok(code)
      effects.consume(code);
      return info
    }
    /** @type {State} */

    function infoAfter(code) {
      if (code === null || markdownLineEnding(code)) {
        return openAfter(code)
      }

      effects.enter('codeFencedFenceMeta');
      effects.enter('chunkString', {
        contentType: 'string'
      });
      return meta(code)
    }
    /** @type {State} */

    function meta(code) {
      if (code === null || markdownLineEnding(code)) {
        effects.exit('chunkString');
        effects.exit('codeFencedFenceMeta');
        return openAfter(code)
      }

      if (code === 96 && code === marker) return nok(code)
      effects.consume(code);
      return meta
    }
    /** @type {State} */

    function openAfter(code) {
      effects.exit('codeFencedFence');
      return self.interrupt ? ok(code) : contentStart(code)
    }
    /** @type {State} */

    function contentStart(code) {
      if (code === null) {
        return after(code)
      }

      if (markdownLineEnding(code)) {
        return effects.attempt(
          nonLazyLine,
          effects.attempt(
            closingFenceConstruct,
            after,
            initialPrefix
              ? factorySpace(
                  effects,
                  contentStart,
                  'linePrefix',
                  initialPrefix + 1
                )
              : contentStart
          ),
          after
        )(code)
      }

      effects.enter('codeFlowValue');
      return contentContinue(code)
    }
    /** @type {State} */

    function contentContinue(code) {
      if (code === null || markdownLineEnding(code)) {
        effects.exit('codeFlowValue');
        return contentStart(code)
      }

      effects.consume(code);
      return contentContinue
    }
    /** @type {State} */

    function after(code) {
      effects.exit('codeFenced');
      return ok(code)
    }
    /** @type {Tokenizer} */

    function tokenizeNonLazyLine(effects, ok, nok) {
      const self = this;
      return start
      /** @type {State} */

      function start(code) {
        effects.enter('lineEnding');
        effects.consume(code);
        effects.exit('lineEnding');
        return lineStart
      }
      /** @type {State} */

      function lineStart(code) {
        return self.parser.lazy[self.now().line] ? nok(code) : ok(code)
      }
    }
    /** @type {Tokenizer} */

    function tokenizeClosingFence(effects, ok, nok) {
      let size = 0;
      return factorySpace(
        effects,
        closingSequenceStart,
        'linePrefix',
        this.parser.constructs.disable.null.includes('codeIndented')
          ? undefined
          : 4
      )
      /** @type {State} */

      function closingSequenceStart(code) {
        effects.enter('codeFencedFence');
        effects.enter('codeFencedFenceSequence');
        return closingSequence(code)
      }
      /** @type {State} */

      function closingSequence(code) {
        if (code === marker) {
          effects.consume(code);
          size++;
          return closingSequence
        }

        if (size < sizeOpen) return nok(code)
        effects.exit('codeFencedFenceSequence');
        return factorySpace(effects, closingSequenceEnd, 'whitespace')(code)
      }
      /** @type {State} */

      function closingSequenceEnd(code) {
        if (code === null || markdownLineEnding(code)) {
          effects.exit('codeFencedFence');
          return ok(code)
        }

        return nok(code)
      }
    }
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').Resolver} Resolver
   * @typedef {import('micromark-util-types').Token} Token
   * @typedef {import('micromark-util-types').State} State
   */

  /** @type {Construct} */
  const codeIndented = {
    name: 'codeIndented',
    tokenize: tokenizeCodeIndented
  };
  /** @type {Construct} */

  const indentedContent = {
    tokenize: tokenizeIndentedContent,
    partial: true
  };
  /** @type {Tokenizer} */

  function tokenizeCodeIndented(effects, ok, nok) {
    const self = this;
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('codeIndented');
      return factorySpace(effects, afterStartPrefix, 'linePrefix', 4 + 1)(code)
    }
    /** @type {State} */

    function afterStartPrefix(code) {
      const tail = self.events[self.events.length - 1];
      return tail &&
        tail[1].type === 'linePrefix' &&
        tail[2].sliceSerialize(tail[1], true).length >= 4
        ? afterPrefix(code)
        : nok(code)
    }
    /** @type {State} */

    function afterPrefix(code) {
      if (code === null) {
        return after(code)
      }

      if (markdownLineEnding(code)) {
        return effects.attempt(indentedContent, afterPrefix, after)(code)
      }

      effects.enter('codeFlowValue');
      return content(code)
    }
    /** @type {State} */

    function content(code) {
      if (code === null || markdownLineEnding(code)) {
        effects.exit('codeFlowValue');
        return afterPrefix(code)
      }

      effects.consume(code);
      return content
    }
    /** @type {State} */

    function after(code) {
      effects.exit('codeIndented');
      return ok(code)
    }
  }
  /** @type {Tokenizer} */

  function tokenizeIndentedContent(effects, ok, nok) {
    const self = this;
    return start
    /** @type {State} */

    function start(code) {
      // If this is a lazy line, it can’t be code.
      if (self.parser.lazy[self.now().line]) {
        return nok(code)
      }

      if (markdownLineEnding(code)) {
        effects.enter('lineEnding');
        effects.consume(code);
        effects.exit('lineEnding');
        return start
      }

      return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)
    }
    /** @type {State} */

    function afterPrefix(code) {
      const tail = self.events[self.events.length - 1];
      return tail &&
        tail[1].type === 'linePrefix' &&
        tail[2].sliceSerialize(tail[1], true).length >= 4
        ? ok(code)
        : markdownLineEnding(code)
        ? start(code)
        : nok(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Resolver} Resolver
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').Previous} Previous
   * @typedef {import('micromark-util-types').Token} Token
   * @typedef {import('micromark-util-types').State} State
   */

  /** @type {Construct} */
  const codeText = {
    name: 'codeText',
    tokenize: tokenizeCodeText,
    resolve: resolveCodeText,
    previous
  };
  /** @type {Resolver} */

  function resolveCodeText(events) {
    let tailExitIndex = events.length - 4;
    let headEnterIndex = 3;
    /** @type {number} */

    let index;
    /** @type {number|undefined} */

    let enter; // If we start and end with an EOL or a space.

    if (
      (events[headEnterIndex][1].type === 'lineEnding' ||
        events[headEnterIndex][1].type === 'space') &&
      (events[tailExitIndex][1].type === 'lineEnding' ||
        events[tailExitIndex][1].type === 'space')
    ) {
      index = headEnterIndex; // And we have data.

      while (++index < tailExitIndex) {
        if (events[index][1].type === 'codeTextData') {
          // Then we have padding.
          events[headEnterIndex][1].type = 'codeTextPadding';
          events[tailExitIndex][1].type = 'codeTextPadding';
          headEnterIndex += 2;
          tailExitIndex -= 2;
          break
        }
      }
    } // Merge adjacent spaces and data.

    index = headEnterIndex - 1;
    tailExitIndex++;

    while (++index <= tailExitIndex) {
      if (enter === undefined) {
        if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {
          enter = index;
        }
      } else if (
        index === tailExitIndex ||
        events[index][1].type === 'lineEnding'
      ) {
        events[enter][1].type = 'codeTextData';

        if (index !== enter + 2) {
          events[enter][1].end = events[index - 1][1].end;
          events.splice(enter + 2, index - enter - 2);
          tailExitIndex -= index - enter - 2;
          index = enter + 2;
        }

        enter = undefined;
      }
    }

    return events
  }
  /** @type {Previous} */

  function previous(code) {
    // If there is a previous code, there will always be a tail.
    return (
      code !== 96 ||
      this.events[this.events.length - 1][1].type === 'characterEscape'
    )
  }
  /** @type {Tokenizer} */

  function tokenizeCodeText(effects, ok, nok) {
    let sizeOpen = 0;
    /** @type {number} */

    let size;
    /** @type {Token} */

    let token;
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('codeText');
      effects.enter('codeTextSequence');
      return openingSequence(code)
    }
    /** @type {State} */

    function openingSequence(code) {
      if (code === 96) {
        effects.consume(code);
        sizeOpen++;
        return openingSequence
      }

      effects.exit('codeTextSequence');
      return gap(code)
    }
    /** @type {State} */

    function gap(code) {
      // EOF.
      if (code === null) {
        return nok(code)
      } // Closing fence?
      // Could also be data.

      if (code === 96) {
        token = effects.enter('codeTextSequence');
        size = 0;
        return closingSequence(code)
      } // Tabs don’t work, and virtual spaces don’t make sense.

      if (code === 32) {
        effects.enter('space');
        effects.consume(code);
        effects.exit('space');
        return gap
      }

      if (markdownLineEnding(code)) {
        effects.enter('lineEnding');
        effects.consume(code);
        effects.exit('lineEnding');
        return gap
      } // Data.

      effects.enter('codeTextData');
      return data(code)
    } // In code.

    /** @type {State} */

    function data(code) {
      if (
        code === null ||
        code === 32 ||
        code === 96 ||
        markdownLineEnding(code)
      ) {
        effects.exit('codeTextData');
        return gap(code)
      }

      effects.consume(code);
      return data
    } // Closing fence.

    /** @type {State} */

    function closingSequence(code) {
      // More.
      if (code === 96) {
        effects.consume(code);
        size++;
        return closingSequence
      } // Done!

      if (size === sizeOpen) {
        effects.exit('codeTextSequence');
        effects.exit('codeText');
        return ok(code)
      } // More or less accents: mark as data.

      token.type = 'codeTextData';
      return data(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Token} Token
   * @typedef {import('micromark-util-types').Chunk} Chunk
   * @typedef {import('micromark-util-types').Event} Event
   */

  /**
   * Tokenize subcontent.
   *
   * @param {Event[]} events
   * @returns {boolean}
   */
  function subtokenize(events) {
    /** @type {Record<string, number>} */
    const jumps = {};
    let index = -1;
    /** @type {Event} */

    let event;
    /** @type {number|undefined} */

    let lineIndex;
    /** @type {number} */

    let otherIndex;
    /** @type {Event} */

    let otherEvent;
    /** @type {Event[]} */

    let parameters;
    /** @type {Event[]} */

    let subevents;
    /** @type {boolean|undefined} */

    let more;

    while (++index < events.length) {
      while (index in jumps) {
        index = jumps[index];
      }

      event = events[index]; // Add a hook for the GFM tasklist extension, which needs to know if text
      // is in the first content of a list item.

      if (
        index &&
        event[1].type === 'chunkFlow' &&
        events[index - 1][1].type === 'listItemPrefix'
      ) {
        subevents = event[1]._tokenizer.events;
        otherIndex = 0;

        if (
          otherIndex < subevents.length &&
          subevents[otherIndex][1].type === 'lineEndingBlank'
        ) {
          otherIndex += 2;
        }

        if (
          otherIndex < subevents.length &&
          subevents[otherIndex][1].type === 'content'
        ) {
          while (++otherIndex < subevents.length) {
            if (subevents[otherIndex][1].type === 'content') {
              break
            }

            if (subevents[otherIndex][1].type === 'chunkText') {
              subevents[otherIndex][1]._isInFirstContentOfListItem = true;
              otherIndex++;
            }
          }
        }
      } // Enter.

      if (event[0] === 'enter') {
        if (event[1].contentType) {
          Object.assign(jumps, subcontent(events, index));
          index = jumps[index];
          more = true;
        }
      } // Exit.
      else if (event[1]._container) {
        otherIndex = index;
        lineIndex = undefined;

        while (otherIndex--) {
          otherEvent = events[otherIndex];

          if (
            otherEvent[1].type === 'lineEnding' ||
            otherEvent[1].type === 'lineEndingBlank'
          ) {
            if (otherEvent[0] === 'enter') {
              if (lineIndex) {
                events[lineIndex][1].type = 'lineEndingBlank';
              }

              otherEvent[1].type = 'lineEnding';
              lineIndex = otherIndex;
            }
          } else {
            break
          }
        }

        if (lineIndex) {
          // Fix position.
          event[1].end = Object.assign({}, events[lineIndex][1].start); // Switch container exit w/ line endings.

          parameters = events.slice(lineIndex, index);
          parameters.unshift(event);
          splice(events, lineIndex, index - lineIndex + 1, parameters);
        }
      }
    }

    return !more
  }
  /**
   * Tokenize embedded tokens.
   *
   * @param {Event[]} events
   * @param {number} eventIndex
   * @returns {Record<string, number>}
   */

  function subcontent(events, eventIndex) {
    const token = events[eventIndex][1];
    const context = events[eventIndex][2];
    let startPosition = eventIndex - 1;
    /** @type {number[]} */

    const startPositions = [];
    const tokenizer =
      token._tokenizer || context.parser[token.contentType](token.start);
    const childEvents = tokenizer.events;
    /** @type {[number, number][]} */

    const jumps = [];
    /** @type {Record<string, number>} */

    const gaps = {};
    /** @type {Chunk[]} */

    let stream;
    /** @type {Token|undefined} */

    let previous;
    let index = -1;
    /** @type {Token|undefined} */

    let current = token;
    let adjust = 0;
    let start = 0;
    const breaks = [start]; // Loop forward through the linked tokens to pass them in order to the
    // subtokenizer.

    while (current) {
      // Find the position of the event for this token.
      while (events[++startPosition][1] !== current) {
        // Empty.
      }

      startPositions.push(startPosition);

      if (!current._tokenizer) {
        stream = context.sliceStream(current);

        if (!current.next) {
          stream.push(null);
        }

        if (previous) {
          tokenizer.defineSkip(current.start);
        }

        if (current._isInFirstContentOfListItem) {
          tokenizer._gfmTasklistFirstContentOfListItem = true;
        }

        tokenizer.write(stream);

        if (current._isInFirstContentOfListItem) {
          tokenizer._gfmTasklistFirstContentOfListItem = undefined;
        }
      } // Unravel the next token.

      previous = current;
      current = current.next;
    } // Now, loop back through all events (and linked tokens), to figure out which
    // parts belong where.

    current = token;

    while (++index < childEvents.length) {
      if (
        // Find a void token that includes a break.
        childEvents[index][0] === 'exit' &&
        childEvents[index - 1][0] === 'enter' &&
        childEvents[index][1].type === childEvents[index - 1][1].type &&
        childEvents[index][1].start.line !== childEvents[index][1].end.line
      ) {
        start = index + 1;
        breaks.push(start); // Help GC.

        current._tokenizer = undefined;
        current.previous = undefined;
        current = current.next;
      }
    } // Help GC.

    tokenizer.events = []; // If there’s one more token (which is the cases for lines that end in an
    // EOF), that’s perfect: the last point we found starts it.
    // If there isn’t then make sure any remaining content is added to it.

    if (current) {
      // Help GC.
      current._tokenizer = undefined;
      current.previous = undefined;
    } else {
      breaks.pop();
    } // Now splice the events from the subtokenizer into the current events,
    // moving back to front so that splice indices aren’t affected.

    index = breaks.length;

    while (index--) {
      const slice = childEvents.slice(breaks[index], breaks[index + 1]);
      const start = startPositions.pop();
      jumps.unshift([start, start + slice.length - 1]);
      splice(events, start, 2, slice);
    }

    index = -1;

    while (++index < jumps.length) {
      gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];
      adjust += jumps[index][1] - jumps[index][0] - 1;
    }

    return gaps
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Resolver} Resolver
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').Token} Token
   * @typedef {import('micromark-util-types').State} State
   */

  /**
   * No name because it must not be turned off.
   * @type {Construct}
   */
  const content = {
    tokenize: tokenizeContent,
    resolve: resolveContent
  };
  /** @type {Construct} */

  const continuationConstruct = {
    tokenize: tokenizeContinuation,
    partial: true
  };
  /**
   * Content is transparent: it’s parsed right now. That way, definitions are also
   * parsed right now: before text in paragraphs (specifically, media) are parsed.
   *
   * @type {Resolver}
   */

  function resolveContent(events) {
    subtokenize(events);
    return events
  }
  /** @type {Tokenizer} */

  function tokenizeContent(effects, ok) {
    /** @type {Token} */
    let previous;
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('content');
      previous = effects.enter('chunkContent', {
        contentType: 'content'
      });
      return data(code)
    }
    /** @type {State} */

    function data(code) {
      if (code === null) {
        return contentEnd(code)
      }

      if (markdownLineEnding(code)) {
        return effects.check(
          continuationConstruct,
          contentContinue,
          contentEnd
        )(code)
      } // Data.

      effects.consume(code);
      return data
    }
    /** @type {State} */

    function contentEnd(code) {
      effects.exit('chunkContent');
      effects.exit('content');
      return ok(code)
    }
    /** @type {State} */

    function contentContinue(code) {
      effects.consume(code);
      effects.exit('chunkContent');
      previous.next = effects.enter('chunkContent', {
        contentType: 'content',
        previous
      });
      previous = previous.next;
      return data
    }
  }
  /** @type {Tokenizer} */

  function tokenizeContinuation(effects, ok, nok) {
    const self = this;
    return startLookahead
    /** @type {State} */

    function startLookahead(code) {
      effects.exit('chunkContent');
      effects.enter('lineEnding');
      effects.consume(code);
      effects.exit('lineEnding');
      return factorySpace(effects, prefixed, 'linePrefix')
    }
    /** @type {State} */

    function prefixed(code) {
      if (code === null || markdownLineEnding(code)) {
        return nok(code)
      }

      const tail = self.events[self.events.length - 1];

      if (
        !self.parser.constructs.disable.null.includes('codeIndented') &&
        tail &&
        tail[1].type === 'linePrefix' &&
        tail[2].sliceSerialize(tail[1], true).length >= 4
      ) {
        return ok(code)
      }

      return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Effects} Effects
   * @typedef {import('micromark-util-types').State} State
   */

  /**
   * @param {Effects} effects
   * @param {State} ok
   * @param {State} nok
   * @param {string} type
   * @param {string} literalType
   * @param {string} literalMarkerType
   * @param {string} rawType
   * @param {string} stringType
   * @param {number} [max=Infinity]
   * @returns {State}
   */
  // eslint-disable-next-line max-params
  function factoryDestination(
    effects,
    ok,
    nok,
    type,
    literalType,
    literalMarkerType,
    rawType,
    stringType,
    max
  ) {
    const limit = max || Number.POSITIVE_INFINITY;
    let balance = 0;
    return start
    /** @type {State} */

    function start(code) {
      if (code === 60) {
        effects.enter(type);
        effects.enter(literalType);
        effects.enter(literalMarkerType);
        effects.consume(code);
        effects.exit(literalMarkerType);
        return destinationEnclosedBefore
      }

      if (code === null || code === 41 || asciiControl(code)) {
        return nok(code)
      }

      effects.enter(type);
      effects.enter(rawType);
      effects.enter(stringType);
      effects.enter('chunkString', {
        contentType: 'string'
      });
      return destinationRaw(code)
    }
    /** @type {State} */

    function destinationEnclosedBefore(code) {
      if (code === 62) {
        effects.enter(literalMarkerType);
        effects.consume(code);
        effects.exit(literalMarkerType);
        effects.exit(literalType);
        effects.exit(type);
        return ok
      }

      effects.enter(stringType);
      effects.enter('chunkString', {
        contentType: 'string'
      });
      return destinationEnclosed(code)
    }
    /** @type {State} */

    function destinationEnclosed(code) {
      if (code === 62) {
        effects.exit('chunkString');
        effects.exit(stringType);
        return destinationEnclosedBefore(code)
      }

      if (code === null || code === 60 || markdownLineEnding(code)) {
        return nok(code)
      }

      effects.consume(code);
      return code === 92 ? destinationEnclosedEscape : destinationEnclosed
    }
    /** @type {State} */

    function destinationEnclosedEscape(code) {
      if (code === 60 || code === 62 || code === 92) {
        effects.consume(code);
        return destinationEnclosed
      }

      return destinationEnclosed(code)
    }
    /** @type {State} */

    function destinationRaw(code) {
      if (code === 40) {
        if (++balance > limit) return nok(code)
        effects.consume(code);
        return destinationRaw
      }

      if (code === 41) {
        if (!balance--) {
          effects.exit('chunkString');
          effects.exit(stringType);
          effects.exit(rawType);
          effects.exit(type);
          return ok(code)
        }

        effects.consume(code);
        return destinationRaw
      }

      if (code === null || markdownLineEndingOrSpace(code)) {
        if (balance) return nok(code)
        effects.exit('chunkString');
        effects.exit(stringType);
        effects.exit(rawType);
        effects.exit(type);
        return ok(code)
      }

      if (asciiControl(code)) return nok(code)
      effects.consume(code);
      return code === 92 ? destinationRawEscape : destinationRaw
    }
    /** @type {State} */

    function destinationRawEscape(code) {
      if (code === 40 || code === 41 || code === 92) {
        effects.consume(code);
        return destinationRaw
      }

      return destinationRaw(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Effects} Effects
   * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
   * @typedef {import('micromark-util-types').State} State
   */

  /**
   * @this {TokenizeContext}
   * @param {Effects} effects
   * @param {State} ok
   * @param {State} nok
   * @param {string} type
   * @param {string} markerType
   * @param {string} stringType
   * @returns {State}
   */
  // eslint-disable-next-line max-params
  function factoryLabel(effects, ok, nok, type, markerType, stringType) {
    const self = this;
    let size = 0;
    /** @type {boolean} */

    let data;
    return start
    /** @type {State} */

    function start(code) {
      effects.enter(type);
      effects.enter(markerType);
      effects.consume(code);
      effects.exit(markerType);
      effects.enter(stringType);
      return atBreak
    }
    /** @type {State} */

    function atBreak(code) {
      if (
        code === null ||
        code === 91 ||
        (code === 93 && !data) ||
        /* To do: remove in the future once we’ve switched from
         * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,
         * which doesn’t need this */

        /* Hidden footnotes hook */

        /* c8 ignore next 3 */
        (code === 94 &&
          !size &&
          '_hiddenFootnoteSupport' in self.parser.constructs) ||
        size > 999
      ) {
        return nok(code)
      }

      if (code === 93) {
        effects.exit(stringType);
        effects.enter(markerType);
        effects.consume(code);
        effects.exit(markerType);
        effects.exit(type);
        return ok
      }

      if (markdownLineEnding(code)) {
        effects.enter('lineEnding');
        effects.consume(code);
        effects.exit('lineEnding');
        return atBreak
      }

      effects.enter('chunkString', {
        contentType: 'string'
      });
      return label(code)
    }
    /** @type {State} */

    function label(code) {
      if (
        code === null ||
        code === 91 ||
        code === 93 ||
        markdownLineEnding(code) ||
        size++ > 999
      ) {
        effects.exit('chunkString');
        return atBreak(code)
      }

      effects.consume(code);
      data = data || !markdownSpace(code);
      return code === 92 ? labelEscape : label
    }
    /** @type {State} */

    function labelEscape(code) {
      if (code === 91 || code === 92 || code === 93) {
        effects.consume(code);
        size++;
        return label
      }

      return label(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Effects} Effects
   * @typedef {import('micromark-util-types').State} State
   * @typedef {import('micromark-util-types').Code} Code
   */

  /**
   * @param {Effects} effects
   * @param {State} ok
   * @param {State} nok
   * @param {string} type
   * @param {string} markerType
   * @param {string} stringType
   * @returns {State}
   */
  // eslint-disable-next-line max-params
  function factoryTitle(effects, ok, nok, type, markerType, stringType) {
    /** @type {NonNullable<Code>} */
    let marker;
    return start
    /** @type {State} */

    function start(code) {
      effects.enter(type);
      effects.enter(markerType);
      effects.consume(code);
      effects.exit(markerType);
      marker = code === 40 ? 41 : code;
      return atFirstTitleBreak
    }
    /** @type {State} */

    function atFirstTitleBreak(code) {
      if (code === marker) {
        effects.enter(markerType);
        effects.consume(code);
        effects.exit(markerType);
        effects.exit(type);
        return ok
      }

      effects.enter(stringType);
      return atTitleBreak(code)
    }
    /** @type {State} */

    function atTitleBreak(code) {
      if (code === marker) {
        effects.exit(stringType);
        return atFirstTitleBreak(marker)
      }

      if (code === null) {
        return nok(code)
      } // Note: blank lines can’t exist in content.

      if (markdownLineEnding(code)) {
        effects.enter('lineEnding');
        effects.consume(code);
        effects.exit('lineEnding');
        return factorySpace(effects, atTitleBreak, 'linePrefix')
      }

      effects.enter('chunkString', {
        contentType: 'string'
      });
      return title(code)
    }
    /** @type {State} */

    function title(code) {
      if (code === marker || code === null || markdownLineEnding(code)) {
        effects.exit('chunkString');
        return atTitleBreak(code)
      }

      effects.consume(code);
      return code === 92 ? titleEscape : title
    }
    /** @type {State} */

    function titleEscape(code) {
      if (code === marker || code === 92) {
        effects.consume(code);
        return title
      }

      return title(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Effects} Effects
   * @typedef {import('micromark-util-types').State} State
   */

  /**
   * @param {Effects} effects
   * @param {State} ok
   */
  function factoryWhitespace(effects, ok) {
    /** @type {boolean} */
    let seen;
    return start
    /** @type {State} */

    function start(code) {
      if (markdownLineEnding(code)) {
        effects.enter('lineEnding');
        effects.consume(code);
        effects.exit('lineEnding');
        seen = true;
        return start
      }

      if (markdownSpace(code)) {
        return factorySpace(
          effects,
          start,
          seen ? 'linePrefix' : 'lineSuffix'
        )(code)
      }

      return ok(code)
    }
  }

  /**
   * Normalize an identifier (such as used in definitions).
   *
   * @param {string} value
   * @returns {string}
   */
  function normalizeIdentifier(value) {
    return (
      value // Collapse Markdown whitespace.
        .replace(/[\t\n\r ]+/g, ' ') // Trim.
        .replace(/^ | $/g, '') // Some characters are considered “uppercase”, but if their lowercase
        // counterpart is uppercased will result in a different uppercase
        // character.
        // Hence, to get that form, we perform both lower- and uppercase.
        // Upper case makes sure keys will not interact with default prototypal
        // methods: no method is uppercase.
        .toLowerCase()
        .toUpperCase()
    )
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').State} State
   */

  /** @type {Construct} */
  const definition = {
    name: 'definition',
    tokenize: tokenizeDefinition
  };
  /** @type {Construct} */

  const titleConstruct = {
    tokenize: tokenizeTitle,
    partial: true
  };
  /** @type {Tokenizer} */

  function tokenizeDefinition(effects, ok, nok) {
    const self = this;
    /** @type {string} */

    let identifier;
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('definition');
      return factoryLabel.call(
        self,
        effects,
        labelAfter,
        nok,
        'definitionLabel',
        'definitionLabelMarker',
        'definitionLabelString'
      )(code)
    }
    /** @type {State} */

    function labelAfter(code) {
      identifier = normalizeIdentifier(
        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)
      );

      if (code === 58) {
        effects.enter('definitionMarker');
        effects.consume(code);
        effects.exit('definitionMarker'); // Note: blank lines can’t exist in content.

        return factoryWhitespace(
          effects,
          factoryDestination(
            effects,
            effects.attempt(
              titleConstruct,
              factorySpace(effects, after, 'whitespace'),
              factorySpace(effects, after, 'whitespace')
            ),
            nok,
            'definitionDestination',
            'definitionDestinationLiteral',
            'definitionDestinationLiteralMarker',
            'definitionDestinationRaw',
            'definitionDestinationString'
          )
        )
      }

      return nok(code)
    }
    /** @type {State} */

    function after(code) {
      if (code === null || markdownLineEnding(code)) {
        effects.exit('definition');

        if (!self.parser.defined.includes(identifier)) {
          self.parser.defined.push(identifier);
        }

        return ok(code)
      }

      return nok(code)
    }
  }
  /** @type {Tokenizer} */

  function tokenizeTitle(effects, ok, nok) {
    return start
    /** @type {State} */

    function start(code) {
      return markdownLineEndingOrSpace(code)
        ? factoryWhitespace(effects, before)(code)
        : nok(code)
    }
    /** @type {State} */

    function before(code) {
      if (code === 34 || code === 39 || code === 40) {
        return factoryTitle(
          effects,
          factorySpace(effects, after, 'whitespace'),
          nok,
          'definitionTitle',
          'definitionTitleMarker',
          'definitionTitleString'
        )(code)
      }

      return nok(code)
    }
    /** @type {State} */

    function after(code) {
      return code === null || markdownLineEnding(code) ? ok(code) : nok(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').State} State
   */

  /** @type {Construct} */
  const hardBreakEscape = {
    name: 'hardBreakEscape',
    tokenize: tokenizeHardBreakEscape
  };
  /** @type {Tokenizer} */

  function tokenizeHardBreakEscape(effects, ok, nok) {
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('hardBreakEscape');
      effects.enter('escapeMarker');
      effects.consume(code);
      return open
    }
    /** @type {State} */

    function open(code) {
      if (markdownLineEnding(code)) {
        effects.exit('escapeMarker');
        effects.exit('hardBreakEscape');
        return ok(code)
      }

      return nok(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Resolver} Resolver
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').Token} Token
   * @typedef {import('micromark-util-types').State} State
   */

  /** @type {Construct} */
  const headingAtx = {
    name: 'headingAtx',
    tokenize: tokenizeHeadingAtx,
    resolve: resolveHeadingAtx
  };
  /** @type {Resolver} */

  function resolveHeadingAtx(events, context) {
    let contentEnd = events.length - 2;
    let contentStart = 3;
    /** @type {Token} */

    let content;
    /** @type {Token} */

    let text; // Prefix whitespace, part of the opening.

    if (events[contentStart][1].type === 'whitespace') {
      contentStart += 2;
    } // Suffix whitespace, part of the closing.

    if (
      contentEnd - 2 > contentStart &&
      events[contentEnd][1].type === 'whitespace'
    ) {
      contentEnd -= 2;
    }

    if (
      events[contentEnd][1].type === 'atxHeadingSequence' &&
      (contentStart === contentEnd - 1 ||
        (contentEnd - 4 > contentStart &&
          events[contentEnd - 2][1].type === 'whitespace'))
    ) {
      contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;
    }

    if (contentEnd > contentStart) {
      content = {
        type: 'atxHeadingText',
        start: events[contentStart][1].start,
        end: events[contentEnd][1].end
      };
      text = {
        type: 'chunkText',
        start: events[contentStart][1].start,
        end: events[contentEnd][1].end,
        // @ts-expect-error Constants are fine to assign.
        contentType: 'text'
      };
      splice(events, contentStart, contentEnd - contentStart + 1, [
        ['enter', content, context],
        ['enter', text, context],
        ['exit', text, context],
        ['exit', content, context]
      ]);
    }

    return events
  }
  /** @type {Tokenizer} */

  function tokenizeHeadingAtx(effects, ok, nok) {
    const self = this;
    let size = 0;
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('atxHeading');
      effects.enter('atxHeadingSequence');
      return fenceOpenInside(code)
    }
    /** @type {State} */

    function fenceOpenInside(code) {
      if (code === 35 && size++ < 6) {
        effects.consume(code);
        return fenceOpenInside
      }

      if (code === null || markdownLineEndingOrSpace(code)) {
        effects.exit('atxHeadingSequence');
        return self.interrupt ? ok(code) : headingBreak(code)
      }

      return nok(code)
    }
    /** @type {State} */

    function headingBreak(code) {
      if (code === 35) {
        effects.enter('atxHeadingSequence');
        return sequence(code)
      }

      if (code === null || markdownLineEnding(code)) {
        effects.exit('atxHeading');
        return ok(code)
      }

      if (markdownSpace(code)) {
        return factorySpace(effects, headingBreak, 'whitespace')(code)
      }

      effects.enter('atxHeadingText');
      return data(code)
    }
    /** @type {State} */

    function sequence(code) {
      if (code === 35) {
        effects.consume(code);
        return sequence
      }

      effects.exit('atxHeadingSequence');
      return headingBreak(code)
    }
    /** @type {State} */

    function data(code) {
      if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {
        effects.exit('atxHeadingText');
        return headingBreak(code)
      }

      effects.consume(code);
      return data
    }
  }

  /**
   * List of lowercase HTML tag names which when parsing HTML (flow), result
   * in more relaxed rules (condition 6): because they are known blocks, the
   * HTML-like syntax doesn’t have to be strictly parsed.
   * For tag names not in this list, a more strict algorithm (condition 7) is used
   * to detect whether the HTML-like syntax is seen as HTML (flow) or not.
   *
   * This is copied from:
   * <https://spec.commonmark.org/0.29/#html-blocks>.
   */
  const htmlBlockNames = [
    'address',
    'article',
    'aside',
    'base',
    'basefont',
    'blockquote',
    'body',
    'caption',
    'center',
    'col',
    'colgroup',
    'dd',
    'details',
    'dialog',
    'dir',
    'div',
    'dl',
    'dt',
    'fieldset',
    'figcaption',
    'figure',
    'footer',
    'form',
    'frame',
    'frameset',
    'h1',
    'h2',
    'h3',
    'h4',
    'h5',
    'h6',
    'head',
    'header',
    'hr',
    'html',
    'iframe',
    'legend',
    'li',
    'link',
    'main',
    'menu',
    'menuitem',
    'nav',
    'noframes',
    'ol',
    'optgroup',
    'option',
    'p',
    'param',
    'section',
    'source',
    'summary',
    'table',
    'tbody',
    'td',
    'tfoot',
    'th',
    'thead',
    'title',
    'tr',
    'track',
    'ul'
  ];

  /**
   * List of lowercase HTML tag names which when parsing HTML (flow), result in
   * HTML that can include lines w/o exiting, until a closing tag also in this
   * list is found (condition 1).
   *
   * This module is copied from:
   * <https://spec.commonmark.org/0.29/#html-blocks>.
   *
   * Note that `textarea` is not available in `CommonMark@0.29` but has been
   * merged to the primary branch and is slated to be released in the next release
   * of CommonMark.
   */
  const htmlRawNames = ['pre', 'script', 'style', 'textarea'];

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Resolver} Resolver
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').State} State
   * @typedef {import('micromark-util-types').Code} Code
   */
  /** @type {Construct} */

  const htmlFlow = {
    name: 'htmlFlow',
    tokenize: tokenizeHtmlFlow,
    resolveTo: resolveToHtmlFlow,
    concrete: true
  };
  /** @type {Construct} */

  const nextBlankConstruct = {
    tokenize: tokenizeNextBlank,
    partial: true
  };
  /** @type {Resolver} */

  function resolveToHtmlFlow(events) {
    let index = events.length;

    while (index--) {
      if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {
        break
      }
    }

    if (index > 1 && events[index - 2][1].type === 'linePrefix') {
      // Add the prefix start to the HTML token.
      events[index][1].start = events[index - 2][1].start; // Add the prefix start to the HTML line token.

      events[index + 1][1].start = events[index - 2][1].start; // Remove the line prefix.

      events.splice(index - 2, 2);
    }

    return events
  }
  /** @type {Tokenizer} */

  function tokenizeHtmlFlow(effects, ok, nok) {
    const self = this;
    /** @type {number} */

    let kind;
    /** @type {boolean} */

    let startTag;
    /** @type {string} */

    let buffer;
    /** @type {number} */

    let index;
    /** @type {Code} */

    let marker;
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('htmlFlow');
      effects.enter('htmlFlowData');
      effects.consume(code);
      return open
    }
    /** @type {State} */

    function open(code) {
      if (code === 33) {
        effects.consume(code);
        return declarationStart
      }

      if (code === 47) {
        effects.consume(code);
        return tagCloseStart
      }

      if (code === 63) {
        effects.consume(code);
        kind = 3; // While we’re in an instruction instead of a declaration, we’re on a `?`
        // right now, so we do need to search for `>`, similar to declarations.

        return self.interrupt ? ok : continuationDeclarationInside
      }

      if (asciiAlpha(code)) {
        effects.consume(code);
        buffer = String.fromCharCode(code);
        startTag = true;
        return tagName
      }

      return nok(code)
    }
    /** @type {State} */

    function declarationStart(code) {
      if (code === 45) {
        effects.consume(code);
        kind = 2;
        return commentOpenInside
      }

      if (code === 91) {
        effects.consume(code);
        kind = 5;
        buffer = 'CDATA[';
        index = 0;
        return cdataOpenInside
      }

      if (asciiAlpha(code)) {
        effects.consume(code);
        kind = 4;
        return self.interrupt ? ok : continuationDeclarationInside
      }

      return nok(code)
    }
    /** @type {State} */

    function commentOpenInside(code) {
      if (code === 45) {
        effects.consume(code);
        return self.interrupt ? ok : continuationDeclarationInside
      }

      return nok(code)
    }
    /** @type {State} */

    function cdataOpenInside(code) {
      if (code === buffer.charCodeAt(index++)) {
        effects.consume(code);
        return index === buffer.length
          ? self.interrupt
            ? ok
            : continuation
          : cdataOpenInside
      }

      return nok(code)
    }
    /** @type {State} */

    function tagCloseStart(code) {
      if (asciiAlpha(code)) {
        effects.consume(code);
        buffer = String.fromCharCode(code);
        return tagName
      }

      return nok(code)
    }
    /** @type {State} */

    function tagName(code) {
      if (
        code === null ||
        code === 47 ||
        code === 62 ||
        markdownLineEndingOrSpace(code)
      ) {
        if (
          code !== 47 &&
          startTag &&
          htmlRawNames.includes(buffer.toLowerCase())
        ) {
          kind = 1;
          return self.interrupt ? ok(code) : continuation(code)
        }

        if (htmlBlockNames.includes(buffer.toLowerCase())) {
          kind = 6;

          if (code === 47) {
            effects.consume(code);
            return basicSelfClosing
          }

          return self.interrupt ? ok(code) : continuation(code)
        }

        kind = 7; // Do not support complete HTML when interrupting

        return self.interrupt && !self.parser.lazy[self.now().line]
          ? nok(code)
          : startTag
          ? completeAttributeNameBefore(code)
          : completeClosingTagAfter(code)
      }

      if (code === 45 || asciiAlphanumeric(code)) {
        effects.consume(code);
        buffer += String.fromCharCode(code);
        return tagName
      }

      return nok(code)
    }
    /** @type {State} */

    function basicSelfClosing(code) {
      if (code === 62) {
        effects.consume(code);
        return self.interrupt ? ok : continuation
      }

      return nok(code)
    }
    /** @type {State} */

    function completeClosingTagAfter(code) {
      if (markdownSpace(code)) {
        effects.consume(code);
        return completeClosingTagAfter
      }

      return completeEnd(code)
    }
    /** @type {State} */

    function completeAttributeNameBefore(code) {
      if (code === 47) {
        effects.consume(code);
        return completeEnd
      }

      if (code === 58 || code === 95 || asciiAlpha(code)) {
        effects.consume(code);
        return completeAttributeName
      }

      if (markdownSpace(code)) {
        effects.consume(code);
        return completeAttributeNameBefore
      }

      return completeEnd(code)
    }
    /** @type {State} */

    function completeAttributeName(code) {
      if (
        code === 45 ||
        code === 46 ||
        code === 58 ||
        code === 95 ||
        asciiAlphanumeric(code)
      ) {
        effects.consume(code);
        return completeAttributeName
      }

      return completeAttributeNameAfter(code)
    }
    /** @type {State} */

    function completeAttributeNameAfter(code) {
      if (code === 61) {
        effects.consume(code);
        return completeAttributeValueBefore
      }

      if (markdownSpace(code)) {
        effects.consume(code);
        return completeAttributeNameAfter
      }

      return completeAttributeNameBefore(code)
    }
    /** @type {State} */

    function completeAttributeValueBefore(code) {
      if (
        code === null ||
        code === 60 ||
        code === 61 ||
        code === 62 ||
        code === 96
      ) {
        return nok(code)
      }

      if (code === 34 || code === 39) {
        effects.consume(code);
        marker = code;
        return completeAttributeValueQuoted
      }

      if (markdownSpace(code)) {
        effects.consume(code);
        return completeAttributeValueBefore
      }

      marker = null;
      return completeAttributeValueUnquoted(code)
    }
    /** @type {State} */

    function completeAttributeValueQuoted(code) {
      if (code === null || markdownLineEnding(code)) {
        return nok(code)
      }

      if (code === marker) {
        effects.consume(code);
        return completeAttributeValueQuotedAfter
      }

      effects.consume(code);
      return completeAttributeValueQuoted
    }
    /** @type {State} */

    function completeAttributeValueUnquoted(code) {
      if (
        code === null ||
        code === 34 ||
        code === 39 ||
        code === 60 ||
        code === 61 ||
        code === 62 ||
        code === 96 ||
        markdownLineEndingOrSpace(code)
      ) {
        return completeAttributeNameAfter(code)
      }

      effects.consume(code);
      return completeAttributeValueUnquoted
    }
    /** @type {State} */

    function completeAttributeValueQuotedAfter(code) {
      if (code === 47 || code === 62 || markdownSpace(code)) {
        return completeAttributeNameBefore(code)
      }

      return nok(code)
    }
    /** @type {State} */

    function completeEnd(code) {
      if (code === 62) {
        effects.consume(code);
        return completeAfter
      }

      return nok(code)
    }
    /** @type {State} */

    function completeAfter(code) {
      if (markdownSpace(code)) {
        effects.consume(code);
        return completeAfter
      }

      return code === null || markdownLineEnding(code)
        ? continuation(code)
        : nok(code)
    }
    /** @type {State} */

    function continuation(code) {
      if (code === 45 && kind === 2) {
        effects.consume(code);
        return continuationCommentInside
      }

      if (code === 60 && kind === 1) {
        effects.consume(code);
        return continuationRawTagOpen
      }

      if (code === 62 && kind === 4) {
        effects.consume(code);
        return continuationClose
      }

      if (code === 63 && kind === 3) {
        effects.consume(code);
        return continuationDeclarationInside
      }

      if (code === 93 && kind === 5) {
        effects.consume(code);
        return continuationCharacterDataInside
      }

      if (markdownLineEnding(code) && (kind === 6 || kind === 7)) {
        return effects.check(
          nextBlankConstruct,
          continuationClose,
          continuationAtLineEnding
        )(code)
      }

      if (code === null || markdownLineEnding(code)) {
        return continuationAtLineEnding(code)
      }

      effects.consume(code);
      return continuation
    }
    /** @type {State} */

    function continuationAtLineEnding(code) {
      effects.exit('htmlFlowData');
      return htmlContinueStart(code)
    }
    /** @type {State} */

    function htmlContinueStart(code) {
      if (code === null) {
        return done(code)
      }

      if (markdownLineEnding(code)) {
        return effects.attempt(
          {
            tokenize: htmlLineEnd,
            partial: true
          },
          htmlContinueStart,
          done
        )(code)
      }

      effects.enter('htmlFlowData');
      return continuation(code)
    }
    /** @type {Tokenizer} */

    function htmlLineEnd(effects, ok, nok) {
      return start
      /** @type {State} */

      function start(code) {
        effects.enter('lineEnding');
        effects.consume(code);
        effects.exit('lineEnding');
        return lineStart
      }
      /** @type {State} */

      function lineStart(code) {
        return self.parser.lazy[self.now().line] ? nok(code) : ok(code)
      }
    }
    /** @type {State} */

    function continuationCommentInside(code) {
      if (code === 45) {
        effects.consume(code);
        return continuationDeclarationInside
      }

      return continuation(code)
    }
    /** @type {State} */

    function continuationRawTagOpen(code) {
      if (code === 47) {
        effects.consume(code);
        buffer = '';
        return continuationRawEndTag
      }

      return continuation(code)
    }
    /** @type {State} */

    function continuationRawEndTag(code) {
      if (code === 62 && htmlRawNames.includes(buffer.toLowerCase())) {
        effects.consume(code);
        return continuationClose
      }

      if (asciiAlpha(code) && buffer.length < 8) {
        effects.consume(code);
        buffer += String.fromCharCode(code);
        return continuationRawEndTag
      }

      return continuation(code)
    }
    /** @type {State} */

    function continuationCharacterDataInside(code) {
      if (code === 93) {
        effects.consume(code);
        return continuationDeclarationInside
      }

      return continuation(code)
    }
    /** @type {State} */

    function continuationDeclarationInside(code) {
      if (code === 62) {
        effects.consume(code);
        return continuationClose
      } // More dashes.

      if (code === 45 && kind === 2) {
        effects.consume(code);
        return continuationDeclarationInside
      }

      return continuation(code)
    }
    /** @type {State} */

    function continuationClose(code) {
      if (code === null || markdownLineEnding(code)) {
        effects.exit('htmlFlowData');
        return done(code)
      }

      effects.consume(code);
      return continuationClose
    }
    /** @type {State} */

    function done(code) {
      effects.exit('htmlFlow');
      return ok(code)
    }
  }
  /** @type {Tokenizer} */

  function tokenizeNextBlank(effects, ok, nok) {
    return start
    /** @type {State} */

    function start(code) {
      effects.exit('htmlFlowData');
      effects.enter('lineEndingBlank');
      effects.consume(code);
      effects.exit('lineEndingBlank');
      return effects.attempt(blankLine, ok, nok)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').State} State
   * @typedef {import('micromark-util-types').Code} Code
   */

  /** @type {Construct} */
  const htmlText = {
    name: 'htmlText',
    tokenize: tokenizeHtmlText
  };
  /** @type {Tokenizer} */

  function tokenizeHtmlText(effects, ok, nok) {
    const self = this;
    /** @type {NonNullable<Code>|undefined} */

    let marker;
    /** @type {string} */

    let buffer;
    /** @type {number} */

    let index;
    /** @type {State} */

    let returnState;
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('htmlText');
      effects.enter('htmlTextData');
      effects.consume(code);
      return open
    }
    /** @type {State} */

    function open(code) {
      if (code === 33) {
        effects.consume(code);
        return declarationOpen
      }

      if (code === 47) {
        effects.consume(code);
        return tagCloseStart
      }

      if (code === 63) {
        effects.consume(code);
        return instruction
      }

      if (asciiAlpha(code)) {
        effects.consume(code);
        return tagOpen
      }

      return nok(code)
    }
    /** @type {State} */

    function declarationOpen(code) {
      if (code === 45) {
        effects.consume(code);
        return commentOpen
      }

      if (code === 91) {
        effects.consume(code);
        buffer = 'CDATA[';
        index = 0;
        return cdataOpen
      }

      if (asciiAlpha(code)) {
        effects.consume(code);
        return declaration
      }

      return nok(code)
    }
    /** @type {State} */

    function commentOpen(code) {
      if (code === 45) {
        effects.consume(code);
        return commentStart
      }

      return nok(code)
    }
    /** @type {State} */

    function commentStart(code) {
      if (code === null || code === 62) {
        return nok(code)
      }

      if (code === 45) {
        effects.consume(code);
        return commentStartDash
      }

      return comment(code)
    }
    /** @type {State} */

    function commentStartDash(code) {
      if (code === null || code === 62) {
        return nok(code)
      }

      return comment(code)
    }
    /** @type {State} */

    function comment(code) {
      if (code === null) {
        return nok(code)
      }

      if (code === 45) {
        effects.consume(code);
        return commentClose
      }

      if (markdownLineEnding(code)) {
        returnState = comment;
        return atLineEnding(code)
      }

      effects.consume(code);
      return comment
    }
    /** @type {State} */

    function commentClose(code) {
      if (code === 45) {
        effects.consume(code);
        return end
      }

      return comment(code)
    }
    /** @type {State} */

    function cdataOpen(code) {
      if (code === buffer.charCodeAt(index++)) {
        effects.consume(code);
        return index === buffer.length ? cdata : cdataOpen
      }

      return nok(code)
    }
    /** @type {State} */

    function cdata(code) {
      if (code === null) {
        return nok(code)
      }

      if (code === 93) {
        effects.consume(code);
        return cdataClose
      }

      if (markdownLineEnding(code)) {
        returnState = cdata;
        return atLineEnding(code)
      }

      effects.consume(code);
      return cdata
    }
    /** @type {State} */

    function cdataClose(code) {
      if (code === 93) {
        effects.consume(code);
        return cdataEnd
      }

      return cdata(code)
    }
    /** @type {State} */

    function cdataEnd(code) {
      if (code === 62) {
        return end(code)
      }

      if (code === 93) {
        effects.consume(code);
        return cdataEnd
      }

      return cdata(code)
    }
    /** @type {State} */

    function declaration(code) {
      if (code === null || code === 62) {
        return end(code)
      }

      if (markdownLineEnding(code)) {
        returnState = declaration;
        return atLineEnding(code)
      }

      effects.consume(code);
      return declaration
    }
    /** @type {State} */

    function instruction(code) {
      if (code === null) {
        return nok(code)
      }

      if (code === 63) {
        effects.consume(code);
        return instructionClose
      }

      if (markdownLineEnding(code)) {
        returnState = instruction;
        return atLineEnding(code)
      }

      effects.consume(code);
      return instruction
    }
    /** @type {State} */

    function instructionClose(code) {
      return code === 62 ? end(code) : instruction(code)
    }
    /** @type {State} */

    function tagCloseStart(code) {
      if (asciiAlpha(code)) {
        effects.consume(code);
        return tagClose
      }

      return nok(code)
    }
    /** @type {State} */

    function tagClose(code) {
      if (code === 45 || asciiAlphanumeric(code)) {
        effects.consume(code);
        return tagClose
      }

      return tagCloseBetween(code)
    }
    /** @type {State} */

    function tagCloseBetween(code) {
      if (markdownLineEnding(code)) {
        returnState = tagCloseBetween;
        return atLineEnding(code)
      }

      if (markdownSpace(code)) {
        effects.consume(code);
        return tagCloseBetween
      }

      return end(code)
    }
    /** @type {State} */

    function tagOpen(code) {
      if (code === 45 || asciiAlphanumeric(code)) {
        effects.consume(code);
        return tagOpen
      }

      if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {
        return tagOpenBetween(code)
      }

      return nok(code)
    }
    /** @type {State} */

    function tagOpenBetween(code) {
      if (code === 47) {
        effects.consume(code);
        return end
      }

      if (code === 58 || code === 95 || asciiAlpha(code)) {
        effects.consume(code);
        return tagOpenAttributeName
      }

      if (markdownLineEnding(code)) {
        returnState = tagOpenBetween;
        return atLineEnding(code)
      }

      if (markdownSpace(code)) {
        effects.consume(code);
        return tagOpenBetween
      }

      return end(code)
    }
    /** @type {State} */

    function tagOpenAttributeName(code) {
      if (
        code === 45 ||
        code === 46 ||
        code === 58 ||
        code === 95 ||
        asciiAlphanumeric(code)
      ) {
        effects.consume(code);
        return tagOpenAttributeName
      }

      return tagOpenAttributeNameAfter(code)
    }
    /** @type {State} */

    function tagOpenAttributeNameAfter(code) {
      if (code === 61) {
        effects.consume(code);
        return tagOpenAttributeValueBefore
      }

      if (markdownLineEnding(code)) {
        returnState = tagOpenAttributeNameAfter;
        return atLineEnding(code)
      }

      if (markdownSpace(code)) {
        effects.consume(code);
        return tagOpenAttributeNameAfter
      }

      return tagOpenBetween(code)
    }
    /** @type {State} */

    function tagOpenAttributeValueBefore(code) {
      if (
        code === null ||
        code === 60 ||
        code === 61 ||
        code === 62 ||
        code === 96
      ) {
        return nok(code)
      }

      if (code === 34 || code === 39) {
        effects.consume(code);
        marker = code;
        return tagOpenAttributeValueQuoted
      }

      if (markdownLineEnding(code)) {
        returnState = tagOpenAttributeValueBefore;
        return atLineEnding(code)
      }

      if (markdownSpace(code)) {
        effects.consume(code);
        return tagOpenAttributeValueBefore
      }

      effects.consume(code);
      marker = undefined;
      return tagOpenAttributeValueUnquoted
    }
    /** @type {State} */

    function tagOpenAttributeValueQuoted(code) {
      if (code === marker) {
        effects.consume(code);
        return tagOpenAttributeValueQuotedAfter
      }

      if (code === null) {
        return nok(code)
      }

      if (markdownLineEnding(code)) {
        returnState = tagOpenAttributeValueQuoted;
        return atLineEnding(code)
      }

      effects.consume(code);
      return tagOpenAttributeValueQuoted
    }
    /** @type {State} */

    function tagOpenAttributeValueQuotedAfter(code) {
      if (code === 62 || code === 47 || markdownLineEndingOrSpace(code)) {
        return tagOpenBetween(code)
      }

      return nok(code)
    }
    /** @type {State} */

    function tagOpenAttributeValueUnquoted(code) {
      if (
        code === null ||
        code === 34 ||
        code === 39 ||
        code === 60 ||
        code === 61 ||
        code === 96
      ) {
        return nok(code)
      }

      if (code === 62 || markdownLineEndingOrSpace(code)) {
        return tagOpenBetween(code)
      }

      effects.consume(code);
      return tagOpenAttributeValueUnquoted
    } // We can’t have blank lines in content, so no need to worry about empty
    // tokens.

    /** @type {State} */

    function atLineEnding(code) {
      effects.exit('htmlTextData');
      effects.enter('lineEnding');
      effects.consume(code);
      effects.exit('lineEnding');
      return factorySpace(
        effects,
        afterPrefix,
        'linePrefix',
        self.parser.constructs.disable.null.includes('codeIndented')
          ? undefined
          : 4
      )
    }
    /** @type {State} */

    function afterPrefix(code) {
      effects.enter('htmlTextData');
      return returnState(code)
    }
    /** @type {State} */

    function end(code) {
      if (code === 62) {
        effects.consume(code);
        effects.exit('htmlTextData');
        effects.exit('htmlText');
        return ok
      }

      return nok(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Resolver} Resolver
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').Event} Event
   * @typedef {import('micromark-util-types').Token} Token
   * @typedef {import('micromark-util-types').State} State
   * @typedef {import('micromark-util-types').Code} Code
   */

  /** @type {Construct} */
  const labelEnd = {
    name: 'labelEnd',
    tokenize: tokenizeLabelEnd,
    resolveTo: resolveToLabelEnd,
    resolveAll: resolveAllLabelEnd
  };
  /** @type {Construct} */

  const resourceConstruct = {
    tokenize: tokenizeResource
  };
  /** @type {Construct} */

  const fullReferenceConstruct = {
    tokenize: tokenizeFullReference
  };
  /** @type {Construct} */

  const collapsedReferenceConstruct = {
    tokenize: tokenizeCollapsedReference
  };
  /** @type {Resolver} */

  function resolveAllLabelEnd(events) {
    let index = -1;
    /** @type {Token} */

    let token;

    while (++index < events.length) {
      token = events[index][1];

      if (
        token.type === 'labelImage' ||
        token.type === 'labelLink' ||
        token.type === 'labelEnd'
      ) {
        // Remove the marker.
        events.splice(index + 1, token.type === 'labelImage' ? 4 : 2);
        token.type = 'data';
        index++;
      }
    }

    return events
  }
  /** @type {Resolver} */

  function resolveToLabelEnd(events, context) {
    let index = events.length;
    let offset = 0;
    /** @type {Token} */

    let token;
    /** @type {number|undefined} */

    let open;
    /** @type {number|undefined} */

    let close;
    /** @type {Event[]} */

    let media; // Find an opening.

    while (index--) {
      token = events[index][1];

      if (open) {
        // If we see another link, or inactive link label, we’ve been here before.
        if (
          token.type === 'link' ||
          (token.type === 'labelLink' && token._inactive)
        ) {
          break
        } // Mark other link openings as inactive, as we can’t have links in
        // links.

        if (events[index][0] === 'enter' && token.type === 'labelLink') {
          token._inactive = true;
        }
      } else if (close) {
        if (
          events[index][0] === 'enter' &&
          (token.type === 'labelImage' || token.type === 'labelLink') &&
          !token._balanced
        ) {
          open = index;

          if (token.type !== 'labelLink') {
            offset = 2;
            break
          }
        }
      } else if (token.type === 'labelEnd') {
        close = index;
      }
    }

    const group = {
      type: events[open][1].type === 'labelLink' ? 'link' : 'image',
      start: Object.assign({}, events[open][1].start),
      end: Object.assign({}, events[events.length - 1][1].end)
    };
    const label = {
      type: 'label',
      start: Object.assign({}, events[open][1].start),
      end: Object.assign({}, events[close][1].end)
    };
    const text = {
      type: 'labelText',
      start: Object.assign({}, events[open + offset + 2][1].end),
      end: Object.assign({}, events[close - 2][1].start)
    };
    media = [
      ['enter', group, context],
      ['enter', label, context]
    ]; // Opening marker.

    media = push(media, events.slice(open + 1, open + offset + 3)); // Text open.

    media = push(media, [['enter', text, context]]); // Between.

    media = push(
      media,
      resolveAll(
        context.parser.constructs.insideSpan.null,
        events.slice(open + offset + 4, close - 3),
        context
      )
    ); // Text close, marker close, label close.

    media = push(media, [
      ['exit', text, context],
      events[close - 2],
      events[close - 1],
      ['exit', label, context]
    ]); // Reference, resource, or so.

    media = push(media, events.slice(close + 1)); // Media close.

    media = push(media, [['exit', group, context]]);
    splice(events, open, events.length, media);
    return events
  }
  /** @type {Tokenizer} */

  function tokenizeLabelEnd(effects, ok, nok) {
    const self = this;
    let index = self.events.length;
    /** @type {Token} */

    let labelStart;
    /** @type {boolean} */

    let defined; // Find an opening.

    while (index--) {
      if (
        (self.events[index][1].type === 'labelImage' ||
          self.events[index][1].type === 'labelLink') &&
        !self.events[index][1]._balanced
      ) {
        labelStart = self.events[index][1];
        break
      }
    }

    return start
    /** @type {State} */

    function start(code) {
      if (!labelStart) {
        return nok(code)
      } // It’s a balanced bracket, but contains a link.

      if (labelStart._inactive) return balanced(code)
      defined = self.parser.defined.includes(
        normalizeIdentifier(
          self.sliceSerialize({
            start: labelStart.end,
            end: self.now()
          })
        )
      );
      effects.enter('labelEnd');
      effects.enter('labelMarker');
      effects.consume(code);
      effects.exit('labelMarker');
      effects.exit('labelEnd');
      return afterLabelEnd
    }
    /** @type {State} */

    function afterLabelEnd(code) {
      // Resource: `[asd](fgh)`.
      if (code === 40) {
        return effects.attempt(
          resourceConstruct,
          ok,
          defined ? ok : balanced
        )(code)
      } // Collapsed (`[asd][]`) or full (`[asd][fgh]`) reference?

      if (code === 91) {
        return effects.attempt(
          fullReferenceConstruct,
          ok,
          defined
            ? effects.attempt(collapsedReferenceConstruct, ok, balanced)
            : balanced
        )(code)
      } // Shortcut reference: `[asd]`?

      return defined ? ok(code) : balanced(code)
    }
    /** @type {State} */

    function balanced(code) {
      labelStart._balanced = true;
      return nok(code)
    }
  }
  /** @type {Tokenizer} */

  function tokenizeResource(effects, ok, nok) {
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('resource');
      effects.enter('resourceMarker');
      effects.consume(code);
      effects.exit('resourceMarker');
      return factoryWhitespace(effects, open)
    }
    /** @type {State} */

    function open(code) {
      if (code === 41) {
        return end(code)
      }

      return factoryDestination(
        effects,
        destinationAfter,
        nok,
        'resourceDestination',
        'resourceDestinationLiteral',
        'resourceDestinationLiteralMarker',
        'resourceDestinationRaw',
        'resourceDestinationString',
        32
      )(code)
    }
    /** @type {State} */

    function destinationAfter(code) {
      return markdownLineEndingOrSpace(code)
        ? factoryWhitespace(effects, between)(code)
        : end(code)
    }
    /** @type {State} */

    function between(code) {
      if (code === 34 || code === 39 || code === 40) {
        return factoryTitle(
          effects,
          factoryWhitespace(effects, end),
          nok,
          'resourceTitle',
          'resourceTitleMarker',
          'resourceTitleString'
        )(code)
      }

      return end(code)
    }
    /** @type {State} */

    function end(code) {
      if (code === 41) {
        effects.enter('resourceMarker');
        effects.consume(code);
        effects.exit('resourceMarker');
        effects.exit('resource');
        return ok
      }

      return nok(code)
    }
  }
  /** @type {Tokenizer} */

  function tokenizeFullReference(effects, ok, nok) {
    const self = this;
    return start
    /** @type {State} */

    function start(code) {
      return factoryLabel.call(
        self,
        effects,
        afterLabel,
        nok,
        'reference',
        'referenceMarker',
        'referenceString'
      )(code)
    }
    /** @type {State} */

    function afterLabel(code) {
      return self.parser.defined.includes(
        normalizeIdentifier(
          self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)
        )
      )
        ? ok(code)
        : nok(code)
    }
  }
  /** @type {Tokenizer} */

  function tokenizeCollapsedReference(effects, ok, nok) {
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('reference');
      effects.enter('referenceMarker');
      effects.consume(code);
      effects.exit('referenceMarker');
      return open
    }
    /** @type {State} */

    function open(code) {
      if (code === 93) {
        effects.enter('referenceMarker');
        effects.consume(code);
        effects.exit('referenceMarker');
        effects.exit('reference');
        return ok
      }

      return nok(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').State} State
   */
  /** @type {Construct} */

  const labelStartImage = {
    name: 'labelStartImage',
    tokenize: tokenizeLabelStartImage,
    resolveAll: labelEnd.resolveAll
  };
  /** @type {Tokenizer} */

  function tokenizeLabelStartImage(effects, ok, nok) {
    const self = this;
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('labelImage');
      effects.enter('labelImageMarker');
      effects.consume(code);
      effects.exit('labelImageMarker');
      return open
    }
    /** @type {State} */

    function open(code) {
      if (code === 91) {
        effects.enter('labelMarker');
        effects.consume(code);
        effects.exit('labelMarker');
        effects.exit('labelImage');
        return after
      }

      return nok(code)
    }
    /** @type {State} */

    function after(code) {
      /* To do: remove in the future once we’ve switched from
       * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,
       * which doesn’t need this */

      /* Hidden footnotes hook */

      /* c8 ignore next 3 */
      return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs
        ? nok(code)
        : ok(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').State} State
   */
  /** @type {Construct} */

  const labelStartLink = {
    name: 'labelStartLink',
    tokenize: tokenizeLabelStartLink,
    resolveAll: labelEnd.resolveAll
  };
  /** @type {Tokenizer} */

  function tokenizeLabelStartLink(effects, ok, nok) {
    const self = this;
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('labelLink');
      effects.enter('labelMarker');
      effects.consume(code);
      effects.exit('labelMarker');
      effects.exit('labelLink');
      return after
    }
    /** @type {State} */

    function after(code) {
      /* To do: remove in the future once we’ve switched from
       * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,
       * which doesn’t need this */

      /* Hidden footnotes hook. */

      /* c8 ignore next 3 */
      return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs
        ? nok(code)
        : ok(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').State} State
   */

  /** @type {Construct} */
  const lineEnding = {
    name: 'lineEnding',
    tokenize: tokenizeLineEnding
  };
  /** @type {Tokenizer} */

  function tokenizeLineEnding(effects, ok) {
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('lineEnding');
      effects.consume(code);
      effects.exit('lineEnding');
      return factorySpace(effects, ok, 'linePrefix')
    }
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').State} State
   * @typedef {import('micromark-util-types').Code} Code
   */

  /** @type {Construct} */
  const thematicBreak$1 = {
    name: 'thematicBreak',
    tokenize: tokenizeThematicBreak
  };
  /** @type {Tokenizer} */

  function tokenizeThematicBreak(effects, ok, nok) {
    let size = 0;
    /** @type {NonNullable<Code>} */

    let marker;
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('thematicBreak');
      marker = code;
      return atBreak(code)
    }
    /** @type {State} */

    function atBreak(code) {
      if (code === marker) {
        effects.enter('thematicBreakSequence');
        return sequence(code)
      }

      if (markdownSpace(code)) {
        return factorySpace(effects, atBreak, 'whitespace')(code)
      }

      if (size < 3 || (code !== null && !markdownLineEnding(code))) {
        return nok(code)
      }

      effects.exit('thematicBreak');
      return ok(code)
    }
    /** @type {State} */

    function sequence(code) {
      if (code === marker) {
        effects.consume(code);
        size++;
        return sequence
      }

      effects.exit('thematicBreakSequence');
      return atBreak(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
   * @typedef {import('micromark-util-types').Exiter} Exiter
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').State} State
   * @typedef {import('micromark-util-types').Code} Code
   */
  /** @type {Construct} */

  const list$1 = {
    name: 'list',
    tokenize: tokenizeListStart,
    continuation: {
      tokenize: tokenizeListContinuation
    },
    exit: tokenizeListEnd
  };
  /** @type {Construct} */

  const listItemPrefixWhitespaceConstruct = {
    tokenize: tokenizeListItemPrefixWhitespace,
    partial: true
  };
  /** @type {Construct} */

  const indentConstruct = {
    tokenize: tokenizeIndent,
    partial: true
  };
  /**
   * @type {Tokenizer}
   * @this {TokenizeContextWithState}
   */

  function tokenizeListStart(effects, ok, nok) {
    const self = this;
    const tail = self.events[self.events.length - 1];
    let initialSize =
      tail && tail[1].type === 'linePrefix'
        ? tail[2].sliceSerialize(tail[1], true).length
        : 0;
    let size = 0;
    return start
    /** @type {State} */

    function start(code) {
      const kind =
        self.containerState.type ||
        (code === 42 || code === 43 || code === 45
          ? 'listUnordered'
          : 'listOrdered');

      if (
        kind === 'listUnordered'
          ? !self.containerState.marker || code === self.containerState.marker
          : asciiDigit(code)
      ) {
        if (!self.containerState.type) {
          self.containerState.type = kind;
          effects.enter(kind, {
            _container: true
          });
        }

        if (kind === 'listUnordered') {
          effects.enter('listItemPrefix');
          return code === 42 || code === 45
            ? effects.check(thematicBreak$1, nok, atMarker)(code)
            : atMarker(code)
        }

        if (!self.interrupt || code === 49) {
          effects.enter('listItemPrefix');
          effects.enter('listItemValue');
          return inside(code)
        }
      }

      return nok(code)
    }
    /** @type {State} */

    function inside(code) {
      if (asciiDigit(code) && ++size < 10) {
        effects.consume(code);
        return inside
      }

      if (
        (!self.interrupt || size < 2) &&
        (self.containerState.marker
          ? code === self.containerState.marker
          : code === 41 || code === 46)
      ) {
        effects.exit('listItemValue');
        return atMarker(code)
      }

      return nok(code)
    }
    /**
     * @type {State}
     **/

    function atMarker(code) {
      effects.enter('listItemMarker');
      effects.consume(code);
      effects.exit('listItemMarker');
      self.containerState.marker = self.containerState.marker || code;
      return effects.check(
        blankLine, // Can’t be empty when interrupting.
        self.interrupt ? nok : onBlank,
        effects.attempt(
          listItemPrefixWhitespaceConstruct,
          endOfPrefix,
          otherPrefix
        )
      )
    }
    /** @type {State} */

    function onBlank(code) {
      self.containerState.initialBlankLine = true;
      initialSize++;
      return endOfPrefix(code)
    }
    /** @type {State} */

    function otherPrefix(code) {
      if (markdownSpace(code)) {
        effects.enter('listItemPrefixWhitespace');
        effects.consume(code);
        effects.exit('listItemPrefixWhitespace');
        return endOfPrefix
      }

      return nok(code)
    }
    /** @type {State} */

    function endOfPrefix(code) {
      self.containerState.size =
        initialSize +
        self.sliceSerialize(effects.exit('listItemPrefix'), true).length;
      return ok(code)
    }
  }
  /**
   * @type {Tokenizer}
   * @this {TokenizeContextWithState}
   */

  function tokenizeListContinuation(effects, ok, nok) {
    const self = this;
    self.containerState._closeFlow = undefined;
    return effects.check(blankLine, onBlank, notBlank)
    /** @type {State} */

    function onBlank(code) {
      self.containerState.furtherBlankLines =
        self.containerState.furtherBlankLines ||
        self.containerState.initialBlankLine; // We have a blank line.
      // Still, try to consume at most the items size.

      return factorySpace(
        effects,
        ok,
        'listItemIndent',
        self.containerState.size + 1
      )(code)
    }
    /** @type {State} */

    function notBlank(code) {
      if (self.containerState.furtherBlankLines || !markdownSpace(code)) {
        self.containerState.furtherBlankLines = undefined;
        self.containerState.initialBlankLine = undefined;
        return notInCurrentItem(code)
      }

      self.containerState.furtherBlankLines = undefined;
      self.containerState.initialBlankLine = undefined;
      return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)
    }
    /** @type {State} */

    function notInCurrentItem(code) {
      // While we do continue, we signal that the flow should be closed.
      self.containerState._closeFlow = true; // As we’re closing flow, we’re no longer interrupting.

      self.interrupt = undefined;
      return factorySpace(
        effects,
        effects.attempt(list$1, ok, nok),
        'linePrefix',
        self.parser.constructs.disable.null.includes('codeIndented')
          ? undefined
          : 4
      )(code)
    }
  }
  /**
   * @type {Tokenizer}
   * @this {TokenizeContextWithState}
   */

  function tokenizeIndent(effects, ok, nok) {
    const self = this;
    return factorySpace(
      effects,
      afterPrefix,
      'listItemIndent',
      self.containerState.size + 1
    )
    /** @type {State} */

    function afterPrefix(code) {
      const tail = self.events[self.events.length - 1];
      return tail &&
        tail[1].type === 'listItemIndent' &&
        tail[2].sliceSerialize(tail[1], true).length === self.containerState.size
        ? ok(code)
        : nok(code)
    }
  }
  /**
   * @type {Exiter}
   * @this {TokenizeContextWithState}
   */

  function tokenizeListEnd(effects) {
    effects.exit(this.containerState.type);
  }
  /**
   * @type {Tokenizer}
   * @this {TokenizeContextWithState}
   */

  function tokenizeListItemPrefixWhitespace(effects, ok, nok) {
    const self = this;
    return factorySpace(
      effects,
      afterPrefix,
      'listItemPrefixWhitespace',
      self.parser.constructs.disable.null.includes('codeIndented')
        ? undefined
        : 4 + 1
    )
    /** @type {State} */

    function afterPrefix(code) {
      const tail = self.events[self.events.length - 1];
      return !markdownSpace(code) &&
        tail &&
        tail[1].type === 'listItemPrefixWhitespace'
        ? ok(code)
        : nok(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Resolver} Resolver
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').State} State
   * @typedef {import('micromark-util-types').Code} Code
   */

  /** @type {Construct} */
  const setextUnderline = {
    name: 'setextUnderline',
    tokenize: tokenizeSetextUnderline,
    resolveTo: resolveToSetextUnderline
  };
  /** @type {Resolver} */

  function resolveToSetextUnderline(events, context) {
    let index = events.length;
    /** @type {number|undefined} */

    let content;
    /** @type {number|undefined} */

    let text;
    /** @type {number|undefined} */

    let definition; // Find the opening of the content.
    // It’ll always exist: we don’t tokenize if it isn’t there.

    while (index--) {
      if (events[index][0] === 'enter') {
        if (events[index][1].type === 'content') {
          content = index;
          break
        }

        if (events[index][1].type === 'paragraph') {
          text = index;
        }
      } // Exit
      else {
        if (events[index][1].type === 'content') {
          // Remove the content end (if needed we’ll add it later)
          events.splice(index, 1);
        }

        if (!definition && events[index][1].type === 'definition') {
          definition = index;
        }
      }
    }

    const heading = {
      type: 'setextHeading',
      start: Object.assign({}, events[text][1].start),
      end: Object.assign({}, events[events.length - 1][1].end)
    }; // Change the paragraph to setext heading text.

    events[text][1].type = 'setextHeadingText'; // If we have definitions in the content, we’ll keep on having content,
    // but we need move it.

    if (definition) {
      events.splice(text, 0, ['enter', heading, context]);
      events.splice(definition + 1, 0, ['exit', events[content][1], context]);
      events[content][1].end = Object.assign({}, events[definition][1].end);
    } else {
      events[content][1] = heading;
    } // Add the heading exit at the end.

    events.push(['exit', heading, context]);
    return events
  }
  /** @type {Tokenizer} */

  function tokenizeSetextUnderline(effects, ok, nok) {
    const self = this;
    let index = self.events.length;
    /** @type {NonNullable<Code>} */

    let marker;
    /** @type {boolean} */

    let paragraph; // Find an opening.

    while (index--) {
      // Skip enter/exit of line ending, line prefix, and content.
      // We can now either have a definition or a paragraph.
      if (
        self.events[index][1].type !== 'lineEnding' &&
        self.events[index][1].type !== 'linePrefix' &&
        self.events[index][1].type !== 'content'
      ) {
        paragraph = self.events[index][1].type === 'paragraph';
        break
      }
    }

    return start
    /** @type {State} */

    function start(code) {
      if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {
        effects.enter('setextHeadingLine');
        effects.enter('setextHeadingLineSequence');
        marker = code;
        return closingSequence(code)
      }

      return nok(code)
    }
    /** @type {State} */

    function closingSequence(code) {
      if (code === marker) {
        effects.consume(code);
        return closingSequence
      }

      effects.exit('setextHeadingLineSequence');
      return factorySpace(effects, closingSequenceEnd, 'lineSuffix')(code)
    }
    /** @type {State} */

    function closingSequenceEnd(code) {
      if (code === null || markdownLineEnding(code)) {
        effects.exit('setextHeadingLine');
        return ok(code)
      }

      return nok(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
   * @typedef {import('micromark-util-types').Initializer} Initializer
   * @typedef {import('micromark-util-types').State} State
   */

  /** @type {InitialConstruct} */
  const flow$1 = {
    tokenize: initializeFlow
  };
  /** @type {Initializer} */

  function initializeFlow(effects) {
    const self = this;
    const initial = effects.attempt(
      // Try to parse a blank line.
      blankLine,
      atBlankEnding, // Try to parse initial flow (essentially, only code).
      effects.attempt(
        this.parser.constructs.flowInitial,
        afterConstruct,
        factorySpace(
          effects,
          effects.attempt(
            this.parser.constructs.flow,
            afterConstruct,
            effects.attempt(content, afterConstruct)
          ),
          'linePrefix'
        )
      )
    );
    return initial
    /** @type {State} */

    function atBlankEnding(code) {
      if (code === null) {
        effects.consume(code);
        return
      }

      effects.enter('lineEndingBlank');
      effects.consume(code);
      effects.exit('lineEndingBlank');
      self.currentConstruct = undefined;
      return initial
    }
    /** @type {State} */

    function afterConstruct(code) {
      if (code === null) {
        effects.consume(code);
        return
      }

      effects.enter('lineEnding');
      effects.consume(code);
      effects.exit('lineEnding');
      self.currentConstruct = undefined;
      return initial
    }
  }

  /**
   * @typedef {import('micromark-util-types').Resolver} Resolver
   * @typedef {import('micromark-util-types').Initializer} Initializer
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
   * @typedef {import('micromark-util-types').State} State
   * @typedef {import('micromark-util-types').Code} Code
   */
  const resolver = {
    resolveAll: createResolver()
  };
  const string$1 = initializeFactory('string');
  const text$2 = initializeFactory('text');
  /**
   * @param {'string'|'text'} field
   * @returns {InitialConstruct}
   */

  function initializeFactory(field) {
    return {
      tokenize: initializeText,
      resolveAll: createResolver(
        field === 'text' ? resolveAllLineSuffixes : undefined
      )
    }
    /** @type {Initializer} */

    function initializeText(effects) {
      const self = this;
      const constructs = this.parser.constructs[field];
      const text = effects.attempt(constructs, start, notText);
      return start
      /** @type {State} */

      function start(code) {
        return atBreak(code) ? text(code) : notText(code)
      }
      /** @type {State} */

      function notText(code) {
        if (code === null) {
          effects.consume(code);
          return
        }

        effects.enter('data');
        effects.consume(code);
        return data
      }
      /** @type {State} */

      function data(code) {
        if (atBreak(code)) {
          effects.exit('data');
          return text(code)
        } // Data.

        effects.consume(code);
        return data
      }
      /**
       * @param {Code} code
       * @returns {boolean}
       */

      function atBreak(code) {
        if (code === null) {
          return true
        }

        const list = constructs[code];
        let index = -1;

        if (list) {
          while (++index < list.length) {
            const item = list[index];

            if (!item.previous || item.previous.call(self, self.previous)) {
              return true
            }
          }
        }

        return false
      }
    }
  }
  /**
   * @param {Resolver} [extraResolver]
   * @returns {Resolver}
   */

  function createResolver(extraResolver) {
    return resolveAllText
    /** @type {Resolver} */

    function resolveAllText(events, context) {
      let index = -1;
      /** @type {number|undefined} */

      let enter; // A rather boring computation (to merge adjacent `data` events) which
      // improves mm performance by 29%.

      while (++index <= events.length) {
        if (enter === undefined) {
          if (events[index] && events[index][1].type === 'data') {
            enter = index;
            index++;
          }
        } else if (!events[index] || events[index][1].type !== 'data') {
          // Don’t do anything if there is one data token.
          if (index !== enter + 2) {
            events[enter][1].end = events[index - 1][1].end;
            events.splice(enter + 2, index - enter - 2);
            index = enter + 2;
          }

          enter = undefined;
        }
      }

      return extraResolver ? extraResolver(events, context) : events
    }
  }
  /**
   * A rather ugly set of instructions which again looks at chunks in the input
   * stream.
   * The reason to do this here is that it is *much* faster to parse in reverse.
   * And that we can’t hook into `null` to split the line suffix before an EOF.
   * To do: figure out if we can make this into a clean utility, or even in core.
   * As it will be useful for GFMs literal autolink extension (and maybe even
   * tables?)
   *
   * @type {Resolver}
   */

  function resolveAllLineSuffixes(events, context) {
    let eventIndex = 0; // Skip first.

    while (++eventIndex <= events.length) {
      if (
        (eventIndex === events.length ||
          events[eventIndex][1].type === 'lineEnding') &&
        events[eventIndex - 1][1].type === 'data'
      ) {
        const data = events[eventIndex - 1][1];
        const chunks = context.sliceStream(data);
        let index = chunks.length;
        let bufferIndex = -1;
        let size = 0;
        /** @type {boolean|undefined} */

        let tabs;

        while (index--) {
          const chunk = chunks[index];

          if (typeof chunk === 'string') {
            bufferIndex = chunk.length;

            while (chunk.charCodeAt(bufferIndex - 1) === 32) {
              size++;
              bufferIndex--;
            }

            if (bufferIndex) break
            bufferIndex = -1;
          } // Number
          else if (chunk === -2) {
            tabs = true;
            size++;
          } else if (chunk === -1) ; else {
            // Replacement character, exit.
            index++;
            break
          }
        }

        if (size) {
          const token = {
            type:
              eventIndex === events.length || tabs || size < 2
                ? 'lineSuffix'
                : 'hardBreakTrailing',
            start: {
              line: data.end.line,
              column: data.end.column - size,
              offset: data.end.offset - size,
              _index: data.start._index + index,
              _bufferIndex: index
                ? bufferIndex
                : data.start._bufferIndex + bufferIndex
            },
            end: Object.assign({}, data.end)
          };
          data.end = Object.assign({}, token.start);

          if (data.start.offset === data.end.offset) {
            Object.assign(data, token);
          } else {
            events.splice(
              eventIndex,
              0,
              ['enter', token, context],
              ['exit', token, context]
            );
            eventIndex += 2;
          }
        }

        eventIndex++;
      }
    }

    return events
  }

  /**
   * @typedef {import('micromark-util-types').Code} Code
   * @typedef {import('micromark-util-types').Chunk} Chunk
   * @typedef {import('micromark-util-types').Point} Point
   * @typedef {import('micromark-util-types').Token} Token
   * @typedef {import('micromark-util-types').Effects} Effects
   * @typedef {import('micromark-util-types').State} State
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
   * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord
   * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
   * @typedef {import('micromark-util-types').ParseContext} ParseContext
   */

  /**
   * Create a tokenizer.
   * Tokenizers deal with one type of data (e.g., containers, flow, text).
   * The parser is the object dealing with it all.
   * `initialize` works like other constructs, except that only its `tokenize`
   * function is used, in which case it doesn’t receive an `ok` or `nok`.
   * `from` can be given to set the point before the first character, although
   * when further lines are indented, they must be set with `defineSkip`.
   *
   * @param {ParseContext} parser
   * @param {InitialConstruct} initialize
   * @param {Omit<Point, '_index'|'_bufferIndex'>} [from]
   * @returns {TokenizeContext}
   */
  function createTokenizer(parser, initialize, from) {
    /** @type {Point} */
    let point = Object.assign(
      from
        ? Object.assign({}, from)
        : {
            line: 1,
            column: 1,
            offset: 0
          },
      {
        _index: 0,
        _bufferIndex: -1
      }
    );
    /** @type {Record<string, number>} */

    const columnStart = {};
    /** @type {Construct[]} */

    const resolveAllConstructs = [];
    /** @type {Chunk[]} */

    let chunks = [];
    /** @type {Token[]} */

    let stack = [];
    /**
     * Tools used for tokenizing.
     *
     * @type {Effects}
     */

    const effects = {
      consume,
      enter,
      exit,
      attempt: constructFactory(onsuccessfulconstruct),
      check: constructFactory(onsuccessfulcheck),
      interrupt: constructFactory(onsuccessfulcheck, {
        interrupt: true
      })
    };
    /**
     * State and tools for resolving and serializing.
     *
     * @type {TokenizeContext}
     */

    const context = {
      previous: null,
      code: null,
      containerState: {},
      events: [],
      parser,
      sliceStream,
      sliceSerialize,
      now,
      defineSkip,
      write
    };
    /**
     * The state function.
     *
     * @type {State|void}
     */

    let state = initialize.tokenize.call(context, effects);

    if (initialize.resolveAll) {
      resolveAllConstructs.push(initialize);
    }

    return context
    /** @type {TokenizeContext['write']} */

    function write(slice) {
      chunks = push(chunks, slice);
      main(); // Exit if we’re not done, resolve might change stuff.

      if (chunks[chunks.length - 1] !== null) {
        return []
      }

      addResult(initialize, 0); // Otherwise, resolve, and exit.

      context.events = resolveAll(resolveAllConstructs, context.events, context);
      return context.events
    } //
    // Tools.
    //

    /** @type {TokenizeContext['sliceSerialize']} */

    function sliceSerialize(token, expandTabs) {
      return serializeChunks(sliceStream(token), expandTabs)
    }
    /** @type {TokenizeContext['sliceStream']} */

    function sliceStream(token) {
      return sliceChunks(chunks, token)
    }
    /** @type {TokenizeContext['now']} */

    function now() {
      return Object.assign({}, point)
    }
    /** @type {TokenizeContext['defineSkip']} */

    function defineSkip(value) {
      columnStart[value.line] = value.column;
      accountForPotentialSkip();
    } //
    // State management.
    //

    /**
     * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by
     * `consume`).
     * Here is where we walk through the chunks, which either include strings of
     * several characters, or numerical character codes.
     * The reason to do this in a loop instead of a call is so the stack can
     * drain.
     *
     * @returns {void}
     */

    function main() {
      /** @type {number} */
      let chunkIndex;

      while (point._index < chunks.length) {
        const chunk = chunks[point._index]; // If we’re in a buffer chunk, loop through it.

        if (typeof chunk === 'string') {
          chunkIndex = point._index;

          if (point._bufferIndex < 0) {
            point._bufferIndex = 0;
          }

          while (
            point._index === chunkIndex &&
            point._bufferIndex < chunk.length
          ) {
            go(chunk.charCodeAt(point._bufferIndex));
          }
        } else {
          go(chunk);
        }
      }
    }
    /**
     * Deal with one code.
     *
     * @param {Code} code
     * @returns {void}
     */

    function go(code) {
      state = state(code);
    }
    /** @type {Effects['consume']} */

    function consume(code) {
      if (markdownLineEnding(code)) {
        point.line++;
        point.column = 1;
        point.offset += code === -3 ? 2 : 1;
        accountForPotentialSkip();
      } else if (code !== -1) {
        point.column++;
        point.offset++;
      } // Not in a string chunk.

      if (point._bufferIndex < 0) {
        point._index++;
      } else {
        point._bufferIndex++; // At end of string chunk.
        // @ts-expect-error Points w/ non-negative `_bufferIndex` reference
        // strings.

        if (point._bufferIndex === chunks[point._index].length) {
          point._bufferIndex = -1;
          point._index++;
        }
      } // Expose the previous character.

      context.previous = code; // Mark as consumed.
    }
    /** @type {Effects['enter']} */

    function enter(type, fields) {
      /** @type {Token} */
      // @ts-expect-error Patch instead of assign required fields to help GC.
      const token = fields || {};
      token.type = type;
      token.start = now();
      context.events.push(['enter', token, context]);
      stack.push(token);
      return token
    }
    /** @type {Effects['exit']} */

    function exit(type) {
      const token = stack.pop();
      token.end = now();
      context.events.push(['exit', token, context]);
      return token
    }
    /**
     * Use results.
     *
     * @type {ReturnHandle}
     */

    function onsuccessfulconstruct(construct, info) {
      addResult(construct, info.from);
    }
    /**
     * Discard results.
     *
     * @type {ReturnHandle}
     */

    function onsuccessfulcheck(_, info) {
      info.restore();
    }
    /**
     * Factory to attempt/check/interrupt.
     *
     * @param {ReturnHandle} onreturn
     * @param {Record<string, unknown>} [fields]
     */

    function constructFactory(onreturn, fields) {
      return hook
      /**
       * Handle either an object mapping codes to constructs, a list of
       * constructs, or a single construct.
       *
       * @param {Construct|Construct[]|ConstructRecord} constructs
       * @param {State} returnState
       * @param {State} [bogusState]
       * @returns {State}
       */

      function hook(constructs, returnState, bogusState) {
        /** @type {Construct[]} */
        let listOfConstructs;
        /** @type {number} */

        let constructIndex;
        /** @type {Construct} */

        let currentConstruct;
        /** @type {Info} */

        let info;
        return Array.isArray(constructs)
          ? /* c8 ignore next 1 */
            handleListOfConstructs(constructs)
          : 'tokenize' in constructs // @ts-expect-error Looks like a construct.
          ? handleListOfConstructs([constructs])
          : handleMapOfConstructs(constructs)
        /**
         * Handle a list of construct.
         *
         * @param {ConstructRecord} map
         * @returns {State}
         */

        function handleMapOfConstructs(map) {
          return start
          /** @type {State} */

          function start(code) {
            const def = code !== null && map[code];
            const all = code !== null && map.null;
            const list = [
              // To do: add more extension tests.

              /* c8 ignore next 2 */
              ...(Array.isArray(def) ? def : def ? [def] : []),
              ...(Array.isArray(all) ? all : all ? [all] : [])
            ];
            return handleListOfConstructs(list)(code)
          }
        }
        /**
         * Handle a list of construct.
         *
         * @param {Construct[]} list
         * @returns {State}
         */

        function handleListOfConstructs(list) {
          listOfConstructs = list;
          constructIndex = 0;

          if (list.length === 0) {
            return bogusState
          }

          return handleConstruct(list[constructIndex])
        }
        /**
         * Handle a single construct.
         *
         * @param {Construct} construct
         * @returns {State}
         */

        function handleConstruct(construct) {
          return start
          /** @type {State} */

          function start(code) {
            // To do: not needed to store if there is no bogus state, probably?
            // Currently doesn’t work because `inspect` in document does a check
            // w/o a bogus, which doesn’t make sense. But it does seem to help perf
            // by not storing.
            info = store();
            currentConstruct = construct;

            if (!construct.partial) {
              context.currentConstruct = construct;
            }

            if (
              construct.name &&
              context.parser.constructs.disable.null.includes(construct.name)
            ) {
              return nok()
            }

            return construct.tokenize.call(
              // If we do have fields, create an object w/ `context` as its
              // prototype.
              // This allows a “live binding”, which is needed for `interrupt`.
              fields ? Object.assign(Object.create(context), fields) : context,
              effects,
              ok,
              nok
            )(code)
          }
        }
        /** @type {State} */

        function ok(code) {
          onreturn(currentConstruct, info);
          return returnState
        }
        /** @type {State} */

        function nok(code) {
          info.restore();

          if (++constructIndex < listOfConstructs.length) {
            return handleConstruct(listOfConstructs[constructIndex])
          }

          return bogusState
        }
      }
    }
    /**
     * @param {Construct} construct
     * @param {number} from
     * @returns {void}
     */

    function addResult(construct, from) {
      if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {
        resolveAllConstructs.push(construct);
      }

      if (construct.resolve) {
        splice(
          context.events,
          from,
          context.events.length - from,
          construct.resolve(context.events.slice(from), context)
        );
      }

      if (construct.resolveTo) {
        context.events = construct.resolveTo(context.events, context);
      }
    }
    /**
     * Store state.
     *
     * @returns {Info}
     */

    function store() {
      const startPoint = now();
      const startPrevious = context.previous;
      const startCurrentConstruct = context.currentConstruct;
      const startEventsIndex = context.events.length;
      const startStack = Array.from(stack);
      return {
        restore,
        from: startEventsIndex
      }
      /**
       * Restore state.
       *
       * @returns {void}
       */

      function restore() {
        point = startPoint;
        context.previous = startPrevious;
        context.currentConstruct = startCurrentConstruct;
        context.events.length = startEventsIndex;
        stack = startStack;
        accountForPotentialSkip();
      }
    }
    /**
     * Move the current point a bit forward in the line when it’s on a column
     * skip.
     *
     * @returns {void}
     */

    function accountForPotentialSkip() {
      if (point.line in columnStart && point.column < 2) {
        point.column = columnStart[point.line];
        point.offset += columnStart[point.line] - 1;
      }
    }
  }
  /**
   * Get the chunks from a slice of chunks in the range of a token.
   *
   * @param {Chunk[]} chunks
   * @param {Pick<Token, 'start'|'end'>} token
   * @returns {Chunk[]}
   */

  function sliceChunks(chunks, token) {
    const startIndex = token.start._index;
    const startBufferIndex = token.start._bufferIndex;
    const endIndex = token.end._index;
    const endBufferIndex = token.end._bufferIndex;
    /** @type {Chunk[]} */

    let view;

    if (startIndex === endIndex) {
      // @ts-expect-error `_bufferIndex` is used on string chunks.
      view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];
    } else {
      view = chunks.slice(startIndex, endIndex);

      if (startBufferIndex > -1) {
        // @ts-expect-error `_bufferIndex` is used on string chunks.
        view[0] = view[0].slice(startBufferIndex);
      }

      if (endBufferIndex > 0) {
        // @ts-expect-error `_bufferIndex` is used on string chunks.
        view.push(chunks[endIndex].slice(0, endBufferIndex));
      }
    }

    return view
  }
  /**
   * Get the string value of a slice of chunks.
   *
   * @param {Chunk[]} chunks
   * @param {boolean} [expandTabs=false]
   * @returns {string}
   */

  function serializeChunks(chunks, expandTabs) {
    let index = -1;
    /** @type {string[]} */

    const result = [];
    /** @type {boolean|undefined} */

    let atTab;

    while (++index < chunks.length) {
      const chunk = chunks[index];
      /** @type {string} */

      let value;

      if (typeof chunk === 'string') {
        value = chunk;
      } else
        switch (chunk) {
          case -5: {
            value = '\r';
            break
          }

          case -4: {
            value = '\n';
            break
          }

          case -3: {
            value = '\r' + '\n';
            break
          }

          case -2: {
            value = expandTabs ? ' ' : '\t';
            break
          }

          case -1: {
            if (!expandTabs && atTab) continue
            value = ' ';
            break
          }

          default: {
            // Currently only replacement character.
            value = String.fromCharCode(chunk);
          }
        }

      atTab = chunk === -2;
      result.push(value);
    }

    return result.join('')
  }

  /**
   * @typedef {import('micromark-util-types').Extension} Extension
   */
  /** @type {Extension['document']} */

  const document$1 = {
    [42]: list$1,
    [43]: list$1,
    [45]: list$1,
    [48]: list$1,
    [49]: list$1,
    [50]: list$1,
    [51]: list$1,
    [52]: list$1,
    [53]: list$1,
    [54]: list$1,
    [55]: list$1,
    [56]: list$1,
    [57]: list$1,
    [62]: blockQuote
  };
  /** @type {Extension['contentInitial']} */

  const contentInitial = {
    [91]: definition
  };
  /** @type {Extension['flowInitial']} */

  const flowInitial = {
    [-2]: codeIndented,
    [-1]: codeIndented,
    [32]: codeIndented
  };
  /** @type {Extension['flow']} */

  const flow = {
    [35]: headingAtx,
    [42]: thematicBreak$1,
    [45]: [setextUnderline, thematicBreak$1],
    [60]: htmlFlow,
    [61]: setextUnderline,
    [95]: thematicBreak$1,
    [96]: codeFenced,
    [126]: codeFenced
  };
  /** @type {Extension['string']} */

  const string = {
    [38]: characterReference,
    [92]: characterEscape
  };
  /** @type {Extension['text']} */

  const text$1 = {
    [-5]: lineEnding,
    [-4]: lineEnding,
    [-3]: lineEnding,
    [33]: labelStartImage,
    [38]: characterReference,
    [42]: attention,
    [60]: [autolink, htmlText],
    [91]: labelStartLink,
    [92]: [hardBreakEscape, characterEscape],
    [93]: labelEnd,
    [95]: attention,
    [96]: codeText
  };
  /** @type {Extension['insideSpan']} */

  const insideSpan = {
    null: [attention, resolver]
  };
  /** @type {Extension['attentionMarkers']} */

  const attentionMarkers = {
    null: [42, 95]
  };
  /** @type {Extension['disable']} */

  const disable = {
    null: []
  };

  var defaultConstructs = /*#__PURE__*/Object.freeze({
    __proto__: null,
    document: document$1,
    contentInitial: contentInitial,
    flowInitial: flowInitial,
    flow: flow,
    string: string,
    text: text$1,
    insideSpan: insideSpan,
    attentionMarkers: attentionMarkers,
    disable: disable
  });

  /**
   * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
   * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension
   * @typedef {import('micromark-util-types').ParseOptions} ParseOptions
   * @typedef {import('micromark-util-types').ParseContext} ParseContext
   * @typedef {import('micromark-util-types').Create} Create
   */
  /**
   * @param {ParseOptions} [options]
   * @returns {ParseContext}
   */

  function parse$1(options = {}) {
    /** @type {FullNormalizedExtension} */
    // @ts-expect-error `defaultConstructs` is full, so the result will be too.
    const constructs = combineExtensions(
      // @ts-expect-error Same as above.
      [defaultConstructs].concat(options.extensions || [])
    );
    /** @type {ParseContext} */

    const parser = {
      defined: [],
      lazy: {},
      constructs,
      content: create(content$1),
      document: create(document$2),
      flow: create(flow$1),
      string: create(string$1),
      text: create(text$2)
    };
    return parser
    /**
     * @param {InitialConstruct} initial
     */

    function create(initial) {
      return creator
      /** @type {Create} */

      function creator(from) {
        return createTokenizer(parser, initial, from)
      }
    }
  }

  /**
   * @typedef {import('micromark-util-types').Encoding} Encoding
   * @typedef {import('micromark-util-types').Value} Value
   * @typedef {import('micromark-util-types').Chunk} Chunk
   * @typedef {import('micromark-util-types').Code} Code
   */

  /**
   * @callback Preprocessor
   * @param {Value} value
   * @param {Encoding} [encoding]
   * @param {boolean} [end=false]
   * @returns {Chunk[]}
   */
  const search = /[\0\t\n\r]/g;
  /**
   * @returns {Preprocessor}
   */

  function preprocess() {
    let column = 1;
    let buffer = '';
    /** @type {boolean|undefined} */

    let start = true;
    /** @type {boolean|undefined} */

    let atCarriageReturn;
    return preprocessor
    /** @type {Preprocessor} */

    function preprocessor(value, encoding, end) {
      /** @type {Chunk[]} */
      const chunks = [];
      /** @type {RegExpMatchArray|null} */

      let match;
      /** @type {number} */

      let next;
      /** @type {number} */

      let startPosition;
      /** @type {number} */

      let endPosition;
      /** @type {Code} */

      let code; // @ts-expect-error `Buffer` does allow an encoding.

      value = buffer + value.toString(encoding);
      startPosition = 0;
      buffer = '';

      if (start) {
        if (value.charCodeAt(0) === 65279) {
          startPosition++;
        }

        start = undefined;
      }

      while (startPosition < value.length) {
        search.lastIndex = startPosition;
        match = search.exec(value);
        endPosition =
          match && match.index !== undefined ? match.index : value.length;
        code = value.charCodeAt(endPosition);

        if (!match) {
          buffer = value.slice(startPosition);
          break
        }

        if (code === 10 && startPosition === endPosition && atCarriageReturn) {
          chunks.push(-3);
          atCarriageReturn = undefined;
        } else {
          if (atCarriageReturn) {
            chunks.push(-5);
            atCarriageReturn = undefined;
          }

          if (startPosition < endPosition) {
            chunks.push(value.slice(startPosition, endPosition));
            column += endPosition - startPosition;
          }

          switch (code) {
            case 0: {
              chunks.push(65533);
              column++;
              break
            }

            case 9: {
              next = Math.ceil(column / 4) * 4;
              chunks.push(-2);

              while (column++ < next) chunks.push(-1);

              break
            }

            case 10: {
              chunks.push(-4);
              column = 1;
              break
            }

            default: {
              atCarriageReturn = true;
              column = 1;
            }
          }
        }

        startPosition = endPosition + 1;
      }

      if (end) {
        if (atCarriageReturn) chunks.push(-5);
        if (buffer) chunks.push(buffer);
        chunks.push(null);
      }

      return chunks
    }
  }

  /**
   * @typedef {import('micromark-util-types').Event} Event
   */
  /**
   * @param {Event[]} events
   * @returns {Event[]}
   */

  function postprocess(events) {
    while (!subtokenize(events)) {
      // Empty
    }

    return events
  }

  /**
   * Turn the number (in string form as either hexa- or plain decimal) coming from
   * a numeric character reference into a character.
   *
   * @param {string} value
   *   Value to decode.
   * @param {number} base
   *   Numeric base.
   * @returns {string}
   */
  function decodeNumericCharacterReference(value, base) {
    const code = Number.parseInt(value, base);

    if (
      // C0 except for HT, LF, FF, CR, space
      code < 9 ||
      code === 11 ||
      (code > 13 && code < 32) || // Control character (DEL) of the basic block and C1 controls.
      (code > 126 && code < 160) || // Lone high surrogates and low surrogates.
      (code > 55295 && code < 57344) || // Noncharacters.
      (code > 64975 && code < 65008) ||
      (code & 65535) === 65535 ||
      (code & 65535) === 65534 || // Out of range
      code > 1114111
    ) {
      return '\uFFFD'
    }

    return String.fromCharCode(code)
  }

  const characterEscapeOrReference =
    /\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;
  /**
   * Utility to decode markdown strings (which occur in places such as fenced
   * code info strings, destinations, labels, and titles).
   * The “string” content type allows character escapes and -references.
   * This decodes those.
   *
   * @param {string} value
   * @returns {string}
   */

  function decodeString(value) {
    return value.replace(characterEscapeOrReference, decode)
  }
  /**
   * @param {string} $0
   * @param {string} $1
   * @param {string} $2
   * @returns {string}
   */

  function decode($0, $1, $2) {
    if ($1) {
      // Escape.
      return $1
    } // Reference.

    const head = $2.charCodeAt(0);

    if (head === 35) {
      const head = $2.charCodeAt(1);
      const hex = head === 120 || head === 88;
      return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)
    }

    return decodeNamedCharacterReference($2) || $0
  }

  /**
   * @typedef {import('unist').Point} Point
   * @typedef {import('unist').Node} Node
   * @typedef {import('unist').Position} Position
   * @typedef {object & {type: string, position?: Position|undefined}} NodeLike
   */

  /**
   * Stringify one point, a position (start and end points), or a node’s
   * positional information.
   *
   * @param {Node|NodeLike|Position|Point|null} [value]
   * @returns {string}
   */
  function stringifyPosition(value) {
    // Nothing.
    if (!value || typeof value !== 'object') {
      return ''
    }

    // Node.
    if ('position' in value || 'type' in value) {
      return position(value.position)
    }

    // Position.
    if ('start' in value || 'end' in value) {
      return position(value)
    }

    // Point.
    if ('line' in value || 'column' in value) {
      return point$1(value)
    }

    // ?
    return ''
  }

  /**
   * @param {Point|undefined} point
   * @returns {string}
   */
  function point$1(point) {
    return index(point && point.line) + ':' + index(point && point.column)
  }

  /**
   * @param {Position|undefined} pos
   * @returns {string}
   */
  function position(pos) {
    return point$1(pos && pos.start) + '-' + point$1(pos && pos.end)
  }

  /**
   * @param {number|undefined} value
   * @returns {number}
   */
  function index(value) {
    return value && typeof value === 'number' ? value : 1
  }

  /**
   * @typedef {import('micromark-util-types').Encoding} Encoding
   * @typedef {import('micromark-util-types').Event} Event
   * @typedef {import('micromark-util-types').ParseOptions} ParseOptions
   * @typedef {import('micromark-util-types').Token} Token
   * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
   * @typedef {import('micromark-util-types').Value} Value
   * @typedef {import('unist').Parent} UnistParent
   * @typedef {import('unist').Point} Point
   * @typedef {import('mdast').PhrasingContent} PhrasingContent
   * @typedef {import('mdast').Content} Content
   * @typedef {Root|Content} Node
   * @typedef {Extract<Node, UnistParent>} Parent
   * @typedef {import('mdast').Break} Break
   * @typedef {import('mdast').Blockquote} Blockquote
   * @typedef {import('mdast').Code} Code
   * @typedef {import('mdast').Definition} Definition
   * @typedef {import('mdast').Emphasis} Emphasis
   * @typedef {import('mdast').Heading} Heading
   * @typedef {import('mdast').HTML} HTML
   * @typedef {import('mdast').Image} Image
   * @typedef {import('mdast').ImageReference} ImageReference
   * @typedef {import('mdast').InlineCode} InlineCode
   * @typedef {import('mdast').Link} Link
   * @typedef {import('mdast').LinkReference} LinkReference
   * @typedef {import('mdast').List} List
   * @typedef {import('mdast').ListItem} ListItem
   * @typedef {import('mdast').Paragraph} Paragraph
   * @typedef {import('mdast').Root} Root
   * @typedef {import('mdast').Strong} Strong
   * @typedef {import('mdast').Text} Text
   * @typedef {import('mdast').ThematicBreak} ThematicBreak
   *
   * @typedef {UnistParent & {type: 'fragment', children: Array<PhrasingContent>}} Fragment
   */
  const own$6 = {}.hasOwnProperty;
  /**
   * @param value Markdown to parse (`string` or `Buffer`).
   * @param [encoding] Character encoding to understand `value` as when it’s a `Buffer` (`string`, default: `'utf8'`).
   * @param [options] Configuration
   */

  const fromMarkdown =
    /**
     * @type {(
     *   ((value: Value, encoding: Encoding, options?: Options) => Root) &
     *   ((value: Value, options?: Options) => Root)
     * )}
     */

    /**
     * @param {Value} value
     * @param {Encoding} [encoding]
     * @param {Options} [options]
     * @returns {Root}
     */
    function (value, encoding, options) {
      if (typeof encoding !== 'string') {
        options = encoding;
        encoding = undefined;
      }

      return compiler(options)(
        postprocess(
          parse$1(options).document().write(preprocess()(value, encoding, true))
        )
      )
    };
  /**
   * Note this compiler only understand complete buffering, not streaming.
   *
   * @param {Options} [options]
   */

  function compiler(options = {}) {
    /** @type {NormalizedExtension} */
    // @ts-expect-error: our base has all required fields, so the result will too.
    const config = configure(
      {
        transforms: [],
        canContainEols: [
          'emphasis',
          'fragment',
          'heading',
          'paragraph',
          'strong'
        ],
        enter: {
          autolink: opener(link),
          autolinkProtocol: onenterdata,
          autolinkEmail: onenterdata,
          atxHeading: opener(heading),
          blockQuote: opener(blockQuote),
          characterEscape: onenterdata,
          characterReference: onenterdata,
          codeFenced: opener(codeFlow),
          codeFencedFenceInfo: buffer,
          codeFencedFenceMeta: buffer,
          codeIndented: opener(codeFlow, buffer),
          codeText: opener(codeText, buffer),
          codeTextData: onenterdata,
          data: onenterdata,
          codeFlowValue: onenterdata,
          definition: opener(definition),
          definitionDestinationString: buffer,
          definitionLabelString: buffer,
          definitionTitleString: buffer,
          emphasis: opener(emphasis),
          hardBreakEscape: opener(hardBreak),
          hardBreakTrailing: opener(hardBreak),
          htmlFlow: opener(html, buffer),
          htmlFlowData: onenterdata,
          htmlText: opener(html, buffer),
          htmlTextData: onenterdata,
          image: opener(image),
          label: buffer,
          link: opener(link),
          listItem: opener(listItem),
          listItemValue: onenterlistitemvalue,
          listOrdered: opener(list, onenterlistordered),
          listUnordered: opener(list),
          paragraph: opener(paragraph),
          reference: onenterreference,
          referenceString: buffer,
          resourceDestinationString: buffer,
          resourceTitleString: buffer,
          setextHeading: opener(heading),
          strong: opener(strong),
          thematicBreak: opener(thematicBreak)
        },
        exit: {
          atxHeading: closer(),
          atxHeadingSequence: onexitatxheadingsequence,
          autolink: closer(),
          autolinkEmail: onexitautolinkemail,
          autolinkProtocol: onexitautolinkprotocol,
          blockQuote: closer(),
          characterEscapeValue: onexitdata,
          characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,
          characterReferenceMarkerNumeric: onexitcharacterreferencemarker,
          characterReferenceValue: onexitcharacterreferencevalue,
          codeFenced: closer(onexitcodefenced),
          codeFencedFence: onexitcodefencedfence,
          codeFencedFenceInfo: onexitcodefencedfenceinfo,
          codeFencedFenceMeta: onexitcodefencedfencemeta,
          codeFlowValue: onexitdata,
          codeIndented: closer(onexitcodeindented),
          codeText: closer(onexitcodetext),
          codeTextData: onexitdata,
          data: onexitdata,
          definition: closer(),
          definitionDestinationString: onexitdefinitiondestinationstring,
          definitionLabelString: onexitdefinitionlabelstring,
          definitionTitleString: onexitdefinitiontitlestring,
          emphasis: closer(),
          hardBreakEscape: closer(onexithardbreak),
          hardBreakTrailing: closer(onexithardbreak),
          htmlFlow: closer(onexithtmlflow),
          htmlFlowData: onexitdata,
          htmlText: closer(onexithtmltext),
          htmlTextData: onexitdata,
          image: closer(onexitimage),
          label: onexitlabel,
          labelText: onexitlabeltext,
          lineEnding: onexitlineending,
          link: closer(onexitlink),
          listItem: closer(),
          listOrdered: closer(),
          listUnordered: closer(),
          paragraph: closer(),
          referenceString: onexitreferencestring,
          resourceDestinationString: onexitresourcedestinationstring,
          resourceTitleString: onexitresourcetitlestring,
          resource: onexitresource,
          setextHeading: closer(onexitsetextheading),
          setextHeadingLineSequence: onexitsetextheadinglinesequence,
          setextHeadingText: onexitsetextheadingtext,
          strong: closer(),
          thematicBreak: closer()
        }
      },
      options.mdastExtensions || []
    );
    /** @type {CompileData} */

    const data = {};
    return compile
    /**
     * @param {Array<Event>} events
     * @returns {Root}
     */

    function compile(events) {
      /** @type {Root} */
      let tree = {
        type: 'root',
        children: []
      };
      /** @type {CompileContext['stack']} */

      const stack = [tree];
      /** @type {CompileContext['tokenStack']} */

      const tokenStack = [];
      /** @type {Array<number>} */

      const listStack = [];
      /** @type {Omit<CompileContext, 'sliceSerialize'>} */

      const context = {
        stack,
        tokenStack,
        config,
        enter,
        exit,
        buffer,
        resume,
        setData,
        getData
      };
      let index = -1;

      while (++index < events.length) {
        // We preprocess lists to add `listItem` tokens, and to infer whether
        // items the list itself are spread out.
        if (
          events[index][1].type === 'listOrdered' ||
          events[index][1].type === 'listUnordered'
        ) {
          if (events[index][0] === 'enter') {
            listStack.push(index);
          } else {
            const tail = listStack.pop();
            index = prepareList(events, tail, index);
          }
        }
      }

      index = -1;

      while (++index < events.length) {
        const handler = config[events[index][0]];

        if (own$6.call(handler, events[index][1].type)) {
          handler[events[index][1].type].call(
            Object.assign(
              {
                sliceSerialize: events[index][2].sliceSerialize
              },
              context
            ),
            events[index][1]
          );
        }
      }

      if (tokenStack.length > 0) {
        const tail = tokenStack[tokenStack.length - 1];
        const handler = tail[1] || defaultOnError;
        handler.call(context, undefined, tail[0]);
      } // Figure out `root` position.

      tree.position = {
        start: point(
          events.length > 0
            ? events[0][1].start
            : {
                line: 1,
                column: 1,
                offset: 0
              }
        ),
        end: point(
          events.length > 0
            ? events[events.length - 2][1].end
            : {
                line: 1,
                column: 1,
                offset: 0
              }
        )
      };
      index = -1;

      while (++index < config.transforms.length) {
        tree = config.transforms[index](tree) || tree;
      }

      return tree
    }
    /**
     * @param {Array<Event>} events
     * @param {number} start
     * @param {number} length
     * @returns {number}
     */

    function prepareList(events, start, length) {
      let index = start - 1;
      let containerBalance = -1;
      let listSpread = false;
      /** @type {Token|undefined} */

      let listItem;
      /** @type {number|undefined} */

      let lineIndex;
      /** @type {number|undefined} */

      let firstBlankLineIndex;
      /** @type {boolean|undefined} */

      let atMarker;

      while (++index <= length) {
        const event = events[index];

        if (
          event[1].type === 'listUnordered' ||
          event[1].type === 'listOrdered' ||
          event[1].type === 'blockQuote'
        ) {
          if (event[0] === 'enter') {
            containerBalance++;
          } else {
            containerBalance--;
          }

          atMarker = undefined;
        } else if (event[1].type === 'lineEndingBlank') {
          if (event[0] === 'enter') {
            if (
              listItem &&
              !atMarker &&
              !containerBalance &&
              !firstBlankLineIndex
            ) {
              firstBlankLineIndex = index;
            }

            atMarker = undefined;
          }
        } else if (
          event[1].type === 'linePrefix' ||
          event[1].type === 'listItemValue' ||
          event[1].type === 'listItemMarker' ||
          event[1].type === 'listItemPrefix' ||
          event[1].type === 'listItemPrefixWhitespace'
        ) ; else {
          atMarker = undefined;
        }

        if (
          (!containerBalance &&
            event[0] === 'enter' &&
            event[1].type === 'listItemPrefix') ||
          (containerBalance === -1 &&
            event[0] === 'exit' &&
            (event[1].type === 'listUnordered' ||
              event[1].type === 'listOrdered'))
        ) {
          if (listItem) {
            let tailIndex = index;
            lineIndex = undefined;

            while (tailIndex--) {
              const tailEvent = events[tailIndex];

              if (
                tailEvent[1].type === 'lineEnding' ||
                tailEvent[1].type === 'lineEndingBlank'
              ) {
                if (tailEvent[0] === 'exit') continue

                if (lineIndex) {
                  events[lineIndex][1].type = 'lineEndingBlank';
                  listSpread = true;
                }

                tailEvent[1].type = 'lineEnding';
                lineIndex = tailIndex;
              } else if (
                tailEvent[1].type === 'linePrefix' ||
                tailEvent[1].type === 'blockQuotePrefix' ||
                tailEvent[1].type === 'blockQuotePrefixWhitespace' ||
                tailEvent[1].type === 'blockQuoteMarker' ||
                tailEvent[1].type === 'listItemIndent'
              ) ; else {
                break
              }
            }

            if (
              firstBlankLineIndex &&
              (!lineIndex || firstBlankLineIndex < lineIndex)
            ) {
              // @ts-expect-error Patched.
              listItem._spread = true;
            } // Fix position.

            listItem.end = Object.assign(
              {},
              lineIndex ? events[lineIndex][1].start : event[1].end
            );
            events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);
            index++;
            length++;
          } // Create a new list item.

          if (event[1].type === 'listItemPrefix') {
            listItem = {
              type: 'listItem',
              // @ts-expect-error Patched
              _spread: false,
              start: Object.assign({}, event[1].start)
            }; // @ts-expect-error: `listItem` is most definitely defined, TS...

            events.splice(index, 0, ['enter', listItem, event[2]]);
            index++;
            length++;
            firstBlankLineIndex = undefined;
            atMarker = true;
          }
        }
      } // @ts-expect-error Patched.

      events[start][1]._spread = listSpread;
      return length
    }
    /**
     * @type {CompileContext['setData']}
     * @param [value]
     */

    function setData(key, value) {
      data[key] = value;
    }
    /**
     * @type {CompileContext['getData']}
     * @template {string} K
     * @param {K} key
     * @returns {CompileData[K]}
     */

    function getData(key) {
      return data[key]
    }
    /**
     * @param {Point} d
     * @returns {Point}
     */

    function point(d) {
      return {
        line: d.line,
        column: d.column,
        offset: d.offset
      }
    }
    /**
     * @param {(token: Token) => Node} create
     * @param {Handle} [and]
     * @returns {Handle}
     */

    function opener(create, and) {
      return open
      /**
       * @this {CompileContext}
       * @param {Token} token
       * @returns {void}
       */

      function open(token) {
        enter.call(this, create(token), token);
        if (and) and.call(this, token);
      }
    }
    /** @type {CompileContext['buffer']} */

    function buffer() {
      this.stack.push({
        type: 'fragment',
        children: []
      });
    }
    /**
     * @type {CompileContext['enter']}
     * @template {Node} N
     * @this {CompileContext}
     * @param {N} node
     * @param {Token} token
     * @param {OnEnterError} [errorHandler]
     * @returns {N}
     */

    function enter(node, token, errorHandler) {
      const parent = this.stack[this.stack.length - 1];
      // @ts-expect-error: Assume `Node` can exist as a child of `parent`.
      parent.children.push(node);
      this.stack.push(node);
      this.tokenStack.push([token, errorHandler]); // @ts-expect-error: `end` will be patched later.

      node.position = {
        start: point(token.start)
      };
      return node
    }
    /**
     * @param {Handle} [and]
     * @returns {Handle}
     */

    function closer(and) {
      return close
      /**
       * @this {CompileContext}
       * @param {Token} token
       * @returns {void}
       */

      function close(token) {
        if (and) and.call(this, token);
        exit.call(this, token);
      }
    }
    /**
     * @type {CompileContext['exit']}
     * @this {CompileContext}
     * @param {Token} token
     * @param {OnExitError} [onExitError]
     * @returns {Node}
     */

    function exit(token, onExitError) {
      const node = this.stack.pop();
      const open = this.tokenStack.pop();

      if (!open) {
        throw new Error(
          'Cannot close `' +
            token.type +
            '` (' +
            stringifyPosition({
              start: token.start,
              end: token.end
            }) +
            '): it’s not open'
        )
      } else if (open[0].type !== token.type) {
        if (onExitError) {
          onExitError.call(this, token, open[0]);
        } else {
          const handler = open[1] || defaultOnError;
          handler.call(this, token, open[0]);
        }
      }

      node.position.end = point(token.end);
      return node
    }
    /**
     * @this {CompileContext}
     * @returns {string}
     */

    function resume() {
      return toString(this.stack.pop())
    } //
    // Handlers.
    //

    /** @type {Handle} */

    function onenterlistordered() {
      setData('expectingFirstListItemValue', true);
    }
    /** @type {Handle} */

    function onenterlistitemvalue(token) {
      if (getData('expectingFirstListItemValue')) {
        const ancestor =
          /** @type {List} */
          this.stack[this.stack.length - 2];
        ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);
        setData('expectingFirstListItemValue');
      }
    }
    /** @type {Handle} */

    function onexitcodefencedfenceinfo() {
      const data = this.resume();
      const node =
        /** @type {Code} */
        this.stack[this.stack.length - 1];
      node.lang = data;
    }
    /** @type {Handle} */

    function onexitcodefencedfencemeta() {
      const data = this.resume();
      const node =
        /** @type {Code} */
        this.stack[this.stack.length - 1];
      node.meta = data;
    }
    /** @type {Handle} */

    function onexitcodefencedfence() {
      // Exit if this is the closing fence.
      if (getData('flowCodeInside')) return
      this.buffer();
      setData('flowCodeInside', true);
    }
    /** @type {Handle} */

    function onexitcodefenced() {
      const data = this.resume();
      const node =
        /** @type {Code} */
        this.stack[this.stack.length - 1];
      node.value = data.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, '');
      setData('flowCodeInside');
    }
    /** @type {Handle} */

    function onexitcodeindented() {
      const data = this.resume();
      const node =
        /** @type {Code} */
        this.stack[this.stack.length - 1];
      node.value = data.replace(/(\r?\n|\r)$/g, '');
    }
    /** @type {Handle} */

    function onexitdefinitionlabelstring(token) {
      // Discard label, use the source content instead.
      const label = this.resume();
      const node =
        /** @type {Definition} */
        this.stack[this.stack.length - 1];
      node.label = label;
      node.identifier = normalizeIdentifier(
        this.sliceSerialize(token)
      ).toLowerCase();
    }
    /** @type {Handle} */

    function onexitdefinitiontitlestring() {
      const data = this.resume();
      const node =
        /** @type {Definition} */
        this.stack[this.stack.length - 1];
      node.title = data;
    }
    /** @type {Handle} */

    function onexitdefinitiondestinationstring() {
      const data = this.resume();
      const node =
        /** @type {Definition} */
        this.stack[this.stack.length - 1];
      node.url = data;
    }
    /** @type {Handle} */

    function onexitatxheadingsequence(token) {
      const node =
        /** @type {Heading} */
        this.stack[this.stack.length - 1];

      if (!node.depth) {
        const depth = this.sliceSerialize(token).length;
        node.depth = depth;
      }
    }
    /** @type {Handle} */

    function onexitsetextheadingtext() {
      setData('setextHeadingSlurpLineEnding', true);
    }
    /** @type {Handle} */

    function onexitsetextheadinglinesequence(token) {
      const node =
        /** @type {Heading} */
        this.stack[this.stack.length - 1];
      node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2;
    }
    /** @type {Handle} */

    function onexitsetextheading() {
      setData('setextHeadingSlurpLineEnding');
    }
    /** @type {Handle} */

    function onenterdata(token) {
      const parent =
        /** @type {Parent} */
        this.stack[this.stack.length - 1];
      /** @type {Node} */

      let tail = parent.children[parent.children.length - 1];

      if (!tail || tail.type !== 'text') {
        // Add a new text node.
        tail = text(); // @ts-expect-error: we’ll add `end` later.

        tail.position = {
          start: point(token.start)
        }; // @ts-expect-error: Assume `parent` accepts `text`.

        parent.children.push(tail);
      }

      this.stack.push(tail);
    }
    /** @type {Handle} */

    function onexitdata(token) {
      const tail = this.stack.pop();
      tail.value += this.sliceSerialize(token);
      tail.position.end = point(token.end);
    }
    /** @type {Handle} */

    function onexitlineending(token) {
      const context = this.stack[this.stack.length - 1];

      // If we’re at a hard break, include the line ending in there.
      if (getData('atHardBreak')) {
        const tail = context.children[context.children.length - 1];
        tail.position.end = point(token.end);
        setData('atHardBreak');
        return
      }

      if (
        !getData('setextHeadingSlurpLineEnding') &&
        config.canContainEols.includes(context.type)
      ) {
        onenterdata.call(this, token);
        onexitdata.call(this, token);
      }
    }
    /** @type {Handle} */

    function onexithardbreak() {
      setData('atHardBreak', true);
    }
    /** @type {Handle} */

    function onexithtmlflow() {
      const data = this.resume();
      const node =
        /** @type {HTML} */
        this.stack[this.stack.length - 1];
      node.value = data;
    }
    /** @type {Handle} */

    function onexithtmltext() {
      const data = this.resume();
      const node =
        /** @type {HTML} */
        this.stack[this.stack.length - 1];
      node.value = data;
    }
    /** @type {Handle} */

    function onexitcodetext() {
      const data = this.resume();
      const node =
        /** @type {InlineCode} */
        this.stack[this.stack.length - 1];
      node.value = data;
    }
    /** @type {Handle} */

    function onexitlink() {
      const context =
        /** @type {Link & {identifier: string, label: string}} */
        this.stack[this.stack.length - 1]; // To do: clean.

      if (getData('inReference')) {
        context.type += 'Reference'; // @ts-expect-error: mutate.

        context.referenceType = getData('referenceType') || 'shortcut'; // @ts-expect-error: mutate.

        delete context.url;
        delete context.title;
      } else {
        // @ts-expect-error: mutate.
        delete context.identifier; // @ts-expect-error: mutate.

        delete context.label;
      }

      setData('referenceType');
    }
    /** @type {Handle} */

    function onexitimage() {
      const context =
        /** @type {Image & {identifier: string, label: string}} */
        this.stack[this.stack.length - 1]; // To do: clean.

      if (getData('inReference')) {
        context.type += 'Reference'; // @ts-expect-error: mutate.

        context.referenceType = getData('referenceType') || 'shortcut'; // @ts-expect-error: mutate.

        delete context.url;
        delete context.title;
      } else {
        // @ts-expect-error: mutate.
        delete context.identifier; // @ts-expect-error: mutate.

        delete context.label;
      }

      setData('referenceType');
    }
    /** @type {Handle} */

    function onexitlabeltext(token) {
      const ancestor =
        /** @type {(Link|Image) & {identifier: string, label: string}} */
        this.stack[this.stack.length - 2];
      const string = this.sliceSerialize(token);
      ancestor.label = decodeString(string);
      ancestor.identifier = normalizeIdentifier(string).toLowerCase();
    }
    /** @type {Handle} */

    function onexitlabel() {
      const fragment =
        /** @type {Fragment} */
        this.stack[this.stack.length - 1];
      const value = this.resume();
      const node =
        /** @type {(Link|Image) & {identifier: string, label: string}} */
        this.stack[this.stack.length - 1]; // Assume a reference.

      setData('inReference', true);

      if (node.type === 'link') {
        // @ts-expect-error: Assume static phrasing content.
        node.children = fragment.children;
      } else {
        node.alt = value;
      }
    }
    /** @type {Handle} */

    function onexitresourcedestinationstring() {
      const data = this.resume();
      const node =
        /** @type {Link|Image} */
        this.stack[this.stack.length - 1];
      node.url = data;
    }
    /** @type {Handle} */

    function onexitresourcetitlestring() {
      const data = this.resume();
      const node =
        /** @type {Link|Image} */
        this.stack[this.stack.length - 1];
      node.title = data;
    }
    /** @type {Handle} */

    function onexitresource() {
      setData('inReference');
    }
    /** @type {Handle} */

    function onenterreference() {
      setData('referenceType', 'collapsed');
    }
    /** @type {Handle} */

    function onexitreferencestring(token) {
      const label = this.resume();
      const node =
        /** @type {LinkReference|ImageReference} */
        this.stack[this.stack.length - 1];
      node.label = label;
      node.identifier = normalizeIdentifier(
        this.sliceSerialize(token)
      ).toLowerCase();
      setData('referenceType', 'full');
    }
    /** @type {Handle} */

    function onexitcharacterreferencemarker(token) {
      setData('characterReferenceType', token.type);
    }
    /** @type {Handle} */

    function onexitcharacterreferencevalue(token) {
      const data = this.sliceSerialize(token);
      const type = getData('characterReferenceType');
      /** @type {string} */

      let value;

      if (type) {
        value = decodeNumericCharacterReference(
          data,
          type === 'characterReferenceMarkerNumeric' ? 10 : 16
        );
        setData('characterReferenceType');
      } else {
        // @ts-expect-error `decodeNamedCharacterReference` can return false for
        // invalid named character references, but everything we’ve tokenized is
        // valid.
        value = decodeNamedCharacterReference(data);
      }

      const tail = this.stack.pop();
      tail.value += value;
      tail.position.end = point(token.end);
    }
    /** @type {Handle} */

    function onexitautolinkprotocol(token) {
      onexitdata.call(this, token);
      const node =
        /** @type {Link} */
        this.stack[this.stack.length - 1];
      node.url = this.sliceSerialize(token);
    }
    /** @type {Handle} */

    function onexitautolinkemail(token) {
      onexitdata.call(this, token);
      const node =
        /** @type {Link} */
        this.stack[this.stack.length - 1];
      node.url = 'mailto:' + this.sliceSerialize(token);
    } //
    // Creaters.
    //

    /** @returns {Blockquote} */

    function blockQuote() {
      return {
        type: 'blockquote',
        children: []
      }
    }
    /** @returns {Code} */

    function codeFlow() {
      return {
        type: 'code',
        lang: null,
        meta: null,
        value: ''
      }
    }
    /** @returns {InlineCode} */

    function codeText() {
      return {
        type: 'inlineCode',
        value: ''
      }
    }
    /** @returns {Definition} */

    function definition() {
      return {
        type: 'definition',
        identifier: '',
        label: null,
        title: null,
        url: ''
      }
    }
    /** @returns {Emphasis} */

    function emphasis() {
      return {
        type: 'emphasis',
        children: []
      }
    }
    /** @returns {Heading} */

    function heading() {
      // @ts-expect-error `depth` will be set later.
      return {
        type: 'heading',
        depth: undefined,
        children: []
      }
    }
    /** @returns {Break} */

    function hardBreak() {
      return {
        type: 'break'
      }
    }
    /** @returns {HTML} */

    function html() {
      return {
        type: 'html',
        value: ''
      }
    }
    /** @returns {Image} */

    function image() {
      return {
        type: 'image',
        title: null,
        url: '',
        alt: null
      }
    }
    /** @returns {Link} */

    function link() {
      return {
        type: 'link',
        title: null,
        url: '',
        children: []
      }
    }
    /**
     * @param {Token} token
     * @returns {List}
     */

    function list(token) {
      return {
        type: 'list',
        ordered: token.type === 'listOrdered',
        start: null,
        // @ts-expect-error Patched.
        spread: token._spread,
        children: []
      }
    }
    /**
     * @param {Token} token
     * @returns {ListItem}
     */

    function listItem(token) {
      return {
        type: 'listItem',
        // @ts-expect-error Patched.
        spread: token._spread,
        checked: null,
        children: []
      }
    }
    /** @returns {Paragraph} */

    function paragraph() {
      return {
        type: 'paragraph',
        children: []
      }
    }
    /** @returns {Strong} */

    function strong() {
      return {
        type: 'strong',
        children: []
      }
    }
    /** @returns {Text} */

    function text() {
      return {
        type: 'text',
        value: ''
      }
    }
    /** @returns {ThematicBreak} */

    function thematicBreak() {
      return {
        type: 'thematicBreak'
      }
    }
  }
  /**
   * @param {Extension} combined
   * @param {Array<Extension|Array<Extension>>} extensions
   * @returns {Extension}
   */

  function configure(combined, extensions) {
    let index = -1;

    while (++index < extensions.length) {
      const value = extensions[index];

      if (Array.isArray(value)) {
        configure(combined, value);
      } else {
        extension(combined, value);
      }
    }

    return combined
  }
  /**
   * @param {Extension} combined
   * @param {Extension} extension
   * @returns {void}
   */

  function extension(combined, extension) {
    /** @type {string} */
    let key;

    for (key in extension) {
      if (own$6.call(extension, key)) {
        const list = key === 'canContainEols' || key === 'transforms';
        const maybe = own$6.call(combined, key) ? combined[key] : undefined;
        /* c8 ignore next */

        const left = maybe || (combined[key] = list ? [] : {});
        const right = extension[key];

        if (right) {
          if (list) {
            // @ts-expect-error: `left` is an array.
            combined[key] = [...left, ...right];
          } else {
            Object.assign(left, right);
          }
        }
      }
    }
  }
  /** @type {OnEnterError} */

  function defaultOnError(left, right) {
    if (left) {
      throw new Error(
        'Cannot close `' +
          left.type +
          '` (' +
          stringifyPosition({
            start: left.start,
            end: left.end
          }) +
          '): a different token (`' +
          right.type +
          '`, ' +
          stringifyPosition({
            start: right.start,
            end: right.end
          }) +
          ') is open'
      )
    } else {
      throw new Error(
        'Cannot close document, a token (`' +
          right.type +
          '`, ' +
          stringifyPosition({
            start: right.start,
            end: right.end
          }) +
          ') is still open'
      )
    }
  }

  /**
   * @typedef {import('mdast').Root} Root
   * @typedef {import('mdast-util-from-markdown').Options} Options
   */

  /** @type {import('unified').Plugin<[Options?] | void[], string, Root>} */
  function remarkParse(options) {
    /** @type {import('unified').ParserFunction<Root>} */
    const parser = (doc) => {
      // Assume options.
      const settings = /** @type {Options} */ (this.data('settings'));

      return fromMarkdown(
        doc,
        Object.assign({}, settings, options, {
          // Note: these options are not in the readme.
          // The goal is for them to be set by plugins on `data` instead of being
          // passed by users.
          extensions: this.data('micromarkExtensions') || [],
          mdastExtensions: this.data('fromMarkdownExtensions') || []
        })
      )
    };

    Object.assign(this, {Parser: parser});
  }

  /**
   * @typedef {import('unist').Node} Node
   * @typedef {import('unist').Parent} Parent
   * @typedef {import('unist').Literal} Literal
   * @typedef {Object.<string, unknown>} Props
   * @typedef {Array.<Node>|string} ChildrenOrValue
   *
   * @typedef {(<T extends string, P extends Record<string, unknown>, C extends Node[]>(type: T, props: P, children: C) => {type: T, children: C} & P)} BuildParentWithProps
   * @typedef {(<T extends string, P extends Record<string, unknown>>(type: T, props: P, value: string) => {type: T, value: string} & P)} BuildLiteralWithProps
   * @typedef {(<T extends string, P extends Record<string, unknown>>(type: T, props: P) => {type: T} & P)} BuildVoidWithProps
   * @typedef {(<T extends string, C extends Node[]>(type: T, children: C) => {type: T, children: C})} BuildParent
   * @typedef {(<T extends string>(type: T, value: string) => {type: T, value: string})} BuildLiteral
   * @typedef {(<T extends string>(type: T) => {type: T})} BuildVoid
   */

  var u$1 = /**
   * @type {BuildVoid & BuildVoidWithProps & BuildLiteral & BuildLiteralWithProps & BuildParent & BuildParentWithProps}
   */ (
    /**
     * @param {string} type Type of node
     * @param {Props|ChildrenOrValue} [props] Additional properties for node (or `children` or `value`)
     * @param {ChildrenOrValue} [value] `children` or `value` of node
     * @returns {Node}
     */
    function (type, props, value) {
      /** @type {Node} */
      var node = {type: String(type)};

      if (
        (value === undefined || value === null) &&
        (typeof props === 'string' || Array.isArray(props))
      ) {
        value = props;
      } else {
        Object.assign(node, props);
      }

      if (Array.isArray(value)) {
        node.children = value;
      } else if (value !== undefined && value !== null) {
        node.value = String(value);
      }

      return node
    }
  );

  /**
   * @typedef {import('mdast').Root|import('mdast').Parent['children'][number]} MdastNode
   * @typedef {import('./index.js').H} H
   * @typedef {import('./index.js').Handler} Handler
   * @typedef {import('./index.js').Content} Content
   */

  const own$5 = {}.hasOwnProperty;

  /**
   * Transform an unknown node.
   * @type {Handler}
   * @param {MdastNode} node
   */
  function unknown(h, node) {
    const data = node.data || {};

    if (
      'value' in node &&
      !(
        own$5.call(data, 'hName') ||
        own$5.call(data, 'hProperties') ||
        own$5.call(data, 'hChildren')
      )
    ) {
      return h.augment(node, u$1('text', node.value))
    }

    return h(node, 'div', all(h, node))
  }

  /**
   * @type {Handler}
   * @param {MdastNode} node
   */
  function one(h, node, parent) {
    const type = node && node.type;
    /** @type {Handler} */
    let fn;

    // Fail on non-nodes.
    if (!type) {
      throw new Error('Expected node, got `' + node + '`')
    }

    if (own$5.call(h.handlers, type)) {
      fn = h.handlers[type];
    } else if (h.passThrough && h.passThrough.includes(type)) {
      fn = returnNode;
    } else {
      fn = h.unknownHandler;
    }

    return (typeof fn === 'function' ? fn : unknown)(h, node, parent)
  }

  /**
   * @type {Handler}
   * @param {MdastNode} node
   */
  function returnNode(h, node) {
    // @ts-expect-error: Pass through custom node.
    return 'children' in node ? {...node, children: all(h, node)} : node
  }

  /**
   * @param {H} h
   * @param {MdastNode} parent
   */
  function all(h, parent) {
    /** @type {Array<Content>} */
    const values = [];

    if ('children' in parent) {
      const nodes = parent.children;
      let index = -1;

      while (++index < nodes.length) {
        const result = one(h, nodes[index], parent);

        if (result) {
          if (index && nodes[index - 1].type === 'break') {
            if (!Array.isArray(result) && result.type === 'text') {
              result.value = result.value.replace(/^\s+/, '');
            }

            if (!Array.isArray(result) && result.type === 'element') {
              const head = result.children[0];

              if (head && head.type === 'text') {
                head.value = head.value.replace(/^\s+/, '');
              }
            }
          }

          if (Array.isArray(result)) {
            values.push(...result);
          } else {
            values.push(result);
          }
        }
      }
    }

    return values
  }

  /**
   * @typedef {import('unist').Node} Node
   * @typedef {import('unist').Parent} Parent
   *
   * @typedef {string} Type
   * @typedef {Object<string, unknown>} Props
   *
   * @typedef {null|undefined|Type|Props|TestFunctionAnything|Array.<Type|Props|TestFunctionAnything>} Test
   */

  const convert$1 =
    /**
     * @type {(
     *   (<T extends Node>(test: T['type']|Partial<T>|TestFunctionPredicate<T>) => AssertPredicate<T>) &
     *   ((test?: Test) => AssertAnything)
     * )}
     */
    (
      /**
       * Generate an assertion from a check.
       * @param {Test} [test]
       * When nullish, checks if `node` is a `Node`.
       * When `string`, works like passing `function (node) {return node.type === test}`.
       * When `function` checks if function passed the node is true.
       * When `object`, checks that all keys in test are in node, and that they have (strictly) equal values.
       * When `array`, checks any one of the subtests pass.
       * @returns {AssertAnything}
       */
      function (test) {
        if (test === undefined || test === null) {
          return ok$1
        }

        if (typeof test === 'string') {
          return typeFactory$1(test)
        }

        if (typeof test === 'object') {
          return Array.isArray(test) ? anyFactory$1(test) : propsFactory$1(test)
        }

        if (typeof test === 'function') {
          return castFactory$1(test)
        }

        throw new Error('Expected function, string, or object as test')
      }
    );
  /**
   * @param {Array.<Type|Props|TestFunctionAnything>} tests
   * @returns {AssertAnything}
   */
  function anyFactory$1(tests) {
    /** @type {Array.<AssertAnything>} */
    const checks = [];
    let index = -1;

    while (++index < tests.length) {
      checks[index] = convert$1(tests[index]);
    }

    return castFactory$1(any)

    /**
     * @this {unknown}
     * @param {unknown[]} parameters
     * @returns {boolean}
     */
    function any(...parameters) {
      let index = -1;

      while (++index < checks.length) {
        if (checks[index].call(this, ...parameters)) return true
      }

      return false
    }
  }

  /**
   * Utility to assert each property in `test` is represented in `node`, and each
   * values are strictly equal.
   *
   * @param {Props} check
   * @returns {AssertAnything}
   */
  function propsFactory$1(check) {
    return castFactory$1(all)

    /**
     * @param {Node} node
     * @returns {boolean}
     */
    function all(node) {
      /** @type {string} */
      let key;

      for (key in check) {
        // @ts-expect-error: hush, it sure works as an index.
        if (node[key] !== check[key]) return false
      }

      return true
    }
  }

  /**
   * Utility to convert a string into a function which checks a given node’s type
   * for said string.
   *
   * @param {Type} check
   * @returns {AssertAnything}
   */
  function typeFactory$1(check) {
    return castFactory$1(type)

    /**
     * @param {Node} node
     */
    function type(node) {
      return node && node.type === check
    }
  }

  /**
   * Utility to convert a string into a function which checks a given node’s type
   * for said string.
   * @param {TestFunctionAnything} check
   * @returns {AssertAnything}
   */
  function castFactory$1(check) {
    return assertion

    /**
     * @this {unknown}
     * @param {Array.<unknown>} parameters
     * @returns {boolean}
     */
    function assertion(...parameters) {
      // @ts-expect-error: spreading is fine.
      return Boolean(check.call(this, ...parameters))
    }
  }

  // Utility to return true.
  function ok$1() {
    return true
  }

  /**
   * @param {string} d
   * @returns {string}
   */
  function color$2(d) {
    return d
  }

  /**
   * @typedef {import('unist').Node} Node
   * @typedef {import('unist').Parent} Parent
   * @typedef {import('unist-util-is').Test} Test
   * @typedef {import('./complex-types').Action} Action
   * @typedef {import('./complex-types').Index} Index
   * @typedef {import('./complex-types').ActionTuple} ActionTuple
   * @typedef {import('./complex-types').VisitorResult} VisitorResult
   * @typedef {import('./complex-types').Visitor} Visitor
   */

  /**
   * Continue traversing as normal
   */
  const CONTINUE$2 = true;
  /**
   * Do not traverse this node’s children
   */
  const SKIP$2 = 'skip';
  /**
   * Stop traversing immediately
   */
  const EXIT$2 = false;

  /**
   * Visit children of tree which pass a test
   *
   * @param tree Abstract syntax tree to walk
   * @param test Test node, optional
   * @param visitor Function to run for each node
   * @param reverse Visit the tree in reverse order, defaults to false
   */
  const visitParents$2 =
    /**
     * @type {(
     *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &
     *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types').BuildVisitor<Tree>, reverse?: boolean) => void)
     * )}
     */
    (
      /**
       * @param {Node} tree
       * @param {Test} test
       * @param {import('./complex-types').Visitor<Node>} visitor
       * @param {boolean} [reverse]
       */
      function (tree, test, visitor, reverse) {
        if (typeof test === 'function' && typeof visitor !== 'function') {
          reverse = visitor;
          // @ts-expect-error no visitor given, so `visitor` is test.
          visitor = test;
          test = null;
        }

        const is = convert$1(test);
        const step = reverse ? -1 : 1;

        factory(tree, null, [])();

        /**
         * @param {Node} node
         * @param {number?} index
         * @param {Array.<Parent>} parents
         */
        function factory(node, index, parents) {
          /** @type {Object.<string, unknown>} */
          // @ts-expect-error: hush
          const value = typeof node === 'object' && node !== null ? node : {};
          /** @type {string|undefined} */
          let name;

          if (typeof value.type === 'string') {
            name =
              typeof value.tagName === 'string'
                ? value.tagName
                : typeof value.name === 'string'
                ? value.name
                : undefined;

            Object.defineProperty(visit, 'name', {
              value:
                'node (' +
                color$2(value.type + (name ? '<' + name + '>' : '')) +
                ')'
            });
          }

          return visit

          function visit() {
            /** @type {ActionTuple} */
            let result = [];
            /** @type {ActionTuple} */
            let subresult;
            /** @type {number} */
            let offset;
            /** @type {Array.<Parent>} */
            let grandparents;

            if (!test || is(node, index, parents[parents.length - 1] || null)) {
              result = toResult$2(visitor(node, parents));

              if (result[0] === EXIT$2) {
                return result
              }
            }

            // @ts-expect-error looks like a parent.
            if (node.children && result[0] !== SKIP$2) {
              // @ts-expect-error looks like a parent.
              offset = (reverse ? node.children.length : -1) + step;
              // @ts-expect-error looks like a parent.
              grandparents = parents.concat(node);

              // @ts-expect-error looks like a parent.
              while (offset > -1 && offset < node.children.length) {
                // @ts-expect-error looks like a parent.
                subresult = factory(node.children[offset], offset, grandparents)();

                if (subresult[0] === EXIT$2) {
                  return subresult
                }

                offset =
                  typeof subresult[1] === 'number' ? subresult[1] : offset + step;
              }
            }

            return result
          }
        }
      }
    );

  /**
   * @param {VisitorResult} value
   * @returns {ActionTuple}
   */
  function toResult$2(value) {
    if (Array.isArray(value)) {
      return value
    }

    if (typeof value === 'number') {
      return [CONTINUE$2, value]
    }

    return [value]
  }

  /**
   * @typedef {import('unist').Node} Node
   * @typedef {import('unist').Parent} Parent
   * @typedef {import('unist-util-is').Test} Test
   * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult
   * @typedef {import('./complex-types').Visitor} Visitor
   */

  /**
   * Visit children of tree which pass a test
   *
   * @param tree Abstract syntax tree to walk
   * @param test Test, optional
   * @param visitor Function to run for each node
   * @param reverse Fisit the tree in reverse, defaults to false
   */
  const visit$2 =
    /**
     * @type {(
     *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &
     *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types').BuildVisitor<Tree>, reverse?: boolean) => void)
     * )}
     */
    (
      /**
       * @param {Node} tree
       * @param {Test} test
       * @param {import('./complex-types').Visitor} visitor
       * @param {boolean} [reverse]
       */
      function (tree, test, visitor, reverse) {
        if (typeof test === 'function' && typeof visitor !== 'function') {
          reverse = visitor;
          visitor = test;
          test = null;
        }

        visitParents$2(tree, test, overload, reverse);

        /**
         * @param {Node} node
         * @param {Array.<Parent>} parents
         */
        function overload(node, parents) {
          const parent = parents[parents.length - 1];
          return visitor(
            node,
            parent ? parent.children.indexOf(node) : null,
            parent
          )
        }
      }
    );

  /**
   * @typedef {import('unist').Position} Position
   * @typedef {import('unist').Node} Node
   * @typedef {Record<string, unknown> & {type: string, position?: PositionLike|undefined}} NodeLike
   * @typedef {import('unist').Point} Point
   *
   * @typedef {Partial<Point>} PointLike
   *
   * @typedef PositionLike
   * @property {PointLike} [start]
   * @property {PointLike} [end]
   */

  const pointStart = point('start');
  const pointEnd = point('end');

  /**
   * Get the positional info of `node`.
   *
   * @param {'start'|'end'} type
   */
  function point(type) {
    return point

    /**
     * Get the positional info of `node`.
     *
     * @param {NodeLike} [node]
     * @returns {Point}
     */
    function point(node) {
      /** @type {Point} */
      // @ts-expect-error looks like a point
      const point = (node && node.position && node.position[type]) || {};

      return {
        line: point.line || null,
        column: point.column || null,
        offset: point.offset > -1 ? point.offset : null
      }
    }
  }

  /**
   * @typedef {Object} PointLike
   * @property {number} [line]
   * @property {number} [column]
   * @property {number} [offset]
   *
   * @typedef {Object} PositionLike
   * @property {PointLike} [start]
   * @property {PointLike} [end]
   *
   * @typedef {Object} NodeLike
   * @property {PositionLike} [position]
   */

  /**
   * Check if `node` is *generated*.
   *
   * @param {NodeLike} [node]
   * @returns {boolean}
   */
  function generated(node) {
    return (
      !node ||
      !node.position ||
      !node.position.start ||
      !node.position.start.line ||
      !node.position.start.column ||
      !node.position.end ||
      !node.position.end.line ||
      !node.position.end.column
    )
  }

  /**
   * @param {string} d
   * @returns {string}
   */
  function color$1(d) {
    return d
  }

  /**
   * @typedef {import('unist').Node} Node
   * @typedef {import('unist').Parent} Parent
   * @typedef {import('unist-util-is').Test} Test
   */

  /**
   * Continue traversing as normal
   */
  const CONTINUE$1 = true;
  /**
   * Do not traverse this node’s children
   */
  const SKIP$1 = 'skip';
  /**
   * Stop traversing immediately
   */
  const EXIT$1 = false;

  const visitParents$1 =
    /**
     * @type {(
     *   (<T extends Node>(tree: Node, test: T['type']|Partial<T>|import('unist-util-is').TestFunctionPredicate<T>|Array.<T['type']|Partial<T>|import('unist-util-is').TestFunctionPredicate<T>>, visitor: Visitor<T>, reverse?: boolean) => void) &
     *   ((tree: Node, test: Test, visitor: Visitor<Node>, reverse?: boolean) => void) &
     *   ((tree: Node, visitor: Visitor<Node>, reverse?: boolean) => void)
     * )}
     */
    (
      /**
       * Visit children of tree which pass a test
       *
       * @param {Node} tree Abstract syntax tree to walk
       * @param {Test} test test Test node
       * @param {Visitor<Node>} visitor Function to run for each node
       * @param {boolean} [reverse] Fisit the tree in reverse, defaults to false
       */
      function (tree, test, visitor, reverse) {
        if (typeof test === 'function' && typeof visitor !== 'function') {
          reverse = visitor;
          // @ts-ignore no visitor given, so `visitor` is test.
          visitor = test;
          test = null;
        }

        var is = convert$1(test);
        var step = reverse ? -1 : 1;

        factory(tree, null, [])();

        /**
         * @param {Node} node
         * @param {number?} index
         * @param {Array.<Parent>} parents
         */
        function factory(node, index, parents) {
          /** @type {Object.<string, unknown>} */
          var value = typeof node === 'object' && node !== null ? node : {};
          /** @type {string} */
          var name;

          if (typeof value.type === 'string') {
            name =
              typeof value.tagName === 'string'
                ? value.tagName
                : typeof value.name === 'string'
                ? value.name
                : undefined;

            Object.defineProperty(visit, 'name', {
              value:
                'node (' +
                color$1(value.type + (name ? '<' + name + '>' : '')) +
                ')'
            });
          }

          return visit

          function visit() {
            /** @type {ActionTuple} */
            var result = [];
            /** @type {ActionTuple} */
            var subresult;
            /** @type {number} */
            var offset;
            /** @type {Array.<Parent>} */
            var grandparents;

            if (!test || is(node, index, parents[parents.length - 1] || null)) {
              result = toResult$1(visitor(node, parents));

              if (result[0] === EXIT$1) {
                return result
              }
            }

            if (node.children && result[0] !== SKIP$1) {
              // @ts-ignore looks like a parent.
              offset = (reverse ? node.children.length : -1) + step;
              // @ts-ignore looks like a parent.
              grandparents = parents.concat(node);

              // @ts-ignore looks like a parent.
              while (offset > -1 && offset < node.children.length) {
                subresult = factory(node.children[offset], offset, grandparents)();

                if (subresult[0] === EXIT$1) {
                  return subresult
                }

                offset =
                  typeof subresult[1] === 'number' ? subresult[1] : offset + step;
              }
            }

            return result
          }
        }
      }
    );

  /**
   * @param {VisitorResult} value
   * @returns {ActionTuple}
   */
  function toResult$1(value) {
    if (Array.isArray(value)) {
      return value
    }

    if (typeof value === 'number') {
      return [CONTINUE$1, value]
    }

    return [value]
  }

  /**
   * @typedef {import('unist').Node} Node
   * @typedef {import('unist').Parent} Parent
   * @typedef {import('unist-util-is').Test} Test
   * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult
   */

  const visit$1 =
    /**
     * @type {(
     *   (<T extends Node>(tree: Node, test: T['type']|Partial<T>|import('unist-util-is').TestFunctionPredicate<T>|Array.<T['type']|Partial<T>|import('unist-util-is').TestFunctionPredicate<T>>, visitor: Visitor<T>, reverse?: boolean) => void) &
     *   ((tree: Node, test: Test, visitor: Visitor<Node>, reverse?: boolean) => void) &
     *   ((tree: Node, visitor: Visitor<Node>, reverse?: boolean) => void)
     * )}
     */
    (
      /**
       * Visit children of tree which pass a test
       *
       * @param {Node} tree Abstract syntax tree to walk
       * @param {Test} test test Test node
       * @param {Visitor<Node>} visitor Function to run for each node
       * @param {boolean} [reverse] Fisit the tree in reverse, defaults to false
       */
      function (tree, test, visitor, reverse) {
        if (typeof test === 'function' && typeof visitor !== 'function') {
          reverse = visitor;
          visitor = test;
          test = null;
        }

        visitParents$1(tree, test, overload, reverse);

        /**
         * @param {Node} node
         * @param {Array.<Parent>} parents
         */
        function overload(node, parents) {
          var parent = parents[parents.length - 1];
          return visitor(
            node,
            parent ? parent.children.indexOf(node) : null,
            parent
          )
        }
      }
    );

  /**
   * @typedef {import('mdast').Root|import('mdast').Content} Node
   * @typedef {import('mdast').Definition} Definition
   * @typedef {import('unist-util-visit').Visitor<Definition>} DefinitionVisitor
   */

  const own$4 = {}.hasOwnProperty;

  /**
   *
   * @param {Node} node
   */
  function definitions(node) {
    /** @type {Object.<string, Definition>} */
    const cache = Object.create(null);

    if (!node || !node.type) {
      throw new Error('mdast-util-definitions expected node')
    }

    visit$1(node, 'definition', ondefinition);

    return getDefinition

    /** @type {DefinitionVisitor} */
    function ondefinition(definition) {
      const id = clean(definition.identifier);
      if (id && !own$4.call(cache, id)) {
        cache[id] = definition;
      }
    }

    /**
     * Get a node from the bound definition-cache.
     *
     * @param {string} identifier
     * @returns {Definition|null}
     */
    function getDefinition(identifier) {
      const id = clean(identifier);
      return id && own$4.call(cache, id) ? cache[id] : null
    }
  }

  /**
   * @param {string} [value]
   * @returns {string}
   */
  function clean(value) {
    return String(value || '').toUpperCase()
  }

  const characterReferences = {'"': 'quot', '&': 'amp', '<': 'lt', '>': 'gt'};

  /**
   * Encode only the dangerous HTML characters.
   *
   * This ensures that certain characters which have special meaning in HTML are
   * dealt with.
   * Technically, we can skip `>` and `"` in many cases, but CM includes them.
   *
   * @param {string} value
   * @returns {string}
   */
  function encode$1(value) {
    return value.replace(/["&<>]/g, replace)

    /**
     * @param {string} value
     * @returns {string}
     */
    function replace(value) {
      // @ts-expect-error Hush, it’s fine.
      return '&' + characterReferences[value] + ';'
    }
  }

  /**
   * Make a value safe for injection as a URL.
   *
   * This encodes unsafe characters with percent-encoding and skips already
   * encoded sequences (see `normalizeUri` below).
   * Further unsafe characters are encoded as character references (see
   * `micromark-util-encode`).
   *
   * Then, a regex of allowed protocols can be given, in which case the URL is
   * sanitized.
   * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`,
   * or `/^https?$/i` for `img[src]`.
   * If the URL includes an unknown protocol (one not matched by `protocol`, such
   * as a dangerous example, `javascript:`), the value is ignored.
   *
   * @param {string|undefined} url
   * @param {RegExp} [protocol]
   * @returns {string}
   */
  function sanitizeUri(url, protocol) {
    const value = encode$1(normalizeUri(url || ''));

    if (!protocol) {
      return value
    }

    const colon = value.indexOf(':');
    const questionMark = value.indexOf('?');
    const numberSign = value.indexOf('#');
    const slash = value.indexOf('/');

    if (
      // If there is no protocol, it’s relative.
      colon < 0 || // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.
      (slash > -1 && colon > slash) ||
      (questionMark > -1 && colon > questionMark) ||
      (numberSign > -1 && colon > numberSign) || // It is a protocol, it should be allowed.
      protocol.test(value.slice(0, colon))
    ) {
      return value
    }

    return ''
  }
  /**
   * Normalize a URL (such as used in definitions).
   *
   * Encode unsafe characters with percent-encoding, skipping already encoded
   * sequences.
   *
   * @param {string} value
   * @returns {string}
   */

  function normalizeUri(value) {
    /** @type {string[]} */
    const result = [];
    let index = -1;
    let start = 0;
    let skip = 0;

    while (++index < value.length) {
      const code = value.charCodeAt(index);
      /** @type {string} */

      let replace = ''; // A correct percent encoded value.

      if (
        code === 37 &&
        asciiAlphanumeric(value.charCodeAt(index + 1)) &&
        asciiAlphanumeric(value.charCodeAt(index + 2))
      ) {
        skip = 2;
      } // ASCII.
      else if (code < 128) {
        if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {
          replace = String.fromCharCode(code);
        }
      } // Astral.
      else if (code > 55295 && code < 57344) {
        const next = value.charCodeAt(index + 1); // A correct surrogate pair.

        if (code < 56320 && next > 56319 && next < 57344) {
          replace = String.fromCharCode(code, next);
          skip = 1;
        } // Lone surrogate.
        else {
          replace = '\uFFFD';
        }
      } // Unicode.
      else {
        replace = String.fromCharCode(code);
      }

      if (replace) {
        result.push(value.slice(start, index), encodeURIComponent(replace));
        start = index + skip + 1;
        replace = '';
      }

      if (skip) {
        index += skip;
        skip = 0;
      }
    }

    return result.join('') + value.slice(start)
  }

  /**
   * @typedef {import('./index.js').Content} Content
   */

  /**
   * Wrap `nodes` with line feeds between each entry.
   * Optionally adds line feeds at the start and end.
   *
   * @param {Array<Content>} nodes
   * @param {boolean} [loose=false]
   * @returns {Array<Content>}
   */
  function wrap(nodes, loose) {
    /** @type {Array<Content>} */
    const result = [];
    let index = -1;

    if (loose) {
      result.push(u$1('text', '\n'));
    }

    while (++index < nodes.length) {
      if (index) result.push(u$1('text', '\n'));
      result.push(nodes[index]);
    }

    if (loose && nodes.length > 0) {
      result.push(u$1('text', '\n'));
    }

    return result
  }

  /**
   * @typedef {import('mdast').BlockContent} BlockContent
   * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition
   * @typedef {import('hast').Element} Element
   * @typedef {import('hast').ElementContent} ElementContent
   * @typedef {import('./index.js').H} H
   */

  /**
   * @param {H} h
   */
  function footer(h) {
    let index = -1;
    /** @type {Array<ElementContent>} */
    const listItems = [];

    while (++index < h.footnoteOrder.length) {
      const def = h.footnoteById[h.footnoteOrder[index].toUpperCase()];

      if (!def) {
        continue
      }

      const content = all(h, def);
      const id = String(def.identifier);
      const safeId = sanitizeUri(id.toLowerCase());
      let referenceIndex = 0;
      /** @type {Array<ElementContent>} */
      const backReferences = [];

      while (++referenceIndex <= h.footnoteCounts[id]) {
        /** @type {Element} */
        const backReference = {
          type: 'element',
          tagName: 'a',
          properties: {
            href:
              '#' +
              h.clobberPrefix +
              'fnref-' +
              safeId +
              (referenceIndex > 1 ? '-' + referenceIndex : ''),
            dataFootnoteBackref: true,
            className: ['data-footnote-backref'],
            ariaLabel: h.footnoteBackLabel
          },
          children: [{type: 'text', value: '↩'}]
        };

        if (referenceIndex > 1) {
          backReference.children.push({
            type: 'element',
            tagName: 'sup',
            children: [{type: 'text', value: String(referenceIndex)}]
          });
        }

        if (backReferences.length > 0) {
          backReferences.push({type: 'text', value: ' '});
        }

        backReferences.push(backReference);
      }

      const tail = content[content.length - 1];

      if (tail && tail.type === 'element' && tail.tagName === 'p') {
        const tailTail = tail.children[tail.children.length - 1];
        if (tailTail && tailTail.type === 'text') {
          tailTail.value += ' ';
        } else {
          tail.children.push({type: 'text', value: ' '});
        }

        tail.children.push(...backReferences);
      } else {
        content.push(...backReferences);
      }

      /** @type {Element} */
      const listItem = {
        type: 'element',
        tagName: 'li',
        properties: {id: h.clobberPrefix + 'fn-' + safeId},
        children: wrap(content, true)
      };

      if (def.position) {
        listItem.position = def.position;
      }

      listItems.push(listItem);
    }

    if (listItems.length === 0) {
      return null
    }

    return {
      type: 'element',
      tagName: 'section',
      properties: {dataFootnotes: true, className: ['footnotes']},
      children: [
        {
          type: 'element',
          tagName: 'h2',
          properties: {id: 'footnote-label', className: ['sr-only']},
          children: [u$1('text', h.footnoteLabel)]
        },
        {type: 'text', value: '\n'},
        {
          type: 'element',
          tagName: 'ol',
          properties: {},
          children: wrap(listItems, true)
        },
        {type: 'text', value: '\n'}
      ]
    }
  }

  /**
   * @typedef {import('mdast').Blockquote} Blockquote
   * @typedef {import('../index.js').Handler} Handler
   */

  /**
   * @type {Handler}
   * @param {Blockquote} node
   */
  function blockquote(h, node) {
    return h(node, 'blockquote', wrap(all(h, node), true))
  }

  /**
   * @typedef {import('hast').Element} Element
   * @typedef {import('hast').Text} Text
   * @typedef {import('mdast').Break} Break
   * @typedef {import('../index.js').Handler} Handler
   */

  /**
   * @type {Handler}
   * @param {Break} node
   * @returns {Array<Element|Text>}
   */
  function hardBreak(h, node) {
    return [h(node, 'br'), u$1('text', '\n')]
  }

  /**
   * @typedef {import('mdast').Code} Code
   * @typedef {import('hast').Element} Element
   * @typedef {import('hast').Properties} Properties
   * @typedef {import('../index.js').Handler} Handler
   */

  /**
   * @type {Handler}
   * @param {Code} node
   */
  function code(h, node) {
    const value = node.value ? node.value + '\n' : '';
    // To do: next major, use `node.lang` w/o regex, the splitting’s been going
    // on for years in remark now.
    const lang = node.lang && node.lang.match(/^[^ \t]+(?=[ \t]|$)/);
    /** @type {Properties} */
    const props = {};

    if (lang) {
      props.className = ['language-' + lang];
    }

    const code = h(node, 'code', props, [u$1('text', value)]);

    if (node.meta) {
      code.data = {meta: node.meta};
    }

    return h(node.position, 'pre', [code])
  }

  /**
   * @typedef {import('mdast').Delete} Delete
   * @typedef {import('../index.js').Handler} Handler
   */

  /**
   * @type {Handler}
   * @param {Delete} node
   */
  function strikethrough(h, node) {
    return h(node, 'del', all(h, node))
  }

  /**
   * @typedef {import('mdast').Emphasis} Emphasis
   * @typedef {import('../index.js').Handler} Handler
   */

  /**
   * @type {Handler}
   * @param {Emphasis} node
   */
  function emphasis(h, node) {
    return h(node, 'em', all(h, node))
  }

  /**
   * @typedef {import('mdast').FootnoteReference} FootnoteReference
   * @typedef {import('../index.js').Handler} Handler
   */

  /**
   * @type {Handler}
   * @param {FootnoteReference} node
   */
  function footnoteReference(h, node) {
    const id = String(node.identifier);
    const safeId = sanitizeUri(id.toLowerCase());
    const index = h.footnoteOrder.indexOf(id);
    /** @type {number} */
    let counter;

    if (index === -1) {
      h.footnoteOrder.push(id);
      h.footnoteCounts[id] = 1;
      counter = h.footnoteOrder.length;
    } else {
      h.footnoteCounts[id]++;
      counter = index + 1;
    }

    const reuseCounter = h.footnoteCounts[id];

    return h(node, 'sup', [
      h(
        node.position,
        'a',
        {
          href: '#' + h.clobberPrefix + 'fn-' + safeId,
          id:
            h.clobberPrefix +
            'fnref-' +
            safeId +
            (reuseCounter > 1 ? '-' + reuseCounter : ''),
          dataFootnoteRef: true,
          ariaDescribedBy: 'footnote-label'
        },
        [u$1('text', String(counter))]
      )
    ])
  }

  /**
   * @typedef {import('mdast').Footnote} Footnote
   * @typedef {import('../index.js').Handler} Handler
   *
   * @todo
   *   `footnote` (or “inline note”) are a pandoc footnotes feature (`^[a note]`)
   *   that does not exist in GFM.
   *   We still have support for it, so that things remain working with
   *   `micromark-extension-footnote` and `mdast-util-footnote`, but in the future
   *   we might be able to remove it?
   */

  /**
   * @type {Handler}
   * @param {Footnote} node
   */
  function footnote(h, node) {
    const footnoteById = h.footnoteById;
    let no = 1;

    while (no in footnoteById) no++;

    const identifier = String(no);

    footnoteById[identifier] = {
      type: 'footnoteDefinition',
      identifier,
      children: [{type: 'paragraph', children: node.children}],
      position: node.position
    };

    return footnoteReference(h, {
      type: 'footnoteReference',
      identifier,
      position: node.position
    })
  }

  /**
   * @typedef {import('mdast').Heading} Heading
   * @typedef {import('../index.js').Handler} Handler
   */

  /**
   * @type {Handler}
   * @param {Heading} node
   */
  function heading(h, node) {
    return h(node, 'h' + node.depth, all(h, node))
  }

  /**
   * @typedef {import('mdast').HTML} HTML
   * @typedef {import('../index.js').Handler} Handler
   */

  /**
   * Return either a `raw` node in dangerous mode, otherwise nothing.
   *
   * @type {Handler}
   * @param {HTML} node
   */
  function html$2(h, node) {
    return h.dangerous ? h.augment(node, u$1('raw', node.value)) : null
  }

  var encodeCache = {};


  // Create a lookup array where anything but characters in `chars` string
  // and alphanumeric chars is percent-encoded.
  //
  function getEncodeCache(exclude) {
    var i, ch, cache = encodeCache[exclude];
    if (cache) { return cache; }

    cache = encodeCache[exclude] = [];

    for (i = 0; i < 128; i++) {
      ch = String.fromCharCode(i);

      if (/^[0-9a-z]$/i.test(ch)) {
        // always allow unencoded alphanumeric characters
        cache.push(ch);
      } else {
        cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));
      }
    }

    for (i = 0; i < exclude.length; i++) {
      cache[exclude.charCodeAt(i)] = exclude[i];
    }

    return cache;
  }


  // Encode unsafe characters with percent-encoding, skipping already
  // encoded sequences.
  //
  //  - string       - string to encode
  //  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)
  //  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)
  //
  function encode(string, exclude, keepEscaped) {
    var i, l, code, nextCode, cache,
        result = '';

    if (typeof exclude !== 'string') {
      // encode(string, keepEscaped)
      keepEscaped  = exclude;
      exclude = encode.defaultChars;
    }

    if (typeof keepEscaped === 'undefined') {
      keepEscaped = true;
    }

    cache = getEncodeCache(exclude);

    for (i = 0, l = string.length; i < l; i++) {
      code = string.charCodeAt(i);

      if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {
        if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {
          result += string.slice(i, i + 3);
          i += 2;
          continue;
        }
      }

      if (code < 128) {
        result += cache[code];
        continue;
      }

      if (code >= 0xD800 && code <= 0xDFFF) {
        if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {
          nextCode = string.charCodeAt(i + 1);
          if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {
            result += encodeURIComponent(string[i] + string[i + 1]);
            i++;
            continue;
          }
        }
        result += '%EF%BF%BD';
        continue;
      }

      result += encodeURIComponent(string[i]);
    }

    return result;
  }

  encode.defaultChars   = ";/?:@&=+$,-_.!~*'()#";
  encode.componentChars = "-_.!~*'()";


  var encode_1 = encode;

  /**
   * @typedef {import('mdast').LinkReference} LinkReference
   * @typedef {import('mdast').ImageReference} ImageReference
   * @typedef {import('./index.js').Handler} Handler
   * @typedef {import('./index.js').Content} Content
   */

  /**
   * Return the content of a reference without definition as plain text.
   *
   * @type {Handler}
   * @param {ImageReference|LinkReference} node
   * @returns {Content|Array<Content>}
   */
  function revert(h, node) {
    const subtype = node.referenceType;
    let suffix = ']';

    if (subtype === 'collapsed') {
      suffix += '[]';
    } else if (subtype === 'full') {
      suffix += '[' + (node.label || node.identifier) + ']';
    }

    if (node.type === 'imageReference') {
      return u$1('text', '![' + node.alt + suffix)
    }

    const contents = all(h, node);
    const head = contents[0];

    if (head && head.type === 'text') {
      head.value = '[' + head.value;
    } else {
      contents.unshift(u$1('text', '['));
    }

    const tail = contents[contents.length - 1];

    if (tail && tail.type === 'text') {
      tail.value += suffix;
    } else {
      contents.push(u$1('text', suffix));
    }

    return contents
  }

  /**
   * @typedef {import('mdast').ImageReference} ImageReference
   * @typedef {import('hast').Properties} Properties
   * @typedef {import('../index.js').Handler} Handler
   */

  /**
   * @type {Handler}
   * @param {ImageReference} node
   */
  function imageReference(h, node) {
    const def = h.definition(node.identifier);

    if (!def) {
      return revert(h, node)
    }

    /** @type {Properties} */
    const props = {src: encode_1(def.url || ''), alt: node.alt};

    if (def.title !== null && def.title !== undefined) {
      props.title = def.title;
    }

    return h(node, 'img', props)
  }

  /**
   * @typedef {import('mdast').Image} Image
   * @typedef {import('hast').Properties} Properties
   * @typedef {import('../index.js').Handler} Handler
   */

  /**
   * @type {Handler}
   * @param {Image} node
   */
  function image(h, node) {
    /** @type {Properties} */
    const props = {src: encode_1(node.url), alt: node.alt};

    if (node.title !== null && node.title !== undefined) {
      props.title = node.title;
    }

    return h(node, 'img', props)
  }

  /**
   * @typedef {import('mdast').InlineCode} InlineCode
   * @typedef {import('../index.js').Handler} Handler
   */

  /**
   * @type {Handler}
   * @param {InlineCode} node
   */
  function inlineCode(h, node) {
    return h(node, 'code', [u$1('text', node.value.replace(/\r?\n|\r/g, ' '))])
  }

  /**
   * @typedef {import('mdast').LinkReference} LinkReference
   * @typedef {import('hast').Properties} Properties
   * @typedef {import('../index.js').Handler} Handler
   */

  /**
   * @type {Handler}
   * @param {LinkReference} node
   */
  function linkReference(h, node) {
    const def = h.definition(node.identifier);

    if (!def) {
      return revert(h, node)
    }

    /** @type {Properties} */
    const props = {href: encode_1(def.url || '')};

    if (def.title !== null && def.title !== undefined) {
      props.title = def.title;
    }

    return h(node, 'a', props, all(h, node))
  }

  /**
   * @typedef {import('mdast').Link} Link
   * @typedef {import('hast').Properties} Properties
   * @typedef {import('../index.js').Handler} Handler
   */

  /**
   * @type {Handler}
   * @param {Link} node
   */
  function link(h, node) {
    /** @type {Properties} */
    const props = {href: encode_1(node.url)};

    if (node.title !== null && node.title !== undefined) {
      props.title = node.title;
    }

    return h(node, 'a', props, all(h, node))
  }

  /**
   * @typedef {import('mdast').ListItem} ListItem
   * @typedef {import('mdast').List} List
   * @typedef {import('hast').Properties} Properties
   * @typedef {import('hast').Element} Element
   * @typedef {import('../index.js').Handler} Handler
   * @typedef {import('../index.js').Content} Content
   */

  /**
   * @type {Handler}
   * @param {ListItem} node
   * @param {List} parent
   */
  function listItem(h, node, parent) {
    const result = all(h, node);
    const loose = parent ? listLoose(parent) : listItemLoose(node);
    /** @type {Properties} */
    const props = {};
    /** @type {Array<Content>} */
    const wrapped = [];

    if (typeof node.checked === 'boolean') {
      /** @type {Element} */
      let paragraph;

      if (
        result[0] &&
        result[0].type === 'element' &&
        result[0].tagName === 'p'
      ) {
        paragraph = result[0];
      } else {
        paragraph = h(null, 'p', []);
        result.unshift(paragraph);
      }

      if (paragraph.children.length > 0) {
        paragraph.children.unshift(u$1('text', ' '));
      }

      paragraph.children.unshift(
        h(null, 'input', {
          type: 'checkbox',
          checked: node.checked,
          disabled: true
        })
      );

      // According to github-markdown-css, this class hides bullet.
      // See: <https://github.com/sindresorhus/github-markdown-css>.
      props.className = ['task-list-item'];
    }

    let index = -1;

    while (++index < result.length) {
      const child = result[index];

      // Add eols before nodes, except if this is a loose, first paragraph.
      if (
        loose ||
        index !== 0 ||
        child.type !== 'element' ||
        child.tagName !== 'p'
      ) {
        wrapped.push(u$1('text', '\n'));
      }

      if (child.type === 'element' && child.tagName === 'p' && !loose) {
        wrapped.push(...child.children);
      } else {
        wrapped.push(child);
      }
    }

    const tail = result[result.length - 1];

    // Add a final eol.
    if (tail && (loose || !('tagName' in tail) || tail.tagName !== 'p')) {
      wrapped.push(u$1('text', '\n'));
    }

    return h(node, 'li', props, wrapped)
  }

  /**
   * @param {List} node
   * @return {Boolean}
   */
  function listLoose(node) {
    let loose = node.spread;
    const children = node.children;
    let index = -1;

    while (!loose && ++index < children.length) {
      loose = listItemLoose(children[index]);
    }

    return Boolean(loose)
  }

  /**
   * @param {ListItem} node
   * @return {Boolean}
   */
  function listItemLoose(node) {
    const spread = node.spread;

    return spread === undefined || spread === null
      ? node.children.length > 1
      : spread
  }

  /**
   * @typedef {import('mdast').List} List
   * @typedef {import('hast').Element} Element
   * @typedef {import('hast').Properties} Properties
   * @typedef {import('../index.js').Handler} Handler
   */

  /**
   * @type {Handler}
   * @param {List} node
   * @returns {Element}
   */
  function list(h, node) {
    /** @type {Properties} */
    const props = {};
    const name = node.ordered ? 'ol' : 'ul';
    const items = all(h, node);
    let index = -1;

    if (typeof node.start === 'number' && node.start !== 1) {
      props.start = node.start;
    }

    // Like GitHub, add a class for custom styling.
    while (++index < items.length) {
      const item = items[index];

      if (
        item.type === 'element' &&
        item.tagName === 'li' &&
        item.properties &&
        Array.isArray(item.properties.className) &&
        item.properties.className.includes('task-list-item')
      ) {
        props.className = ['contains-task-list'];
        break
      }
    }

    return h(node, name, props, wrap(items, true))
  }

  /**
   * @typedef {import('mdast').Paragraph} Paragraph
   * @typedef {import('../index.js').Handler} Handler
   */

  /**
   * @type {Handler}
   * @param {Paragraph} node
   */
  function paragraph(h, node) {
    return h(node, 'p', all(h, node))
  }

  /**
   * @typedef {import('mdast').Root} Root
   * @typedef {import('../index.js').Handler} Handler
   */

  /**
   * @type {Handler}
   * @param {Root} node
   */
  function root(h, node) {
    // @ts-expect-error `root`s are also fine.
    return h.augment(node, u$1('root', wrap(all(h, node))))
  }

  /**
   * @typedef {import('mdast').Strong} Strong
   * @typedef {import('../index.js').Handler} Handler
   */

  /**
   * @type {Handler}
   * @param {Strong} node
   */
  function strong(h, node) {
    return h(node, 'strong', all(h, node))
  }

  /**
   * @typedef {import('mdast').Table} Table
   * @typedef {import('mdast').TableCell} TableCell
   * @typedef {import('hast').Element} Element
   * @typedef {import('../index.js').Handler} Handler
   * @typedef {import('../index.js').Content} Content
   */

  /**
   * @type {Handler}
   * @param {Table} node
   */
  function table(h, node) {
    const rows = node.children;
    let index = -1;
    const align = node.align || [];
    /** @type {Array<Element>} */
    const result = [];

    while (++index < rows.length) {
      const row = rows[index].children;
      const name = index === 0 ? 'th' : 'td';
      /** @type {Array<Content>} */
      const out = [];
      let cellIndex = -1;
      const length = node.align ? align.length : row.length;

      while (++cellIndex < length) {
        const cell = row[cellIndex];
        out.push(
          h(cell, name, {align: align[cellIndex]}, cell ? all(h, cell) : [])
        );
      }

      result[index] = h(rows[index], 'tr', wrap(out, true));
    }

    return h(
      node,
      'table',
      wrap(
        [h(result[0].position, 'thead', wrap([result[0]], true))].concat(
          result[1]
            ? h(
                {
                  start: pointStart(result[1]),
                  end: pointEnd(result[result.length - 1])
                },
                'tbody',
                wrap(result.slice(1), true)
              )
            : []
        ),
        true
      )
    )
  }

  /**
   * @typedef {import('mdast').Text} Text
   * @typedef {import('../index.js').Handler} Handler
   */

  /**
   * @type {Handler}
   * @param {Text} node
   */
  function text(h, node) {
    return h.augment(
      node,
      u$1('text', String(node.value).replace(/[ \t]*(\r?\n|\r)[ \t]*/g, '$1'))
    )
  }

  /**
   * @typedef {import('mdast').ThematicBreak} ThematicBreak
   * @typedef {import('hast').Element} Element
   * @typedef {import('../index.js').Handler} Handler
   */

  /**
   * @type {Handler}
   * @param {ThematicBreak} [node]
   * @returns {Element}
   */
  function thematicBreak(h, node) {
    return h(node, 'hr')
  }

  const handlers = {
    blockquote,
    break: hardBreak,
    code,
    delete: strikethrough,
    emphasis,
    footnoteReference,
    footnote,
    heading,
    html: html$2,
    imageReference,
    image,
    inlineCode,
    linkReference,
    link,
    listItem,
    list,
    paragraph,
    root,
    strong,
    table,
    text,
    thematicBreak,
    toml: ignore,
    yaml: ignore,
    definition: ignore,
    footnoteDefinition: ignore
  };

  // Return nothing for nodes that are ignored.
  function ignore() {
    return null
  }

  /**
   * @typedef {import('mdast').Root|import('mdast').Parent['children'][number]} MdastNode
   * @typedef {import('hast').Root|import('hast').Parent['children'][number]} HastNode
   * @typedef {import('mdast').Parent} Parent
   * @typedef {import('mdast').Definition} Definition
   * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition
   * @typedef {import('hast').Properties} Properties
   * @typedef {import('hast').Text} Text
   * @typedef {import('hast').Comment} Comment
   * @typedef {import('hast').Element} Element
   * @typedef {import('hast').Root} Root
   * @typedef {import('hast').ElementContent} Content
   * @typedef {import('unist-util-position').PositionLike} PositionLike
   *
   * @typedef EmbeddedHastFields
   * @property {string} [hName] Defines the tag name of an element
   * @property {Properties} [hProperties] Defines the properties of an element
   * @property {Array<Content>} [hChildren] Defines the (hast) children of an element
   *
   * @typedef {Record<string, unknown> & EmbeddedHastFields} Data unist data with embedded hast fields
   *
   * @typedef {MdastNode & {data?: Data}} NodeWithData unist node with embedded hast data
   *
   * @callback Handler
   * @param {H} h Handle context
   * @param {any} node mdast node to handle
   * @param {Parent|null} parent Parent of `node`
   * @returns {Content|Array<Content>|null|undefined} hast node
   *
   * @callback HFunctionProps
   * @param {MdastNode|PositionLike|null|undefined} node mdast node or unist position
   * @param {string} tagName HTML tag name
   * @param {Properties} props Properties
   * @param {Array<Content>?} [children] hast content
   * @returns {Element}
   *
   * @callback HFunctionNoProps
   * @param {MdastNode|PositionLike|null|undefined} node mdast node or unist position
   * @param {string} tagName HTML tag name
   * @param {Array<Content>?} [children] hast content
   * @returns {Element}
   *
   * @typedef HFields
   * @property {boolean} dangerous Whether HTML is allowed
   * @property {string} clobberPrefix Prefix to use to prevent DOM clobbering
   * @property {string} footnoteLabel Label to use to introduce the footnote section
   * @property {string} footnoteBackLabel Label to use to go back to a footnote call from the footnote section
   * @property {(identifier: string) => Definition|null} definition Definition cache
   * @property {Record<string, FootnoteDefinition>} footnoteById Footnote cache
   * @property {Array<string>} footnoteOrder Order in which footnotes occur
   * @property {Record<string, number>} footnoteCounts Counts the same footnote was used
   * @property {Handlers} handlers Applied handlers
   * @property {Handler} unknownHandler Handler for any none not in `passThrough` or otherwise handled
   * @property {(left: NodeWithData|PositionLike|null|undefined, right: Content) => Content} augment Like `h` but lower-level and usable on non-elements.
   * @property {Array<string>} passThrough List of node types to pass through untouched (except for their children).
   *
   * @typedef Options
   * @property {boolean} [allowDangerousHtml=false]
   *   Whether to allow `html` nodes and inject them as `raw` HTML
   * @property {string} [clobberPrefix='user-content-']
   *   Prefix to use before the `id` attribute to prevent it from *clobbering*.
   *   attributes.
   *   DOM clobbering is this:
   *
   *   ```html
   *   <p id=x></p>
   *   <script>alert(x)</script>
   *   ```
   *
   *   Elements by their ID are made available in browsers on the `window` object.
   *   Using a prefix prevents this from being a problem.
   * @property {string} [footnoteLabel='Footnotes']
   *   Label to use for the footnotes section.
   *   Affects screen reader users.
   *   Change it if you’re authoring in a different language.
   * @property {string} [footnoteBackLabel='Back to content']
   *   Label to use from backreferences back to their footnote call.
   *   Affects screen reader users.
   *   Change it if you’re authoring in a different language.
   * @property {Handlers} [handlers]
   *   Object mapping mdast nodes to functions handling them
   * @property {Array<string>} [passThrough]
   *   List of custom mdast node types to pass through (keep) in hast
   * @property {Handler} [unknownHandler]
   *   Handler for all unknown nodes.
   *
   * @typedef {Record<string, Handler>} Handlers
   *   Map of node types to handlers
   * @typedef {HFunctionProps & HFunctionNoProps & HFields} H
   *   Handle context
   */

  const own$3 = {}.hasOwnProperty;

  /**
   * Factory to transform.
   * @param {MdastNode} tree mdast node
   * @param {Options} [options] Configuration
   * @returns {H} `h` function
   */
  function factory(tree, options) {
    const settings = options || {};
    const dangerous = settings.allowDangerousHtml || false;
    /** @type {Record<string, FootnoteDefinition>} */
    const footnoteById = {};

    h.dangerous = dangerous;
    h.clobberPrefix =
      settings.clobberPrefix === undefined || settings.clobberPrefix === null
        ? 'user-content-'
        : settings.clobberPrefix;
    h.footnoteLabel = settings.footnoteLabel || 'Footnotes';
    h.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content';
    h.definition = definitions(tree);
    h.footnoteById = footnoteById;
    /** @type {Array<string>} */
    h.footnoteOrder = [];
    /** @type {Record<string, number>} */
    h.footnoteCounts = {};
    h.augment = augment;
    h.handlers = {...handlers, ...settings.handlers};
    h.unknownHandler = settings.unknownHandler;
    h.passThrough = settings.passThrough;

    visit$2(tree, 'footnoteDefinition', (definition) => {
      const id = String(definition.identifier).toUpperCase();

      // Mimick CM behavior of link definitions.
      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.
      if (!own$3.call(footnoteById, id)) {
        footnoteById[id] = definition;
      }
    });

    // @ts-expect-error Hush, it’s fine!
    return h

    /**
     * Finalise the created `right`, a hast node, from `left`, an mdast node.
     * @param {(NodeWithData|PositionLike)?} left
     * @param {Content} right
     * @returns {Content}
     */
    function augment(left, right) {
      // Handle `data.hName`, `data.hProperties, `data.hChildren`.
      if (left && 'data' in left && left.data) {
        /** @type {Data} */
        const data = left.data;

        if (data.hName) {
          if (right.type !== 'element') {
            right = {
              type: 'element',
              tagName: '',
              properties: {},
              children: []
            };
          }

          right.tagName = data.hName;
        }

        if (right.type === 'element' && data.hProperties) {
          right.properties = {...right.properties, ...data.hProperties};
        }

        if ('children' in right && right.children && data.hChildren) {
          right.children = data.hChildren;
        }
      }

      if (left) {
        const ctx = 'type' in left ? left : {position: left};

        if (!generated(ctx)) {
          right.position = {start: pointStart(ctx), end: pointEnd(ctx)};
        }
      }

      return right
    }

    /**
     * Create an element for `node`.
     *
     * @type {HFunctionProps}
     */
    function h(node, tagName, props, children) {
      if (Array.isArray(props)) {
        children = props;
        props = {};
      }

      // @ts-expect-error augmenting an element yields an element.
      return augment(node, {
        type: 'element',
        tagName,
        properties: props || {},
        children: children || []
      })
    }
  }

  /**
   * Transform `tree` (an mdast node) to a hast node.
   *
   * @param {MdastNode} tree mdast node
   * @param {Options} [options] Configuration
   * @returns {HastNode|null|undefined} hast node
   */
  function toHast(tree, options) {
    const h = factory(tree, options);
    const node = one(h, tree, null);
    const foot = footer(h);

    if (foot) {
      // @ts-expect-error If there’s a footer, there were definitions, meaning block
      // content.
      // So assume `node` is a parent node.
      node.children.push(u$1('text', '\n'), foot);
    }

    return Array.isArray(node) ? {type: 'root', children: node} : node
  }

  /**
   * @typedef {import('hast').Root} HastRoot
   * @typedef {import('mdast').Root} MdastRoot
   * @typedef {import('mdast-util-to-hast').Options} Options
   * @typedef {import('unified').Processor<any, any, any, any>} Processor
   *
   * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree
   */

  // Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(

  /**
   * Plugin that turns markdown into HTML to support rehype.
   *
   * *   If a destination processor is given, that processor runs with a new HTML
   *     (hast) tree (bridge-mode).
   *     As the given processor runs with a hast tree, and rehype plugins support
   *     hast, that means rehype plugins can be used with the given processor.
   *     The hast tree is discarded in the end.
   *     It’s highly unlikely that you want to do this.
   * *   The common case is to not pass a destination processor, in which case the
   *     current processor continues running with a new HTML (hast) tree
   *     (mutate-mode).
   *     As the current processor continues with a hast tree, and rehype plugins
   *     support hast, that means rehype plugins can be used after
   *     `remark-rehype`.
   *     It’s likely that this is what you want to do.
   *
   * @param destination
   *   Optional unified processor.
   * @param options
   *   Options passed to `mdast-util-to-hast`.
   */
  const remarkRehype =
    /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */
    (
      function (destination, options) {
        return destination && 'run' in destination
          ? bridge(destination, options)
          : mutate(destination || options)
      }
    );

  var remarkRehype$1 = remarkRehype;

  /**
   * Bridge-mode.
   * Runs the destination with the new hast tree.
   *
   * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}
   */
  function bridge(destination, options) {
    return (node, file, next) => {
      destination.run(toHast(node, options), file, (error) => {
        next(error);
      });
    }
  }

  /**
   * Mutate-mode.
   * Further plugins run on the hast tree.
   *
   * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}
   */
  function mutate(options) {
    // @ts-expect-error: assume a corresponding node is returned by `toHast`.
    return (node) => toHast(node, options)
  }

  var propTypes = {exports: {}};

  var reactIs_production_min$1 = {};

  /** @license React v16.13.1
   * react-is.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  var b$1="function"===typeof Symbol&&Symbol.for,c$1=b$1?Symbol.for("react.element"):60103,d$1=b$1?Symbol.for("react.portal"):60106,e$1=b$1?Symbol.for("react.fragment"):60107,f$1=b$1?Symbol.for("react.strict_mode"):60108,g$1=b$1?Symbol.for("react.profiler"):60114,h$1=b$1?Symbol.for("react.provider"):60109,k$1=b$1?Symbol.for("react.context"):60110,l$1=b$1?Symbol.for("react.async_mode"):60111,m$1=b$1?Symbol.for("react.concurrent_mode"):60111,n$1=b$1?Symbol.for("react.forward_ref"):60112,p$1=b$1?Symbol.for("react.suspense"):60113,q$1=b$1?
  Symbol.for("react.suspense_list"):60120,r$1=b$1?Symbol.for("react.memo"):60115,t=b$1?Symbol.for("react.lazy"):60116,v$1=b$1?Symbol.for("react.block"):60121,w$1=b$1?Symbol.for("react.fundamental"):60117,x$1=b$1?Symbol.for("react.responder"):60118,y$1=b$1?Symbol.for("react.scope"):60119;
  function z$1(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c$1:switch(a=a.type,a){case l$1:case m$1:case e$1:case g$1:case f$1:case p$1:return a;default:switch(a=a&&a.$$typeof,a){case k$1:case n$1:case t:case r$1:case h$1:return a;default:return u}}case d$1:return u}}}function A$1(a){return z$1(a)===m$1}reactIs_production_min$1.AsyncMode=l$1;reactIs_production_min$1.ConcurrentMode=m$1;reactIs_production_min$1.ContextConsumer=k$1;reactIs_production_min$1.ContextProvider=h$1;reactIs_production_min$1.Element=c$1;reactIs_production_min$1.ForwardRef=n$1;reactIs_production_min$1.Fragment=e$1;reactIs_production_min$1.Lazy=t;reactIs_production_min$1.Memo=r$1;reactIs_production_min$1.Portal=d$1;
  reactIs_production_min$1.Profiler=g$1;reactIs_production_min$1.StrictMode=f$1;reactIs_production_min$1.Suspense=p$1;reactIs_production_min$1.isAsyncMode=function(a){return A$1(a)||z$1(a)===l$1};reactIs_production_min$1.isConcurrentMode=A$1;reactIs_production_min$1.isContextConsumer=function(a){return z$1(a)===k$1};reactIs_production_min$1.isContextProvider=function(a){return z$1(a)===h$1};reactIs_production_min$1.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c$1};reactIs_production_min$1.isForwardRef=function(a){return z$1(a)===n$1};reactIs_production_min$1.isFragment=function(a){return z$1(a)===e$1};reactIs_production_min$1.isLazy=function(a){return z$1(a)===t};
  reactIs_production_min$1.isMemo=function(a){return z$1(a)===r$1};reactIs_production_min$1.isPortal=function(a){return z$1(a)===d$1};reactIs_production_min$1.isProfiler=function(a){return z$1(a)===g$1};reactIs_production_min$1.isStrictMode=function(a){return z$1(a)===f$1};reactIs_production_min$1.isSuspense=function(a){return z$1(a)===p$1};
  reactIs_production_min$1.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e$1||a===m$1||a===g$1||a===f$1||a===p$1||a===q$1||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r$1||a.$$typeof===h$1||a.$$typeof===k$1||a.$$typeof===n$1||a.$$typeof===w$1||a.$$typeof===x$1||a.$$typeof===y$1||a.$$typeof===v$1)};reactIs_production_min$1.typeOf=z$1;

  /*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  */
  /* eslint-disable no-unused-vars */
  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var propIsEnumerable = Object.prototype.propertyIsEnumerable;

  function toObject(val) {
  	if (val === null || val === undefined) {
  		throw new TypeError('Object.assign cannot be called with null or undefined');
  	}

  	return Object(val);
  }

  function shouldUseNative() {
  	try {
  		if (!Object.assign) {
  			return false;
  		}

  		// Detect buggy property enumeration order in older V8 versions.

  		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
  		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
  		test1[5] = 'de';
  		if (Object.getOwnPropertyNames(test1)[0] === '5') {
  			return false;
  		}

  		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
  		var test2 = {};
  		for (var i = 0; i < 10; i++) {
  			test2['_' + String.fromCharCode(i)] = i;
  		}
  		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
  			return test2[n];
  		});
  		if (order2.join('') !== '0123456789') {
  			return false;
  		}

  		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
  		var test3 = {};
  		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
  			test3[letter] = letter;
  		});
  		if (Object.keys(Object.assign({}, test3)).join('') !==
  				'abcdefghijklmnopqrst') {
  			return false;
  		}

  		return true;
  	} catch (err) {
  		// We don't expect any of the above to throw, but better to be safe.
  		return false;
  	}
  }

  shouldUseNative() ? Object.assign : function (target, source) {
  	var from;
  	var to = toObject(target);
  	var symbols;

  	for (var s = 1; s < arguments.length; s++) {
  		from = Object(arguments[s]);

  		for (var key in from) {
  			if (hasOwnProperty.call(from, key)) {
  				to[key] = from[key];
  			}
  		}

  		if (getOwnPropertySymbols) {
  			symbols = getOwnPropertySymbols(from);
  			for (var i = 0; i < symbols.length; i++) {
  				if (propIsEnumerable.call(from, symbols[i])) {
  					to[symbols[i]] = from[symbols[i]];
  				}
  			}
  		}
  	}

  	return to;
  };

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  var ReactPropTypesSecret$3 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

  var ReactPropTypesSecret_1 = ReactPropTypesSecret$3;

  Function.call.bind(Object.prototype.hasOwnProperty);

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  var ReactPropTypesSecret = ReactPropTypesSecret_1;

  function emptyFunction() {}
  function emptyFunctionWithReset() {}
  emptyFunctionWithReset.resetWarningCache = emptyFunction;

  var factoryWithThrowingShims = function() {
    function shim(props, propName, componentName, location, propFullName, secret) {
      if (secret === ReactPropTypesSecret) {
        // It is still safe when called from React.
        return;
      }
      var err = new Error(
        'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
        'Use PropTypes.checkPropTypes() to call them. ' +
        'Read more at http://fb.me/use-check-prop-types'
      );
      err.name = 'Invariant Violation';
      throw err;
    }  shim.isRequired = shim;
    function getShim() {
      return shim;
    }  // Important!
    // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
    var ReactPropTypes = {
      array: shim,
      bigint: shim,
      bool: shim,
      func: shim,
      number: shim,
      object: shim,
      string: shim,
      symbol: shim,

      any: shim,
      arrayOf: getShim,
      element: shim,
      elementType: shim,
      instanceOf: getShim,
      node: shim,
      objectOf: getShim,
      oneOf: getShim,
      oneOfType: getShim,
      shape: getShim,
      exact: getShim,

      checkPropTypes: emptyFunctionWithReset,
      resetWarningCache: emptyFunction
    };

    ReactPropTypes.PropTypes = ReactPropTypes;

    return ReactPropTypes;
  };

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  {
    // By explicitly using `prop-types` you are opting into new production behavior.
    // http://fb.me/prop-types-in-prod
    propTypes.exports = factoryWithThrowingShims();
  }

  var PropTypes = propTypes.exports;

  /**
   * @typedef {import('./info.js').Info} Info
   * @typedef {Record<string, Info>} Properties
   * @typedef {Record<string, string>} Normal
   */

  class Schema {
    /**
     * @constructor
     * @param {Properties} property
     * @param {Normal} normal
     * @param {string} [space]
     */
    constructor(property, normal, space) {
      this.property = property;
      this.normal = normal;
      if (space) {
        this.space = space;
      }
    }
  }

  /** @type {Properties} */
  Schema.prototype.property = {};
  /** @type {Normal} */
  Schema.prototype.normal = {};
  /** @type {string|null} */
  Schema.prototype.space = null;

  /**
   * @typedef {import('./schema.js').Properties} Properties
   * @typedef {import('./schema.js').Normal} Normal
   */

  /**
   * @param {Schema[]} definitions
   * @param {string} [space]
   * @returns {Schema}
   */
  function merge(definitions, space) {
    /** @type {Properties} */
    const property = {};
    /** @type {Normal} */
    const normal = {};
    let index = -1;

    while (++index < definitions.length) {
      Object.assign(property, definitions[index].property);
      Object.assign(normal, definitions[index].normal);
    }

    return new Schema(property, normal, space)
  }

  /**
   * @param {string} value
   * @returns {string}
   */
  function normalize(value) {
    return value.toLowerCase()
  }

  class Info {
    /**
     * @constructor
     * @param {string} property
     * @param {string} attribute
     */
    constructor(property, attribute) {
      /** @type {string} */
      this.property = property;
      /** @type {string} */
      this.attribute = attribute;
    }
  }

  /** @type {string|null} */
  Info.prototype.space = null;
  Info.prototype.boolean = false;
  Info.prototype.booleanish = false;
  Info.prototype.overloadedBoolean = false;
  Info.prototype.number = false;
  Info.prototype.commaSeparated = false;
  Info.prototype.spaceSeparated = false;
  Info.prototype.commaOrSpaceSeparated = false;
  Info.prototype.mustUseProperty = false;
  Info.prototype.defined = false;

  let powers = 0;

  const boolean = increment();
  const booleanish = increment();
  const overloadedBoolean = increment();
  const number = increment();
  const spaceSeparated = increment();
  const commaSeparated = increment();
  const commaOrSpaceSeparated = increment();

  function increment() {
    return 2 ** ++powers
  }

  var types = /*#__PURE__*/Object.freeze({
    __proto__: null,
    boolean: boolean,
    booleanish: booleanish,
    overloadedBoolean: overloadedBoolean,
    number: number,
    spaceSeparated: spaceSeparated,
    commaSeparated: commaSeparated,
    commaOrSpaceSeparated: commaOrSpaceSeparated
  });

  /** @type {Array<keyof types>} */
  // @ts-expect-error: hush.
  const checks = Object.keys(types);

  class DefinedInfo extends Info {
    /**
     * @constructor
     * @param {string} property
     * @param {string} attribute
     * @param {number|null} [mask]
     * @param {string} [space]
     */
    constructor(property, attribute, mask, space) {
      let index = -1;

      super(property, attribute);

      mark(this, 'space', space);

      if (typeof mask === 'number') {
        while (++index < checks.length) {
          const check = checks[index];
          mark(this, checks[index], (mask & types[check]) === types[check]);
        }
      }
    }
  }

  DefinedInfo.prototype.defined = true;

  /**
   * @param {DefinedInfo} values
   * @param {string} key
   * @param {unknown} value
   */
  function mark(values, key, value) {
    if (value) {
      // @ts-expect-error: assume `value` matches the expected value of `key`.
      values[key] = value;
    }
  }

  /**
   * @typedef {import('./schema.js').Properties} Properties
   * @typedef {import('./schema.js').Normal} Normal
   *
   * @typedef {Record<string, string>} Attributes
   *
   * @typedef {Object} Definition
   * @property {Record<string, number|null>} properties
   * @property {(attributes: Attributes, property: string) => string} transform
   * @property {string} [space]
   * @property {Attributes} [attributes]
   * @property {Array<string>} [mustUseProperty]
   */

  const own$2 = {}.hasOwnProperty;

  /**
   * @param {Definition} definition
   * @returns {Schema}
   */
  function create(definition) {
    /** @type {Properties} */
    const property = {};
    /** @type {Normal} */
    const normal = {};
    /** @type {string} */
    let prop;

    for (prop in definition.properties) {
      if (own$2.call(definition.properties, prop)) {
        const value = definition.properties[prop];
        const info = new DefinedInfo(
          prop,
          definition.transform(definition.attributes || {}, prop),
          value,
          definition.space
        );

        if (
          definition.mustUseProperty &&
          definition.mustUseProperty.includes(prop)
        ) {
          info.mustUseProperty = true;
        }

        property[prop] = info;

        normal[normalize(prop)] = prop;
        normal[normalize(info.attribute)] = prop;
      }
    }

    return new Schema(property, normal, definition.space)
  }

  const xlink = create({
    space: 'xlink',
    transform(_, prop) {
      return 'xlink:' + prop.slice(5).toLowerCase()
    },
    properties: {
      xLinkActuate: null,
      xLinkArcRole: null,
      xLinkHref: null,
      xLinkRole: null,
      xLinkShow: null,
      xLinkTitle: null,
      xLinkType: null
    }
  });

  const xml = create({
    space: 'xml',
    transform(_, prop) {
      return 'xml:' + prop.slice(3).toLowerCase()
    },
    properties: {xmlLang: null, xmlBase: null, xmlSpace: null}
  });

  /**
   * @param {Record<string, string>} attributes
   * @param {string} attribute
   * @returns {string}
   */
  function caseSensitiveTransform(attributes, attribute) {
    return attribute in attributes ? attributes[attribute] : attribute
  }

  /**
   * @param {Record<string, string>} attributes
   * @param {string} property
   * @returns {string}
   */
  function caseInsensitiveTransform(attributes, property) {
    return caseSensitiveTransform(attributes, property.toLowerCase())
  }

  const xmlns = create({
    space: 'xmlns',
    attributes: {xmlnsxlink: 'xmlns:xlink'},
    transform: caseInsensitiveTransform,
    properties: {xmlns: null, xmlnsXLink: null}
  });

  const aria = create({
    transform(_, prop) {
      return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()
    },
    properties: {
      ariaActiveDescendant: null,
      ariaAtomic: booleanish,
      ariaAutoComplete: null,
      ariaBusy: booleanish,
      ariaChecked: booleanish,
      ariaColCount: number,
      ariaColIndex: number,
      ariaColSpan: number,
      ariaControls: spaceSeparated,
      ariaCurrent: null,
      ariaDescribedBy: spaceSeparated,
      ariaDetails: null,
      ariaDisabled: booleanish,
      ariaDropEffect: spaceSeparated,
      ariaErrorMessage: null,
      ariaExpanded: booleanish,
      ariaFlowTo: spaceSeparated,
      ariaGrabbed: booleanish,
      ariaHasPopup: null,
      ariaHidden: booleanish,
      ariaInvalid: null,
      ariaKeyShortcuts: null,
      ariaLabel: null,
      ariaLabelledBy: spaceSeparated,
      ariaLevel: number,
      ariaLive: null,
      ariaModal: booleanish,
      ariaMultiLine: booleanish,
      ariaMultiSelectable: booleanish,
      ariaOrientation: null,
      ariaOwns: spaceSeparated,
      ariaPlaceholder: null,
      ariaPosInSet: number,
      ariaPressed: booleanish,
      ariaReadOnly: booleanish,
      ariaRelevant: null,
      ariaRequired: booleanish,
      ariaRoleDescription: spaceSeparated,
      ariaRowCount: number,
      ariaRowIndex: number,
      ariaRowSpan: number,
      ariaSelected: booleanish,
      ariaSetSize: number,
      ariaSort: null,
      ariaValueMax: number,
      ariaValueMin: number,
      ariaValueNow: number,
      ariaValueText: null,
      role: null
    }
  });

  const html$1 = create({
    space: 'html',
    attributes: {
      acceptcharset: 'accept-charset',
      classname: 'class',
      htmlfor: 'for',
      httpequiv: 'http-equiv'
    },
    transform: caseInsensitiveTransform,
    mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],
    properties: {
      // Standard Properties.
      abbr: null,
      accept: commaSeparated,
      acceptCharset: spaceSeparated,
      accessKey: spaceSeparated,
      action: null,
      allow: null,
      allowFullScreen: boolean,
      allowPaymentRequest: boolean,
      allowUserMedia: boolean,
      alt: null,
      as: null,
      async: boolean,
      autoCapitalize: null,
      autoComplete: spaceSeparated,
      autoFocus: boolean,
      autoPlay: boolean,
      capture: boolean,
      charSet: null,
      checked: boolean,
      cite: null,
      className: spaceSeparated,
      cols: number,
      colSpan: null,
      content: null,
      contentEditable: booleanish,
      controls: boolean,
      controlsList: spaceSeparated,
      coords: number | commaSeparated,
      crossOrigin: null,
      data: null,
      dateTime: null,
      decoding: null,
      default: boolean,
      defer: boolean,
      dir: null,
      dirName: null,
      disabled: boolean,
      download: overloadedBoolean,
      draggable: booleanish,
      encType: null,
      enterKeyHint: null,
      form: null,
      formAction: null,
      formEncType: null,
      formMethod: null,
      formNoValidate: boolean,
      formTarget: null,
      headers: spaceSeparated,
      height: number,
      hidden: boolean,
      high: number,
      href: null,
      hrefLang: null,
      htmlFor: spaceSeparated,
      httpEquiv: spaceSeparated,
      id: null,
      imageSizes: null,
      imageSrcSet: null,
      inputMode: null,
      integrity: null,
      is: null,
      isMap: boolean,
      itemId: null,
      itemProp: spaceSeparated,
      itemRef: spaceSeparated,
      itemScope: boolean,
      itemType: spaceSeparated,
      kind: null,
      label: null,
      lang: null,
      language: null,
      list: null,
      loading: null,
      loop: boolean,
      low: number,
      manifest: null,
      max: null,
      maxLength: number,
      media: null,
      method: null,
      min: null,
      minLength: number,
      multiple: boolean,
      muted: boolean,
      name: null,
      nonce: null,
      noModule: boolean,
      noValidate: boolean,
      onAbort: null,
      onAfterPrint: null,
      onAuxClick: null,
      onBeforePrint: null,
      onBeforeUnload: null,
      onBlur: null,
      onCancel: null,
      onCanPlay: null,
      onCanPlayThrough: null,
      onChange: null,
      onClick: null,
      onClose: null,
      onContextLost: null,
      onContextMenu: null,
      onContextRestored: null,
      onCopy: null,
      onCueChange: null,
      onCut: null,
      onDblClick: null,
      onDrag: null,
      onDragEnd: null,
      onDragEnter: null,
      onDragExit: null,
      onDragLeave: null,
      onDragOver: null,
      onDragStart: null,
      onDrop: null,
      onDurationChange: null,
      onEmptied: null,
      onEnded: null,
      onError: null,
      onFocus: null,
      onFormData: null,
      onHashChange: null,
      onInput: null,
      onInvalid: null,
      onKeyDown: null,
      onKeyPress: null,
      onKeyUp: null,
      onLanguageChange: null,
      onLoad: null,
      onLoadedData: null,
      onLoadedMetadata: null,
      onLoadEnd: null,
      onLoadStart: null,
      onMessage: null,
      onMessageError: null,
      onMouseDown: null,
      onMouseEnter: null,
      onMouseLeave: null,
      onMouseMove: null,
      onMouseOut: null,
      onMouseOver: null,
      onMouseUp: null,
      onOffline: null,
      onOnline: null,
      onPageHide: null,
      onPageShow: null,
      onPaste: null,
      onPause: null,
      onPlay: null,
      onPlaying: null,
      onPopState: null,
      onProgress: null,
      onRateChange: null,
      onRejectionHandled: null,
      onReset: null,
      onResize: null,
      onScroll: null,
      onSecurityPolicyViolation: null,
      onSeeked: null,
      onSeeking: null,
      onSelect: null,
      onSlotChange: null,
      onStalled: null,
      onStorage: null,
      onSubmit: null,
      onSuspend: null,
      onTimeUpdate: null,
      onToggle: null,
      onUnhandledRejection: null,
      onUnload: null,
      onVolumeChange: null,
      onWaiting: null,
      onWheel: null,
      open: boolean,
      optimum: number,
      pattern: null,
      ping: spaceSeparated,
      placeholder: null,
      playsInline: boolean,
      poster: null,
      preload: null,
      readOnly: boolean,
      referrerPolicy: null,
      rel: spaceSeparated,
      required: boolean,
      reversed: boolean,
      rows: number,
      rowSpan: number,
      sandbox: spaceSeparated,
      scope: null,
      scoped: boolean,
      seamless: boolean,
      selected: boolean,
      shape: null,
      size: number,
      sizes: null,
      slot: null,
      span: number,
      spellCheck: booleanish,
      src: null,
      srcDoc: null,
      srcLang: null,
      srcSet: null,
      start: number,
      step: null,
      style: null,
      tabIndex: number,
      target: null,
      title: null,
      translate: null,
      type: null,
      typeMustMatch: boolean,
      useMap: null,
      value: booleanish,
      width: number,
      wrap: null,

      // Legacy.
      // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
      align: null, // Several. Use CSS `text-align` instead,
      aLink: null, // `<body>`. Use CSS `a:active {color}` instead
      archive: spaceSeparated, // `<object>`. List of URIs to archives
      axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`
      background: null, // `<body>`. Use CSS `background-image` instead
      bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead
      border: number, // `<table>`. Use CSS `border-width` instead,
      borderColor: null, // `<table>`. Use CSS `border-color` instead,
      bottomMargin: number, // `<body>`
      cellPadding: null, // `<table>`
      cellSpacing: null, // `<table>`
      char: null, // Several table elements. When `align=char`, sets the character to align on
      charOff: null, // Several table elements. When `char`, offsets the alignment
      classId: null, // `<object>`
      clear: null, // `<br>`. Use CSS `clear` instead
      code: null, // `<object>`
      codeBase: null, // `<object>`
      codeType: null, // `<object>`
      color: null, // `<font>` and `<hr>`. Use CSS instead
      compact: boolean, // Lists. Use CSS to reduce space between items instead
      declare: boolean, // `<object>`
      event: null, // `<script>`
      face: null, // `<font>`. Use CSS instead
      frame: null, // `<table>`
      frameBorder: null, // `<iframe>`. Use CSS `border` instead
      hSpace: number, // `<img>` and `<object>`
      leftMargin: number, // `<body>`
      link: null, // `<body>`. Use CSS `a:link {color: *}` instead
      longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`
      lowSrc: null, // `<img>`. Use a `<picture>`
      marginHeight: number, // `<body>`
      marginWidth: number, // `<body>`
      noResize: boolean, // `<frame>`
      noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`
      noShade: boolean, // `<hr>`. Use background-color and height instead of borders
      noWrap: boolean, // `<td>` and `<th>`
      object: null, // `<applet>`
      profile: null, // `<head>`
      prompt: null, // `<isindex>`
      rev: null, // `<link>`
      rightMargin: number, // `<body>`
      rules: null, // `<table>`
      scheme: null, // `<meta>`
      scrolling: booleanish, // `<frame>`. Use overflow in the child context
      standby: null, // `<object>`
      summary: null, // `<table>`
      text: null, // `<body>`. Use CSS `color` instead
      topMargin: number, // `<body>`
      valueType: null, // `<param>`
      version: null, // `<html>`. Use a doctype.
      vAlign: null, // Several. Use CSS `vertical-align` instead
      vLink: null, // `<body>`. Use CSS `a:visited {color}` instead
      vSpace: number, // `<img>` and `<object>`

      // Non-standard Properties.
      allowTransparency: null,
      autoCorrect: null,
      autoSave: null,
      disablePictureInPicture: boolean,
      disableRemotePlayback: boolean,
      prefix: null,
      property: null,
      results: number,
      security: null,
      unselectable: null
    }
  });

  const svg$1 = create({
    space: 'svg',
    attributes: {
      accentHeight: 'accent-height',
      alignmentBaseline: 'alignment-baseline',
      arabicForm: 'arabic-form',
      baselineShift: 'baseline-shift',
      capHeight: 'cap-height',
      className: 'class',
      clipPath: 'clip-path',
      clipRule: 'clip-rule',
      colorInterpolation: 'color-interpolation',
      colorInterpolationFilters: 'color-interpolation-filters',
      colorProfile: 'color-profile',
      colorRendering: 'color-rendering',
      crossOrigin: 'crossorigin',
      dataType: 'datatype',
      dominantBaseline: 'dominant-baseline',
      enableBackground: 'enable-background',
      fillOpacity: 'fill-opacity',
      fillRule: 'fill-rule',
      floodColor: 'flood-color',
      floodOpacity: 'flood-opacity',
      fontFamily: 'font-family',
      fontSize: 'font-size',
      fontSizeAdjust: 'font-size-adjust',
      fontStretch: 'font-stretch',
      fontStyle: 'font-style',
      fontVariant: 'font-variant',
      fontWeight: 'font-weight',
      glyphName: 'glyph-name',
      glyphOrientationHorizontal: 'glyph-orientation-horizontal',
      glyphOrientationVertical: 'glyph-orientation-vertical',
      hrefLang: 'hreflang',
      horizAdvX: 'horiz-adv-x',
      horizOriginX: 'horiz-origin-x',
      horizOriginY: 'horiz-origin-y',
      imageRendering: 'image-rendering',
      letterSpacing: 'letter-spacing',
      lightingColor: 'lighting-color',
      markerEnd: 'marker-end',
      markerMid: 'marker-mid',
      markerStart: 'marker-start',
      navDown: 'nav-down',
      navDownLeft: 'nav-down-left',
      navDownRight: 'nav-down-right',
      navLeft: 'nav-left',
      navNext: 'nav-next',
      navPrev: 'nav-prev',
      navRight: 'nav-right',
      navUp: 'nav-up',
      navUpLeft: 'nav-up-left',
      navUpRight: 'nav-up-right',
      onAbort: 'onabort',
      onActivate: 'onactivate',
      onAfterPrint: 'onafterprint',
      onBeforePrint: 'onbeforeprint',
      onBegin: 'onbegin',
      onCancel: 'oncancel',
      onCanPlay: 'oncanplay',
      onCanPlayThrough: 'oncanplaythrough',
      onChange: 'onchange',
      onClick: 'onclick',
      onClose: 'onclose',
      onCopy: 'oncopy',
      onCueChange: 'oncuechange',
      onCut: 'oncut',
      onDblClick: 'ondblclick',
      onDrag: 'ondrag',
      onDragEnd: 'ondragend',
      onDragEnter: 'ondragenter',
      onDragExit: 'ondragexit',
      onDragLeave: 'ondragleave',
      onDragOver: 'ondragover',
      onDragStart: 'ondragstart',
      onDrop: 'ondrop',
      onDurationChange: 'ondurationchange',
      onEmptied: 'onemptied',
      onEnd: 'onend',
      onEnded: 'onended',
      onError: 'onerror',
      onFocus: 'onfocus',
      onFocusIn: 'onfocusin',
      onFocusOut: 'onfocusout',
      onHashChange: 'onhashchange',
      onInput: 'oninput',
      onInvalid: 'oninvalid',
      onKeyDown: 'onkeydown',
      onKeyPress: 'onkeypress',
      onKeyUp: 'onkeyup',
      onLoad: 'onload',
      onLoadedData: 'onloadeddata',
      onLoadedMetadata: 'onloadedmetadata',
      onLoadStart: 'onloadstart',
      onMessage: 'onmessage',
      onMouseDown: 'onmousedown',
      onMouseEnter: 'onmouseenter',
      onMouseLeave: 'onmouseleave',
      onMouseMove: 'onmousemove',
      onMouseOut: 'onmouseout',
      onMouseOver: 'onmouseover',
      onMouseUp: 'onmouseup',
      onMouseWheel: 'onmousewheel',
      onOffline: 'onoffline',
      onOnline: 'ononline',
      onPageHide: 'onpagehide',
      onPageShow: 'onpageshow',
      onPaste: 'onpaste',
      onPause: 'onpause',
      onPlay: 'onplay',
      onPlaying: 'onplaying',
      onPopState: 'onpopstate',
      onProgress: 'onprogress',
      onRateChange: 'onratechange',
      onRepeat: 'onrepeat',
      onReset: 'onreset',
      onResize: 'onresize',
      onScroll: 'onscroll',
      onSeeked: 'onseeked',
      onSeeking: 'onseeking',
      onSelect: 'onselect',
      onShow: 'onshow',
      onStalled: 'onstalled',
      onStorage: 'onstorage',
      onSubmit: 'onsubmit',
      onSuspend: 'onsuspend',
      onTimeUpdate: 'ontimeupdate',
      onToggle: 'ontoggle',
      onUnload: 'onunload',
      onVolumeChange: 'onvolumechange',
      onWaiting: 'onwaiting',
      onZoom: 'onzoom',
      overlinePosition: 'overline-position',
      overlineThickness: 'overline-thickness',
      paintOrder: 'paint-order',
      panose1: 'panose-1',
      pointerEvents: 'pointer-events',
      referrerPolicy: 'referrerpolicy',
      renderingIntent: 'rendering-intent',
      shapeRendering: 'shape-rendering',
      stopColor: 'stop-color',
      stopOpacity: 'stop-opacity',
      strikethroughPosition: 'strikethrough-position',
      strikethroughThickness: 'strikethrough-thickness',
      strokeDashArray: 'stroke-dasharray',
      strokeDashOffset: 'stroke-dashoffset',
      strokeLineCap: 'stroke-linecap',
      strokeLineJoin: 'stroke-linejoin',
      strokeMiterLimit: 'stroke-miterlimit',
      strokeOpacity: 'stroke-opacity',
      strokeWidth: 'stroke-width',
      tabIndex: 'tabindex',
      textAnchor: 'text-anchor',
      textDecoration: 'text-decoration',
      textRendering: 'text-rendering',
      typeOf: 'typeof',
      underlinePosition: 'underline-position',
      underlineThickness: 'underline-thickness',
      unicodeBidi: 'unicode-bidi',
      unicodeRange: 'unicode-range',
      unitsPerEm: 'units-per-em',
      vAlphabetic: 'v-alphabetic',
      vHanging: 'v-hanging',
      vIdeographic: 'v-ideographic',
      vMathematical: 'v-mathematical',
      vectorEffect: 'vector-effect',
      vertAdvY: 'vert-adv-y',
      vertOriginX: 'vert-origin-x',
      vertOriginY: 'vert-origin-y',
      wordSpacing: 'word-spacing',
      writingMode: 'writing-mode',
      xHeight: 'x-height',
      // These were camelcased in Tiny. Now lowercased in SVG 2
      playbackOrder: 'playbackorder',
      timelineBegin: 'timelinebegin'
    },
    transform: caseSensitiveTransform,
    properties: {
      about: commaOrSpaceSeparated,
      accentHeight: number,
      accumulate: null,
      additive: null,
      alignmentBaseline: null,
      alphabetic: number,
      amplitude: number,
      arabicForm: null,
      ascent: number,
      attributeName: null,
      attributeType: null,
      azimuth: number,
      bandwidth: null,
      baselineShift: null,
      baseFrequency: null,
      baseProfile: null,
      bbox: null,
      begin: null,
      bias: number,
      by: null,
      calcMode: null,
      capHeight: number,
      className: spaceSeparated,
      clip: null,
      clipPath: null,
      clipPathUnits: null,
      clipRule: null,
      color: null,
      colorInterpolation: null,
      colorInterpolationFilters: null,
      colorProfile: null,
      colorRendering: null,
      content: null,
      contentScriptType: null,
      contentStyleType: null,
      crossOrigin: null,
      cursor: null,
      cx: null,
      cy: null,
      d: null,
      dataType: null,
      defaultAction: null,
      descent: number,
      diffuseConstant: number,
      direction: null,
      display: null,
      dur: null,
      divisor: number,
      dominantBaseline: null,
      download: boolean,
      dx: null,
      dy: null,
      edgeMode: null,
      editable: null,
      elevation: number,
      enableBackground: null,
      end: null,
      event: null,
      exponent: number,
      externalResourcesRequired: null,
      fill: null,
      fillOpacity: number,
      fillRule: null,
      filter: null,
      filterRes: null,
      filterUnits: null,
      floodColor: null,
      floodOpacity: null,
      focusable: null,
      focusHighlight: null,
      fontFamily: null,
      fontSize: null,
      fontSizeAdjust: null,
      fontStretch: null,
      fontStyle: null,
      fontVariant: null,
      fontWeight: null,
      format: null,
      fr: null,
      from: null,
      fx: null,
      fy: null,
      g1: commaSeparated,
      g2: commaSeparated,
      glyphName: commaSeparated,
      glyphOrientationHorizontal: null,
      glyphOrientationVertical: null,
      glyphRef: null,
      gradientTransform: null,
      gradientUnits: null,
      handler: null,
      hanging: number,
      hatchContentUnits: null,
      hatchUnits: null,
      height: null,
      href: null,
      hrefLang: null,
      horizAdvX: number,
      horizOriginX: number,
      horizOriginY: number,
      id: null,
      ideographic: number,
      imageRendering: null,
      initialVisibility: null,
      in: null,
      in2: null,
      intercept: number,
      k: number,
      k1: number,
      k2: number,
      k3: number,
      k4: number,
      kernelMatrix: commaOrSpaceSeparated,
      kernelUnitLength: null,
      keyPoints: null, // SEMI_COLON_SEPARATED
      keySplines: null, // SEMI_COLON_SEPARATED
      keyTimes: null, // SEMI_COLON_SEPARATED
      kerning: null,
      lang: null,
      lengthAdjust: null,
      letterSpacing: null,
      lightingColor: null,
      limitingConeAngle: number,
      local: null,
      markerEnd: null,
      markerMid: null,
      markerStart: null,
      markerHeight: null,
      markerUnits: null,
      markerWidth: null,
      mask: null,
      maskContentUnits: null,
      maskUnits: null,
      mathematical: null,
      max: null,
      media: null,
      mediaCharacterEncoding: null,
      mediaContentEncodings: null,
      mediaSize: number,
      mediaTime: null,
      method: null,
      min: null,
      mode: null,
      name: null,
      navDown: null,
      navDownLeft: null,
      navDownRight: null,
      navLeft: null,
      navNext: null,
      navPrev: null,
      navRight: null,
      navUp: null,
      navUpLeft: null,
      navUpRight: null,
      numOctaves: null,
      observer: null,
      offset: null,
      onAbort: null,
      onActivate: null,
      onAfterPrint: null,
      onBeforePrint: null,
      onBegin: null,
      onCancel: null,
      onCanPlay: null,
      onCanPlayThrough: null,
      onChange: null,
      onClick: null,
      onClose: null,
      onCopy: null,
      onCueChange: null,
      onCut: null,
      onDblClick: null,
      onDrag: null,
      onDragEnd: null,
      onDragEnter: null,
      onDragExit: null,
      onDragLeave: null,
      onDragOver: null,
      onDragStart: null,
      onDrop: null,
      onDurationChange: null,
      onEmptied: null,
      onEnd: null,
      onEnded: null,
      onError: null,
      onFocus: null,
      onFocusIn: null,
      onFocusOut: null,
      onHashChange: null,
      onInput: null,
      onInvalid: null,
      onKeyDown: null,
      onKeyPress: null,
      onKeyUp: null,
      onLoad: null,
      onLoadedData: null,
      onLoadedMetadata: null,
      onLoadStart: null,
      onMessage: null,
      onMouseDown: null,
      onMouseEnter: null,
      onMouseLeave: null,
      onMouseMove: null,
      onMouseOut: null,
      onMouseOver: null,
      onMouseUp: null,
      onMouseWheel: null,
      onOffline: null,
      onOnline: null,
      onPageHide: null,
      onPageShow: null,
      onPaste: null,
      onPause: null,
      onPlay: null,
      onPlaying: null,
      onPopState: null,
      onProgress: null,
      onRateChange: null,
      onRepeat: null,
      onReset: null,
      onResize: null,
      onScroll: null,
      onSeeked: null,
      onSeeking: null,
      onSelect: null,
      onShow: null,
      onStalled: null,
      onStorage: null,
      onSubmit: null,
      onSuspend: null,
      onTimeUpdate: null,
      onToggle: null,
      onUnload: null,
      onVolumeChange: null,
      onWaiting: null,
      onZoom: null,
      opacity: null,
      operator: null,
      order: null,
      orient: null,
      orientation: null,
      origin: null,
      overflow: null,
      overlay: null,
      overlinePosition: number,
      overlineThickness: number,
      paintOrder: null,
      panose1: null,
      path: null,
      pathLength: number,
      patternContentUnits: null,
      patternTransform: null,
      patternUnits: null,
      phase: null,
      ping: spaceSeparated,
      pitch: null,
      playbackOrder: null,
      pointerEvents: null,
      points: null,
      pointsAtX: number,
      pointsAtY: number,
      pointsAtZ: number,
      preserveAlpha: null,
      preserveAspectRatio: null,
      primitiveUnits: null,
      propagate: null,
      property: commaOrSpaceSeparated,
      r: null,
      radius: null,
      referrerPolicy: null,
      refX: null,
      refY: null,
      rel: commaOrSpaceSeparated,
      rev: commaOrSpaceSeparated,
      renderingIntent: null,
      repeatCount: null,
      repeatDur: null,
      requiredExtensions: commaOrSpaceSeparated,
      requiredFeatures: commaOrSpaceSeparated,
      requiredFonts: commaOrSpaceSeparated,
      requiredFormats: commaOrSpaceSeparated,
      resource: null,
      restart: null,
      result: null,
      rotate: null,
      rx: null,
      ry: null,
      scale: null,
      seed: null,
      shapeRendering: null,
      side: null,
      slope: null,
      snapshotTime: null,
      specularConstant: number,
      specularExponent: number,
      spreadMethod: null,
      spacing: null,
      startOffset: null,
      stdDeviation: null,
      stemh: null,
      stemv: null,
      stitchTiles: null,
      stopColor: null,
      stopOpacity: null,
      strikethroughPosition: number,
      strikethroughThickness: number,
      string: null,
      stroke: null,
      strokeDashArray: commaOrSpaceSeparated,
      strokeDashOffset: null,
      strokeLineCap: null,
      strokeLineJoin: null,
      strokeMiterLimit: number,
      strokeOpacity: number,
      strokeWidth: null,
      style: null,
      surfaceScale: number,
      syncBehavior: null,
      syncBehaviorDefault: null,
      syncMaster: null,
      syncTolerance: null,
      syncToleranceDefault: null,
      systemLanguage: commaOrSpaceSeparated,
      tabIndex: number,
      tableValues: null,
      target: null,
      targetX: number,
      targetY: number,
      textAnchor: null,
      textDecoration: null,
      textRendering: null,
      textLength: null,
      timelineBegin: null,
      title: null,
      transformBehavior: null,
      type: null,
      typeOf: commaOrSpaceSeparated,
      to: null,
      transform: null,
      u1: null,
      u2: null,
      underlinePosition: number,
      underlineThickness: number,
      unicode: null,
      unicodeBidi: null,
      unicodeRange: null,
      unitsPerEm: number,
      values: null,
      vAlphabetic: number,
      vMathematical: number,
      vectorEffect: null,
      vHanging: number,
      vIdeographic: number,
      version: null,
      vertAdvY: number,
      vertOriginX: number,
      vertOriginY: number,
      viewBox: null,
      viewTarget: null,
      visibility: null,
      width: null,
      widths: null,
      wordSpacing: null,
      writingMode: null,
      x: null,
      x1: null,
      x2: null,
      xChannelSelector: null,
      xHeight: number,
      y: null,
      y1: null,
      y2: null,
      yChannelSelector: null,
      z: null,
      zoomAndPan: null
    }
  });

  /**
   * @typedef {import('./util/schema.js').Schema} Schema
   */

  const valid = /^data[-\w.:]+$/i;
  const dash = /-[a-z]/g;
  const cap = /[A-Z]/g;

  /**
   * @param {Schema} schema
   * @param {string} value
   * @returns {Info}
   */
  function find(schema, value) {
    const normal = normalize(value);
    let prop = value;
    let Type = Info;

    if (normal in schema.normal) {
      return schema.property[schema.normal[normal]]
    }

    if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {
      // Attribute or property.
      if (value.charAt(4) === '-') {
        // Turn it into a property.
        const rest = value.slice(5).replace(dash, camelcase);
        prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1);
      } else {
        // Turn it into an attribute.
        const rest = value.slice(4);

        if (!dash.test(rest)) {
          let dashes = rest.replace(cap, kebab);

          if (dashes.charAt(0) !== '-') {
            dashes = '-' + dashes;
          }

          value = 'data' + dashes;
        }
      }

      Type = DefinedInfo;
    }

    return new Type(prop, value)
  }

  /**
   * @param {string} $0
   * @returns {string}
   */
  function kebab($0) {
    return '-' + $0.toLowerCase()
  }

  /**
   * @param {string} $0
   * @returns {string}
   */
  function camelcase($0) {
    return $0.charAt(1).toUpperCase()
  }

  const hastToReact = {
    classId: 'classID',
    dataType: 'datatype',
    itemId: 'itemID',
    strokeDashArray: 'strokeDasharray',
    strokeDashOffset: 'strokeDashoffset',
    strokeLineCap: 'strokeLinecap',
    strokeLineJoin: 'strokeLinejoin',
    strokeMiterLimit: 'strokeMiterlimit',
    typeOf: 'typeof',
    xLinkActuate: 'xlinkActuate',
    xLinkArcRole: 'xlinkArcrole',
    xLinkHref: 'xlinkHref',
    xLinkRole: 'xlinkRole',
    xLinkShow: 'xlinkShow',
    xLinkTitle: 'xlinkTitle',
    xLinkType: 'xlinkType',
    xmlnsXLink: 'xmlnsXlink'
  };

  /**
   * @typedef {import('./lib/util/info.js').Info} Info
   * @typedef {import('./lib/util/schema.js').Schema} Schema
   */
  const html = merge([xml, xlink, xmlns, aria, html$1], 'html');
  const svg = merge([xml, xlink, xmlns, aria, svg$1], 'svg');

  /**
   * @typedef {import('unist').Node} Node
   * @typedef {import('unist').Parent} Parent
   *
   * @typedef {string} Type
   * @typedef {Object<string, unknown>} Props
   *
   * @typedef {null|undefined|Type|Props|TestFunctionAnything|Array.<Type|Props|TestFunctionAnything>} Test
   */

  const convert =
    /**
     * @type {(
     *   (<T extends Node>(test: T['type']|Partial<T>|TestFunctionPredicate<T>) => AssertPredicate<T>) &
     *   ((test?: Test) => AssertAnything)
     * )}
     */
    (
      /**
       * Generate an assertion from a check.
       * @param {Test} [test]
       * When nullish, checks if `node` is a `Node`.
       * When `string`, works like passing `function (node) {return node.type === test}`.
       * When `function` checks if function passed the node is true.
       * When `object`, checks that all keys in test are in node, and that they have (strictly) equal values.
       * When `array`, checks any one of the subtests pass.
       * @returns {AssertAnything}
       */
      function (test) {
        if (test === undefined || test === null) {
          return ok
        }

        if (typeof test === 'string') {
          return typeFactory(test)
        }

        if (typeof test === 'object') {
          return Array.isArray(test) ? anyFactory(test) : propsFactory(test)
        }

        if (typeof test === 'function') {
          return castFactory(test)
        }

        throw new Error('Expected function, string, or object as test')
      }
    );
  /**
   * @param {Array.<Type|Props|TestFunctionAnything>} tests
   * @returns {AssertAnything}
   */
  function anyFactory(tests) {
    /** @type {Array.<AssertAnything>} */
    const checks = [];
    let index = -1;

    while (++index < tests.length) {
      checks[index] = convert(tests[index]);
    }

    return castFactory(any)

    /**
     * @this {unknown}
     * @param {unknown[]} parameters
     * @returns {boolean}
     */
    function any(...parameters) {
      let index = -1;

      while (++index < checks.length) {
        if (checks[index].call(this, ...parameters)) return true
      }

      return false
    }
  }

  /**
   * Utility to assert each property in `test` is represented in `node`, and each
   * values are strictly equal.
   *
   * @param {Props} check
   * @returns {AssertAnything}
   */
  function propsFactory(check) {
    return castFactory(all)

    /**
     * @param {Node} node
     * @returns {boolean}
     */
    function all(node) {
      /** @type {string} */
      let key;

      for (key in check) {
        // @ts-expect-error: hush, it sure works as an index.
        if (node[key] !== check[key]) return false
      }

      return true
    }
  }

  /**
   * Utility to convert a string into a function which checks a given node’s type
   * for said string.
   *
   * @param {Type} check
   * @returns {AssertAnything}
   */
  function typeFactory(check) {
    return castFactory(type)

    /**
     * @param {Node} node
     */
    function type(node) {
      return node && node.type === check
    }
  }

  /**
   * Utility to convert a string into a function which checks a given node’s type
   * for said string.
   * @param {TestFunctionAnything} check
   * @returns {AssertAnything}
   */
  function castFactory(check) {
    return assertion

    /**
     * @this {unknown}
     * @param {Array.<unknown>} parameters
     * @returns {boolean}
     */
    function assertion(...parameters) {
      // @ts-expect-error: spreading is fine.
      return Boolean(check.call(this, ...parameters))
    }
  }

  // Utility to return true.
  function ok() {
    return true
  }

  /**
   * @param {string} d
   * @returns {string}
   */
  function color(d) {
    return d
  }

  /**
   * @typedef {import('unist').Node} Node
   * @typedef {import('unist').Parent} Parent
   * @typedef {import('unist-util-is').Test} Test
   * @typedef {import('./complex-types').Action} Action
   * @typedef {import('./complex-types').Index} Index
   * @typedef {import('./complex-types').ActionTuple} ActionTuple
   * @typedef {import('./complex-types').VisitorResult} VisitorResult
   * @typedef {import('./complex-types').Visitor} Visitor
   */

  /**
   * Continue traversing as normal
   */
  const CONTINUE = true;
  /**
   * Do not traverse this node’s children
   */
  const SKIP = 'skip';
  /**
   * Stop traversing immediately
   */
  const EXIT = false;

  /**
   * Visit children of tree which pass a test
   *
   * @param tree Abstract syntax tree to walk
   * @param test Test node, optional
   * @param visitor Function to run for each node
   * @param reverse Visit the tree in reverse order, defaults to false
   */
  const visitParents =
    /**
     * @type {(
     *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &
     *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types').BuildVisitor<Tree>, reverse?: boolean) => void)
     * )}
     */
    (
      /**
       * @param {Node} tree
       * @param {Test} test
       * @param {import('./complex-types').Visitor<Node>} visitor
       * @param {boolean} [reverse]
       */
      function (tree, test, visitor, reverse) {
        if (typeof test === 'function' && typeof visitor !== 'function') {
          reverse = visitor;
          // @ts-expect-error no visitor given, so `visitor` is test.
          visitor = test;
          test = null;
        }

        const is = convert(test);
        const step = reverse ? -1 : 1;

        factory(tree, null, [])();

        /**
         * @param {Node} node
         * @param {number?} index
         * @param {Array.<Parent>} parents
         */
        function factory(node, index, parents) {
          /** @type {Object.<string, unknown>} */
          // @ts-expect-error: hush
          const value = typeof node === 'object' && node !== null ? node : {};
          /** @type {string|undefined} */
          let name;

          if (typeof value.type === 'string') {
            name =
              typeof value.tagName === 'string'
                ? value.tagName
                : typeof value.name === 'string'
                ? value.name
                : undefined;

            Object.defineProperty(visit, 'name', {
              value:
                'node (' +
                color(value.type + (name ? '<' + name + '>' : '')) +
                ')'
            });
          }

          return visit

          function visit() {
            /** @type {ActionTuple} */
            let result = [];
            /** @type {ActionTuple} */
            let subresult;
            /** @type {number} */
            let offset;
            /** @type {Array.<Parent>} */
            let grandparents;

            if (!test || is(node, index, parents[parents.length - 1] || null)) {
              result = toResult(visitor(node, parents));

              if (result[0] === EXIT) {
                return result
              }
            }

            // @ts-expect-error looks like a parent.
            if (node.children && result[0] !== SKIP) {
              // @ts-expect-error looks like a parent.
              offset = (reverse ? node.children.length : -1) + step;
              // @ts-expect-error looks like a parent.
              grandparents = parents.concat(node);

              // @ts-expect-error looks like a parent.
              while (offset > -1 && offset < node.children.length) {
                // @ts-expect-error looks like a parent.
                subresult = factory(node.children[offset], offset, grandparents)();

                if (subresult[0] === EXIT) {
                  return subresult
                }

                offset =
                  typeof subresult[1] === 'number' ? subresult[1] : offset + step;
              }
            }

            return result
          }
        }
      }
    );

  /**
   * @param {VisitorResult} value
   * @returns {ActionTuple}
   */
  function toResult(value) {
    if (Array.isArray(value)) {
      return value
    }

    if (typeof value === 'number') {
      return [CONTINUE, value]
    }

    return [value]
  }

  /**
   * @typedef {import('unist').Node} Node
   * @typedef {import('unist').Parent} Parent
   * @typedef {import('unist-util-is').Test} Test
   * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult
   * @typedef {import('./complex-types').Visitor} Visitor
   */

  /**
   * Visit children of tree which pass a test
   *
   * @param tree Abstract syntax tree to walk
   * @param test Test, optional
   * @param visitor Function to run for each node
   * @param reverse Fisit the tree in reverse, defaults to false
   */
  const visit =
    /**
     * @type {(
     *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &
     *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types').BuildVisitor<Tree>, reverse?: boolean) => void)
     * )}
     */
    (
      /**
       * @param {Node} tree
       * @param {Test} test
       * @param {import('./complex-types').Visitor} visitor
       * @param {boolean} [reverse]
       */
      function (tree, test, visitor, reverse) {
        if (typeof test === 'function' && typeof visitor !== 'function') {
          reverse = visitor;
          visitor = test;
          test = null;
        }

        visitParents(tree, test, overload, reverse);

        /**
         * @param {Node} node
         * @param {Array.<Parent>} parents
         */
        function overload(node, parents) {
          const parent = parents[parents.length - 1];
          return visitor(
            node,
            parent ? parent.children.indexOf(node) : null,
            parent
          )
        }
      }
    );

  /**
   * @typedef {import('unist').Node} Node
   * @typedef {import('hast').Root} Root
   * @typedef {import('hast').Element} Element
   *
   * @callback AllowElement
   * @param {Element} element
   * @param {number} index
   * @param {Element|Root} parent
   * @returns {boolean|undefined}
   *
   * @typedef Options
   * @property {Array<string>} [allowedElements]
   * @property {Array<string>} [disallowedElements=[]]
   * @property {AllowElement} [allowElement]
   * @property {boolean} [unwrapDisallowed=false]
   */

  /**
   * @type {import('unified').Plugin<[Options], Root>}
   */
  function rehypeFilter(options) {
    if (options.allowedElements && options.disallowedElements) {
      throw new TypeError(
        'Only one of `allowedElements` and `disallowedElements` should be defined'
      )
    }

    if (
      options.allowedElements ||
      options.disallowedElements ||
      options.allowElement
    ) {
      return (tree) => {
        visit(tree, 'element', (node, index, parent_) => {
          const parent = /** @type {Element|Root} */ (parent_);
          /** @type {boolean|undefined} */
          let remove;

          if (options.allowedElements) {
            remove = !options.allowedElements.includes(node.tagName);
          } else if (options.disallowedElements) {
            remove = options.disallowedElements.includes(node.tagName);
          }

          if (!remove && options.allowElement && typeof index === 'number') {
            remove = !options.allowElement(node, index, parent);
          }

          if (remove && typeof index === 'number') {
            if (options.unwrapDisallowed && node.children) {
              parent.children.splice(index, 1, ...node.children);
            } else {
              parent.children.splice(index, 1);
            }

            return index
          }

          return undefined
        });
      }
    }
  }

  var reactIs = {exports: {}};

  var reactIs_production_min = {};

  /** @license React v17.0.2
   * react-is.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  var b=60103,c=60106,d=60107,e=60108,f=60114,g=60109,h=60110,k=60112,l=60113,m=60120,n=60115,p=60116,q=60121,r=60122,u=60117,v=60129,w=60131;
  if("function"===typeof Symbol&&Symbol.for){var x=Symbol.for;b=x("react.element");c=x("react.portal");d=x("react.fragment");e=x("react.strict_mode");f=x("react.profiler");g=x("react.provider");h=x("react.context");k=x("react.forward_ref");l=x("react.suspense");m=x("react.suspense_list");n=x("react.memo");p=x("react.lazy");q=x("react.block");r=x("react.server.block");u=x("react.fundamental");v=x("react.debug_trace_mode");w=x("react.legacy_hidden");}
  function y(a){if("object"===typeof a&&null!==a){var t=a.$$typeof;switch(t){case b:switch(a=a.type,a){case d:case f:case e:case l:case m:return a;default:switch(a=a&&a.$$typeof,a){case h:case k:case p:case n:case g:return a;default:return t}}case c:return t}}}var z=g,A=b,B=k,C=d,D=p,E=n,F=c,G=f,H=e,I=l;reactIs_production_min.ContextConsumer=h;reactIs_production_min.ContextProvider=z;reactIs_production_min.Element=A;reactIs_production_min.ForwardRef=B;reactIs_production_min.Fragment=C;reactIs_production_min.Lazy=D;reactIs_production_min.Memo=E;reactIs_production_min.Portal=F;reactIs_production_min.Profiler=G;reactIs_production_min.StrictMode=H;
  reactIs_production_min.Suspense=I;reactIs_production_min.isAsyncMode=function(){return !1};reactIs_production_min.isConcurrentMode=function(){return !1};reactIs_production_min.isContextConsumer=function(a){return y(a)===h};reactIs_production_min.isContextProvider=function(a){return y(a)===g};reactIs_production_min.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===b};reactIs_production_min.isForwardRef=function(a){return y(a)===k};reactIs_production_min.isFragment=function(a){return y(a)===d};reactIs_production_min.isLazy=function(a){return y(a)===p};reactIs_production_min.isMemo=function(a){return y(a)===n};
  reactIs_production_min.isPortal=function(a){return y(a)===c};reactIs_production_min.isProfiler=function(a){return y(a)===f};reactIs_production_min.isStrictMode=function(a){return y(a)===e};reactIs_production_min.isSuspense=function(a){return y(a)===l};reactIs_production_min.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===d||a===f||a===v||a===e||a===l||a===m||a===w||"object"===typeof a&&null!==a&&(a.$$typeof===p||a.$$typeof===n||a.$$typeof===g||a.$$typeof===h||a.$$typeof===k||a.$$typeof===u||a.$$typeof===q||a[0]===r)?!0:!1};
  reactIs_production_min.typeOf=y;

  {
    reactIs.exports = reactIs_production_min;
  }

  var ReactIs = reactIs.exports;

  /**
   * @param {unknown} thing
   * @returns {boolean}
   */
  function whitespace(thing) {
    /** @type {string} */
    var value =
      // @ts-ignore looks like a node.
      thing && typeof thing === 'object' && thing.type === 'text'
        ? // @ts-ignore looks like a text.
          thing.value || ''
        : thing;

    // HTML whitespace expression.
    // See <https://html.spec.whatwg.org/#space-character>.
    return typeof value === 'string' && value.replace(/[ \t\n\f\r]/g, '') === ''
  }

  /**
   * Parse space separated tokens to an array of strings.
   *
   * @param {string} value Space separated tokens
   * @returns {Array.<string>} Tokens
   */

  /**
   * Serialize an array of strings as space separated tokens.
   *
   * @param {Array.<string|number>} values Tokens
   * @returns {string} Space separated tokens
   */
  function stringify$1(values) {
    return values.join(' ').trim()
  }

  /**
   * @typedef {Object} StringifyOptions
   * @property {boolean} [padLeft=true] Whether to pad a space before a token (`boolean`, default: `true`).
   * @property {boolean} [padRight=false] Whether to pad a space after a token (`boolean`, default: `false`).
   */

  /**
   * Serialize an array of strings to comma separated tokens.
   *
   * @param {Array.<string|number>} values
   * @param {StringifyOptions} [options]
   * @returns {string}
   */
  function stringify(values, options) {
    var settings = options || {};

    // Ensure the last empty entry is seen.
    if (values[values.length - 1] === '') {
      values = values.concat('');
    }

    return values
      .join(
        (settings.padRight ? ' ' : '') +
          ',' +
          (settings.padLeft === false ? '' : ' ')
      )
      .trim()
  }

  // http://www.w3.org/TR/CSS21/grammar.html
  // https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027
  var COMMENT_REGEX = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g;

  var NEWLINE_REGEX = /\n/g;
  var WHITESPACE_REGEX = /^\s*/;

  // declaration
  var PROPERTY_REGEX = /^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/;
  var COLON_REGEX = /^:\s*/;
  var VALUE_REGEX = /^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/;
  var SEMICOLON_REGEX = /^[;\s]*/;

  // https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill
  var TRIM_REGEX = /^\s+|\s+$/g;

  // strings
  var NEWLINE = '\n';
  var FORWARD_SLASH = '/';
  var ASTERISK = '*';
  var EMPTY_STRING = '';

  // types
  var TYPE_COMMENT = 'comment';
  var TYPE_DECLARATION = 'declaration';

  /**
   * @param {String} style
   * @param {Object} [options]
   * @return {Object[]}
   * @throws {TypeError}
   * @throws {Error}
   */
  var inlineStyleParser = function(style, options) {
    if (typeof style !== 'string') {
      throw new TypeError('First argument must be a string');
    }

    if (!style) return [];

    options = options || {};

    /**
     * Positional.
     */
    var lineno = 1;
    var column = 1;

    /**
     * Update lineno and column based on `str`.
     *
     * @param {String} str
     */
    function updatePosition(str) {
      var lines = str.match(NEWLINE_REGEX);
      if (lines) lineno += lines.length;
      var i = str.lastIndexOf(NEWLINE);
      column = ~i ? str.length - i : column + str.length;
    }

    /**
     * Mark position and patch `node.position`.
     *
     * @return {Function}
     */
    function position() {
      var start = { line: lineno, column: column };
      return function(node) {
        node.position = new Position(start);
        whitespace();
        return node;
      };
    }

    /**
     * Store position information for a node.
     *
     * @constructor
     * @property {Object} start
     * @property {Object} end
     * @property {undefined|String} source
     */
    function Position(start) {
      this.start = start;
      this.end = { line: lineno, column: column };
      this.source = options.source;
    }

    /**
     * Non-enumerable source string.
     */
    Position.prototype.content = style;

    /**
     * Error `msg`.
     *
     * @param {String} msg
     * @throws {Error}
     */
    function error(msg) {
      var err = new Error(
        options.source + ':' + lineno + ':' + column + ': ' + msg
      );
      err.reason = msg;
      err.filename = options.source;
      err.line = lineno;
      err.column = column;
      err.source = style;

      if (options.silent) ; else {
        throw err;
      }
    }

    /**
     * Match `re` and return captures.
     *
     * @param {RegExp} re
     * @return {undefined|Array}
     */
    function match(re) {
      var m = re.exec(style);
      if (!m) return;
      var str = m[0];
      updatePosition(str);
      style = style.slice(str.length);
      return m;
    }

    /**
     * Parse whitespace.
     */
    function whitespace() {
      match(WHITESPACE_REGEX);
    }

    /**
     * Parse comments.
     *
     * @param {Object[]} [rules]
     * @return {Object[]}
     */
    function comments(rules) {
      var c;
      rules = rules || [];
      while ((c = comment())) {
        if (c !== false) {
          rules.push(c);
        }
      }
      return rules;
    }

    /**
     * Parse comment.
     *
     * @return {Object}
     * @throws {Error}
     */
    function comment() {
      var pos = position();
      if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;

      var i = 2;
      while (
        EMPTY_STRING != style.charAt(i) &&
        (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))
      ) {
        ++i;
      }
      i += 2;

      if (EMPTY_STRING === style.charAt(i - 1)) {
        return error('End of comment missing');
      }

      var str = style.slice(2, i - 2);
      column += 2;
      updatePosition(str);
      style = style.slice(i);
      column += 2;

      return pos({
        type: TYPE_COMMENT,
        comment: str
      });
    }

    /**
     * Parse declaration.
     *
     * @return {Object}
     * @throws {Error}
     */
    function declaration() {
      var pos = position();

      // prop
      var prop = match(PROPERTY_REGEX);
      if (!prop) return;
      comment();

      // :
      if (!match(COLON_REGEX)) return error("property missing ':'");

      // val
      var val = match(VALUE_REGEX);

      var ret = pos({
        type: TYPE_DECLARATION,
        property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),
        value: val
          ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))
          : EMPTY_STRING
      });

      // ;
      match(SEMICOLON_REGEX);

      return ret;
    }

    /**
     * Parse declarations.
     *
     * @return {Object[]}
     */
    function declarations() {
      var decls = [];

      comments(decls);

      // declarations
      var decl;
      while ((decl = declaration())) {
        if (decl !== false) {
          decls.push(decl);
          comments(decls);
        }
      }

      return decls;
    }

    whitespace();
    return declarations();
  };

  /**
   * Trim `str`.
   *
   * @param {String} str
   * @return {String}
   */
  function trim(str) {
    return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;
  }

  var parse = inlineStyleParser;

  /**
   * Parses inline style to object.
   *
   * @example
   * // returns { 'line-height': '42' }
   * StyleToObject('line-height: 42;');
   *
   * @param  {String}      style      - The inline style.
   * @param  {Function}    [iterator] - The iterator function.
   * @return {null|Object}
   */
  function StyleToObject(style, iterator) {
    var output = null;
    if (!style || typeof style !== 'string') {
      return output;
    }

    var declaration;
    var declarations = parse(style);
    var hasIterator = typeof iterator === 'function';
    var property;
    var value;

    for (var i = 0, len = declarations.length; i < len; i++) {
      declaration = declarations[i];
      property = declaration.property;
      value = declaration.value;

      if (hasIterator) {
        iterator(property, value, declaration);
      } else if (value) {
        output || (output = {});
        output[property] = value;
      }
    }

    return output;
  }

  var styleToObject = StyleToObject;

  /**
   * @template T
   * @typedef {import('react').ComponentType<T>} ComponentType<T>
   */

  const own$1 = {}.hasOwnProperty;

  // The table-related elements that must not contain whitespace text according
  // to React.
  const tableElements = new Set(['table', 'thead', 'tbody', 'tfoot', 'tr']);

  /**
   * @param {Context} context
   * @param {Element|Root} node
   */
  function childrenToReact(context, node) {
    /** @type {Array<ReactNode>} */
    const children = [];
    let childIndex = -1;
    /** @type {Comment|Doctype|Element|Raw|Text} */
    let child;

    while (++childIndex < node.children.length) {
      child = node.children[childIndex];

      if (child.type === 'element') {
        children.push(toReact(context, child, childIndex, node));
      } else if (child.type === 'text') {
        // Currently, a warning is triggered by react for *any* white space in
        // tables.
        // So we drop it.
        // See: <https://github.com/facebook/react/pull/7081>.
        // See: <https://github.com/facebook/react/pull/7515>.
        // See: <https://github.com/remarkjs/remark-react/issues/64>.
        // See: <https://github.com/remarkjs/react-markdown/issues/576>.
        if (
          node.type !== 'element' ||
          !tableElements.has(node.tagName) ||
          !whitespace(child)
        ) {
          children.push(child.value);
        }
      } else if (child.type === 'raw' && !context.options.skipHtml) {
        // Default behavior is to show (encoded) HTML.
        children.push(child.value);
      }
    }

    return children
  }

  /**
   * @param {Context} context
   * @param {Element} node
   * @param {number} index
   * @param {Element|Root} parent
   */
  function toReact(context, node, index, parent) {
    const options = context.options;
    const parentSchema = context.schema;
    /** @type {ReactMarkdownNames} */
    // @ts-expect-error assume a known HTML/SVG element.
    const name = node.tagName;
    /** @type {Record<string, unknown>} */
    const properties = {};
    let schema = parentSchema;
    /** @type {string} */
    let property;

    if (parentSchema.space === 'html' && name === 'svg') {
      schema = svg;
      context.schema = schema;
    }

    if (node.properties) {
      for (property in node.properties) {
        if (own$1.call(node.properties, property)) {
          addProperty(properties, property, node.properties[property], context);
        }
      }
    }

    if (name === 'ol' || name === 'ul') {
      context.listDepth++;
    }

    const children = childrenToReact(context, node);

    if (name === 'ol' || name === 'ul') {
      context.listDepth--;
    }

    // Restore parent schema.
    context.schema = parentSchema;

    // Nodes created by plugins do not have positional info, in which case we use
    // an object that matches the position interface.
    const position = node.position || {
      start: {line: null, column: null, offset: null},
      end: {line: null, column: null, offset: null}
    };
    const component =
      options.components && own$1.call(options.components, name)
        ? options.components[name]
        : name;
    const basic = typeof component === 'string' || component === React.Fragment;

    if (!ReactIs.isValidElementType(component)) {
      throw new TypeError(
        `Component for name \`${name}\` not defined or is not renderable`
      )
    }

    properties.key = [
      name,
      position.start.line,
      position.start.column,
      index
    ].join('-');

    if (name === 'a' && options.linkTarget) {
      properties.target =
        typeof options.linkTarget === 'function'
          ? options.linkTarget(
              String(properties.href || ''),
              node.children,
              typeof properties.title === 'string' ? properties.title : null
            )
          : options.linkTarget;
    }

    if (name === 'a' && options.transformLinkUri) {
      properties.href = options.transformLinkUri(
        String(properties.href || ''),
        node.children,
        typeof properties.title === 'string' ? properties.title : null
      );
    }

    if (
      !basic &&
      name === 'code' &&
      parent.type === 'element' &&
      parent.tagName !== 'pre'
    ) {
      properties.inline = true;
    }

    if (
      !basic &&
      (name === 'h1' ||
        name === 'h2' ||
        name === 'h3' ||
        name === 'h4' ||
        name === 'h5' ||
        name === 'h6')
    ) {
      properties.level = Number.parseInt(name.charAt(1), 10);
    }

    if (name === 'img' && options.transformImageUri) {
      properties.src = options.transformImageUri(
        String(properties.src || ''),
        String(properties.alt || ''),
        typeof properties.title === 'string' ? properties.title : null
      );
    }

    if (!basic && name === 'li' && parent.type === 'element') {
      const input = getInputElement(node);
      properties.checked =
        input && input.properties ? Boolean(input.properties.checked) : null;
      properties.index = getElementsBeforeCount(parent, node);
      properties.ordered = parent.tagName === 'ol';
    }

    if (!basic && (name === 'ol' || name === 'ul')) {
      properties.ordered = name === 'ol';
      properties.depth = context.listDepth;
    }

    if (name === 'td' || name === 'th') {
      if (properties.align) {
        if (!properties.style) properties.style = {};
        // @ts-expect-error assume `style` is an object
        properties.style.textAlign = properties.align;
        delete properties.align;
      }

      if (!basic) {
        properties.isHeader = name === 'th';
      }
    }

    if (!basic && name === 'tr' && parent.type === 'element') {
      properties.isHeader = Boolean(parent.tagName === 'thead');
    }

    // If `sourcePos` is given, pass source information (line/column info from markdown source).
    if (options.sourcePos) {
      properties['data-sourcepos'] = flattenPosition(position);
    }

    if (!basic && options.rawSourcePos) {
      properties.sourcePosition = node.position;
    }

    // If `includeElementIndex` is given, pass node index info to components.
    if (!basic && options.includeElementIndex) {
      properties.index = getElementsBeforeCount(parent, node);
      properties.siblingCount = getElementsBeforeCount(parent);
    }

    if (!basic) {
      properties.node = node;
    }

    // Ensure no React warnings are emitted for void elements w/ children.
    return children.length > 0
      ? React.createElement(component, properties, children)
      : React.createElement(component, properties)
  }

  /**
   * @param {Element|Root} node
   * @returns {Element?}
   */
  function getInputElement(node) {
    let index = -1;

    while (++index < node.children.length) {
      const child = node.children[index];

      if (child.type === 'element' && child.tagName === 'input') {
        return child
      }
    }

    return null
  }

  /**
   * @param {Element|Root} parent
   * @param {Element} [node]
   * @returns {number}
   */
  function getElementsBeforeCount(parent, node) {
    let index = -1;
    let count = 0;

    while (++index < parent.children.length) {
      if (parent.children[index] === node) break
      if (parent.children[index].type === 'element') count++;
    }

    return count
  }

  /**
   * @param {Record<string, unknown>} props
   * @param {string} prop
   * @param {unknown} value
   * @param {Context} ctx
   */
  function addProperty(props, prop, value, ctx) {
    const info = find(ctx.schema, prop);
    let result = value;

    // Ignore nullish and `NaN` values.
    // eslint-disable-next-line no-self-compare
    if (result === null || result === undefined || result !== result) {
      return
    }

    // Accept `array`.
    // Most props are space-separated.
    if (Array.isArray(result)) {
      result = info.commaSeparated ? stringify(result) : stringify$1(result);
    }

    if (info.property === 'style' && typeof result === 'string') {
      result = parseStyle(result);
    }

    if (info.space && info.property) {
      props[
        own$1.call(hastToReact, info.property)
          ? hastToReact[info.property]
          : info.property
      ] = result;
    } else if (info.attribute) {
      props[info.attribute] = result;
    }
  }

  /**
   * @param {string} value
   * @returns {Record<string, string>}
   */
  function parseStyle(value) {
    /** @type {Record<string, string>} */
    const result = {};

    try {
      styleToObject(value, iterator);
    } catch {
      // Silent.
    }

    return result

    /**
     * @param {string} name
     * @param {string} v
     */
    function iterator(name, v) {
      const k = name.slice(0, 4) === '-ms-' ? `ms-${name.slice(4)}` : name;
      result[k.replace(/-([a-z])/g, styleReplacer)] = v;
    }
  }

  /**
   * @param {unknown} _
   * @param {string} $1
   */
  function styleReplacer(_, $1) {
    return $1.toUpperCase()
  }

  /**
   * @param {Position|{start: {line: null, column: null, offset: null}, end: {line: null, column: null, offset: null}}} pos
   * @returns {string}
   */
  function flattenPosition(pos) {
    return [
      pos.start.line,
      ':',
      pos.start.column,
      '-',
      pos.end.line,
      ':',
      pos.end.column
    ]
      .map((d) => String(d))
      .join('')
  }

  /**
   * @typedef {import('react').ReactNode} ReactNode
   * @typedef {import('react').ReactElement<{}>} ReactElement
   * @typedef {import('unified').PluggableList} PluggableList
   * @typedef {import('hast').Root} Root
   * @typedef {import('./rehype-filter.js').Options} FilterOptions
   * @typedef {import('./ast-to-react.js').Options} TransformOptions
   *
   * @typedef CoreOptions
   * @property {string} children
   *
   * @typedef PluginOptions
   * @property {PluggableList} [remarkPlugins=[]]
   * @property {PluggableList} [rehypePlugins=[]]
   * @property {import('remark-rehype').Options} [remarkRehypeOptions={}]
   *
   * @typedef LayoutOptions
   * @property {string} [className]
   *
   * @typedef {CoreOptions & PluginOptions & LayoutOptions & FilterOptions & TransformOptions} ReactMarkdownOptions
   *
   * @typedef Deprecation
   * @property {string} id
   * @property {string} [to]
   */

  const own = {}.hasOwnProperty;
  const changelog =
    'https://github.com/remarkjs/react-markdown/blob/main/changelog.md';

  /** @type {Record<string, Deprecation>} */
  const deprecated = {
    plugins: {to: 'plugins', id: 'change-plugins-to-remarkplugins'},
    renderers: {to: 'components', id: 'change-renderers-to-components'},
    astPlugins: {id: 'remove-buggy-html-in-markdown-parser'},
    allowDangerousHtml: {id: 'remove-buggy-html-in-markdown-parser'},
    escapeHtml: {id: 'remove-buggy-html-in-markdown-parser'},
    source: {to: 'children', id: 'change-source-to-children'},
    allowNode: {
      to: 'allowElement',
      id: 'replace-allownode-allowedtypes-and-disallowedtypes'
    },
    allowedTypes: {
      to: 'allowedElements',
      id: 'replace-allownode-allowedtypes-and-disallowedtypes'
    },
    disallowedTypes: {
      to: 'disallowedElements',
      id: 'replace-allownode-allowedtypes-and-disallowedtypes'
    },
    includeNodeIndex: {
      to: 'includeElementIndex',
      id: 'change-includenodeindex-to-includeelementindex'
    }
  };

  /**
   * React component to render markdown.
   *
   * @param {ReactMarkdownOptions} options
   * @returns {ReactElement}
   */
  function ReactMarkdown(options) {
    for (const key in deprecated) {
      if (own.call(deprecated, key) && own.call(options, key)) {
        const deprecation = deprecated[key];
        console.warn(
          `[react-markdown] Warning: please ${
          deprecation.to ? `use \`${deprecation.to}\` instead of` : 'remove'
        } \`${key}\` (see <${changelog}#${deprecation.id}> for more info)`
        );
        delete deprecated[key];
      }
    }

    const processor = unified()
      .use(remarkParse)
      .use(options.remarkPlugins || [])
      .use(remarkRehype$1, {
        ...options.remarkRehypeOptions,
        allowDangerousHtml: true
      })
      .use(options.rehypePlugins || [])
      .use(rehypeFilter, options);

    const file = new VFile();

    if (typeof options.children === 'string') {
      file.value = options.children;
    } else if (options.children !== undefined && options.children !== null) {
      console.warn(
        `[react-markdown] Warning: please pass a string as \`children\` (not: \`${options.children}\`)`
      );
    }

    const hastNode = processor.runSync(processor.parse(file), file);

    if (hastNode.type !== 'root') {
      throw new TypeError('Expected a `root` node')
    }

    /** @type {ReactElement} */
    let result = React.createElement(
      React.Fragment,
      {},
      childrenToReact({options, schema: html, listDepth: 0}, hastNode)
    );

    if (options.className) {
      result = React.createElement('div', {className: options.className}, result);
    }

    return result
  }

  ReactMarkdown.defaultProps = {transformLinkUri: uriTransformer};

  ReactMarkdown.propTypes = {
    // Core options:
    children: PropTypes.string,
    // Layout options:
    className: PropTypes.string,
    // Filter options:
    allowElement: PropTypes.func,
    allowedElements: PropTypes.arrayOf(PropTypes.string),
    disallowedElements: PropTypes.arrayOf(PropTypes.string),
    unwrapDisallowed: PropTypes.bool,
    // Plugin options:
    remarkPlugins: PropTypes.arrayOf(
      PropTypes.oneOfType([
        PropTypes.object,
        PropTypes.func,
        PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.object, PropTypes.func]))
      ])
    ),
    rehypePlugins: PropTypes.arrayOf(
      PropTypes.oneOfType([
        PropTypes.object,
        PropTypes.func,
        PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.object, PropTypes.func]))
      ])
    ),
    // Transform options:
    sourcePos: PropTypes.bool,
    rawSourcePos: PropTypes.bool,
    skipHtml: PropTypes.bool,
    includeElementIndex: PropTypes.bool,
    transformLinkUri: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
    linkTarget: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
    transformImageUri: PropTypes.func,
    components: PropTypes.object
  };

  var NFTPost = function NFTPost() {
    // theme
    var theme = useTheme(); // state

    var _useState = react.exports.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        menu = _useState2[0],
        setMenu = _useState2[1];

    var _useState3 = react.exports.useState(false),
        _useState4 = _slicedToArray(_useState3, 2),
        share = _useState4[0],
        setShare = _useState4[1]; // return jsx


    return /*#__PURE__*/React.createElement(NFTBox, null, /*#__PURE__*/React.createElement(Stack$1, {
      spacing: 2
    }, /*#__PURE__*/React.createElement(Grid$1, {
      container: true,
      wrap: "nowrap",
      alignItems: "center",
      spacing: 2
    }, /*#__PURE__*/React.createElement(Grid$1, {
      item: true
    }, /*#__PURE__*/React.createElement(Avatar$1, {
      alt: "User 1",
      src: null
    })), /*#__PURE__*/React.createElement(Grid$1, {
      item: true,
      xs: true,
      zeroMinWidth: true
    }, /*#__PURE__*/React.createElement(Grid$1, {
      container: true,
      alignItems: "center",
      spacing: 1
    }, /*#__PURE__*/React.createElement(Grid$1, {
      item: true
    }, /*#__PURE__*/React.createElement(Typography$1, {
      align: "left",
      component: "div",
      sx: {
        mb: 0,
        lineHeight: 1.1,
        fontWeight: 'bold'
      }
    }, "Test Name"), /*#__PURE__*/React.createElement(Typography$1, {
      align: "left",
      variant: "caption",
      sx: {
        mb: 0,
        mt: -.5,
        lineHeight: 1.1
      }
    }, "5m ago")))), /*#__PURE__*/React.createElement(Grid$1, {
      item: true
    }, /*#__PURE__*/React.createElement(IconButton$1, {
      sx: {
        color: '#fff'
      },
      onClick: function onClick(e) {
        return setMenu(e.target);
      },
      variant: "text"
    }, /*#__PURE__*/React.createElement(default_1$1, null)), /*#__PURE__*/React.createElement(Menu$2, {
      id: "menu-post",
      open: !!menu,
      onClose: function onClose() {
        return setMenu(false);
      },
      variant: "selectedMenu",
      anchorEl: menu,
      keepMounted: true,
      anchorOrigin: {
        vertical: 'bottom',
        horizontal: 'right'
      },
      transformOrigin: {
        vertical: 'top',
        horizontal: 'right'
      }
    }, /*#__PURE__*/React.createElement(MenuItem$1, {
      onClick: function onClick() {
        return setMenu(false);
      }
    }, "Edit"), /*#__PURE__*/React.createElement(MenuItem$1, {
      onClick: function onClick() {
        return setMenu(false);
      }
    }, "Delete")))), /*#__PURE__*/React.createElement(Box$1, {
      sx: {
        '& > p': _objectSpread2(_objectSpread2({}, theme.typography.body2), {}, {
          my: 0
        })
      }
    }, /*#__PURE__*/React.createElement(ReactMarkdown, null, "POST BODY")), /*#__PURE__*/React.createElement(Box$1, null, /*#__PURE__*/React.createElement(Stack$1, {
      direction: "row",
      alignItems: "center",
      justifyContent: "space-between",
      spacing: 2,
      sx: {
        mt: 0,
        color: theme.palette.mode === 'dark' ? 'grey.700' : 'grey.800'
      }
    }, /*#__PURE__*/React.createElement(Stack$1, {
      direction: "row",
      spacing: 2,
      sx: {
        flex: 1
      }
    }, /*#__PURE__*/React.createElement(Button$1, {
      sx: {
        color: '#fff'
      },
      size: "small",
      variant: "text",
      onClick: function onClick() {},
      startIcon: /*#__PURE__*/React.createElement(default_1, null)
    }, 5, ' ', "likes"), /*#__PURE__*/React.createElement(Button$1, {
      sx: {
        color: '#fff'
      },
      size: "small",
      variant: "text",
      onClick: function onClick() {},
      startIcon: /*#__PURE__*/React.createElement(default_1$2, null)
    }, 5, ' ', "comments")), /*#__PURE__*/React.createElement(IconButton$1, {
      onClick: function onClick(e) {
        return setShare(e.target);
      },
      variant: "text",
      sx: {
        color: '#fff'
      },
      size: "small"
    }, /*#__PURE__*/React.createElement(default_1$3, null)), /*#__PURE__*/React.createElement(Menu$2, {
      id: "menu-post",
      open: !!share,
      variant: "selectedMenu",
      onClose: function onClose() {
        return setShare(false);
      },
      anchorEl: share,
      keepMounted: true,
      anchorOrigin: {
        vertical: 'bottom',
        horizontal: 'right'
      },
      transformOrigin: {
        vertical: 'top',
        horizontal: 'right'
      },
      sx: {
        '& .MuiSvgIcon-root': {
          fontSize: '1.25rem',
          marginRight: '14px'
        }
      }
    }, /*#__PURE__*/React.createElement(MenuItem$1, {
      onClick: function onClick() {
        return setShare(false);
      }
    }, /*#__PURE__*/React.createElement(default_1$3, {
      fontSize: "inherit"
    }), " Share Now"), /*#__PURE__*/React.createElement(MenuItem$1, {
      onClick: function onClick() {
        return setShare(false);
      }
    }, /*#__PURE__*/React.createElement(default_1$3, {
      fontSize: "inherit"
    }), " Share to Friends"), /*#__PURE__*/React.createElement(MenuItem$1, {
      onClick: function onClick() {
        return setShare(false);
      }
    }, /*#__PURE__*/React.createElement(default_1$3, {
      fontSize: "inherit"
    }), " Send in Messanger"), /*#__PURE__*/React.createElement(MenuItem$1, {
      onClick: function onClick() {
        return setShare(false);
      }
    }, /*#__PURE__*/React.createElement(default_1$3, {
      fontSize: "inherit"
    }), " Copy Link"))))));
  }; // export default

  console.log('test', NFTPost);
  /**
   * home page
   *
   * @param props 
   */

  var HomePage = function HomePage() {
    // return jsx
    return /*#__PURE__*/React.createElement(Stack$1, {
      spacing: 2
    }, /*#__PURE__*/React.createElement(NFTPost, null), /*#__PURE__*/React.createElement(NFTPost, null), /*#__PURE__*/React.createElement(NFTPost, null), /*#__PURE__*/React.createElement(NFTPost, null), /*#__PURE__*/React.createElement(NFTPost, null));
  }; // export default

  /**
   * home page
   *
   * @param props 
   */

  var LoginPage = function LoginPage() {
    // return jsx
    return /*#__PURE__*/React.createElement("div", null, "LOGIN");
  }; // export default

  window.regeneratorRuntime = regeneratorRuntime$1; // import react

  var Main = function Main() {

    // account
    var _useState = react.exports.useState(true),
        _useState2 = _slicedToArray$1(_useState, 2),
        account = _useState2[0];
        _useState2[1]; // use effect


    react.exports.useEffect(function () {
      // typeof
      if (typeof window === 'undefined') return;
    }, [typeof window === 'undefined']); // return jsx

    return /*#__PURE__*/React.createElement(ThemeProvider, {
      theme: mainTheme
    }, /*#__PURE__*/React.createElement(CssBaseline, null), /*#__PURE__*/React.createElement(BrowserRouter, null, /*#__PURE__*/React.createElement(Switch, null, account ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Route, {
      exact: true,
      path: "/"
    }, /*#__PURE__*/React.createElement(MainLayout, null, /*#__PURE__*/React.createElement(HomePage, null)))) : /*#__PURE__*/React.createElement(Route, {
      exact: true,
      path: "/"
    }, /*#__PURE__*/React.createElement(MainLayout, null, /*#__PURE__*/React.createElement(LoginPage, null))))));
  }; // render


  window.app = ReactDOM.render( /*#__PURE__*/React.createElement(Main, null), document.getElementById('app'));

})();
//# sourceMappingURL=main.min.js.map
